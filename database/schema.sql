-- Smart Alarm Database Schema for Supabase\n-- Run this in your Supabase SQL editor to set up the database\n\n-- Enable Row Level Security\nALTER DATABASE postgres SET \"app.jwt_secret\" TO 'your-jwt-secret';\n\n-- Users table\nCREATE TABLE IF NOT EXISTS users (\n  id UUID PRIMARY KEY DEFAULT auth.uid(),\n  email TEXT UNIQUE NOT NULL,\n  name TEXT,\n  preferences JSONB DEFAULT '{\n    \"theme\": \"auto\",\n    \"notificationsEnabled\": true,\n    \"voiceDismissalSensitivity\": 5,\n    \"defaultVoiceMood\": \"motivational\",\n    \"hapticFeedback\": true,\n    \"snoozeMinutes\": 5,\n    \"maxSnoozes\": 3\n  }'::jsonb,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Alarms table\nCREATE TABLE IF NOT EXISTS alarms (\n  id TEXT PRIMARY KEY,\n  user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n  time TEXT NOT NULL, -- HH:MM format\n  label TEXT NOT NULL,\n  enabled BOOLEAN DEFAULT true,\n  days INTEGER[] DEFAULT ARRAY[]::INTEGER[], -- Array of day numbers (0-6)\n  voice_mood TEXT DEFAULT 'motivational',\n  snooze_count INTEGER DEFAULT 0,\n  last_triggered TIMESTAMPTZ,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  updated_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- Alarm events table for tracking\nCREATE TABLE IF NOT EXISTS alarm_events (\n  id TEXT PRIMARY KEY,\n  alarm_id TEXT REFERENCES alarms(id) ON DELETE CASCADE,\n  fired_at TIMESTAMPTZ DEFAULT NOW(),\n  dismissed BOOLEAN DEFAULT false,\n  snoozed BOOLEAN DEFAULT false,\n  user_action TEXT, -- 'dismissed', 'snoozed', 'ignored'\n  dismiss_method TEXT -- 'voice', 'button', 'shake'\n);\n\n-- Voices table for future TTS integration\nCREATE TABLE IF NOT EXISTS voices (\n  id TEXT PRIMARY KEY,\n  name TEXT NOT NULL,\n  provider TEXT NOT NULL, -- 'elevenlabs', 'google', 'azure', etc.\n  voice_id TEXT NOT NULL,\n  config JSONB DEFAULT '{}'::jsonb,\n  created_at TIMESTAMPTZ DEFAULT NOW()\n);\n\n-- User voice preferences\nCREATE TABLE IF NOT EXISTS user_voices (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES users(id) ON DELETE CASCADE,\n  voice_mood TEXT NOT NULL,\n  voice_id TEXT REFERENCES voices(id),\n  custom_message TEXT,\n  created_at TIMESTAMPTZ DEFAULT NOW(),\n  UNIQUE(user_id, voice_mood)\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_alarms_user_id ON alarms(user_id);\nCREATE INDEX IF NOT EXISTS idx_alarms_enabled ON alarms(enabled);\nCREATE INDEX IF NOT EXISTS idx_alarm_events_alarm_id ON alarm_events(alarm_id);\nCREATE INDEX IF NOT EXISTS idx_alarm_events_fired_at ON alarm_events(fired_at);\nCREATE INDEX IF NOT EXISTS idx_user_voices_user_id ON user_voices(user_id);\n\n-- Functions and triggers\n\n-- Function to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Triggers to auto-update timestamps\nDROP TRIGGER IF EXISTS update_users_updated_at ON users;\nCREATE TRIGGER update_users_updated_at\n    BEFORE UPDATE ON users\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column();\n\nDROP TRIGGER IF EXISTS update_alarms_updated_at ON alarms;\nCREATE TRIGGER update_alarms_updated_at\n    BEFORE UPDATE ON alarms\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column();\n\n-- Row Level Security (RLS) Policies\n\n-- Enable RLS\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\nALTER TABLE alarms ENABLE ROW LEVEL SECURITY;\nALTER TABLE alarm_events ENABLE ROW LEVEL SECURITY;\nALTER TABLE user_voices ENABLE ROW LEVEL SECURITY;\n\n-- Users can only see and modify their own data\nCREATE POLICY \"Users can view own profile\" ON users\n    FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\" ON users\n    FOR UPDATE USING (auth.uid() = id);\n\nCREATE POLICY \"Users can insert own profile\" ON users\n    FOR INSERT WITH CHECK (auth.uid() = id);\n\n-- Alarms policies\nCREATE POLICY \"Users can view own alarms\" ON alarms\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can insert own alarms\" ON alarms\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update own alarms\" ON alarms\n    FOR UPDATE USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete own alarms\" ON alarms\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- Alarm events policies\nCREATE POLICY \"Users can view own alarm events\" ON alarm_events\n    FOR SELECT USING (\n        auth.uid() = (\n            SELECT user_id FROM alarms WHERE alarms.id = alarm_events.alarm_id\n        )\n    );\n\nCREATE POLICY \"Users can insert own alarm events\" ON alarm_events\n    FOR INSERT WITH CHECK (\n        auth.uid() = (\n            SELECT user_id FROM alarms WHERE alarms.id = alarm_events.alarm_id\n        )\n    );\n\n-- User voices policies\nCREATE POLICY \"Users can view own voice preferences\" ON user_voices\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage own voice preferences\" ON user_voices\n    FOR ALL USING (auth.uid() = user_id);\n\n-- Voices table is public read (no user-specific data)\nALTER TABLE voices DISABLE ROW LEVEL SECURITY;\n\n-- Function to automatically create user profile on signup\nCREATE OR REPLACE FUNCTION handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO users (id, email, name)\n    VALUES (\n        NEW.id,\n        NEW.email,\n        COALESCE(NEW.raw_user_meta_data->>'name', split_part(NEW.email, '@', 1))\n    );\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Trigger to create user profile on auth.users insert\nDROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;\nCREATE TRIGGER on_auth_user_created\n    AFTER INSERT ON auth.users\n    FOR EACH ROW\n    EXECUTE FUNCTION handle_new_user();\n\n-- Insert default voices\nINSERT INTO voices (id, name, provider, voice_id, config) VALUES\n    ('drill-sergeant-default', 'Drill Sergeant (Default)', 'system', 'system-male-assertive', '{\"rate\": 1.2, \"pitch\": 0.8}'),\n    ('sweet-angel-default', 'Sweet Angel (Default)', 'system', 'system-female-gentle', '{\"rate\": 0.9, \"pitch\": 1.2}'),\n    ('anime-hero-default', 'Anime Hero (Default)', 'system', 'system-male-energetic', '{\"rate\": 1.1, \"pitch\": 1.1}'),\n    ('savage-roast-default', 'Savage Roast (Default)', 'system', 'system-neutral-sarcastic', '{\"rate\": 1.0, \"pitch\": 0.9}'),\n    ('motivational-default', 'Motivational (Default)', 'system', 'system-male-confident', '{\"rate\": 1.0, \"pitch\": 1.0}'),\n    ('gentle-default', 'Gentle (Default)', 'system', 'system-female-soft', '{\"rate\": 0.8, \"pitch\": 1.1}')\nON CONFLICT (id) DO NOTHING;\n\n-- Create a view for alarm statistics\nCREATE OR REPLACE VIEW user_alarm_stats AS\nSELECT \n    u.id as user_id,\n    u.email,\n    COUNT(a.id) as total_alarms,\n    COUNT(CASE WHEN a.enabled = true THEN 1 END) as active_alarms,\n    COUNT(ae.id) as total_events,\n    COUNT(CASE WHEN ae.dismissed = true THEN 1 END) as dismissed_count,\n    COUNT(CASE WHEN ae.snoozed = true THEN 1 END) as snoozed_count,\n    AVG(CASE WHEN ae.dismissed = true THEN 1.0 ELSE 0.0 END) as dismiss_rate\nFROM users u\nLEFT JOIN alarms a ON u.id = a.user_id\nLEFT JOIN alarm_events ae ON a.id = ae.alarm_id\nGROUP BY u.id, u.email;\n\n-- Grant necessary permissions\nGRANT USAGE ON SCHEMA public TO anon, authenticated;\nGRANT ALL ON ALL TABLES IN SCHEMA public TO anon, authenticated;\nGRANT ALL ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;\n\n-- Comment on tables for documentation\nCOMMENT ON TABLE users IS 'User profiles and preferences';\nCOMMENT ON TABLE alarms IS 'User-created alarms with scheduling information';\nCOMMENT ON TABLE alarm_events IS 'Log of alarm triggers and user interactions';\nCOMMENT ON TABLE voices IS 'Available TTS voices and configurations';\nCOMMENT ON TABLE user_voices IS 'User-specific voice preferences and custom messages';\nCOMMENT ON VIEW user_alarm_stats IS 'Aggregated statistics for user alarm usage';