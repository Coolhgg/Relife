[
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/App.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AlarmDifficulty' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'EmotionalTone' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 22,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getActionLabels' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 146,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isRTL' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 148,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 148,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getDirectionStyles' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 149,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 149,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatAlarmTime' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 150,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 150,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getCSSVariables' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 153,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 153,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getThemeClasses' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 153,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 153,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'trackPageView' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 161,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setUserProperties' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 161,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 161,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'trackFeatureDiscovery' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 162,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 72
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'performHealthCheck' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 177,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 177,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'playClick' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 202,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 202,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'playError' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 204,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 204,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'tabProtectionEnabled' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 222,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'emotionalState' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 239,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 239,
        "endColumn": 24
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The 'refreshRewardsSystem' function makes the dependencies of useCallback Hook (at line 352) change on every render. To fix this, wrap the definition of 'refreshRewardsSystem' in its own useCallback() Hook.",
        "line": 262,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 286,
        "endColumn": 4,
        "suggestions": [
          {
            "desc": "Wrap the definition of 'refreshRewardsSystem' in its own useCallback() Hook.",
            "fix": {
              "range": [8945, 9765],
              "text": "useCallback(async (alarms: Alarm[] = appState.alarms) => {\n    try {\n      const aiRewards = AIRewardsService.getInstance();\n      const rewardSystem = await aiRewards.analyzeAndGenerateRewards(alarms);\n\n      setAppState(prev => ({\n        ...prev,\n        rewardSystem,\n      }));\n\n      // Track rewards analysis\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('rewards_analysis', 'system_updated', {\n        totalRewards: rewardSystem.unlockedRewards.length,\n        level: rewardSystem.level,\n        currentStreak: rewardSystem.currentStreak,\n      });\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to refresh rewards system',\n        { context: 'rewards_refresh' }\n      );\n    }\n  })"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'event' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 487,
        "column": 49,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 487,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has a missing dependency: 'handleServiceWorkerAlarmTrigger'. Either include it or remove the dependency array.",
        "line": 507,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 507,
        "endColumn": 23,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [appState.alarms, handleServiceWorkerAlarmTrigger]",
            "fix": {
              "range": [17793, 17810],
              "text": "[appState.alarms, handleServiceWorkerAlarmTrigger]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'keyboardService' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 628,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 628,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'mobileService' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 630,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 630,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'focusService' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 631,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 631,
        "endColumn": 25
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'handleServiceWorkerMessage'. Either include it or remove the dependency array.",
        "line": 773,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 773,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [handleServiceWorkerMessage]",
            "fix": { "range": [26324, 26326], "text": "[handleServiceWorkerMessage]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'event' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 794,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 794,
        "endColumn": 45
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'track' and 'trackSessionActivity'. Either include them or remove the dependency array.",
        "line": 963,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 963,
        "endColumn": 84,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [auth.isInitialized, auth.user, loadUserAlarms, registerEnhancedServiceWorker, track, trackSessionActivity]",
            "fix": {
              "range": [32611, 32689],
              "text": "[auth.isInitialized, auth.user, loadUserAlarms, registerEnhancedServiceWorker, track, trackSessionActivity]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'handleServiceWorkerMessage'. Either include it or remove the dependency array.",
        "line": 1000,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 1000,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [handleServiceWorkerMessage]",
            "fix": { "range": [33646, 33648], "text": "[handleServiceWorkerMessage]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 26,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/// <reference lib=\"dom\" />\nimport { useState, useEffect, useCallback } from 'react';\nimport {\n  Plus,\n  Clock,\n  Settings,\n  Bell,\n  Brain,\n  Gamepad2,\n  LogOut,\n  Crown,\n} from 'lucide-react';\nimport type {\n  Alarm,\n  AppState,\n  VoiceMood,\n  User,\n  Battle,\n  DayOfWeek,\n  AlarmDifficulty,\n} from './types';\nimport type { EmotionalTone } from './types/emotional';\nimport { INITIAL_APP_STATE } from './constants/initialState';\n\n// i18n imports\nimport { LanguageProvider } from './contexts/LanguageContext';\nimport { useI18n } from './hooks/useI18n';\nimport { useTheme } from './hooks/useTheme';\n\nimport AlarmList from './components/AlarmList';\nimport AlarmForm from './components/AlarmForm';\nimport AlarmRinging from './components/AlarmRinging';\nimport Dashboard from './components/Dashboard';\nimport OnboardingFlow from './components/OnboardingFlow';\nimport AuthenticationFlow from './components/AuthenticationFlow';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport OfflineIndicator from './components/OfflineIndicator';\nimport PWAInstallPrompt from './components/PWAInstallPrompt';\n// Enhanced consolidated components\nimport GamingHub from './components/GamingHub';\nimport EnhancedSettings from './components/EnhancedSettings';\nimport PricingPage from './components/PricingPage';\nimport { ScreenReaderProvider } from './components/ScreenReaderProvider';\nimport TabProtectionWarning from './components/TabProtectionWarning';\nimport { ThemeProvider } from './hooks/useTheme';\nimport { initializeCapacitor } from './services/capacitor';\nimport { AlarmService } from './services/alarm';\nimport { ErrorHandler } from './services/error-handler';\nimport OfflineStorage from './services/offline-storage';\nimport AccessibilityUtils from './utils/accessibility';\nimport ScreenReaderService from './utils/screen-reader';\nimport KeyboardNavigationService from './utils/keyboard-navigation';\nimport VoiceAccessibilityService from './utils/voice-accessibility';\nimport MobileAccessibilityService from './utils/mobile-accessibility';\nimport EnhancedFocusService from './utils/enhanced-focus';\nimport { PerformanceMonitor } from './services/performance-monitor';\nimport AppAnalyticsService from './services/app-analytics';\nimport AIRewardsService from './services/ai-rewards';\nimport { SupabaseService } from './services/supabase';\nimport { PushNotificationService } from './services/push-notifications';\nimport useAuth from './hooks/useAuth';\nimport { useScreenReaderAnnouncements } from './hooks/useScreenReaderAnnouncements';\nimport {\n  useAnalytics,\n  useEngagementAnalytics,\n  usePageTracking,\n  ANALYTICS_EVENTS,\n} from './hooks/useAnalytics';\nimport { useEmotionalNotifications } from './hooks/useEmotionalNotifications';\nimport { useTabProtectionAnnouncements } from './hooks/useTabProtectionAnnouncements';\nimport useTabProtectionSettings from './hooks/useTabProtectionSettings';\nimport { formatProtectionMessage, formatTimeframe } from './types/tabProtection';\nimport ServiceWorkerStatus from './components/ServiceWorkerStatus';\nimport { useEnhancedServiceWorker } from './hooks/useEnhancedServiceWorker';\nimport { useAdvancedAlarms } from './hooks/useAdvancedAlarms';\nimport AdvancedSchedulingDashboard from './components/AdvancedSchedulingDashboard';\nimport { useUISound } from './hooks/useSoundEffects';\nimport './App.css';\n\n// Email Campaign Integration\nimport { PersonaType, PersonaDetectionResult } from './types';\nclass EmailCampaignService {\n  private static instance: EmailCampaignService;\n  private isInitialized = false;\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new EmailCampaignService();\n    }\n    return this.instance;\n  }\n\n  async initialize() {\n    this.isInitialized = true;\n    console.log('Email campaign service initialized');\n  }\n\n  async detectPersona(user: any): Promise<PersonaDetectionResult> {\n    let persona: PersonaType = 'struggling_sam';\n    const tier = user?.subscriptionTier || 'free';\n\n    switch (tier) {\n      case 'free':\n        persona = 'struggling_sam';\n        break;\n      case 'basic':\n        persona = 'busy_ben';\n        break;\n      case 'premium':\n        persona = 'professional_paula';\n        break;\n      case 'pro':\n        persona = 'enterprise_emma';\n        break;\n      case 'student':\n        persona = 'student_sarah';\n        break;\n    }\n\n    if (user?.email?.includes('.edu')) {\n      persona = 'student_sarah';\n    }\n\n    return {\n      persona,\n      confidence: 0.8,\n      factors: [\n        { factor: 'subscription_tier', weight: 0.8, value: tier, influence: 0.8 },\n      ],\n      updatedAt: new Date(),\n    };\n  }\n\n  async addUserToCampaign(user: any, persona: PersonaType) {\n    console.log(`Adding user ${user.email} to ${persona} campaign`);\n    // Integration with email platform would go here\n    return true;\n  }\n}\n\n// Inner App component that uses i18n hooks\nfunction AppContent() {\n  const {\n    t,\n    getNavigationLabels,\n    getActionLabels,\n    getA11yLabels,\n    isRTL,\n    getDirectionStyles,\n    formatAlarmTime,\n  } = useI18n();\n  const auth = useAuth();\n  const { getCSSVariables, getThemeClasses, applyThemeWithPerformance, preloadTheme } =\n    useTheme();\n  const { announce } = useScreenReaderAnnouncements({\n    announceNavigation: true,\n    announceStateChanges: true,\n  });\n\n  // Analytics integration\n  const { identify, track, trackPageView, setUserProperties, reset } = useAnalytics();\n  const { trackSessionActivity, trackDailyActive, trackFeatureDiscovery } =\n    useEngagementAnalytics();\n  usePageTracking('main-app');\n\n  // Advanced Alarms Hook\n  const {\n    alarms: advancedAlarms,\n    loading: _advancedAlarmsLoading,\n    error: _advancedAlarmsError,\n  } = useAdvancedAlarms();\n\n  // Enhanced Service Worker Hook for alarm reliability\n  const {\n    state: serviceWorkerState,\n    updateAlarms: updateServiceWorkerAlarms,\n    performHealthCheck,\n  } = useEnhancedServiceWorker();\n\n  // Apply theme with performance optimizations\n  useEffect(() => {\n    // Use performance-optimized theme application\n    applyThemeWithPerformance({\n      animate: !window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      duration: 250,\n      immediate: false,\n    });\n  }, [applyThemeWithPerformance]);\n\n  // Preload common themes for better performance\n  useEffect(() => {\n    // Preload opposite theme for quick switching\n    const currentTheme = document.documentElement.classList.contains('theme-dark')\n      ? 'dark'\n      : 'light';\n    const oppositeTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    preloadTheme(oppositeTheme);\n  }, [preloadTheme]);\n\n  // Sound Effects Hook for UI feedback\n  const {\n    playClick,\n    playSuccess,\n    playError,\n    createClickHandler,\n    createSuccessHandler,\n    createErrorHandler,\n  } = useUISound();\n\n  const [appState, setAppState] = useState<AppState>(INITIAL_APP_STATE);\n\n  const [showAlarmForm, setShowAlarmForm] = useState(false);\n  const [editingAlarm, setEditingAlarm] = useState<Alarm | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [accessibilityInitialized, setAccessibilityInitialized] = useState(false);\n  const [sessionStartTime] = useState(Date.now());\n  const [_syncStatus, setSyncStatus] = useState<\n    'synced' | 'syncing' | 'error' | 'pending' | 'offline'\n  >('synced');\n  const [_showPWAInstall, setShowPWAInstall] = useState(false);\n  const [tabProtectionEnabled, setTabProtectionEnabled] = useState(() => {\n    // Get from localStorage or default to true\n    const stored = localStorage.getItem('tabProtectionEnabled');\n    return stored !== null ? JSON.parse(stored) : true;\n  });\n\n  // Sync alarms with enhanced service worker when they change\n  useEffect(() => {\n    if (serviceWorkerState.isInitialized && appState.alarms) {\n      console.log(\n        `App: Syncing ${appState.alarms.length} alarms with enhanced service worker`\n      );\n      updateServiceWorkerAlarms(appState.alarms);\n    }\n  }, [appState.alarms, serviceWorkerState.isInitialized, updateServiceWorkerAlarms]);\n\n  // Emotional Intelligence Notifications Hook\n  const [emotionalState, emotionalActions] = useEmotionalNotifications({\n    userId: auth.user?.id || '',\n    enabled: !!auth.user && appState.permissions.notifications.granted,\n  });\n\n  // Tab Protection Announcements Hook\n  const tabProtectionSettings = useTabProtectionSettings();\n  const { announceProtectionWarning } = useTabProtectionAnnouncements({\n    activeAlarm: appState.activeAlarm,\n    enabledAlarms: appState.alarms.filter(alarm => alarm.enabled),\n    settings: tabProtectionSettings.settings,\n  });\n\n  // PWA Installation handlers\n  const handlePWAInstall = () => {\n    setShowPWAInstall(false);\n    // PWA install logic would be handled by the PWAInstallPrompt component\n  };\n\n  const handlePWADismiss = () => {\n    setShowPWAInstall(false);\n  };\n\n  const refreshRewardsSystem = async (alarms: Alarm[] = appState.alarms) => {\n    try {\n      const aiRewards = AIRewardsService.getInstance();\n      const rewardSystem = await aiRewards.analyzeAndGenerateRewards(alarms);\n\n      setAppState(prev => ({\n        ...prev,\n        rewardSystem,\n      }));\n\n      // Track rewards analysis\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('rewards_analysis', 'system_updated', {\n        totalRewards: rewardSystem.unlockedRewards.length,\n        level: rewardSystem.level,\n        currentStreak: rewardSystem.currentStreak,\n      });\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to refresh rewards system',\n        { context: 'rewards_refresh' }\n      );\n    }\n  };\n\n  const loadUserAlarms = useCallback(async () => {\n    if (!auth.user) return;\n\n    try {\n      // Load alarms from offline storage first (faster)\n      const offlineAlarms = await OfflineStorage.getAlarms();\n      if (offlineAlarms.length > 0) {\n        setAppState(prev => ({\n          ...prev,\n          alarms: offlineAlarms,\n          isOnboarding: offlineAlarms.length === 0,\n        }));\n      }\n\n      // Try to load from remote service if online\n      if (navigator.onLine) {\n        try {\n          const { alarms: savedAlarms } = await SupabaseService.loadUserAlarms(\n            auth.user.id\n          );\n          setAppState(prev => ({\n            ...prev,\n            alarms: savedAlarms,\n            isOnboarding: savedAlarms.length === 0,\n          }));\n          // Save to offline storage\n          await OfflineStorage.saveAlarms(savedAlarms);\n\n          // Announce successful data load to screen readers\n          AccessibilityUtils.createAriaAnnouncement(\n            `Loaded ${savedAlarms.length} alarm${savedAlarms.length === 1 ? '' : 's'}`,\n            'polite'\n          );\n\n          // Initialize rewards system\n          await refreshRewardsSystem(savedAlarms);\n        } catch (error) {\n          ErrorHandler.handleError(\n            error instanceof Error ? error : new Error(String(error)),\n            'Remote alarm loading failed, using offline alarms',\n            { context: 'load_remote_alarms', metadata: { userId: auth.user.id } }\n          );\n          setSyncStatus('error');\n\n          // Initialize rewards system with offline alarms\n          await refreshRewardsSystem(offlineAlarms);\n        }\n      } else {\n        setAppState(prev => ({\n          ...prev,\n          alarms: offlineAlarms,\n          isOnboarding: offlineAlarms.length === 0,\n        }));\n\n        // Initialize rewards system with offline alarms\n        await refreshRewardsSystem(offlineAlarms);\n      }\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to load user alarms',\n        { context: 'load_user_alarms', metadata: { userId: auth.user.id } }\n      );\n    }\n  }, [auth.user, setSyncStatus, refreshRewardsSystem]);\n\n  const registerEnhancedServiceWorker = useCallback(async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        console.log('App: Registering enhanced service worker...');\n        const registration = await navigator.serviceWorker.register('/sw-enhanced.js');\n\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (\n                newWorker.state === 'installed' &&\n                navigator.serviceWorker.controller\n              ) {\n                console.log('App: Service worker updated');\n                // Optionally show update notification to user\n              }\n            });\n          }\n        });\n\n        // Enhanced service worker registered successfully\n        console.log('App: Enhanced service worker registered');\n\n        // Request notification permissions first\n        if ('Notification' in window && Notification.permission === 'default') {\n          try {\n            console.log('App: Requesting notification permission...');\n            const permission = await Notification.requestPermission();\n            console.log('App: Notification permission:', permission);\n\n            if (permission === 'granted') {\n              // Notify service worker about permission\n              navigator.serviceWorker.ready.then(reg => {\n                reg.active?.postMessage({\n                  type: 'REQUEST_NOTIFICATION_PERMISSION',\n                });\n              });\n            }\n          } catch (permissionError) {\n            console.warn(\n              'App: Could not request notification permission:',\n              permissionError\n            );\n          }\n        }\n\n        // Wait for service worker to be ready\n        const readyRegistration = await navigator.serviceWorker.ready;\n\n        // Send alarms to service worker\n        if (readyRegistration.active && appState.alarms.length > 0) {\n          console.log(\n            `App: Sending ${appState.alarms.length} alarms to service worker`\n          );\n\n          // Use MessageChannel for reliable communication\n          const messageChannel = new MessageChannel();\n\n          messageChannel.port1.onmessage = (event: MessageEvent) => {\n            const { success, message, error } = event.data;\n            if (success) {\n              console.log('App: Service worker response:', message);\n            } else {\n              console.error('App: Service worker error:', error);\n            }\n          };\n\n          readyRegistration.active.postMessage(\n            {\n              type: 'UPDATE_ALARMS',\n              data: { alarms: appState.alarms },\n            },\n            [messageChannel.port2]\n          );\n        }\n\n        // Set up service worker message listener\n        navigator.serviceWorker.addEventListener('message', event => {\n          const { type, data } = event.data;\n\n          switch (type) {\n            case 'ALARM_TRIGGERED':\n              console.log('App: Alarm triggered by service worker:', data.alarm.id);\n              // Handle alarm trigger from service worker\n              handleServiceWorkerAlarmTrigger(data.alarm);\n              break;\n\n            case 'ALARM_SCHEDULED':\n              console.log('App: Alarm scheduled by service worker:', data.alarmId);\n              break;\n\n            case 'ALARM_CANCELLED':\n              console.log('App: Alarm cancelled by service worker:', data.alarmId);\n              break;\n\n            case 'NETWORK_STATUS':\n              console.log('App: Network status change:', data.isOnline);\n              // Update app state based on network status\n              break;\n\n            case 'COMPLETE_SYNC_FINISHED':\n              console.log('App: Service worker sync completed');\n              // Refresh app data if needed\n              break;\n\n            default:\n              console.log('App: Unknown service worker message:', type);\n          }\n        });\n\n        // Set up visibility change handling for alarm reliability\n        document.addEventListener('visibilitychange', () => {\n          if (document.visibilityState === 'hidden') {\n            // Ensure alarms are properly scheduled in service worker when tab becomes hidden\n            console.log('App: Tab hidden, ensuring background alarm scheduling...');\n            if (readyRegistration.active) {\n              readyRegistration.active.postMessage({\n                type: 'SYNC_ALARM_STATE',\n              });\n            }\n          } else if (document.visibilityState === 'visible') {\n            // Perform health check when tab becomes visible again\n            console.log('App: Tab visible, performing alarm health check...');\n            if (readyRegistration.active) {\n              readyRegistration.active.postMessage({\n                type: 'HEALTH_CHECK',\n              });\n            }\n          }\n        });\n\n        // Set up beforeunload event for tab close protection\n        window.addEventListener('beforeunload', event => {\n          // This will be handled by the tab protection system\n          // but we also notify the service worker\n          if (readyRegistration.active) {\n            readyRegistration.active.postMessage({\n              type: 'TAB_CLOSING',\n            });\n          }\n        });\n      } catch (error) {\n        console.error('App: Service worker registration failed:', error);\n        ErrorHandler.handleError(\n          error instanceof Error ? error : new Error(String(error)),\n          'Enhanced service worker registration failed',\n          { context: 'service_worker_registration' }\n        );\n      }\n    } else {\n      console.warn('App: Service workers not supported in this browser');\n    }\n  }, [appState.alarms]);\n\n  // Handle alarm triggers from service worker\n  const handleServiceWorkerAlarmTrigger = useCallback(\n    (alarm: Alarm) => {\n      console.log('App: Handling service worker alarm trigger:', alarm.id);\n\n      // Update app state to show alarm as triggered\n      setAppState(prev => ({\n        ...prev,\n        activeAlarm: alarm,\n        alarmTriggeredAt: new Date(),\n      }));\n\n      // Navigate to alarm screen if needed\n      // This would integrate with your existing alarm handling logic\n    },\n    [setAppState]\n  );\n\n  const syncOfflineChanges = useCallback(async () => {\n    if (!auth.user) return;\n\n    try {\n      const pendingChanges = await OfflineStorage.getPendingChanges();\n\n      if (pendingChanges.length > 0) {\n        // Syncing offline changes silently\n\n        for (const change of pendingChanges) {\n          try {\n            switch (change.type) {\n              case 'create':\n              case 'update':\n                if (change.data) {\n                  const saveResult = await SupabaseService.saveAlarm(change.data);\n                  if (saveResult.error) {\n                    throw new Error(saveResult.error);\n                  }\n                }\n                break;\n              case 'delete': {\n                const deleteResult = await SupabaseService.deleteAlarm(change.id);\n                if (deleteResult.error) {\n                  throw new Error(deleteResult.error);\n                }\n                break;\n              }\n            }\n          } catch (error) {\n            ErrorHandler.handleError(\n              error instanceof Error ? error : new Error(String(error)),\n              'Failed to sync offline change',\n              {\n                context: 'sync_offline_change',\n                metadata: { changeId: change.id, changeType: change.type },\n              }\n            );\n          }\n        }\n\n        // Clear pending changes after successful sync\n        await OfflineStorage.clearPendingChanges();\n        setSyncStatus('synced');\n\n        // Reload alarms from server to ensure consistency\n        const { alarms: updatedAlarms } = await SupabaseService.loadUserAlarms(\n          auth.user.id\n        );\n        setAppState(prev => ({ ...prev, alarms: updatedAlarms }));\n        await OfflineStorage.saveAlarms(updatedAlarms);\n      }\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to sync offline changes'\n      );\n      setSyncStatus('error');\n    }\n  }, [auth.user, setSyncStatus]);\n\n  // Refresh rewards system based on current alarms and analytics\n  // Handle quick alarm setup with preset configurations\n  const handleQuickSetup = async (presetType: 'morning' | 'work' | 'custom') => {\n    const presets = {\n      morning: {\n        time: '07:00',\n        label: 'Morning Routine',\n        days: [1, 2, 3, 4, 5], // Monday to Friday\n        voiceMood: 'motivational' as VoiceMood,\n      },\n      work: {\n        time: '06:30',\n        label: 'Work Day',\n        days: [1, 2, 3, 4, 5], // Monday to Friday\n        voiceMood: 'drill-sergeant' as VoiceMood,\n      },\n      custom: {\n        time: '07:00',\n        label: 'Wake Up',\n        days: [1, 2, 3, 4, 5, 6, 7], // Every day\n        voiceMood: 'gentle' as VoiceMood,\n      },\n    };\n\n    const presetConfig = presets[presetType];\n    if (presetConfig) {\n      await handleAddAlarm(presetConfig);\n\n      // Track the quick setup usage\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('quick_alarm_setup', 'preset_used', {\n        presetType,\n      });\n    }\n  };\n\n  // Initialize all accessibility services\n  const initializeAccessibilityServices = async () => {\n    try {\n      const screenReaderService = ScreenReaderService.getInstance();\n      const keyboardService = KeyboardNavigationService.getInstance();\n      const voiceService = VoiceAccessibilityService.getInstance();\n      const mobileService = MobileAccessibilityService.getInstance();\n      const focusService = EnhancedFocusService.getInstance();\n\n      // Services are automatically initialized when getInstance() is called\n      // Just verify they're properly instantiated\n\n      // Announce app initialization\n      screenReaderService.announce(\n        'Smart Alarm app loaded with full accessibility support',\n        'polite'\n      );\n\n      setAccessibilityInitialized(true);\n\n      // Track accessibility initialization\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('accessibility', 'services_initialized', {\n        screenReader: screenReaderService.getState().isEnabled,\n        keyboard: true,\n        voice: voiceService.getState?.().isEnabled ?? false,\n        mobile: true,\n        focus: true,\n      });\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to initialize accessibility services',\n        { context: 'accessibility_initialization' }\n      );\n      setAccessibilityInitialized(true); // Continue even if accessibility fails\n    }\n  };\n\n  // Update app state when auth state changes\n  useEffect(() => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n    const emailService = EmailCampaignService.getInstance();\n\n    setAppState(prev => ({\n      ...prev,\n      user: auth.user,\n    }));\n\n    // Set analytics user context when user signs in/out\n    if (auth.user) {\n      // Use both analytics services for comprehensive tracking\n      appAnalytics.setUserContext(auth.user.id, {\n        email: auth.user.email,\n        signInMethod: 'supabase',\n      });\n\n      // New analytics hook for user identification\n      identify(auth.user.id, {\n        id: auth.user.id,\n        email: auth.user.email,\n        createdAt:\n          auth.user.createdAt instanceof Date\n            ? auth.user.createdAt.toISOString()\n            : auth.user.createdAt,\n        deviceType: navigator.userAgent.includes('Mobile') ? 'mobile' : 'desktop',\n      });\n\n      // Track sign-in event\n      track(ANALYTICS_EVENTS.USER_SIGNED_IN, {\n        timestamp: new Date().toISOString(),\n        metadata: {\n          method: 'supabase',\n        },\n      });\n\n      // Track daily active user\n      trackDailyActive();\n\n      // Email Campaign Integration: Detect persona and add to campaign\n      (async () => {\n        try {\n          await emailService.initialize();\n          const personaResult = await emailService.detectPersona(auth.user);\n          console.log(\n            `Detected persona: ${personaResult.persona} (confidence: ${personaResult.confidence})`\n          );\n\n          // Add user to appropriate email campaign\n          await emailService.addUserToCampaign(auth.user, personaResult.persona);\n\n          // Track persona detection for analytics\n          track('PERSONA_DETECTED', {\n            persona: personaResult.persona,\n            confidence: personaResult.confidence,\n            factors: personaResult.factors.map(f => f.factor),\n            timestamp: new Date().toISOString(),\n          });\n        } catch (error) {\n          console.error('Email campaign integration error:', error);\n        }\n      })();\n    } else {\n      // Clear user context when user signs out\n      appAnalytics.clearUserContext();\n      reset();\n\n      // Track sign-out event\n      track(ANALYTICS_EVENTS.USER_SIGNED_OUT, {\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }, [auth.user, identify, track, reset, trackDailyActive]);\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setSyncStatus('pending');\n      // Trigger sync when coming back online\n      syncOfflineChanges();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setSyncStatus('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [syncOfflineChanges]);\n\n  // Service worker message handling\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);\n\n      return () => {\n        navigator.serviceWorker.removeEventListener(\n          'message',\n          handleServiceWorkerMessage\n        );\n      };\n    }\n  }, []);\n\n  // Handle emotional notification events from service worker\n  useEffect(() => {\n    const handleEmotionalAction = (event: CustomEvent) => {\n      const { action, emotion_type, notification_id, data: actionData } = event.detail;\n\n      // Track the action in analytics\n      emotionalActions.trackResponse(notification_id || 'unknown', {\n        messageId: notification_id || 'unknown',\n        emotion: emotion_type,\n        tone: actionData?.tone || 'encouraging',\n        actionTaken:\n          action === 'dismiss' ? 'dismissed' : action === 'snooze' ? 'snoozed' : 'none',\n        notificationOpened: true,\n        timeToResponse: Date.now() - (actionData?.timestamp || Date.now()),\n      });\n\n      console.log('🧠 Emotional notification action received:', action, emotion_type);\n    };\n\n    const handleServiceWorkerUpdate = (event: CustomEvent) => {\n      console.log('🔄 Service Worker update available');\n      // Could show a toast notification or update indicator\n    };\n\n    const handleServiceWorkerInstall = () => {\n      console.log('✅ Service Worker installed successfully');\n    };\n\n    // Add event listeners\n    window.addEventListener(\n      'emotional-notification-action',\n      handleEmotionalAction as EventListener\n    );\n    window.addEventListener(\n      'sw-update-available',\n      handleServiceWorkerUpdate as EventListener\n    );\n    window.addEventListener('sw-install-complete', handleServiceWorkerInstall);\n\n    return () => {\n      window.removeEventListener(\n        'emotional-notification-action',\n        handleEmotionalAction as EventListener\n      );\n      window.removeEventListener(\n        'sw-update-available',\n        handleServiceWorkerUpdate as EventListener\n      );\n      window.removeEventListener('sw-install-complete', handleServiceWorkerInstall);\n    };\n  }, [emotionalActions]);\n\n  const handleServiceWorkerMessage = (event: MessageEvent) => {\n    const { type, data } = event.data;\n\n    switch (type) {\n      case 'ALARM_TRIGGERED':\n        if (data.alarm) {\n          setAppState(prev => ({ ...prev, activeAlarm: data.alarm }));\n        }\n        break;\n      case 'SYNC_START':\n        setSyncStatus('pending');\n        break;\n      case 'SYNC_COMPLETE':\n        setSyncStatus('synced');\n        break;\n      case 'SYNC_ERROR':\n        setSyncStatus('error');\n        ErrorHandler.handleError(\n          new Error(data.error || 'Sync failed'),\n          'Background sync failed'\n        );\n        break;\n      case 'NETWORK_STATUS':\n        setIsOnline(data.isOnline);\n        break;\n      case 'EMOTIONAL_NOTIFICATION_ACTION':\n        // Handle emotional notification actions from service worker\n        if (data.action && data.emotion_type) {\n          emotionalActions.trackResponse(data.notification_id || 'unknown', {\n            messageId: data.notification_id || 'unknown',\n            emotion: data.emotion_type,\n            tone: data.tone || 'encouraging',\n            actionTaken:\n              data.action === 'dismiss'\n                ? 'dismissed'\n                : data.action === 'snooze'\n                  ? 'snoozed'\n                  : 'none',\n            notificationOpened: true,\n            timeToResponse: Date.now() - (data.timestamp || Date.now()),\n          });\n\n          // Handle specific actions\n          if (data.action === 'dismiss' && appState.activeAlarm) {\n            setAppState(prev => ({ ...prev, activeAlarm: null }));\n          } else if (data.action === 'snooze' && appState.activeAlarm) {\n            // Trigger snooze functionality\n            handleAlarmSnooze(appState.activeAlarm.id);\n          }\n\n          console.log('🧠 Emotional notification action handled:', data.action);\n        }\n        break;\n      default:\n        ErrorHandler.handleError(\n          new Error(`Unknown service worker message type: ${type}`),\n          'Received unknown service worker message',\n          { context: 'service_worker_message', metadata: { type, data } }\n        );\n    }\n  };\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        // Initialize performance monitoring and analytics\n        const performanceMonitor = PerformanceMonitor.getInstance();\n        const appAnalytics = AppAnalyticsService.getInstance();\n\n        performanceMonitor.initialize();\n\n        // Start performance tracking\n        appAnalytics.startPerformanceMarker('app_initialization');\n\n        // Initialize analytics services (Sentry + PostHog)\n        await appAnalytics.initializeAnalytics();\n\n        // Track app launch\n        appAnalytics.trackPageView('dashboard', {\n          isInitialLoad: true,\n          userAuthenticated: !!auth.user,\n        });\n\n        // Track session activity with enhanced analytics\n        trackSessionActivity();\n\n        // Track app installation/update if first time\n        const isFirstTime = !localStorage.getItem('app_launched_before');\n        if (isFirstTime) {\n          track(ANALYTICS_EVENTS.APP_INSTALLED, {\n            timestamp: new Date().toISOString(),\n            metadata: {\n              version: import.meta.env.VITE_APP_VERSION || '1.0.0',\n              platform: navigator.userAgent.includes('Mobile') ? 'mobile' : 'desktop',\n            },\n          });\n          localStorage.setItem('app_launched_before', 'true');\n        }\n\n        // Initialize Capacitor\n        await initializeCapacitor();\n\n        // Initialize Push Notifications\n        try {\n          await PushNotificationService.initialize();\n        } catch (error) {\n          console.warn('Push notification initialization failed:', error);\n        }\n\n        // Initialize enhanced service worker\n        await registerEnhancedServiceWorker();\n\n        // Initialize accessibility services\n        await initializeAccessibilityServices();\n\n        // Only load alarms if user is authenticated\n        if (auth.user) {\n          await loadUserAlarms();\n        }\n\n        setIsInitialized(true);\n      } catch (error) {\n        ErrorHandler.handleError(\n          error instanceof Error ? error : new Error(String(error)),\n          'Failed to initialize app',\n          {\n            context: 'app_initialization',\n          }\n        );\n        setIsInitialized(true);\n      }\n    };\n\n    if (auth.isInitialized) {\n      initialize();\n    }\n  }, [auth.isInitialized, auth.user, loadUserAlarms, registerEnhancedServiceWorker]);\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setSyncStatus('pending');\n      // Trigger sync when coming back online\n      syncOfflineChanges();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setSyncStatus('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [syncOfflineChanges]);\n\n  // Service worker message handling\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);\n\n      return () => {\n        navigator.serviceWorker.removeEventListener(\n          'message',\n          handleServiceWorkerMessage\n        );\n      };\n    }\n  }, []);\n\n  // Prevent accidental tab closure when alarms are active\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      // Only show protection if user has enabled it\n      if (!tabProtectionSettings.settings.enabled) {\n        return;\n      }\n\n      // Check if there's an active alarm (currently ringing)\n      if (\n        appState.activeAlarm &&\n        tabProtectionSettings.settings.protectionTiming.activeAlarmWarning\n      ) {\n        // Announce the warning for accessibility\n        announceProtectionWarning();\n\n        const message = formatProtectionMessage(\n          tabProtectionSettings.settings.customMessages.activeAlarmMessage,\n          { alarmName: appState.activeAlarm.label }\n        );\n        event.preventDefault();\n        event.returnValue = message; // Chrome requires returnValue to be set\n        return message; // For other browsers\n      }\n\n      // Check if there are enabled alarms that could ring soon\n      if (tabProtectionSettings.settings.protectionTiming.upcomingAlarmWarning) {\n        const enabledAlarms = appState.alarms.filter(alarm => alarm.enabled);\n        if (enabledAlarms.length > 0) {\n          // Check if any alarm is within the configured threshold\n          const now = new Date();\n          const thresholdFromNow = new Date(\n            now.getTime() +\n              tabProtectionSettings.settings.protectionTiming.upcomingAlarmThreshold *\n                60 *\n                1000\n          );\n\n          const upcomingAlarms = enabledAlarms.filter(alarm => {\n            const today = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n            // Check if alarm is set for today\n            if (!alarm.days.includes(today)) {\n              return false;\n            }\n\n            // Parse alarm time\n            const [hours, minutes] = alarm.time.split(':').map(Number);\n            const alarmTime = new Date(now);\n            alarmTime.setHours(hours, minutes, 0, 0);\n\n            // If alarm time has passed today, check if it's for tomorrow\n            if (alarmTime <= now) {\n              alarmTime.setDate(alarmTime.getDate() + 1);\n            }\n\n            return alarmTime <= thresholdFromNow;\n          });\n\n          if (upcomingAlarms.length > 0) {\n            // Announce the warning for accessibility\n            announceProtectionWarning();\n\n            const timeframe = formatTimeframe(\n              tabProtectionSettings.settings.protectionTiming.upcomingAlarmThreshold\n            );\n            const message = formatProtectionMessage(\n              tabProtectionSettings.settings.customMessages.upcomingAlarmMessage,\n              { count: upcomingAlarms.length, timeframe }\n            );\n            event.preventDefault();\n            event.returnValue = message;\n            return message;\n          }\n        }\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup function to remove the event listener\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [\n    appState.activeAlarm,\n    appState.alarms,\n    announceProtectionWarning,\n    tabProtectionSettings.settings,\n  ]); // Re-run when activeAlarm, alarms, announcement function, or protection settings change\n\n  // Listen for changes to tab protection setting from localStorage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const stored = localStorage.getItem('tabProtectionEnabled');\n      const enabled = stored !== null ? JSON.parse(stored) : true;\n      setTabProtectionEnabled(enabled);\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  const handleAddAlarm = async (alarmData: {\n    time: string;\n    label: string;\n    days: number[];\n    voiceMood: VoiceMood;\n    snoozeEnabled?: boolean;\n    snoozeInterval?: number;\n    maxSnoozes?: number;\n  }) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(\n        new Error('User not authenticated'),\n        'Cannot create alarm without authentication'\n      );\n      return;\n    }\n\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    // Start performance tracking\n    appAnalytics.startPerformanceMarker('alarm_creation');\n\n    try {\n      let newAlarm: Alarm;\n\n      // Prepare alarm data with user ID\n\n      if (isOnline) {\n        // Online: save to server and local storage\n        newAlarm = {\n          id: `alarm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          userId: auth.user.id,\n          enabled: true,\n          isActive: true,\n          dayNames: alarmData.days\n            ? alarmData.days.map(\n                d =>\n                  [\n                    'sunday',\n                    'monday',\n                    'tuesday',\n                    'wednesday',\n                    'thursday',\n                    'friday',\n                    'saturday',\n                  ][d] as DayOfWeek\n              )\n            : [],\n          sound: 'default',\n          difficulty: 'medium',\n          snoozeEnabled: true,\n          snoozeInterval: 5,\n          maxSnoozes: 3,\n          snoozeCount: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          ...alarmData,\n        };\n\n        const saveResult = await SupabaseService.saveAlarm(newAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n\n        await OfflineStorage.saveAlarm(newAlarm);\n      } else {\n        // Offline: save locally only\n        newAlarm = {\n          id: `offline-${Date.now()}`,\n          userId: auth.user.id,\n          enabled: true,\n          isActive: true,\n          dayNames: alarmData.days\n            ? alarmData.days.map(\n                d =>\n                  [\n                    'sunday',\n                    'monday',\n                    'tuesday',\n                    'wednesday',\n                    'thursday',\n                    'friday',\n                    'saturday',\n                  ][d] as DayOfWeek\n              )\n            : [],\n          sound: 'default',\n          difficulty: 'medium',\n          snoozeEnabled: true,\n          snoozeInterval: 5,\n          maxSnoozes: 3,\n          snoozeCount: 0,\n          lastTriggered: undefined,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          ...alarmData,\n        };\n        await OfflineStorage.saveAlarm(newAlarm);\n      }\n\n      const updatedAlarms = [...appState.alarms, newAlarm];\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms,\n      }));\n      setShowAlarmForm(false);\n\n      // Announce successful alarm creation\n      AccessibilityUtils.createAriaAnnouncement(\n        `Alarm created successfully for ${newAlarm.label} at ${newAlarm.time}`,\n        'polite'\n      );\n\n      // Play success sound\n      playSuccess();\n\n      // Refresh rewards system with new alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track comprehensive analytics\n      appAnalytics.trackAlarmCreated(newAlarm, {\n        isQuickSetup: false,\n      });\n\n      // Track performance\n      const duration = appAnalytics.endPerformanceMarker('alarm_creation', {\n        success: true,\n        isOnline,\n        totalAlarms: updatedAlarms.length,\n      });\n\n      appAnalytics.trackAlarmAction('create', newAlarm.id, { success: true, duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms([...appState.alarms, newAlarm]);\n\n      // Schedule push notification for new alarm\n      try {\n        await PushNotificationService.scheduleAlarmPush(newAlarm);\n      } catch (error) {\n        console.warn('Failed to schedule push notification for new alarm:', error);\n      }\n    } catch (error) {\n      // Track error and performance\n      const duration = appAnalytics.endPerformanceMarker('alarm_creation', {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n      });\n\n      appAnalytics.trackAlarmAction('create', 'unknown', {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        duration,\n      });\n      appAnalytics.trackError(\n        error instanceof Error ? error : new Error(String(error)),\n        {\n          action: 'create_alarm',\n          alarmData,\n        }\n      );\n\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to create alarm',\n        {\n          context: 'create_alarm',\n          metadata: { alarmData, isOnline },\n        }\n      );\n    }\n  };\n\n  const handleEditAlarm = async (\n    alarmId: string,\n    alarmData: {\n      time: string;\n      label: string;\n      days: number[];\n      voiceMood: VoiceMood;\n      snoozeEnabled?: boolean;\n      snoozeInterval?: number;\n      maxSnoozes?: number;\n    }\n  ) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(\n        new Error('User not authenticated'),\n        'Cannot edit alarm without authentication'\n      );\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('edit', alarmId, { voiceMood: alarmData.voiceMood });\n      const existingAlarm = appState.alarms.find(a => a.id === alarmId);\n      if (!existingAlarm) throw new Error('Alarm not found');\n\n      const updatedAlarm: Alarm = {\n        ...existingAlarm,\n        ...alarmData,\n        updatedAt: new Date(),\n      };\n\n      if (isOnline) {\n        // Online: update server and local storage\n        const saveResult = await SupabaseService.saveAlarm(updatedAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      } else {\n        // Offline: update locally only\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      }\n\n      const updatedAlarms = appState.alarms.map(alarm =>\n        alarm.id === alarmId ? updatedAlarm : alarm\n      );\n\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms,\n      }));\n      setEditingAlarm(null);\n      setShowAlarmForm(false);\n\n      // Announce successful alarm update\n      AccessibilityUtils.createAriaAnnouncement(\n        `Alarm updated successfully for ${updatedAlarm.label} at ${updatedAlarm.time}`,\n        'polite'\n      );\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('edit', updatedAlarm.id, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_editing', 'completed', {\n        voiceMood: alarmData.voiceMood,\n        duration,\n      });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('edit', editingAlarm?.id || 'unknown', {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        duration,\n      });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), {\n        action: 'edit_alarm',\n      });\n\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to edit alarm',\n        {\n          context: 'edit_alarm',\n          metadata: { alarmId, alarmData, isOnline },\n        }\n      );\n    }\n  };\n\n  const handleDeleteAlarm = async (alarmId: string) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(\n        new Error('User not authenticated'),\n        'Cannot delete alarm without authentication'\n      );\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('delete', alarmId);\n      if (isOnline) {\n        // Online: delete from server and local storage\n        const deleteResult = await SupabaseService.deleteAlarm(alarmId);\n        if (deleteResult.error) {\n          throw new Error(deleteResult.error);\n        }\n        await OfflineStorage.deleteAlarm(alarmId);\n      } else {\n        // Offline: delete locally only\n        await OfflineStorage.deleteAlarm(alarmId);\n      }\n\n      const alarmToDelete = appState.alarms.find(a => a.id === alarmId);\n      const updatedAlarms = appState.alarms.filter(alarm => alarm.id !== alarmId);\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms,\n      }));\n\n      // Announce successful alarm deletion\n      if (alarmToDelete) {\n        announce({\n          type: 'alarm-delete',\n          data: { alarm: alarmToDelete },\n          priority: 'polite',\n        });\n      }\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('delete', alarmId, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_deletion', 'completed', { duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('delete', alarmId, {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        duration,\n      });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), {\n        action: 'delete_alarm',\n      });\n\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to delete alarm',\n        {\n          context: 'delete_alarm',\n          metadata: { alarmId, isOnline },\n        }\n      );\n    }\n  };\n\n  const handleToggleAlarm = async (alarmId: string, enabled: boolean) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(\n        new Error('User not authenticated'),\n        'Cannot toggle alarm without authentication'\n      );\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('toggle', alarmId, { enabled });\n      const existingAlarm = appState.alarms.find(a => a.id === alarmId);\n      if (!existingAlarm) throw new Error('Alarm not found');\n\n      const updatedAlarm: Alarm = {\n        ...existingAlarm,\n        enabled,\n        updatedAt: new Date(),\n      };\n\n      if (isOnline) {\n        // Online: update server and local storage\n        const saveResult = await SupabaseService.saveAlarm(updatedAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      } else {\n        // Offline: update locally only\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      }\n\n      const updatedAlarms = appState.alarms.map(alarm =>\n        alarm.id === alarmId ? updatedAlarm : alarm\n      );\n\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms,\n      }));\n\n      // Announce alarm toggle state change\n      announce({\n        type: 'alarm-toggle',\n        data: { alarm: updatedAlarm, enabled },\n        priority: 'polite',\n      });\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('toggle', alarmId, {\n        success: true,\n        enabled,\n        duration,\n      });\n      analytics.trackFeatureUsage('alarm_toggle', 'completed', { enabled, duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('toggle', alarmId, {\n        success: false,\n        enabled,\n        error: error instanceof Error ? error.message : String(error),\n        duration,\n      });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), {\n        action: 'toggle_alarm',\n      });\n\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to toggle alarm',\n        {\n          context: 'toggle_alarm',\n          metadata: { alarmId, enabled, isOnline },\n        }\n      );\n    }\n  };\n\n  const handleOnboardingComplete = () => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    // Track onboarding completion\n    appAnalytics.trackOnboardingCompleted(\n      5, // Number of onboarding steps\n      Date.now() - sessionStartTime, // Time spent in onboarding\n      false // Not skipped\n    );\n\n    setAppState(prev => ({ ...prev, isOnboarding: false }));\n  };\n\n  const handleAlarmDismiss = (\n    alarmId: string,\n    method: 'voice' | 'button' | 'shake' | 'challenge'\n  ) => {\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    const performDismiss = async () => {\n      try {\n        analytics.trackAlarmAction('dismiss', alarmId, { method });\n\n        if (isOnline) {\n          await AlarmService.dismissAlarm(alarmId, method);\n        }\n\n        const duration = performance.now() - startTime;\n        analytics.trackAlarmAction('dismiss', alarmId, {\n          success: true,\n          method,\n          duration,\n        });\n        analytics.trackFeatureUsage('alarm_dismissal', 'completed', {\n          method,\n          duration,\n        });\n\n        setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n      } catch (error) {\n        const duration = performance.now() - startTime;\n        analytics.trackAlarmAction('dismiss', alarmId, {\n          success: false,\n          method,\n          error: error instanceof Error ? error.message : String(error),\n          duration,\n        });\n        analytics.trackError(\n          error instanceof Error ? error : new Error(String(error)),\n          { action: 'dismiss_alarm' }\n        );\n\n        ErrorHandler.handleError(\n          error instanceof Error ? error : new Error(String(error)),\n          'Failed to dismiss alarm',\n          {\n            context: 'dismiss_alarm',\n            metadata: { alarmId, method, isOnline },\n          }\n        );\n        // Fallback: still dismiss the alarm even if logging fails\n        setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n      }\n    };\n\n    performDismiss();\n  };\n\n  const handleAlarmSnooze = async (alarmId: string) => {\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('snooze', alarmId);\n\n      if (isOnline) {\n        await AlarmService.snoozeAlarm(alarmId);\n      }\n\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('snooze', alarmId, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_snooze', 'completed', { duration });\n\n      setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('snooze', alarmId, {\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n        duration,\n      });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), {\n        action: 'snooze_alarm',\n      });\n\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to snooze alarm',\n        {\n          context: 'snooze_alarm',\n          metadata: { alarmId, isOnline },\n        }\n      );\n      // Fallback: still hide the alarm even if snooze fails\n      setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n    }\n  };\n\n  // Show loading screen while auth is initializing\n  if (!auth.isInitialized || !isInitialized) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-primary-900\">\n        <div className=\"text-center text-white\">\n          <Clock className=\"w-16 h-16 mx-auto mb-4 animate-spin\" />\n          <h2 className=\"text-xl font-semibold\">{t('common:app.loading')}</h2>\n          <p className=\"text-primary-200 mt-2\">\n            {!auth.isInitialized\n              ? t('auth:loading.checkingAuth', {\n                  defaultValue: 'Checking authentication...',\n                })\n              : !accessibilityInitialized\n                ? t('common:accessibility.loading', {\n                    defaultValue: 'Initializing accessibility services...',\n                  })\n                : t('common:status.loading', {\n                    defaultValue: 'Initializing offline capabilities...',\n                  })}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show authentication flow if user is not logged in\n  if (!auth.user) {\n    return (\n      <ErrorBoundary\n        context=\"Authentication\"\n        fallback={\n          <div className=\"min-h-screen bg-red-50 dark:bg-red-900/10 flex items-center justify-center p-4\">\n            <div className=\"text-center max-w-md mx-auto\">\n              <h2 className=\"text-xl font-bold text-red-800 dark:text-red-200 mb-2\">\n                Authentication Error\n              </h2>\n              <p className=\"text-red-600 dark:text-red-300 mb-4\">\n                There was a problem with the authentication system. Please refresh the\n                page or try again later.\n              </p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                Refresh Page\n              </button>\n            </div>\n          </div>\n        }\n      >\n        <AuthenticationFlow\n          onAuthSuccess={() => {\n            // Auth success is handled by the useAuth hook\n          }}\n          onSignUp={auth.signUp}\n          onSignIn={auth.signIn}\n          onForgotPassword={auth.resetPassword}\n          isLoading={auth.isLoading}\n          error={auth.error}\n          forgotPasswordSuccess={auth.forgotPasswordSuccess}\n        />\n      </ErrorBoundary>\n    );\n  }\n\n  // Show onboarding flow for new users (after authentication)\n  if (appState.isOnboarding) {\n    return (\n      <OnboardingFlow\n        onComplete={handleOnboardingComplete}\n        appState={appState}\n        setAppState={setAppState}\n      />\n    );\n  }\n\n  if (appState.activeAlarm) {\n    return (\n      <ErrorBoundary\n        context=\"AlarmRinging\"\n        fallback={\n          <div className=\"min-h-screen bg-red-50 dark:bg-red-900/10 flex items-center justify-center p-4\">\n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-bold text-red-800 dark:text-red-200 mb-2\">\n                Alarm Error\n              </h2>\n              <p className=\"text-red-600 dark:text-red-300 mb-4\">\n                There was a problem with the alarm. It has been dismissed.\n              </p>\n              <button\n                onClick={() => setAppState(prev => ({ ...prev, activeAlarm: null }))}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg\"\n              >\n                Back to Dashboard\n              </button>\n            </div>\n          </div>\n        }\n      >\n        <AlarmRinging\n          alarm={appState.activeAlarm}\n          user={auth.user!}\n          onDismiss={handleAlarmDismiss}\n          onSnooze={handleAlarmSnooze}\n        />\n      </ErrorBoundary>\n    );\n  }\n\n  const renderContent = () => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    switch (appState.currentView) {\n      case 'dashboard':\n        appAnalytics.trackPageView('dashboard', {\n          totalAlarms: appState.alarms.length,\n          activeAlarms: appState.alarms.filter(a => a.enabled).length,\n        });\n        return (\n          <ErrorBoundary context=\"Dashboard\">\n            <Dashboard\n              alarms={appState.alarms}\n              onAddAlarm={() => {\n                appAnalytics.trackFeatureUsage('add_alarm', 'button_clicked');\n                setShowAlarmForm(true);\n              }}\n              onQuickSetup={handleQuickSetup}\n              onNavigateToAdvanced={() => {\n                appAnalytics.trackFeatureUsage(\n                  'navigation',\n                  'advanced_scheduling_from_dashboard'\n                );\n                setAppState(prev => ({ ...prev, currentView: 'advanced-scheduling' }));\n              }}\n            />\n          </ErrorBoundary>\n        );\n      case 'alarms':\n        appAnalytics.trackPageView('alarms', {\n          totalAlarms: appState.alarms.length,\n        });\n        return (\n          <ErrorBoundary context=\"AlarmList\">\n            <AlarmList\n              alarms={appState.alarms}\n              onToggleAlarm={handleToggleAlarm}\n              onEditAlarm={alarm => {\n                appAnalytics.trackFeatureUsage('edit_alarm', 'button_clicked', {\n                  alarmId: alarm.id,\n                  alarmLabel: alarm.label,\n                });\n                setEditingAlarm(alarm);\n                setShowAlarmForm(true);\n              }}\n              onDeleteAlarm={handleDeleteAlarm}\n            />\n          </ErrorBoundary>\n        );\n      case 'advanced-scheduling':\n        appAnalytics.trackPageView('advanced_scheduling');\n        appAnalytics.trackFeatureUsage('advanced_scheduling', 'accessed');\n        return (\n          <ErrorBoundary context=\"AdvancedScheduling\">\n            <AdvancedSchedulingDashboard alarms={advancedAlarms} />\n          </ErrorBoundary>\n        );\n      case 'gaming':\n        appAnalytics.trackPageView('gaming');\n        appAnalytics.trackFeatureUsage('gaming_hub', 'accessed');\n        return (\n          <ErrorBoundary context=\"GamingHub\">\n            <GamingHub\n              currentUser={auth.user as User}\n              rewardSystem={appState.rewardSystem}\n              activeBattles={appState.activeBattles || []}\n              friends={appState.friends || []}\n              onCreateBattle={battle => {\n                // Add battle to state with complete Battle object\n                const completeBattle: Battle = {\n                  id: battle.id || Math.random().toString(36).substr(2, 9),\n                  type: battle.type || 'speed',\n                  participants: battle.participants || [],\n                  creatorId: battle.creatorId || auth.user?.id || '',\n                  status: battle.status || 'pending',\n                  startTime: battle.startTime || new Date().toISOString(),\n                  endTime:\n                    battle.endTime ||\n                    new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n                  settings: battle.settings || {\n                    duration: 'PT24H',\n                    difficulty: 'medium',\n                  },\n                  createdAt: battle.createdAt || new Date().toISOString(),\n                  ...battle,\n                };\n                setAppState(prev => ({\n                  ...prev,\n                  activeBattles: [...(prev.activeBattles || []), completeBattle],\n                }));\n                appAnalytics.trackFeatureUsage('battle_creation', 'created', {\n                  battleType: completeBattle.type,\n                });\n              }}\n              onJoinBattle={battleId => {\n                appAnalytics.trackFeatureUsage('battle_participation', 'joined', {\n                  battleId,\n                });\n              }}\n              onSendTrashTalk={(battleId, message) => {\n                appAnalytics.trackFeatureUsage('trash_talk', 'sent', {\n                  battleId,\n                  messageLength: message.length,\n                });\n              }}\n              onRefreshRewards={() => refreshRewardsSystem()}\n            />\n          </ErrorBoundary>\n        );\n      case 'settings':\n        appAnalytics.trackPageView('settings');\n        return (\n          <ErrorBoundary context=\"EnhancedSettings\">\n            <div className=\"p-4 space-y-6 max-w-4xl mx-auto\">\n              {/* Alarm Reliability Status Section */}\n              <section aria-labelledby=\"alarm-reliability-heading\">\n                <h2\n                  id=\"alarm-reliability-heading\"\n                  className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\"\n                >\n                  Alarm Reliability Status\n                </h2>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n                  Monitor your background alarm system to ensure alarms fire reliably\n                  even when switching tabs or closing the app.\n                </p>\n                <ServiceWorkerStatus />\n              </section>\n\n              {/* Divider */}\n              <hr className=\"border-gray-200 dark:border-gray-600\" />\n\n              {/* App Settings Section */}\n              <section aria-labelledby=\"app-settings-heading\">\n                <h2\n                  id=\"app-settings-heading\"\n                  className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\"\n                >\n                  App Settings\n                </h2>\n                <EnhancedSettings\n                  appState={appState}\n                  setAppState={setAppState}\n                  onUpdateProfile={auth.updateUserProfile}\n                  onSignOut={auth.signOut}\n                  isLoading={auth.isLoading}\n                  error={auth.error}\n                />\n              </section>\n            </div>\n          </ErrorBoundary>\n        );\n      case 'pricing':\n        appAnalytics.trackPageView('pricing');\n        appAnalytics.trackFeatureUsage('pricing_page', 'accessed');\n        return (\n          <ErrorBoundary context=\"PricingPage\">\n            <PricingPage\n              user={auth.user as User}\n              onUpgrade={plan => {\n                appAnalytics.trackFeatureUsage('subscription', 'upgraded', {\n                  plan: plan.id,\n                  price: plan.price,\n                });\n                // Show success message or redirect\n              }}\n              onManageSubscription={() => {\n                appAnalytics.trackFeatureUsage('subscription', 'manage_clicked');\n                // Handle subscription management\n              }}\n            />\n          </ErrorBoundary>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <ThemeProvider defaultTheme=\"light\" enableSystem={true}>\n      <ScreenReaderProvider enabled={true} verbosity=\"medium\">\n        <div\n          className=\"min-h-screen flex flex-col safe-top safe-bottom\"\n          style={{\n            backgroundColor: 'var(--theme-background)',\n            color: 'var(--theme-text-primary)',\n          }}\n        >\n          {/* Skip to main content */}\n          <a\n            href=\"#main-content\"\n            className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-lg font-medium z-50\"\n          >\n            {getA11yLabels().skipToContent}\n          </a>\n\n          {/* Header with Offline Indicator */}\n          <header\n            className=\"shadow-sm border-b\"\n            style={{\n              backgroundColor: 'var(--theme-surface)',\n              borderColor: 'var(--theme-border)',\n              color: 'var(--theme-text-primary)',\n            }}\n            role=\"banner\"\n          >\n            <div className=\"px-4 py-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <h1\n                    className=\"text-xl font-bold\"\n                    style={{ color: 'var(--theme-text-primary)' }}\n                  >\n                    🚀 {t('common:app.name')}\n                  </h1>\n                  {auth.user && (\n                    <div className=\"flex items-center gap-2\">\n                      <span\n                        className=\"text-sm\"\n                        style={{ color: 'var(--theme-text-secondary)' }}\n                      >\n                        {auth.user.name || auth.user.email}\n                      </span>\n                      {auth.user.level && (\n                        <span\n                          className=\"text-xs px-2 py-1 rounded\"\n                          style={{\n                            backgroundColor: 'var(--theme-primary-100)',\n                            color: 'var(--theme-primary-800)',\n                          }}\n                        >\n                          Level {auth.user.level}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                </div>\n                <div\n                  className=\"flex items-center gap-3\"\n                  role=\"group\"\n                  aria-label=\"Header actions\"\n                >\n                  <OfflineIndicator />\n                  {tabProtectionSettings.settings.enabled &&\n                    tabProtectionSettings.settings.visualSettings.showVisualWarning && (\n                      <TabProtectionWarning\n                        activeAlarm={appState.activeAlarm}\n                        enabledAlarms={appState.alarms.filter(alarm => alarm.enabled)}\n                        settings={tabProtectionSettings.settings}\n                      />\n                    )}\n                  <button\n                    onClick={createClickHandler(() => setShowAlarmForm(true))}\n                    className=\"alarm-button alarm-button-primary p-2 rounded-full\"\n                    aria-label=\"Add new alarm\"\n                    aria-describedby=\"add-alarm-desc\"\n                  >\n                    <Plus className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    <span id=\"add-alarm-desc\" className=\"sr-only\">\n                      Opens the new alarm creation form\n                    </span>\n                  </button>\n                  <button\n                    onClick={auth.signOut}\n                    className=\"p-2 rounded-full text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2\"\n                    aria-label=\"Sign out\"\n                    aria-describedby=\"sign-out-desc\"\n                  >\n                    <LogOut className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    <span id=\"sign-out-desc\" className=\"sr-only\">\n                      Sign out of your account\n                    </span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </header>\n\n          {/* Content */}\n          <main id=\"main-content\" className=\"flex-1 overflow-y-auto\" role=\"main\">\n            {renderContent()}\n          </main>\n\n          {/* Bottom Navigation */}\n          <nav\n            className=\"border-t\"\n            style={{\n              backgroundColor: 'var(--theme-surface)',\n              borderColor: 'var(--theme-border)',\n            }}\n            role=\"navigation\"\n            aria-label=\"Main navigation\"\n          >\n            <div\n              className=\"grid grid-cols-6 px-1 py-2\"\n              role=\"tablist\"\n              aria-label=\"App sections\"\n            >\n              <button\n                onClick={createClickHandler(() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage('navigation', 'dashboard_clicked');\n                  setAppState(prev => ({ ...prev, currentView: 'dashboard' }));\n                  AccessibilityUtils.announcePageChange('Dashboard');\n                })}\n                className=\"flex flex-col items-center py-2 rounded-lg transition-colors border-2\"\n                style={\n                  appState.currentView === 'dashboard'\n                    ? {\n                        color: 'var(--theme-primary-800)',\n                        backgroundColor: 'var(--theme-primary-100)',\n                        borderColor: 'var(--theme-primary-300)',\n                      }\n                    : {\n                        color: 'var(--theme-text-secondary)',\n                        backgroundColor: 'transparent',\n                        borderColor: 'transparent',\n                      }\n                }\n                onMouseEnter={e => {\n                  if (appState.currentView !== 'dashboard') {\n                    e.currentTarget.style.backgroundColor =\n                      'var(--theme-surface-hover)';\n                    e.currentTarget.style.color = 'var(--theme-text-primary)';\n                  }\n                }}\n                onMouseLeave={e => {\n                  if (appState.currentView !== 'dashboard') {\n                    e.currentTarget.style.backgroundColor = 'transparent';\n                    e.currentTarget.style.color = 'var(--theme-text-secondary)';\n                  }\n                }}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'dashboard'}\n                aria-current={appState.currentView === 'dashboard' ? 'page' : undefined}\n                aria-label=\"Dashboard - Overview of your alarms\"\n                aria-controls=\"main-content\"\n              >\n                <Clock className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().dashboard}\n                </span>\n              </button>\n\n              <button\n                onClick={createClickHandler(() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage('navigation', 'alarms_clicked', {\n                    totalAlarms: appState.alarms.length,\n                  });\n                  setAppState(prev => ({ ...prev, currentView: 'alarms' }));\n                  AccessibilityUtils.announcePageChange('Alarms');\n                })}\n                className=\"flex flex-col items-center py-2 rounded-lg transition-colors border-2\"\n                style={\n                  appState.currentView === 'alarms'\n                    ? {\n                        color: 'var(--theme-primary-800)',\n                        backgroundColor: 'var(--theme-primary-100)',\n                        borderColor: 'var(--theme-primary-300)',\n                      }\n                    : {\n                        color: 'var(--theme-text-secondary)',\n                        backgroundColor: 'transparent',\n                        borderColor: 'transparent',\n                      }\n                }\n                onMouseEnter={e => {\n                  if (appState.currentView !== 'alarms') {\n                    e.currentTarget.style.backgroundColor =\n                      'var(--theme-surface-hover)';\n                    e.currentTarget.style.color = 'var(--theme-text-primary)';\n                  }\n                }}\n                onMouseLeave={e => {\n                  if (appState.currentView !== 'alarms') {\n                    e.currentTarget.style.backgroundColor = 'transparent';\n                    e.currentTarget.style.color = 'var(--theme-text-secondary)';\n                  }\n                }}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'alarms'}\n                aria-current={appState.currentView === 'alarms' ? 'page' : undefined}\n                aria-label=\"Alarms - Manage your alarm list\"\n                aria-controls=\"main-content\"\n              >\n                <Bell className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().alarms}\n                </span>\n              </button>\n\n              <button\n                onClick={createClickHandler(() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage(\n                    'navigation',\n                    'advanced_scheduling_clicked'\n                  );\n                  setAppState(prev => ({\n                    ...prev,\n                    currentView: 'advanced-scheduling',\n                  }));\n                  AccessibilityUtils.announcePageChange('Advanced Scheduling');\n                })}\n                className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n                  appState.currentView === 'advanced-scheduling'\n                    ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                    : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n                }`}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'advanced-scheduling'}\n                aria-current={\n                  appState.currentView === 'advanced-scheduling' ? 'page' : undefined\n                }\n                aria-label=\"Advanced Scheduling - Create smart alarms with AI optimization\"\n                aria-controls=\"main-content\"\n              >\n                <Brain className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().advanced}\n                </span>\n              </button>\n\n              <button\n                onClick={createClickHandler(() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage('navigation', 'gaming_clicked', {\n                    currentLevel: appState.rewardSystem?.level,\n                    hasRewards: !!appState.rewardSystem?.unlockedRewards.length,\n                    activeBattles: appState.activeBattles?.length,\n                  });\n                  setAppState(prev => ({ ...prev, currentView: 'gaming' }));\n                  AccessibilityUtils.announcePageChange('Gaming Hub');\n                })}\n                className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n                  appState.currentView === 'gaming'\n                    ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                    : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n                }`}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'gaming'}\n                aria-current={appState.currentView === 'gaming' ? 'page' : undefined}\n                aria-label=\"Gaming - Rewards, battles, and community challenges\"\n                aria-controls=\"main-content\"\n              >\n                <Gamepad2 className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().gaming}\n                </span>\n              </button>\n\n              <button\n                onClick={createClickHandler(() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage('navigation', 'settings_clicked');\n                  setAppState(prev => ({ ...prev, currentView: 'settings' }));\n                  AccessibilityUtils.announcePageChange('Settings');\n                })}\n                className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n                  appState.currentView === 'settings'\n                    ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                    : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n                }`}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'settings'}\n                aria-current={appState.currentView === 'settings' ? 'page' : undefined}\n                aria-label=\"Settings - App preferences, analytics, and accessibility\"\n                aria-controls=\"main-content\"\n              >\n                <Settings className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().settings}\n                </span>\n              </button>\n\n              <button\n                onClick={() => {\n                  const appAnalytics = AppAnalyticsService.getInstance();\n                  appAnalytics.trackFeatureUsage('navigation', 'pricing_clicked');\n                  setAppState(prev => ({ ...prev, currentView: 'pricing' }));\n                  AccessibilityUtils.announcePageChange('Premium Plans');\n                }}\n                className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n                  appState.currentView === 'pricing'\n                    ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                    : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n                }`}\n                role=\"tab\"\n                aria-selected={appState.currentView === 'pricing'}\n                aria-current={appState.currentView === 'pricing' ? 'page' : undefined}\n                aria-label=\"Premium - Subscription plans and premium features\"\n                aria-controls=\"main-content\"\n              >\n                <Crown className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n                <span className=\"text-xs font-medium\">\n                  {getNavigationLabels().premium}\n                </span>\n              </button>\n            </div>\n          </nav>\n\n          {/* Alarm Form Modal */}\n          {showAlarmForm && (\n            <ErrorBoundary context=\"AlarmForm\">\n              <AlarmForm\n                alarm={editingAlarm}\n                onSave={\n                  editingAlarm\n                    ? data => handleEditAlarm(editingAlarm.id, data)\n                    : handleAddAlarm\n                }\n                onCancel={() => {\n                  setShowAlarmForm(false);\n                  setEditingAlarm(null);\n                }}\n                userId={auth.user?.id || ''}\n                user={auth.user!}\n              />\n            </ErrorBoundary>\n          )}\n\n          {/* PWA Install Prompt */}\n          <PWAInstallPrompt onInstall={handlePWAInstall} onDismiss={handlePWADismiss} />\n        </div>\n      </ScreenReaderProvider>\n    </ThemeProvider>\n  );\n}\n\n// Main App component that provides the LanguageProvider\nfunction App() {\n  return (\n    <LanguageProvider defaultLanguage=\"en\" enableAutoDetect={true}>\n      <AppContent />\n    </LanguageProvider>\n  );\n}\n\nexport default App;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/components/AdaptiveButton.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 6,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 62
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Adaptive Button Component\n * Automatically adjusts visual complexity and interactions based on device capabilities\n */\n\nimport React, { memo, useCallback, useMemo, useRef, useEffect } from 'react';\nimport {\n  useDeviceCapabilities,\n  usePerformanceOptimizations,\n} from '../hooks/useDeviceCapabilities';\nimport { useOptimizedAnimation } from '../utils/frame-rate-manager';\nimport type { AnimationConfig } from '../utils/frame-rate-manager';\n\nexport interface AdaptiveButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';\n  size?: 'sm' | 'md' | 'lg';\n  loading?: boolean;\n  icon?: React.ReactNode;\n  fullWidth?: boolean;\n  animationIntensity?: 'minimal' | 'standard' | 'enhanced';\n}\n\nexport const AdaptiveButton = memo<AdaptiveButtonProps>(\n  ({\n    children,\n    variant = 'primary',\n    size = 'md',\n    loading = false,\n    icon,\n    fullWidth = false,\n    animationIntensity = 'standard',\n    className = '',\n    disabled,\n    onClick,\n    onMouseEnter,\n    onMouseLeave,\n    ...props\n  }) => {\n    const { isLowEnd, tier } = useDeviceCapabilities();\n    const { shouldReduceAnimations } = usePerformanceOptimizations();\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    // Animation configuration based on device capabilities\n    const animationConfig: AnimationConfig = useMemo(\n      () => ({\n        duration: isLowEnd ? 100 : animationIntensity === 'enhanced' ? 300 : 200,\n        easing: 'ease-in-out',\n        complexity: isLowEnd\n          ? 'low'\n          : animationIntensity === 'minimal'\n            ? 'low'\n            : 'medium',\n        gpuAccelerated: !isLowEnd,\n        willChange: !isLowEnd,\n      }),\n      [isLowEnd, animationIntensity]\n    );\n\n    const {\n      startAnimation,\n      stopAnimation,\n      getOptimizedStyles,\n      getOptimizedClasses,\n      canAnimate,\n    } = useOptimizedAnimation(`button-${variant}-${size}`, animationConfig);\n\n    // Base styles configuration\n    const baseStyles = useMemo(() => {\n      const sizeClasses = {\n        sm: 'px-3 py-1.5 text-sm',\n        md: 'px-4 py-2 text-base',\n        lg: 'px-6 py-3 text-lg',\n      };\n\n      const variantClasses = {\n        primary: isLowEnd\n          ? 'bg-blue-600 text-white border-blue-600'\n          : 'bg-gradient-to-r from-blue-600 to-blue-700 text-white border-blue-600',\n        secondary: 'bg-gray-600 text-white border-gray-600',\n        outline: 'bg-transparent border-gray-300 text-gray-700 hover:bg-gray-50',\n        ghost: 'bg-transparent border-transparent text-gray-700 hover:bg-gray-100',\n      };\n\n      const baseClass = [\n        'inline-flex items-center justify-center',\n        'border font-medium rounded-md',\n        'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        'transition-colors duration-150',\n        sizeClasses[size],\n        variantClasses[variant],\n        fullWidth ? 'w-full' : '',\n        className,\n      ]\n        .filter(Boolean)\n        .join(' ');\n\n      return baseClass;\n    }, [variant, size, fullWidth, className, isLowEnd]);\n\n    // Enhanced styles for better devices\n    const enhancedStyles: React.CSSProperties = useMemo(() => {\n      if (isLowEnd || shouldReduceAnimations) {\n        return {};\n      }\n\n      const styles: React.CSSProperties = {\n        transition: canAnimate ? 'all 0.2s ease-in-out' : 'none',\n      };\n\n      // Add subtle effects for better devices\n      if (tier === 'high-end' && animationIntensity === 'enhanced') {\n        styles.boxShadow =\n          variant === 'primary'\n            ? '0 4px 12px rgba(59, 130, 246, 0.3)'\n            : '0 2px 4px rgba(0, 0, 0, 0.1)';\n      }\n\n      if (variant === 'primary' && !isLowEnd) {\n        styles.background = 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)';\n      }\n\n      return styles;\n    }, [\n      isLowEnd,\n      shouldReduceAnimations,\n      canAnimate,\n      tier,\n      variant,\n      animationIntensity,\n    ]);\n\n    // Optimized event handlers\n    const handleMouseEnter = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (canAnimate && !disabled && !loading) {\n          startAnimation();\n        }\n        onMouseEnter?.(event);\n      },\n      [canAnimate, disabled, loading, startAnimation, onMouseEnter]\n    );\n\n    const handleMouseLeave = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (canAnimate) {\n          stopAnimation();\n        }\n        onMouseLeave?.(event);\n      },\n      [canAnimate, stopAnimation, onMouseLeave]\n    );\n\n    const handleClick = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement>) => {\n        if (loading || disabled) return;\n\n        // Add haptic feedback on supported devices\n        if ('vibrate' in navigator && !isLowEnd) {\n          navigator.vibrate(10);\n        }\n\n        // Add ripple effect for enhanced devices\n        if (canAnimate && tier === 'high-end') {\n          createRippleEffect(event, buttonRef.current);\n        }\n\n        onClick?.(event);\n      },\n      [loading, disabled, isLowEnd, canAnimate, tier, onClick]\n    );\n\n    // Optimized styles\n    const finalStyles = getOptimizedStyles(enhancedStyles);\n    const finalClasses = getOptimizedClasses(baseStyles);\n\n    // Loading spinner component (simplified for low-end devices)\n    const LoadingSpinner = useMemo(() => {\n      if (!loading) return null;\n\n      if (isLowEnd) {\n        return <span className=\"mr-2 text-sm\">...</span>;\n      }\n\n      return (\n        <svg\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle\n            className=\"opacity-25\"\n            cx=\"12\"\n            cy=\"12\"\n            r=\"10\"\n            stroke=\"currentColor\"\n            strokeWidth=\"4\"\n          />\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          />\n        </svg>\n      );\n    }, [loading, isLowEnd]);\n\n    // Icon rendering (optimized for performance)\n    const IconElement = useMemo(() => {\n      if (!icon || loading) return null;\n\n      return <span className={children ? 'mr-2' : ''}>{icon}</span>;\n    }, [icon, loading, children]);\n\n    return (\n      <button\n        ref={buttonRef}\n        className={finalClasses}\n        style={finalStyles}\n        disabled={disabled || loading}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        onClick={handleClick}\n        {...props}\n      >\n        {LoadingSpinner}\n        {IconElement}\n        {children}\n      </button>\n    );\n  }\n);\n\nAdaptiveButton.displayName = 'AdaptiveButton';\n\n/**\n * Create ripple effect for enhanced devices\n */\nfunction createRippleEffect(\n  event: React.MouseEvent<HTMLButtonElement>,\n  element: HTMLButtonElement | null\n) {\n  if (!element) return;\n\n  const rect = element.getBoundingClientRect();\n  const x = event.clientX - rect.left;\n  const y = event.clientY - rect.top;\n\n  const ripple = document.createElement('span');\n  ripple.className = 'absolute rounded-full bg-white opacity-30 animate-ping';\n  ripple.style.left = `${x}px`;\n  ripple.style.top = `${y}px`;\n  ripple.style.width = '20px';\n  ripple.style.height = '20px';\n  ripple.style.transform = 'translate(-50%, -50%)';\n  ripple.style.pointerEvents = 'none';\n\n  const container =\n    element.style.position === 'relative' ? element : element.parentElement;\n  if (container) {\n    if (container.style.position !== 'relative') {\n      container.style.position = 'relative';\n    }\n    container.appendChild(ripple);\n\n    setTimeout(() => {\n      if (ripple.parentNode) {\n        ripple.parentNode.removeChild(ripple);\n      }\n    }, 600);\n  }\n}\n\nexport default AdaptiveButton;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/components/AlarmList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Zap' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'announceListChange' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 47,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 39
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadAlarmOptimizations'. Either include it or remove the dependency array.",
        "line": 54,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 54,
        "endColumn": 14,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [alarms, loadAlarmOptimizations]",
            "fix": { "range": [1615, 1623], "text": "[alarms, loadAlarmOptimizations]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'hours' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 377,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 377,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'minutes' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 377,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 377,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  Edit2,\n  Trash2,\n  Clock,\n  Brain,\n  MapPin,\n  TrendingUp,\n  Zap,\n  Lightbulb,\n  Sparkles,\n} from 'lucide-react';\nimport type { Alarm } from '../types';\nimport { formatTime, formatDays, getVoiceMoodConfig } from '../utils';\nimport { AdaptiveConfirmationModal } from './AdaptiveModal';\nimport {\n  useScreenReaderAnnouncements,\n  useFocusAnnouncements,\n} from '../hooks/useScreenReaderAnnouncements';\nimport MLAlarmOptimizer from '../services/ml-alarm-optimizer';\nimport PredictiveAnalyticsService from '../services/predictive-analytics-service';\nimport EnhancedLocationService from '../services/enhanced-location-service';\n\ninterface AlarmListProps {\n  alarms: Alarm[];\n  onToggleAlarm: (alarmId: string, enabled: boolean) => void;\n  onEditAlarm: (alarm: Alarm) => void;\n  onDeleteAlarm: (alarmId: string) => void;\n}\n\nconst AlarmList: React.FC<AlarmListProps> = ({\n  alarms,\n  onToggleAlarm,\n  onEditAlarm,\n  onDeleteAlarm,\n}) => {\n  const [deleteConfirmId, setDeleteConfirmId] = useState<string | null>(null);\n  const [alarmOptimizations, setAlarmOptimizations] = useState<Map<string, any>>(\n    new Map()\n  );\n  const [advancedFeaturesEnabled, setAdvancedFeaturesEnabled] = useState({\n    ml: false,\n    location: false,\n    analytics: false,\n  });\n  const { announce, announceListChange } = useScreenReaderAnnouncements();\n  const { announceEnter } = useFocusAnnouncements('Alarm List');\n\n  // Load advanced features status and optimizations\n  useEffect(() => {\n    loadAdvancedFeatureStatus();\n    loadAlarmOptimizations();\n  }, [alarms]);\n\n  // Announce when entering the alarm list\n  useEffect(() => {\n    announceEnter(`Showing ${alarms.length} alarms`);\n  }, [announceEnter, alarms.length]);\n\n  const loadAdvancedFeatureStatus = () => {\n    setAdvancedFeaturesEnabled({\n      ml: MLAlarmOptimizer.isMLEnabled(),\n      location: EnhancedLocationService.isLocationEnabled(),\n      analytics: PredictiveAnalyticsService.isAnalyticsEnabled(),\n    });\n  };\n\n  const loadAlarmOptimizations = async () => {\n    if (!MLAlarmOptimizer.isMLEnabled()) return;\n\n    const optimizations = new Map();\n    for (const alarm of alarms) {\n      try {\n        const prediction = await MLAlarmOptimizer.predictOptimalWakeTime(\n          alarm.userId || 'default',\n          alarm,\n          new Date()\n        );\n        if (prediction.adjustmentMinutes !== 0) {\n          optimizations.set(alarm.id, {\n            optimalTime: prediction.optimalWakeTime,\n            adjustment: prediction.adjustmentMinutes,\n            confidence: prediction.confidence,\n          });\n        }\n      } catch (error) {\n        console.error('Error getting optimization for alarm:', alarm.id, error);\n      }\n    }\n    setAlarmOptimizations(optimizations);\n  };\n\n  // Announce when alarm count changes\n  useEffect(() => {\n    const alarmCountMessage =\n      alarms.length === 0\n        ? 'No alarms configured'\n        : alarms.length === 1\n          ? '1 alarm configured'\n          : `${alarms.length} alarms configured`;\n\n    // Only announce if this isn't the initial load\n    const timer = setTimeout(() => {\n      announce({\n        type: 'custom',\n        message: alarmCountMessage,\n        priority: 'polite',\n      });\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, [alarms.length, announce]);\n\n  const handleDeleteConfirm = (alarmId?: string) => {\n    const idToDelete = alarmId || deleteConfirmId;\n    if (idToDelete) {\n      const alarm = alarms.find(a => a.id === idToDelete);\n      onDeleteAlarm(idToDelete);\n      setDeleteConfirmId(null);\n\n      // Announce deletion\n      if (alarm) {\n        announce({\n          type: 'alarm-delete',\n          data: { alarm },\n          priority: 'polite',\n        });\n      }\n    }\n  };\n\n  const handleDeleteCancel = () => {\n    setDeleteConfirmId(null);\n    announce({\n      type: 'custom',\n      message: 'Delete cancelled',\n      priority: 'polite',\n    });\n  };\n\n  const handleToggleAlarm = (alarmId: string, enabled: boolean) => {\n    const alarm = alarms.find(a => a.id === alarmId);\n    onToggleAlarm(alarmId, enabled);\n\n    // Announce toggle\n    if (alarm) {\n      announce({\n        type: 'alarm-toggle',\n        data: { alarm, enabled },\n        priority: 'polite',\n      });\n    }\n  };\n\n  const handleEditAlarm = (alarm: Alarm) => {\n    onEditAlarm(alarm);\n    announce({\n      type: 'custom',\n      message: `Editing alarm for ${formatTime(alarm.time)} ${alarm.label}`,\n      priority: 'polite',\n    });\n  };\n\n  const handleDeleteRequest = (alarmId: string) => {\n    const alarm = alarms.find(a => a.id === alarmId);\n    setDeleteConfirmId(alarmId);\n\n    if (alarm) {\n      announce({\n        type: 'custom',\n        message: `Delete confirmation requested for ${formatTime(alarm.time)} ${alarm.label}. Press confirm to delete or cancel to keep the alarm.`,\n        priority: 'assertive',\n      });\n    }\n  };\n  if (alarms.length === 0) {\n    return (\n      <main className=\"p-4\" role=\"main\" aria-labelledby=\"alarms-heading\">\n        <h2 id=\"alarms-heading\" className=\"sr-only\">\n          Alarms\n        </h2>\n        <div\n          className=\"alarm-card text-center py-12\"\n          role=\"region\"\n          aria-label=\"Empty alarms state\"\n        >\n          <Clock\n            className=\"w-16 h-16 mx-auto mb-4 text-gray-400 dark:text-gray-600\"\n            aria-hidden=\"true\"\n          />\n          <h3 className=\"text-xl font-semibold mb-2 text-gray-900 dark:text-white\">\n            No Alarms Yet\n          </h3>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n            Create your first alarm to get started with smart wake-ups.\n          </p>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-4\" role=\"main\" aria-labelledby=\"alarms-heading\">\n      <h2\n        id=\"alarms-heading\"\n        className=\"text-xl font-bold mb-4 text-gray-900 dark:text-white\"\n      >\n        Your Alarms ({alarms.length})\n      </h2>\n\n      <ul className=\"space-y-3\" role=\"list\" aria-label=\"List of alarms\">\n        {alarms.map(alarm => {\n          const voiceMoodConfig = getVoiceMoodConfig(alarm.voiceMood);\n\n          return (\n            <li key={alarm.id} role=\"listitem\">\n              <article\n                className=\"alarm-card\"\n                aria-labelledby={`alarm-${alarm.id}-time`}\n                aria-describedby={`alarm-${alarm.id}-details`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  {/* Left side - Time and details */}\n                  <div className=\"flex items-center gap-4\">\n                    {/* Toggle switch */}\n                    <button\n                      onClick={() => handleToggleAlarm(alarm.id, !alarm.enabled)}\n                      className={`alarm-toggle ${\n                        alarm.enabled\n                          ? 'alarm-toggle-checked'\n                          : 'alarm-toggle-unchecked'\n                      }`}\n                      role=\"switch\"\n                      aria-checked={alarm.enabled}\n                      aria-label={`${alarm.enabled ? 'Disable' : 'Enable'} alarm for ${formatTime(alarm.time)} ${alarm.label}`}\n                      aria-describedby={`alarm-${alarm.id}-status`}\n                    >\n                      <span\n                        className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${\n                          alarm.enabled ? 'translate-x-5' : 'translate-x-0'\n                        }`}\n                        aria-hidden=\"true\"\n                      />\n                      <span id={`alarm-${alarm.id}-status`} className=\"sr-only\">\n                        Alarm is {alarm.enabled ? 'enabled' : 'disabled'}\n                      </span>\n                    </button>\n\n                    {/* Alarm info */}\n                    <div className={alarm.enabled ? '' : 'opacity-50'}>\n                      <div\n                        id={`alarm-${alarm.id}-time`}\n                        className=\"text-2xl font-bold text-gray-900 dark:text-white\"\n                      >\n                        {formatTime(alarm.time)}\n                      </div>\n                      <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {alarm.label}\n                      </div>\n                      <div\n                        id={`alarm-${alarm.id}-details`}\n                        className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\"\n                      >\n                        {formatDays(alarm.days)}\n                      </div>\n\n                      {/* Voice mood and snooze info */}\n                      <div className=\"flex items-center justify-between mt-2\">\n                        <div\n                          className=\"flex items-center gap-2\"\n                          role=\"img\"\n                          aria-label={`Voice mood: ${voiceMoodConfig.name}`}\n                        >\n                          <span className=\"text-sm\" aria-hidden=\"true\">\n                            {voiceMoodConfig.icon}\n                          </span>\n                          <span className=\"text-xs text-gray-500 dark:text-gray-500\">\n                            {voiceMoodConfig.name}\n                          </span>\n                          <div\n                            className={`w-2 h-2 rounded-full ${voiceMoodConfig.color}`}\n                            aria-hidden=\"true\"\n                          />\n                        </div>\n\n                        {/* Snooze settings indicator */}\n                        {alarm.snoozeEnabled && (\n                          <div\n                            className=\"flex items-center gap-1 text-xs text-gray-500 dark:text-gray-500\"\n                            role=\"img\"\n                            aria-label={`Snooze enabled: ${alarm.snoozeInterval} minutes, max ${alarm.maxSnoozes || 'unlimited'} times`}\n                          >\n                            <span aria-hidden=\"true\">⏰</span>\n                            <span>{alarm.snoozeInterval}min</span>\n                            {alarm.maxSnoozes && alarm.maxSnoozes > 0 && (\n                              <span>({alarm.maxSnoozes}x max)</span>\n                            )}\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Advanced Features Indicators */}\n                      {(advancedFeaturesEnabled.ml ||\n                        advancedFeaturesEnabled.location ||\n                        advancedFeaturesEnabled.analytics) && (\n                        <div className=\"flex items-center gap-2 mt-2 pt-2 border-t border-gray-100 dark:border-dark-400\">\n                          <div className=\"flex items-center gap-1\">\n                            {advancedFeaturesEnabled.ml && (\n                              <div\n                                className=\"flex items-center gap-1 bg-blue-50 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 px-1.5 py-0.5 rounded text-xs\"\n                                role=\"img\"\n                                aria-label=\"AI optimization enabled\"\n                              >\n                                <Brain className=\"w-3 h-3\" aria-hidden=\"true\" />\n                                <span>AI</span>\n                              </div>\n                            )}\n                            {advancedFeaturesEnabled.location && (\n                              <div\n                                className=\"flex items-center gap-1 bg-green-50 dark:bg-green-900/30 text-green-600 dark:text-green-400 px-1.5 py-0.5 rounded text-xs\"\n                                role=\"img\"\n                                aria-label=\"Location-based scheduling enabled\"\n                              >\n                                <MapPin className=\"w-3 h-3\" aria-hidden=\"true\" />\n                                <span>Location</span>\n                              </div>\n                            )}\n                            {advancedFeaturesEnabled.analytics && (\n                              <div\n                                className=\"flex items-center gap-1 bg-purple-50 dark:bg-purple-900/30 text-purple-600 dark:text-purple-400 px-1.5 py-0.5 rounded text-xs\"\n                                role=\"img\"\n                                aria-label=\"Predictive analytics enabled\"\n                              >\n                                <TrendingUp className=\"w-3 h-3\" aria-hidden=\"true\" />\n                                <span>Analytics</span>\n                              </div>\n                            )}\n                          </div>\n\n                          {/* ML Optimization Suggestion */}\n                          {alarmOptimizations.has(alarm.id) && (\n                            <div className=\"ml-auto\">\n                              <div\n                                className=\"flex items-center gap-1 bg-yellow-50 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400 px-2 py-0.5 rounded-full text-xs font-medium\"\n                                role=\"status\"\n                                aria-label={`Optimization available: ${alarmOptimizations.get(alarm.id)?.adjustment > 0 ? '+' : ''}${alarmOptimizations.get(alarm.id)?.adjustment} minutes suggested`}\n                              >\n                                <Sparkles className=\"w-3 h-3\" aria-hidden=\"true\" />\n                                <span>\n                                  {alarmOptimizations.get(alarm.id)?.adjustment > 0\n                                    ? '+'\n                                    : ''}\n                                  {alarmOptimizations.get(alarm.id)?.adjustment}min\n                                </span>\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Right side - Action buttons */}\n                  <div\n                    className=\"flex items-center gap-2\"\n                    role=\"group\"\n                    aria-label=\"Alarm actions\"\n                  >\n                    {/* Quick optimization button */}\n                    {alarmOptimizations.has(alarm.id) && (\n                      <button\n                        onClick={() => {\n                          const optimization = alarmOptimizations.get(alarm.id);\n                          if (optimization) {\n                            // Apply the optimization\n                            const [hours, minutes] =\n                              optimization.optimalTime.split(':');\n                            const updatedAlarm = {\n                              ...alarm,\n                              time: optimization.optimalTime,\n                            };\n                            handleEditAlarm(updatedAlarm);\n                            announce({\n                              type: 'custom',\n                              message: `Applied AI optimization to ${alarm.label}. Time changed to ${optimization.optimalTime}`,\n                              priority: 'polite',\n                            });\n                          }\n                        }}\n                        className=\"alarm-button bg-gradient-to-r from-yellow-500 to-orange-500 text-white p-2 hover:from-yellow-600 hover:to-orange-600\"\n                        aria-label={`Apply AI optimization: change time to ${alarmOptimizations.get(alarm.id)?.optimalTime}`}\n                        title={`Suggested time: ${alarmOptimizations.get(alarm.id)?.optimalTime} (${Math.round(alarmOptimizations.get(alarm.id)?.confidence * 100)}% confidence)`}\n                      >\n                        <Lightbulb className=\"w-4 h-4\" aria-hidden=\"true\" />\n                      </button>\n                    )}\n\n                    <button\n                      onClick={() => handleEditAlarm(alarm)}\n                      className=\"alarm-button alarm-button-secondary p-2\"\n                      aria-label={`Edit alarm ${formatTime(alarm.time)} ${alarm.label}`}\n                    >\n                      <Edit2 className=\"w-4 h-4\" aria-hidden=\"true\" />\n                    </button>\n\n                    <button\n                      onClick={() => handleDeleteRequest(alarm.id)}\n                      className=\"alarm-button alarm-button-danger p-2\"\n                      aria-label={`Delete alarm ${formatTime(alarm.time)} ${alarm.label}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                </div>\n\n                {/* Snooze count and warnings */}\n                {alarm.snoozeCount > 0 && (\n                  <div className=\"mt-3 pt-3 border-t border-gray-200 dark:border-dark-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <div\n                        className=\"text-xs text-orange-600 dark:text-orange-400\"\n                        role=\"status\"\n                        aria-label={`This alarm has been snoozed ${alarm.snoozeCount} time${alarm.snoozeCount !== 1 ? 's' : ''}`}\n                      >\n                        ⏰ Snoozed {alarm.snoozeCount} time\n                        {alarm.snoozeCount !== 1 ? 's' : ''}\n                      </div>\n\n                      {alarm.maxSnoozes && alarm.snoozeCount >= alarm.maxSnoozes && (\n                        <div className=\"text-xs text-red-600 dark:text-red-400 font-medium\">\n                          Max snoozes reached\n                        </div>\n                      )}\n\n                      {alarm.maxSnoozes && alarm.snoozeCount < alarm.maxSnoozes && (\n                        <div className=\"text-xs text-gray-500 dark:text-gray-500\">\n                          {alarm.maxSnoozes - alarm.snoozeCount} left\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </article>\n            </li>\n          );\n        })}\n      </ul>\n\n      {/* Summary */}\n      <div\n        className=\"mt-6 alarm-card bg-gray-50 dark:bg-dark-200\"\n        role=\"status\"\n        aria-label=\"Alarms summary\"\n      >\n        <div className=\"text-center\">\n          <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {alarms.filter(a => a.enabled).length} of {alarms.length} alarms active\n          </div>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Modal */}\n      <AdaptiveConfirmationModal\n        isOpen={deleteConfirmId !== null}\n        onClose={handleDeleteCancel}\n        onConfirm={handleDeleteConfirm}\n        title=\"Delete Alarm\"\n        message=\"Are you sure you want to delete this alarm? This action cannot be undone.\"\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        announceOnOpen=\"Delete confirmation dialog opened. Are you sure you want to delete this alarm?\"\n        announceOnClose=\"Delete confirmation dialog closed\"\n      />\n    </main>\n  );\n};\n\nexport default AlarmList;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/components/SettingsPage.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LogOut' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 12,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AlertTriangle' is defined but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'availableThemes' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 80,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 57
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'tabProtectionEnabled' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 87,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setTabProtectionEnabled' is assigned a value but never used. Allowed unused elements of array destructuring must match /^_/u.",
        "line": 87,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handlePushNotificationsToggle' is assigned a value but never used. Allowed unused vars must match /^(_|unused|create.*|generate.*)/u.",
        "line": 159,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 159,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  Moon,\n  Sun,\n  Bell,\n  Smartphone,\n  Volume2,\n  Shield,\n  Info,\n  ExternalLink,\n  LogOut,\n  Bug,\n  Palette,\n  Zap,\n  Settings,\n  Eye,\n  AlertTriangle,\n} from 'lucide-react';\nimport type { AppState, VoiceMood, Theme } from '../types';\nimport { VOICE_MOODS } from '../utils';\nimport UserProfile from './UserProfile';\nimport ErrorBoundaryTest from './ErrorBoundaryTest';\nimport PushNotificationSettingsComponent from './PushNotificationSettings';\nimport PushNotificationTester from './PushNotificationTester';\nimport PersonalizationSettings from './PersonalizationSettings';\nimport TabProtectionSettings from './TabProtectionSettings';\nimport ThemeManager from './ThemeManager';\nimport CloudSyncControls from './CloudSyncControls';\nimport { useSettingsAnnouncements } from '../hooks/useSettingsAnnouncements';\nimport { useFocusAnnouncements } from '../hooks/useScreenReaderAnnouncements';\nimport { useTheme } from '../hooks/useTheme';\nimport SoundSettings from './SoundSettings';\n\ninterface SettingsPageProps {\n  appState: AppState;\n  setAppState: React.Dispatch<React.SetStateAction<AppState>>;\n  onTestVoice?: (mood: VoiceMood) => Promise<void>;\n  onUpdateProfile?: (updates: any) => Promise<void>;\n  onSignOut?: () => void;\n  isLoading?: boolean;\n  error?: string | null;\n}\n\nconst SettingsPage: React.FC<SettingsPageProps> = ({\n  appState,\n  onUpdateProfile,\n  onSignOut,\n  isLoading = false,\n  error = null,\n}) => {\n  const [activeSection, setActiveSection] = useState<string | null>(null);\n  const [showErrorTest, setShowErrorTest] = useState(false);\n\n  // Announce page entry\n  useEffect(() => {\n    announceEnter(\n      'Settings page loaded. Use tab to navigate through different setting categories.'\n    );\n  }, [announceEnter]);\n\n  // Announce permission status on component mount\n  useEffect(() => {\n    if (appState.permissions) {\n      setTimeout(() => {\n        announcePermissionStatus(\n          'Notifications',\n          appState.permissions.notifications.granted,\n          true\n        );\n        announcePermissionStatus(\n          'Microphone',\n          appState.permissions.microphone.granted,\n          false\n        );\n      }, 1000);\n    }\n  }, [appState.permissions, announcePermissionStatus]);\n  // Get theme from context instead of local state\n  const { theme: currentTheme, setTheme, availableThemes, isDarkMode } = useTheme();\n  const [defaultVoiceMood, setDefaultVoiceMood] = useState<VoiceMood>('motivational');\n  const [voiceSensitivity, setVoiceSensitivity] = useState(5);\n  const [pushNotifications, setPushNotifications] = useState(true);\n  const [hapticFeedback, setHapticFeedback] = useState(true);\n  const [snoozeDuration, setSnoozeDuration] = useState('10');\n  const [maxSnoozes, setMaxSnoozes] = useState('5');\n  const [tabProtectionEnabled, setTabProtectionEnabled] = useState(() => {\n    // Get from localStorage or default to true\n    const stored = localStorage.getItem('tabProtectionEnabled');\n    return stored !== null ? JSON.parse(stored) : true;\n  });\n\n  const {\n    announceSectionToggle,\n    announceThemeChange,\n    announceVoiceMoodChange,\n    announcePermissionStatus,\n    announceToggleSwitch,\n    announceSliderChange,\n    announceDropdownChange,\n    announceSettingDescription,\n    announceLinkActivation,\n  } = useSettingsAnnouncements();\n\n  const { announceEnter } = useFocusAnnouncements('Settings');\n\n  const toggleSection = (section: string) => {\n    const wasActive = activeSection === section;\n    const newState = wasActive ? null : section;\n    setActiveSection(newState);\n\n    // Announce section toggle\n    if (!wasActive) {\n      const sectionNames = {\n        permissions: 'Permissions',\n        appearance: 'Appearance',\n        themes: 'Themes and Appearance',\n        personalization: 'Advanced Personalization',\n        voice: 'Voice Settings',\n        notifications: 'Notifications',\n        cloudsync: 'Cloud Sync',\n        security: 'Security & Privacy',\n        about: 'About',\n      };\n      announceSectionToggle(\n        sectionNames[section as keyof typeof sectionNames] || section,\n        true\n      );\n    } else {\n      announceSectionToggle('Section', false);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent, section: string) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      toggleSection(section);\n    }\n  };\n\n  const handleThemeChange = (theme: Theme) => {\n    setTheme(theme);\n    announceThemeChange(theme);\n    console.log('Theme changed to:', theme);\n  };\n\n  const handleDefaultVoiceMoodChange = (mood: VoiceMood) => {\n    setDefaultVoiceMood(mood);\n    announceVoiceMoodChange(mood);\n    console.log('Default voice mood changed to:', mood);\n  };\n\n  // Handler functions for interactive elements\n  const handleVoiceSensitivityChange = (value: number) => {\n    setVoiceSensitivity(value);\n    announceSliderChange('Voice dismissal sensitivity', value, 1, 10);\n  };\n\n  const handlePushNotificationsToggle = () => {\n    const newValue = !pushNotifications;\n    setPushNotifications(newValue);\n    announceToggleSwitch(\n      'Push notifications',\n      newValue,\n      newValue\n        ? 'You will receive alarm notifications'\n        : 'You will not receive alarm notifications'\n    );\n  };\n\n  const handleHapticFeedbackToggle = () => {\n    const newValue = !hapticFeedback;\n    setHapticFeedback(newValue);\n    announceToggleSwitch(\n      'Haptic feedback',\n      newValue,\n      newValue\n        ? 'Device will vibrate on interactions'\n        : 'Device will not vibrate on interactions'\n    );\n  };\n\n  const handleSnoozeDurationChange = (value: string) => {\n    setSnoozeDuration(value);\n    announceDropdownChange(\n      'Snooze duration',\n      `${value} minutes`,\n      `Alarms will snooze for ${value} minutes when snoozed`\n    );\n  };\n\n  const handleMaxSnoozesChange = (value: string) => {\n    setMaxSnoozes(value);\n    const description =\n      value === '-1'\n        ? 'Alarms can be snoozed unlimited times'\n        : `Alarms can be snoozed up to ${value} times before stopping`;\n    announceDropdownChange(\n      'Maximum snoozes',\n      value === '-1' ? 'Unlimited' : `${value} times`,\n      description\n    );\n  };\n\n  const handleLinkClick = (linkName: string) => {\n    announceLinkActivation(linkName, true);\n    // In a real app, this would open the link\n    console.log(`Opening ${linkName}`);\n  };\n\n  // Click-to-hear functionality for settings descriptions\n  const handleSettingDescriptionClick = (\n    settingName: string,\n    currentValue: string,\n    description: string\n  ) => {\n    announceSettingDescription(settingName, currentValue, description);\n  };\n\n  const renderPermissionStatus = (granted: boolean, label: string) => (\n    <div\n      className={`flex items-center gap-2 text-sm ${\n        granted\n          ? 'text-green-600 dark:text-green-400'\n          : 'text-red-600 dark:text-red-400'\n      }`}\n      role=\"status\"\n      aria-label={`${label} permission is ${granted ? 'granted' : 'denied'}`}\n    >\n      <div\n        className={`w-2 h-2 rounded-full ${granted ? 'bg-green-500' : 'bg-red-500'}`}\n        role=\"img\"\n        aria-label={granted ? 'Permission granted' : 'Permission denied'}\n      />\n      <span>{granted ? `${label} granted` : `${label} denied`}</span>\n    </div>\n  );\n\n  return (\n    <>\n      <main className=\"p-4 space-y-4\" role=\"main\" aria-labelledby=\"settings-heading\">\n        <h1\n          id=\"settings-heading\"\n          className=\"text-xl font-bold mb-6 text-gray-900 dark:text-white\"\n        >\n          Settings\n        </h1>\n\n        {/* User Profile Section */}\n        {appState.user && (\n          <section className=\"mb-6\">\n            <UserProfile\n              user={appState.user}\n              onUpdateProfile={onUpdateProfile || (() => Promise.resolve())}\n              onSignOut={onSignOut || (() => {})}\n              isLoading={isLoading}\n              error={error}\n            />\n          </section>\n        )}\n\n        {/* App Permissions */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('permissions')}\n            onKeyDown={e => handleKeyDown(e, 'permissions')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'permissions'}\n            aria-controls=\"permissions-content\"\n            aria-labelledby=\"permissions-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Shield\n                className=\"w-5 h-5 text-blue-600 dark:text-blue-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"permissions-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Permissions\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'permissions' && (\n            <div\n              id=\"permissions-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-3\"\n              role=\"region\"\n              aria-labelledby=\"permissions-heading\"\n            >\n              {renderPermissionStatus(\n                appState.permissions.notifications.granted,\n                'Notifications'\n              )}\n              {renderPermissionStatus(\n                appState.permissions.microphone.granted,\n                'Microphone'\n              )}\n\n              <div\n                className=\"text-xs text-gray-500 dark:text-gray-400 mt-3\"\n                role=\"note\"\n              >\n                If permissions are denied, some features may not work properly. You can\n                enable them in your device settings.\n              </div>\n            </div>\n          )}\n        </section>\n\n        {/* Appearance */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('appearance')}\n            onKeyDown={e => handleKeyDown(e, 'appearance')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'appearance'}\n            aria-controls=\"appearance-content\"\n            aria-labelledby=\"appearance-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Sun\n                className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"appearance-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Appearance\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'appearance' && (\n            <div\n              id=\"appearance-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-4\"\n              role=\"region\"\n              aria-labelledby=\"appearance-heading\"\n            >\n              <fieldset>\n                <legend className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                  Theme Selection\n                </legend>\n\n                {/* Primary Theme Options */}\n                <div className=\"mb-4\">\n                  <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                    Primary Themes\n                  </div>\n                  <div\n                    className=\"grid grid-cols-3 gap-2\"\n                    role=\"radiogroup\"\n                    aria-label=\"Primary theme selection\"\n                  >\n                    {['light', 'dark', 'auto'].map(theme => (\n                      <button\n                        key={theme}\n                        onClick={() => handleThemeChange(theme as Theme)}\n                        className={`alarm-button ${\n                          currentTheme === theme\n                            ? 'alarm-button-primary'\n                            : 'alarm-button-secondary'\n                        } py-3 text-sm capitalize flex flex-col items-center gap-1`}\n                        role=\"radio\"\n                        aria-checked={theme === currentTheme}\n                        aria-label={`${theme} theme`}\n                        aria-describedby={`theme-${theme}-desc`}\n                      >\n                        {theme === 'light' && (\n                          <Sun className=\"w-4 h-4\" aria-hidden=\"true\" />\n                        )}\n                        {theme === 'dark' && (\n                          <Moon className=\"w-4 h-4\" aria-hidden=\"true\" />\n                        )}\n                        {theme === 'auto' && (\n                          <Smartphone className=\"w-4 h-4\" aria-hidden=\"true\" />\n                        )}\n                        <span className=\"text-xs\">{theme}</span>\n                        <span id={`theme-${theme}-desc`} className=\"sr-only\">\n                          {theme === 'light' && 'Use bright colors for the interface'}\n                          {theme === 'dark' && 'Use dark colors for the interface'}\n                          {theme === 'auto' && 'Follow system theme preferences'}\n                        </span>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Accessibility Themes */}\n                <div className=\"mb-4\">\n                  <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                    Accessibility\n                  </div>\n                  <div className=\"grid grid-cols-1 gap-2\">\n                    <button\n                      onClick={() => handleThemeChange('high-contrast')}\n                      className={`alarm-button ${\n                        currentTheme === 'high-contrast'\n                          ? 'alarm-button-primary'\n                          : 'alarm-button-secondary'\n                      } py-3 text-sm flex items-center gap-2`}\n                      role=\"radio\"\n                      aria-checked={currentTheme === 'high-contrast'}\n                      aria-label=\"High contrast theme for better accessibility\"\n                    >\n                      <Zap className=\"w-4 h-4\" aria-hidden=\"true\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">High Contrast</div>\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          Enhanced visibility and contrast\n                        </div>\n                      </div>\n                    </button>\n                    <button\n                      onClick={() => handleThemeChange('focus')}\n                      className={`alarm-button ${\n                        currentTheme === 'focus'\n                          ? 'alarm-button-primary'\n                          : 'alarm-button-secondary'\n                      } py-3 text-sm flex items-center gap-2`}\n                      role=\"radio\"\n                      aria-checked={currentTheme === 'focus'}\n                      aria-label=\"Focus theme for minimal distraction\"\n                    >\n                      <Eye className=\"w-4 h-4\" aria-hidden=\"true\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium\">Focus</div>\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          Minimal distraction for concentration\n                        </div>\n                      </div>\n                    </button>\n                  </div>\n                </div>\n\n                {/* Specialized Themes */}\n                <div className=\"mb-4\">\n                  <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                    Specialized\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[\n                      {\n                        id: 'gaming',\n                        icon: '🎮',\n                        name: 'Gaming',\n                        desc: 'Dark with neon accents',\n                      },\n                      {\n                        id: 'professional',\n                        icon: '💼',\n                        name: 'Professional',\n                        desc: 'Clean business theme',\n                      },\n                      {\n                        id: 'retro',\n                        icon: '📺',\n                        name: 'Retro',\n                        desc: '80s inspired colors',\n                      },\n                      {\n                        id: 'cyberpunk',\n                        icon: '🌆',\n                        name: 'Cyberpunk',\n                        desc: 'Futuristic neon theme',\n                      },\n                    ].map(theme => (\n                      <button\n                        key={theme.id}\n                        onClick={() => handleThemeChange(theme.id as Theme)}\n                        className={`alarm-button ${\n                          currentTheme === theme.id\n                            ? 'alarm-button-primary'\n                            : 'alarm-button-secondary'\n                        } py-2 text-sm flex items-center gap-2 text-left`}\n                        role=\"radio\"\n                        aria-checked={currentTheme === theme.id}\n                        aria-label={`${theme.name}: ${theme.desc}`}\n                      >\n                        <span className=\"text-lg\" aria-hidden=\"true\">\n                          {theme.icon}\n                        </span>\n                        <div>\n                          <div className=\"font-medium text-xs\">{theme.name}</div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 leading-tight\">\n                            {theme.desc}\n                          </div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Seasonal Themes */}\n                <div className=\"mb-4\">\n                  <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                    Seasonal\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {[\n                      {\n                        id: 'spring',\n                        icon: '🌸',\n                        name: 'Spring',\n                        desc: 'Fresh greens and pastels',\n                      },\n                      {\n                        id: 'summer',\n                        icon: '☀️',\n                        name: 'Summer',\n                        desc: 'Bright blues and oranges',\n                      },\n                      {\n                        id: 'autumn',\n                        icon: '🍁',\n                        name: 'Autumn',\n                        desc: 'Warm browns and golds',\n                      },\n                      {\n                        id: 'winter',\n                        icon: '❄️',\n                        name: 'Winter',\n                        desc: 'Cool blues and whites',\n                      },\n                    ].map(theme => (\n                      <button\n                        key={theme.id}\n                        onClick={() => handleThemeChange(theme.id as Theme)}\n                        className={`alarm-button ${\n                          currentTheme === theme.id\n                            ? 'alarm-button-primary'\n                            : 'alarm-button-secondary'\n                        } py-2 text-sm flex items-center gap-2 text-left`}\n                        role=\"radio\"\n                        aria-checked={currentTheme === theme.id}\n                        aria-label={`${theme.name}: ${theme.desc}`}\n                      >\n                        <span className=\"text-lg\" aria-hidden=\"true\">\n                          {theme.icon}\n                        </span>\n                        <div>\n                          <div className=\"font-medium text-xs\">{theme.name}</div>\n                          <div className=\"text-xs text-gray-500 dark:text-gray-400 leading-tight\">\n                            {theme.desc}\n                          </div>\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Nature & Abstract Themes */}\n                <div>\n                  <div className=\"text-xs font-medium text-gray-600 dark:text-gray-400 mb-2\">\n                    Nature & Abstract\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {['nature', 'ocean', 'sunset', 'cosmic', 'gradient', 'neon'].map(\n                      theme => {\n                        const themeInfo = {\n                          nature: {\n                            icon: '🌿',\n                            name: 'Nature',\n                            desc: 'Earth tones and natural colors',\n                          },\n                          ocean: {\n                            icon: '🌊',\n                            name: 'Ocean',\n                            desc: 'Cool blues and aquatic vibes',\n                          },\n                          sunset: {\n                            icon: '🌅',\n                            name: 'Sunset',\n                            desc: 'Warm oranges and golden hues',\n                          },\n                          cosmic: {\n                            icon: '🌌',\n                            name: 'Cosmic',\n                            desc: 'Deep space purples and blues',\n                          },\n                          gradient: {\n                            icon: '🎨',\n                            name: 'Gradient',\n                            desc: 'Smooth color transitions',\n                          },\n                          neon: {\n                            icon: '⚡',\n                            name: 'Neon',\n                            desc: 'Bright electric colors',\n                          },\n                        }[theme] || { icon: '🎨', name: theme, desc: 'Custom theme' };\n\n                        return (\n                          <button\n                            key={theme}\n                            onClick={() => handleThemeChange(theme as Theme)}\n                            className={`alarm-button ${\n                              currentTheme === theme\n                                ? 'alarm-button-primary'\n                                : 'alarm-button-secondary'\n                            } py-2 text-sm flex items-center gap-2 text-left`}\n                            role=\"radio\"\n                            aria-checked={currentTheme === theme}\n                            aria-label={`${themeInfo.name}: ${themeInfo.desc}`}\n                          >\n                            <span className=\"text-lg\" aria-hidden=\"true\">\n                              {themeInfo.icon}\n                            </span>\n                            <div>\n                              <div className=\"font-medium text-xs\">\n                                {themeInfo.name}\n                              </div>\n                              <div className=\"text-xs text-gray-500 dark:text-gray-400 leading-tight\">\n                                {themeInfo.desc}\n                              </div>\n                            </div>\n                          </button>\n                        );\n                      }\n                    )}\n                  </div>\n                </div>\n\n                {/* Current Theme Info */}\n                <div className=\"mt-4 p-3 bg-gray-50 dark:bg-dark-800 rounded-lg\">\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Palette className=\"w-4 h-4 text-blue-500\" aria-hidden=\"true\" />\n                    <div>\n                      <div className=\"font-medium text-gray-900 dark:text-white\">\n                        Current:{' '}\n                        {currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1)}\n                      </div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        {isDarkMode ? 'Dark mode active' : 'Light mode active'}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </fieldset>\n            </div>\n          )}\n        </section>\n\n        {/* Themes & Appearance */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('themes')}\n            onKeyDown={e => handleKeyDown(e, 'themes')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'themes'}\n            aria-controls=\"themes-content\"\n            aria-labelledby=\"themes-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Palette\n                className=\"w-5 h-5 text-purple-600 dark:text-purple-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"themes-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Themes & Appearance\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'themes' && (\n            <div\n              id=\"themes-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300\"\n              role=\"region\"\n              aria-labelledby=\"themes-heading\"\n            >\n              <ThemeManager compact />\n            </div>\n          )}\n        </section>\n\n        {/* Advanced Personalization */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('personalization')}\n            onKeyDown={e => handleKeyDown(e, 'personalization')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'personalization'}\n            aria-controls=\"personalization-content\"\n            aria-labelledby=\"personalization-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Settings\n                className=\"w-5 h-5 text-indigo-600 dark:text-indigo-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"personalization-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Advanced Personalization\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'personalization' && (\n            <div\n              id=\"personalization-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300\"\n              role=\"region\"\n              aria-labelledby=\"personalization-heading\"\n            >\n              <PersonalizationSettings />\n            </div>\n          )}\n        </section>\n\n        {/* Cloud Sync */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('cloudsync')}\n            onKeyDown={e => handleKeyDown(e, 'cloudsync')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'cloudsync'}\n            aria-controls=\"cloudsync-content\"\n            aria-labelledby=\"cloudsync-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <svg\n                className=\"w-5 h-5 text-blue-600 dark:text-blue-400\"\n                aria-hidden=\"true\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10\"\n                />\n              </svg>\n              <span\n                id=\"cloudsync-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Cloud Sync\n              </span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n                Sync across devices\n              </span>\n              <svg\n                className={`w-4 h-4 transition-transform duration-200 text-gray-400 ${\n                  activeSection === 'cloudsync' ? 'rotate-180' : ''\n                }`}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M19 9l-7 7-7-7\"\n                />\n              </svg>\n            </div>\n          </button>\n\n          {activeSection === 'cloudsync' && (\n            <div\n              id=\"cloudsync-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300\"\n              role=\"region\"\n              aria-labelledby=\"cloudsync-heading\"\n            >\n              <CloudSyncControls />\n            </div>\n          )}\n        </section>\n\n        {/* Voice Settings */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('voice')}\n            onKeyDown={e => handleKeyDown(e, 'voice')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'voice'}\n            aria-controls=\"voice-content\"\n            aria-labelledby=\"voice-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Volume2\n                className=\"w-5 h-5 text-purple-600 dark:text-purple-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"voice-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Voice Settings\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'voice' && (\n            <div\n              id=\"voice-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-4\"\n              role=\"region\"\n              aria-labelledby=\"voice-heading\"\n            >\n              <fieldset>\n                <legend className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3 block\">\n                  Default Voice Mood\n                </legend>\n                <div\n                  className=\"grid grid-cols-2 gap-2\"\n                  role=\"radiogroup\"\n                  aria-label=\"Default voice mood selection\"\n                >\n                  {VOICE_MOODS.slice(0, 4).map(mood => (\n                    <button\n                      key={mood.id}\n                      onClick={() => handleDefaultVoiceMoodChange(mood.id)}\n                      className={`alarm-button ${defaultVoiceMood === mood.id ? 'alarm-button-primary' : 'alarm-button-secondary'} p-3 text-left`}\n                      role=\"radio\"\n                      aria-checked={mood.id === defaultVoiceMood}\n                      aria-label={`${mood.name}: ${mood.description}`}\n                      aria-describedby={`mood-${mood.id}-desc`}\n                    >\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <span aria-hidden=\"true\">{mood.icon}</span>\n                        <span className=\"text-sm font-medium\">{mood.name}</span>\n                      </div>\n                      <div\n                        id={`mood-${mood.id}-desc`}\n                        className=\"text-xs text-gray-500 dark:text-gray-400\"\n                      >\n                        {mood.description}\n                      </div>\n                    </button>\n                  ))}\n                </div>\n              </fieldset>\n\n              <div>\n                <label\n                  htmlFor=\"voice-sensitivity\"\n                  className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\"\n                >\n                  Voice Dismissal Sensitivity\n                </label>\n                <input\n                  id=\"voice-sensitivity\"\n                  type=\"range\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={voiceSensitivity}\n                  onChange={e => handleVoiceSensitivityChange(parseInt(e.target.value))}\n                  className=\"w-full h-2 bg-gray-200 dark:bg-dark-300 rounded-lg appearance-none cursor-pointer\"\n                  aria-describedby=\"sensitivity-help\"\n                  aria-valuemin={1}\n                  aria-valuemax={10}\n                  aria-valuenow={voiceSensitivity}\n                  aria-valuetext={`${voiceSensitivity} out of 10, ${voiceSensitivity <= 2 ? 'Very low' : voiceSensitivity <= 4 ? 'Low' : voiceSensitivity <= 6 ? 'Medium' : voiceSensitivity <= 8 ? 'High' : 'Very high'} sensitivity`}\n                />\n                <div\n                  id=\"sensitivity-help\"\n                  className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\"\n                >\n                  <span>Low</span>\n                  <span>High</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </section>\n\n        {/* Sound Settings */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('sounds')}\n            onKeyDown={e => handleKeyDown(e, 'sounds')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'sounds'}\n            aria-controls=\"sounds-content\"\n            aria-labelledby=\"sounds-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Volume2\n                className=\"w-5 h-5 text-purple-600 dark:text-purple-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"sounds-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Sound Effects\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'sounds' && (\n            <div\n              id=\"sounds-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300\"\n              role=\"region\"\n              aria-labelledby=\"sounds-heading\"\n            >\n              <SoundSettings userId={appState.user?.id} />\n            </div>\n          )}\n        </section>\n\n        {/* Notification Settings */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('notifications')}\n            onKeyDown={e => handleKeyDown(e, 'notifications')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'notifications'}\n            aria-controls=\"notifications-content\"\n            aria-labelledby=\"notifications-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Bell\n                className=\"w-5 h-5 text-green-600 dark:text-green-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"notifications-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Notifications\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'notifications' && (\n            <div\n              id=\"notifications-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-6\"\n              role=\"region\"\n              aria-labelledby=\"notifications-heading\"\n            >\n              {/* Push Notification Settings */}\n              <div>\n                <PushNotificationSettingsComponent className=\"\" />\n              </div>\n\n              {/* Push Notification Tester */}\n              <div>\n                <PushNotificationTester />\n              </div>\n\n              {/* Legacy Settings */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900 dark:text-white\">\n                  Alarm Settings\n                </h4>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"font-medium text-gray-900 dark:text-white\">\n                      Haptic Feedback\n                    </div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      Vibrate on interactions\n                    </div>\n                  </div>\n                  <button\n                    onClick={handleHapticFeedbackToggle}\n                    className={`alarm-toggle ${hapticFeedback ? 'alarm-toggle-checked' : 'alarm-toggle-unchecked'}`}\n                    role=\"switch\"\n                    aria-checked={hapticFeedback}\n                    aria-label={`Haptic feedback ${hapticFeedback ? 'enabled' : 'disabled'}`}\n                    aria-describedby=\"haptic-desc\"\n                    onKeyDown={e => {\n                      if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        handleSettingDescriptionClick(\n                          'Haptic feedback',\n                          hapticFeedback ? 'enabled' : 'disabled',\n                          'Device will vibrate when you interact with buttons and controls'\n                        );\n                      }\n                    }}\n                  >\n                    <span\n                      className={`inline-block h-5 w-5 transform rounded-full bg-white shadow ring-0 transition duration-200 ease-in-out ${hapticFeedback ? 'translate-x-5' : 'translate-x-0'}`}\n                      aria-hidden=\"true\"\n                    />\n                    <span id=\"haptic-desc\" className=\"sr-only\">\n                      Toggle haptic feedback on or off\n                    </span>\n                  </button>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"snooze-duration\"\n                    className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\"\n                  >\n                    Snooze Duration (minutes)\n                  </label>\n                  <select\n                    id=\"snooze-duration\"\n                    value={snoozeDuration}\n                    onChange={e => handleSnoozeDurationChange(e.target.value)}\n                    className=\"alarm-input\"\n                    aria-describedby=\"snooze-duration-desc\"\n                  >\n                    <option value=\"5\">5 minutes</option>\n                    <option value=\"10\">10 minutes</option>\n                    <option value=\"15\">15 minutes</option>\n                  </select>\n                  <div id=\"snooze-duration-desc\" className=\"sr-only\">\n                    How long to snooze alarms when snooze button is pressed\n                  </div>\n                </div>\n\n                <div>\n                  <label\n                    htmlFor=\"max-snoozes\"\n                    className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block\"\n                  >\n                    Maximum Snoozes\n                  </label>\n                  <select\n                    id=\"max-snoozes\"\n                    value={maxSnoozes}\n                    onChange={e => handleMaxSnoozesChange(e.target.value)}\n                    className=\"alarm-input\"\n                    aria-describedby=\"max-snoozes-desc\"\n                  >\n                    <option value=\"3\">3 times</option>\n                    <option value=\"5\">5 times</option>\n                    <option value=\"10\">10 times</option>\n                    <option value=\"-1\">Unlimited</option>\n                  </select>\n                  <div id=\"max-snoozes-desc\" className=\"sr-only\">\n                    Maximum number of times an alarm can be snoozed before it stops\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </section>\n\n        {/* Security & Privacy */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('security')}\n            onKeyDown={e => handleKeyDown(e, 'security')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'security'}\n            aria-controls=\"security-content\"\n            aria-labelledby=\"security-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Shield\n                className=\"w-5 h-5 text-blue-600 dark:text-blue-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"security-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                Security & Privacy\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'security' && (\n            <div\n              id=\"security-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-4\"\n              role=\"region\"\n              aria-labelledby=\"security-heading\"\n            >\n              <TabProtectionSettings />\n            </div>\n          )}\n        </section>\n\n        {/* About */}\n        <section className=\"alarm-card\">\n          <button\n            onClick={() => toggleSection('about')}\n            onKeyDown={e => handleKeyDown(e, 'about')}\n            className=\"w-full flex items-center justify-between p-1\"\n            aria-expanded={activeSection === 'about'}\n            aria-controls=\"about-content\"\n            aria-labelledby=\"about-heading\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <Info\n                className=\"w-5 h-5 text-gray-600 dark:text-gray-400\"\n                aria-hidden=\"true\"\n              />\n              <span\n                id=\"about-heading\"\n                className=\"font-medium text-gray-900 dark:text-white\"\n              >\n                About\n              </span>\n            </div>\n          </button>\n\n          {activeSection === 'about' && (\n            <div\n              id=\"about-content\"\n              className=\"mt-4 pt-4 border-t border-gray-200 dark:border-dark-300 space-y-4\"\n              role=\"region\"\n              aria-labelledby=\"about-heading\"\n            >\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n                  Smart Alarm\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n                  Version 1.0.0\n                </div>\n                <div className=\"text-sm text-gray-700 dark:text-gray-300 mb-6\">\n                  Wake up with personalized voice messages and intelligent features.\n                </div>\n              </div>\n\n              <nav\n                className=\"space-y-3\"\n                role=\"navigation\"\n                aria-label=\"App information links\"\n              >\n                <button\n                  onClick={() => handleLinkClick('Privacy Policy')}\n                  className=\"alarm-button alarm-button-secondary w-full flex items-center justify-center gap-2\"\n                  aria-label=\"Open privacy policy in new window\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" aria-hidden=\"true\" />\n                  Privacy Policy\n                </button>\n\n                <button\n                  onClick={() => handleLinkClick('Terms of Service')}\n                  className=\"alarm-button alarm-button-secondary w-full flex items-center justify-center gap-2\"\n                  aria-label=\"Open terms of service in new window\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" aria-hidden=\"true\" />\n                  Terms of Service\n                </button>\n\n                <button\n                  onClick={() => handleLinkClick('Contact Support')}\n                  className=\"alarm-button alarm-button-secondary w-full flex items-center justify-center gap-2\"\n                  aria-label=\"Contact support team\"\n                >\n                  <ExternalLink className=\"w-4 h-4\" aria-hidden=\"true\" />\n                  Contact Support\n                </button>\n              </nav>\n            </div>\n          )}\n        </section>\n\n        {/* Development Tools - Only shown in development mode */}\n        {process.env.NODE_ENV === 'development' && (\n          <section className=\"alarm-card bg-orange-50 dark:bg-orange-900/10 border-orange-200 dark:border-orange-800\">\n            <button\n              onClick={() => toggleSection('development')}\n              onKeyDown={e => handleKeyDown(e, 'development')}\n              className=\"w-full flex items-center justify-between p-1\"\n              aria-expanded={activeSection === 'development'}\n              aria-controls=\"development-content\"\n              aria-labelledby=\"development-heading\"\n            >\n              <div className=\"flex items-center gap-3\">\n                <Bug\n                  className=\"w-5 h-5 text-orange-600 dark:text-orange-400\"\n                  aria-hidden=\"true\"\n                />\n                <span\n                  id=\"development-heading\"\n                  className=\"font-medium text-orange-900 dark:text-orange-100\"\n                >\n                  Development Tools\n                </span>\n              </div>\n            </button>\n\n            {activeSection === 'development' && (\n              <div\n                id=\"development-content\"\n                className=\"mt-4 pt-4 border-t border-orange-200 dark:border-orange-700 space-y-4\"\n                role=\"region\"\n                aria-labelledby=\"development-heading\"\n              >\n                <div className=\"bg-orange-100 dark:bg-orange-900/20 rounded-lg p-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <Bug className=\"w-5 h-5 text-orange-600 dark:text-orange-400 flex-shrink-0 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-medium text-orange-900 dark:text-orange-100 mb-1\">\n                        Error Boundary Testing\n                      </h4>\n                      <p className=\"text-orange-800 dark:text-orange-200 text-sm mb-3\">\n                        Test error boundaries by triggering intentional errors. This\n                        helps ensure the app handles errors gracefully.\n                      </p>\n                      <button\n                        onClick={() => setShowErrorTest(true)}\n                        className=\"bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors\"\n                      >\n                        Open Error Boundary Test\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </section>\n        )}\n\n        {/* Footer */}\n        <footer\n          className=\"text-center text-xs text-gray-500 dark:text-gray-400 pt-6\"\n          role=\"contentinfo\"\n        >\n          Made with ❤️ for better mornings\n        </footer>\n      </main>\n\n      {/* Error Boundary Test Modal */}\n      {showErrorTest && <ErrorBoundaryTest onClose={() => setShowErrorTest(false)} />}\n    </>\n  );\n};\n\nexport default SettingsPage;\n",
    "usedDeprecatedRules": []
  }
]
