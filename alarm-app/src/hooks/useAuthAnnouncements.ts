import { useCallback } from 'react';\nimport { useScreenReaderAnnouncements } from './useScreenReaderAnnouncements';\n\nexport function useAuthAnnouncements() {\n  const { announce } = useScreenReaderAnnouncements();\n\n  // Login announcements\n  const announceLoginStart = useCallback((method: 'email' | 'google' | 'apple' | 'biometric') => {\n    const methodNames = {\n      email: 'email and password',\n      google: 'Google account',\n      apple: 'Apple ID',\n      biometric: 'biometric authentication'\n    };\n    announce(`Signing in with ${methodNames[method]}. Please wait...`, 'polite');\n  }, [announce]);\n\n  const announceLoginSuccess = useCallback((username?: string) => {\n    let message = 'Login successful!';\n    if (username) {\n      message += ` Welcome back, ${username}.`;\n    }\n    message += ' Redirecting to your dashboard.';\n    announce(message, 'assertive');\n  }, [announce]);\n\n  const announceLoginError = useCallback((error: string, suggestion?: string) => {\n    let message = `Login failed: ${error}.`;\n    if (suggestion) {\n      message += ` ${suggestion}`;\n    }\n    announce(message, 'assertive');\n  }, [announce]);\n\n  // Registration announcements\n  const announceRegistrationStart = useCallback(() => {\n    announce('Creating your account. Please wait...', 'polite');\n  }, [announce]);\n\n  const announceRegistrationSuccess = useCallback((email: string) => {\n    announce(\n      `Account created successfully for ${email}! Please check your email for verification instructions.`,\n      'assertive'\n    );\n  }, [announce]);\n\n  const announceRegistrationError = useCallback((error: string) => {\n    announce(`Registration failed: ${error}. Please correct the errors and try again.`, 'assertive');\n  }, [announce]);\n\n  // Password reset announcements\n  const announcePasswordResetRequest = useCallback((email: string) => {\n    announce(\n      `Password reset email sent to ${email}. Please check your inbox and follow the instructions.`,\n      'polite'\n    );\n  }, [announce]);\n\n  const announcePasswordResetSuccess = useCallback(() => {\n    announce('Password reset successful! You can now sign in with your new password.', 'assertive');\n  }, [announce]);\n\n  const announcePasswordResetError = useCallback((error: string) => {\n    announce(`Password reset failed: ${error}. Please try again.`, 'assertive');\n  }, [announce]);\n\n  // Email verification announcements\n  const announceEmailVerificationSent = useCallback((email: string) => {\n    announce(\n      `Verification email sent to ${email}. Please check your inbox and click the verification link.`,\n      'polite'\n    );\n  }, [announce]);\n\n  const announceEmailVerificationSuccess = useCallback() => {\n    announce('Email verified successfully! Your account is now fully activated.', 'assertive');\n  }, [announce]);\n\n  const announceEmailVerificationError = useCallback((error: string) => {\n    announce(`Email verification failed: ${error}. Please try again or contact support.`, 'assertive');\n  }, [announce]);\n\n  // Biometric authentication announcements\n  const announceBiometricPrompt = useCallback((type: 'fingerprint' | 'face' | 'voice') => {\n    const typeNames = {\n      fingerprint: 'fingerprint scanner',\n      face: 'face recognition camera',\n      voice: 'voice recognition microphone'\n    };\n    announce(`Please use the ${typeNames[type]} to authenticate.`, 'polite');\n  }, [announce]);\n\n  const announceBiometricSuccess = useCallback((type: 'fingerprint' | 'face' | 'voice') => {\n    announce(`${type} authentication successful!`, 'polite');\n  }, [announce]);\n\n  const announceBiometricError = useCallback((type: 'fingerprint' | 'face' | 'voice', error: string) => {\n    announce(`${type} authentication failed: ${error}. Please try again or use alternative method.`, 'assertive');\n  }, [announce]);\n\n  // Two-factor authentication announcements\n  const announceTwoFactorPrompt = useCallback((method: 'sms' | 'email' | 'authenticator') => {\n    const methodNames = {\n      sms: 'SMS text message',\n      email: 'email',\n      authenticator: 'authenticator app'\n    };\n    announce(`Please enter the verification code sent to your ${methodNames[method]}.`, 'polite');\n  }, [announce]);\n\n  const announceTwoFactorSuccess = useCallback() => {\n    announce('Two-factor authentication successful!', 'polite');\n  }, [announce]);\n\n  const announceTwoFactorError = useCallback((error: string, attemptsRemaining?: number) => {\n    let message = `Two-factor authentication failed: ${error}.`;\n    if (attemptsRemaining !== undefined && attemptsRemaining > 0) {\n      message += ` You have ${attemptsRemaining} attempt${attemptsRemaining === 1 ? '' : 's'} remaining.`;\n    } else if (attemptsRemaining === 0) {\n      message += ' Maximum attempts reached. Please try again later.';\n    }\n    announce(message, 'assertive');\n  }, [announce]);\n\n  // Session management announcements\n  const announceSessionExpiring = useCallback((minutesRemaining: number) => {\n    announce(\n      `Your session will expire in ${minutesRemaining} minute${minutesRemaining === 1 ? '' : 's'}. Please save your work and extend your session if needed.`,\n      'assertive'\n    );\n  }, [announce]);\n\n  const announceSessionExpired = useCallback() => {\n    announce('Your session has expired for security reasons. Please sign in again to continue.', 'assertive');\n  }, [announce]);\n\n  const announceSessionExtended = useCallback() => {\n    announce('Session extended successfully. You can continue working.', 'polite');\n  }, [announce]);\n\n  // Logout announcements\n  const announceLogoutStart = useCallback() => {\n    announce('Signing out. Please wait...', 'polite');\n  }, [announce]);\n\n  const announceLogoutSuccess = useCallback() => {\n    announce('You have been signed out successfully. Thank you for using the app!', 'polite');\n  }, [announce]);\n\n  const announceLogoutError = useCallback((error: string) => {\n    announce(`Logout failed: ${error}. Your session may still be active.`, 'assertive');\n  }, [announce]);\n\n  // Account security announcements\n  const announcePasswordStrength = useCallback((strength: 'weak' | 'fair' | 'good' | 'strong') => {\n    const messages = {\n      weak: 'Password strength: Weak. Consider using a longer password with mixed characters.',\n      fair: 'Password strength: Fair. Add numbers and special characters for better security.',\n      good: 'Password strength: Good. Your password meets most security requirements.',\n      strong: 'Password strength: Strong. Your password is secure!'\n    };\n    announce(messages[strength], 'polite');\n  }, [announce]);\n\n  const announceSecurityAlert = useCallback((alertType: string, details: string) => {\n    announce(\n      `Security alert: ${alertType}. ${details}. Please review your account security settings.`,\n      'assertive'\n    );\n  }, [announce]);\n\n  const announceAccountLocked = useCallback((reason: string, unlockTime?: Date) => {\n    let message = `Account temporarily locked: ${reason}.`;\n    if (unlockTime) {\n      message += ` You can try again at ${unlockTime.toLocaleTimeString()}.`;\n    }\n    announce(message, 'assertive');\n  }, [announce]);\n\n  // Privacy and permissions announcements\n  const announcePermissionRequest = useCallback((permission: string, reason: string) => {\n    announce(\n      `Permission request: The app needs access to ${permission}. ${reason} You can change this later in settings.`,\n      'polite'\n    );\n  }, [announce]);\n\n  const announcePermissionGranted = useCallback((permission: string) => {\n    announce(`Permission granted for ${permission}. Thank you!`, 'polite');\n  }, [announce]);\n\n  const announcePermissionDenied = useCallback((permission: string, impact: string) => {\n    announce(\n      `Permission denied for ${permission}. ${impact} You can enable this in your device settings if needed.`,\n      'polite'\n    );\n  }, [announce]);\n\n  const announceDataUsageInfo = useCallback((info: string) => {\n    announce(`Data usage information: ${info}`, 'polite');\n  }, [announce]);\n\n  return {\n    announceLoginStart,\n    announceLoginSuccess,\n    announceLoginError,\n    announceRegistrationStart,\n    announceRegistrationSuccess,\n    announceRegistrationError,\n    announcePasswordResetRequest,\n    announcePasswordResetSuccess,\n    announcePasswordResetError,\n    announceEmailVerificationSent,\n    announceEmailVerificationSuccess,\n    announceEmailVerificationError,\n    announceBiometricPrompt,\n    announceBiometricSuccess,\n    announceBiometricError,\n    announceTwoFactorPrompt,\n    announceTwoFactorSuccess,\n    announceTwoFactorError,\n    announceSessionExpiring,\n    announceSessionExpired,\n    announceSessionExtended,\n    announceLogoutStart,\n    announceLogoutSuccess,\n    announceLogoutError,\n    announcePasswordStrength,\n    announceSecurityAlert,\n    announceAccountLocked,\n    announcePermissionRequest,\n    announcePermissionGranted,\n    announcePermissionDenied,\n    announceDataUsageInfo\n  };\n}