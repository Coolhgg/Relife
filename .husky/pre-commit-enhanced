#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Enhanced Pre-commit Hook with Intelligent Quality Gates
# This hook provides comprehensive code quality checks with auto-fixing capabilities

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo "${BLUE}üöÄ Starting Enhanced Pre-commit Quality Checks...${NC}"

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(ts|tsx|js|jsx)$')

if [ -z "$STAGED_FILES" ]; then
    echo "${GREEN}‚úÖ No JavaScript/TypeScript files staged. Skipping code quality checks.${NC}"
    exit 0
fi

echo "${CYAN}üìÅ Found $(echo "$STAGED_FILES" | wc -l) staged files to check${NC}"

# Create temporary file to track if any checks failed
FAILURE_FILE=$(mktemp)
echo "0" > "$FAILURE_FILE"

# Function to log and track failures
log_failure() {
    echo "${RED}$1${NC}"
    echo "1" > "$FAILURE_FILE"
}

log_success() {
    echo "${GREEN}$1${NC}"
}

log_warning() {
    echo "${YELLOW}$1${NC}"
}

log_info() {
    echo "${BLUE}$1${NC}"
}

# 1. Type Checking (Critical - must pass)
echo "\n${PURPLE}üî∑ Phase 1: TypeScript Type Checking${NC}"
if ! bun run type-check; then
    log_failure "‚ùå TypeScript compilation failed. Please fix type errors before committing."
else
    log_success "‚úÖ TypeScript compilation passed"
fi

# 2. Intelligent ESLint Analysis with Auto-fixing
echo "\n${PURPLE}üîß Phase 2: Intelligent ESLint Analysis${NC}"
if ! node scripts/intelligent-eslint-fix.js --verbose $STAGED_FILES; then
    log_failure "‚ùå ESLint analysis failed with critical issues"
else
    log_success "‚úÖ ESLint analysis completed"
fi

# 3. React Hooks Dependency Analysis
echo "\n${PURPLE}üé£ Phase 3: React Hooks Dependency Analysis${NC}"
if ! node scripts/react-hooks-enforcer.js --verbose $STAGED_FILES; then
    log_warning "‚ö†Ô∏è React Hooks dependency issues found - please review carefully"
    # Note: We don't fail the commit for hook deps, but warn the developer
else
    log_success "‚úÖ React Hooks dependencies are clean"
fi

# 4. Prettier Formatting (Auto-fix)
echo "\n${PURPLE}üíÖ Phase 4: Code Formatting${NC}"
if ! bunx prettier --check $STAGED_FILES; then
    log_info "üîß Auto-fixing formatting issues..."
    if bunx prettier --write $STAGED_FILES; then
        log_success "‚úÖ Code formatting fixed and applied"
        # Re-stage the formatted files
        git add $STAGED_FILES
    else
        log_failure "‚ùå Failed to format code"
    fi
else
    log_success "‚úÖ Code formatting is correct"
fi

# 5. Bundle Size Check (if build files exist)
echo "\n${PURPLE}üì¶ Phase 5: Bundle Size Validation${NC}"
if [ -f "dist/assets/index.js" ] || [ -f "dist/assets/index.css" ]; then
    if bun run bundlesize; then
        log_success "‚úÖ Bundle size within limits"
    else
        log_warning "‚ö†Ô∏è Bundle size exceeds limits - consider optimizing"
        # Don't fail commit for bundle size, just warn
    fi
else
    log_info "‚ÑπÔ∏è No built assets found, skipping bundle size check"
fi

# 6. Lint-staged for additional file types
echo "\n${PURPLE}üóÇÔ∏è Phase 6: Additional File Processing${NC}"
if ! bunx lint-staged; then
    log_failure "‚ùå Lint-staged processing failed"
else
    log_success "‚úÖ Additional file processing completed"
fi

# 7. Commit Message Pre-validation
echo "\n${PURPLE}üìù Phase 7: Commit Message Preparation${NC}"
# Check if we have a commit message template or rules
if [ -f ".gitmessage" ]; then
    log_info "‚ÑπÔ∏è Commit message template available"
elif [ -f ".commitlintrc.js" ] || [ -f "commitlint.config.js" ]; then
    log_info "‚ÑπÔ∏è Commit message linting configured"
fi

# 8. Security Check for Sensitive Data
echo "\n${PURPLE}üîí Phase 8: Security Scan${NC}"
SECURITY_ISSUES=0

# Check for common secrets patterns
for file in $STAGED_FILES; do
    if grep -q -E "(api[_-]?key|secret|password|token|private[_-]?key)" "$file"; then
        if grep -q -E "(VITE_|process\.env\.|import.*env)" "$file"; then
            # It's probably environment variable usage, which is OK
            continue
        else
            log_warning "‚ö†Ô∏è Potential secret detected in $file - please verify"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
        fi
    fi
    
    # Check for hardcoded URLs that might be sensitive
    if grep -q -E "https?://.*\.(local|dev|staging|test)" "$file"; then
        log_warning "‚ö†Ô∏è Development/staging URL found in $file - ensure it's intentional"
    fi
done

if [ $SECURITY_ISSUES -eq 0 ]; then
    log_success "‚úÖ No obvious security issues detected"
fi

# 9. Final Summary and Decision
echo "\n${PURPLE}üìä Pre-commit Summary${NC}"

FAILURE_COUNT=$(cat "$FAILURE_FILE")
if [ "$FAILURE_COUNT" -eq "1" ]; then
    echo "${RED}‚ùå Pre-commit checks failed. Please fix the issues above before committing.${NC}"
    
    echo "\n${CYAN}üí° Quick Fix Commands:${NC}"
    echo "  ‚Ä¢ Fix TypeScript: bun run type-check"
    echo "  ‚Ä¢ Fix ESLint: bun run lint:fix"
    echo "  ‚Ä¢ Fix formatting: bun run format"
    echo "  ‚Ä¢ Check hooks: node scripts/react-hooks-enforcer.js --verbose"
    
    rm "$FAILURE_FILE"
    exit 1
else
    # Check if any files were modified by auto-fixes
    MODIFIED_FILES=$(git diff --name-only $STAGED_FILES)
    if [ ! -z "$MODIFIED_FILES" ]; then
        log_info "üîß Some files were auto-fixed. Changes have been staged."
        echo "${CYAN}Modified files:${NC}"
        echo "$MODIFIED_FILES" | sed 's/^/  ‚Ä¢ /'
    fi
    
    log_success "‚úÖ All pre-commit checks passed! Ready to commit."
    
    # Show commit tips
    echo "\n${CYAN}üí° Commit Tips:${NC}"
    echo "  ‚Ä¢ Use conventional commits: feat/fix/docs/style/refactor/test/chore"
    echo "  ‚Ä¢ Keep commits atomic and focused"
    echo "  ‚Ä¢ Write clear, descriptive commit messages"
fi

rm "$FAILURE_FILE"
exit 0