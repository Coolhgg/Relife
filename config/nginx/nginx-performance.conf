# High-Performance Nginx Configuration for Relife Smart Alarm App
# Optimized for high traffic and performance monitoring

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 100000;

# Error log with performance monitoring
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_image_filter_module.so;
load_module modules/ngx_http_geoip2_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Server tokens
    server_tokens off;
    
    # Charset
    charset utf-8;
    
    # Performance logging format
    log_format performance '$remote_addr - $remote_user [$time_local] '
                          '"$request_method $scheme://$host$request_uri $server_protocol" '
                          '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                          'rt=$request_time uct="$upstream_connect_time" '
                          'uht="$upstream_header_time" urt="$upstream_response_time" '
                          'cache="$upstream_cache_status" '
                          'bytes_sent=$bytes_sent body_bytes_sent=$body_bytes_sent '
                          'request_length=$request_length connection=$connection '
                          'connection_requests=$connection_requests '
                          'forwarded_for="$http_x_forwarded_for"';
    
    # Analytics logging format
    log_format analytics '$remote_addr|$time_iso8601|$request_method|$scheme|$host|$request_uri|'
                        '$server_protocol|$status|$body_bytes_sent|$http_referer|$http_user_agent|'
                        '$request_time|$upstream_response_time|$upstream_cache_status|'
                        '$http_x_forwarded_for|$geoip2_city_name|$geoip2_country_name';
    
    # Access logs
    access_log /var/log/nginx/access.log performance buffer=16k flush=5s;
    access_log /var/log/nginx/analytics.log analytics buffer=32k flush=10s;
    
    # Performance optimizations
    sendfile on;
    sendfile_max_chunk 1m;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Buffer sizes
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Hash tables
    types_hash_max_size 2048;
    server_names_hash_bucket_size 128;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=global:10m rate=20r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;
    
    # Cache zones with optimized settings
    proxy_cache_path /var/cache/nginx/static_cache 
                     levels=1:2 
                     keys_zone=static_cache:100m 
                     max_size=1g 
                     inactive=1h 
                     use_temp_path=off;
    
    proxy_cache_path /var/cache/nginx/api_cache 
                     levels=1:2 
                     keys_zone=api_cache:50m 
                     max_size=500m 
                     inactive=10m 
                     use_temp_path=off;
    
    proxy_cache_path /var/cache/nginx/microcache 
                     levels=1:2 
                     keys_zone=microcache:10m 
                     max_size=100m 
                     inactive=1m 
                     use_temp_path=off;
    
    # FastCGI cache for dynamic content
    fastcgi_cache_path /var/cache/nginx/fastcgi_cache 
                       levels=1:2 
                       keys_zone=fastcgi_cache:50m 
                       max_size=500m 
                       inactive=30m;
    
    # Upstream configuration with load balancing
    upstream api_backend {
        least_conn;
        server api:3001 max_fails=3 fail_timeout=30s;
        # Add more backend servers for load balancing
        # server api2:3001 max_fails=3 fail_timeout=30s;
        # server api3:3001 max_fails=3 fail_timeout=30s backup;
        
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Map for real IP detection
    map $http_x_forwarded_for $real_ip {
        default $remote_addr;
        ~^(\d+\.\d+\.\d+\.\d+) $1;
    }
    
    # Map for cache key
    map $request_uri $cache_key {
        default $scheme$request_method$host$request_uri;
        ~^/api/ "nocache";
    }
    
    # Map for cache bypass
    map $http_cache_control $no_cache {
        default 0;
        ~no-cache 1;
        ~max-age=0 1;
    }
    
    # Security headers map
    map $sent_http_content_type $security_headers {
        default "X-Content-Type-Options: nosniff; X-Frame-Options: SAMEORIGIN; X-XSS-Protection: 1; mode=block";
        ~^text/html "X-Content-Type-Options: nosniff; X-Frame-Options: SAMEORIGIN; X-XSS-Protection: 1; mode=block; Referrer-Policy: strict-origin-when-cross-origin";
    }
    
    # Include server configurations
    include /etc/nginx/conf.d/*.conf;
    
    # High-performance server block
    server {
        listen 80 default_server deferred;
        listen [::]:80 default_server deferred;
        server_name _;
        
        # Performance settings
        tcp_nodelay on;
        tcp_nopush on;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;
        
        # Global rate limiting
        limit_req zone=global burst=50 nodelay;
        
        # Root directory
        root /usr/share/nginx/html;
        index index.html;
        
        # Security headers
        add_header $security_headers always;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        # Performance monitoring endpoint
        location /api/performance {
            limit_req zone=api burst=50 nodelay;
            
            # Proxy configuration
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            # Caching
            proxy_cache api_cache;
            proxy_cache_valid 200 1m;
            proxy_cache_key $cache_key;
            proxy_cache_bypass $no_cache;
            add_header X-Cache-Status $upstream_cache_status always;
            
            # Timeouts
            proxy_connect_timeout 3s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            
            # Buffer sizes
            proxy_buffer_size 16k;
            proxy_buffers 8 16k;
            proxy_busy_buffers_size 32k;
        }
        
        # Analytics endpoint
        location /api/analytics {
            limit_req zone=api burst=100 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $real_ip;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for analytics
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            
            # Fast timeouts
            proxy_connect_timeout 2s;
            proxy_send_timeout 3s;
            proxy_read_timeout 3s;
        }
        
        # Health check with detailed info
        location /health {
            access_log off;
            return 200 '{"status":"healthy","timestamp":"$time_iso8601","server":"$hostname","connections":"$connections_active","requests":"$connections_reading"}';
            add_header Content-Type application/json always;
        }
        
        # Nginx status for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
        
        # Static assets with optimal caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            limit_req zone=static burst=200 nodelay;
            
            # Aggressive caching
            expires 1y;
            add_header Cache-Control "public, immutable" always;
            add_header Vary "Accept-Encoding" always;
            
            # Compression
            gzip_static on;
            
            # Security
            add_header X-Content-Type-Options "nosniff" always;
            
            # Try files
            try_files $uri =404;
            
            # No access logs for static files
            access_log off;
        }
        
        # Image optimization and resizing
        location ~* ^/images/(.+)\.(jpg|jpeg|png|gif)$ {
            limit_req zone=static burst=100 nodelay;
            
            # Image filter (requires ngx_http_image_filter_module)
            image_filter_buffer 5M;
            image_filter_jpeg_quality 85;
            image_filter_webp_quality 80;
            
            # Caching
            expires 30d;
            add_header Cache-Control "public" always;
            
            try_files $uri =404;
            access_log off;
        }
        
        # Service Worker with proper headers
        location ~* /sw.*\.js$ {
            expires -1;
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            add_header Content-Type "application/javascript" always;
            add_header Service-Worker-Allowed "/" always;
            
            try_files $uri =404;
        }
        
        # Manifest and PWA files
        location /manifest.json {
            expires 7d;
            add_header Cache-Control "public" always;
            add_header Content-Type "application/manifest+json" always;
            
            try_files $uri =404;
        }
        
        # Micro-caching for HTML
        location / {
            limit_req zone=static burst=100 nodelay;
            
            # Micro-cache for 1 minute
            proxy_cache microcache;
            proxy_cache_valid 200 1m;
            proxy_cache_key $cache_key;
            proxy_cache_bypass $no_cache;
            
            # Try files with SPA fallback
            try_files $uri $uri/ @fallback;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
        }
        
        # SPA fallback
        location @fallback {
            add_header Cache-Control "no-cache, no-store, must-revalidate" always;
            add_header Pragma "no-cache" always;
            
            try_files /index.html =404;
        }
        
        # Error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Security - Block common attack patterns
        location ~* (eval\(|javascript:|<script|base64_decode|GLOBALS|REQUEST) {
            deny all;
            access_log off;
            return 444;
        }
        
        # Block bots and scrapers
        if ($http_user_agent ~* (bot|crawler|spider|scraper|archiver|wget|curl)) {
            return 429;
        }
        
        # Block empty user agents
        if ($http_user_agent = "") {
            return 444;
        }
    }
}