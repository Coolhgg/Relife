# Nginx SSL Configuration for Relife Smart Alarm App
# Production-ready SSL/TLS configuration with performance optimization

# SSL server block
server {
    listen 443 ssl http2;
    server_name relife.app www.relife.app;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/relife.app.crt;
    ssl_certificate_key /etc/ssl/private/relife.app.key;
    
    # SSL Protocols and Ciphers
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # SSL Performance Optimizations
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # SSL Security Headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval' https://app.posthog.com https://*.sentry.io;
        style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
        font-src 'self' https://fonts.gstatic.com data:;
        img-src 'self' data: blob: https:;
        connect-src 'self' https://*.supabase.co https://app.posthog.com https://*.sentry.io wss:;
        worker-src 'self' blob:;
        child-src 'self' blob:;
        frame-ancestors 'none';
        base-uri 'self';
        form-action 'self';
    " always;
    
    # Root and index
    root /usr/share/nginx/html;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types
        application/javascript
        application/json
        application/xml
        application/xml+rss
        application/x-javascript
        text/css
        text/javascript
        text/js
        text/plain
        text/xml
        image/svg+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject
        application/font-woff
        application/font-woff2;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss image/svg+xml;
    
    # Performance monitoring endpoint
    location /api/performance {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Proxy to backend
        proxy_pass http://api:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_cache_bypass $http_upgrade;
        
        # SSL headers
        proxy_set_header X-Forwarded-Ssl on;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    }
    
    # Analytics endpoint
    location /api/analytics {
        limit_req zone=api burst=50 nodelay;
        
        proxy_pass http://api:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Ssl on;
        proxy_cache_bypass $http_upgrade;
        
        # No caching for analytics data
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # Timeouts
        proxy_connect_timeout 3s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","ssl":true}';
        add_header Content-Type application/json;
    }
    
    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        # Rate limiting
        limit_req zone=static burst=100 nodelay;
        
        # Caching headers
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Security headers for static files
        add_header X-Content-Type-Options "nosniff" always;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        
        # Compression
        gzip_static on;
        
        # Try files
        try_files $uri =404;
        
        # Access logs disabled for performance
        access_log off;
    }
    
    # Service Worker (no caching)
    location ~* /sw.*\.js$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Content-Type "application/javascript";
        add_header Service-Worker-Allowed "/";
        
        try_files $uri =404;
    }
    
    # Web App Manifest
    location /manifest.json {
        expires 7d;
        add_header Cache-Control "public";
        add_header Content-Type "application/manifest+json";
        
        try_files $uri =404;
    }
    
    # PWA icons
    location ~* /icon-.*\.png$ {
        expires 30d;
        add_header Cache-Control "public";
        add_header Content-Type "image/png";
        
        try_files $uri =404;
        access_log off;
    }
    
    # Robots and SEO files
    location ~ ^/(robots\.txt|sitemap\.xml|humans\.txt)$ {
        expires 1d;
        add_header Cache-Control "public";
        
        try_files $uri =404;
        access_log off;
    }
    
    # Security.txt
    location /.well-known/security.txt {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "text/plain";
        
        try_files $uri =404;
    }
    
    # Apple touch icons
    location ~* /apple-touch-icon.*\.png$ {
        expires 30d;
        add_header Cache-Control "public";
        
        try_files $uri =404;
        access_log off;
    }
    
    # Favicon
    location /favicon.ico {
        expires 30d;
        add_header Cache-Control "public";
        
        try_files $uri =404;
        access_log off;
    }
    
    # SPA routing - serve index.html for all routes
    location / {
        # Rate limiting
        limit_req zone=static burst=50 nodelay;
        
        # Try files with SPA fallback
        try_files $uri $uri/ @fallback;
        
        # Security headers for HTML
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Fallback for SPA routing
    location @fallback {
        # Cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        try_files /index.html =404;
    }
    
    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Block sensitive files and directories
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block common attack patterns
    location ~* (eval\(|javascript:|<script|base64_decode|gzip|GLOBALS|REQUEST|wget|curl|exec|system) {
        deny all;
        access_log off;
        log_not_found off;
        return 444;
    }
    
    # Block user agents
    if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
        return 444;
    }
    
    # Rate limit by IP
    limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
    limit_req zone=global burst=20 nodelay;
}

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name relife.app www.relife.app;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$server_name$request_uri;
}

# Redirect www to non-www (optional)
server {
    listen 443 ssl http2;
    server_name www.relife.app;
    
    # SSL configuration (same as above)
    ssl_certificate /etc/ssl/certs/relife.app.crt;
    ssl_certificate_key /etc/ssl/private/relife.app.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # Redirect www to non-www
    return 301 https://relife.app$request_uri;
}