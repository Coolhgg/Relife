[{"filePath":"/project/workspace/Coolhgg/Relife/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Trophy' is defined but never used. Allowed unused vars must match /^_/u.","line":3,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AdvancedAlarm' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":70},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Theme' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":83,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":88},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThemeConfig' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":90,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":101},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'PersonalizationSettings' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":103,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":126},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ThemePreset' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":128,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":139},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getActionLabels' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":113,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isRTL' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":115,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getDirectionStyles' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":116,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'formatAlarmTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":117,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getCSSVariables' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'getThemeClasses' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trackPageView' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":127,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setUserProperties' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":127,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":127,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'trackFeatureDiscovery' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":72},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'performHealthCheck' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":145,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":145,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'playClick' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":168,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'playError' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":170,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createSuccessHandler' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":172,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":172,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'createErrorHandler' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":173,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'tabProtectionEnabled' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":186,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":186,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'emotionalState' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":201,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":436,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":55},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'keyboardService' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":566,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":566,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mobileService' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":568,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":568,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'focusService' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":569,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":569,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_/u.","line":724,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":724,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { useState, useEffect, useCallback } from 'react';\nimport { Plus, Clock, Settings, Bell, Trophy, Brain, Gamepad2, LogOut, Crown } from 'lucide-react';\nimport type { Alarm, AppState, VoiceMood, User, Battle, AdvancedAlarm, DayOfWeek, Theme, ThemeConfig, PersonalizationSettings, ThemePreset, AlarmDifficulty } from './types';\nimport type { EmotionalTone } from './types/emotional';\nimport { INITIAL_APP_STATE } from './constants/initialState';\n\n// i18n imports\nimport { LanguageProvider } from './contexts/LanguageContext';\nimport { useI18n } from './hooks/useI18n';\nimport { useTheme } from './hooks/useTheme';\n\nimport AlarmList from './components/AlarmList';\nimport AlarmForm from './components/AlarmForm';\nimport AlarmRinging from './components/AlarmRinging';\nimport Dashboard from './components/Dashboard';\nimport OnboardingFlow from './components/OnboardingFlow';\nimport AuthenticationFlow from './components/AuthenticationFlow';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport OfflineIndicator from './components/OfflineIndicator';\nimport PWAInstallPrompt from './components/PWAInstallPrompt';\n// Enhanced consolidated components\nimport GamingHub from './components/GamingHub';\nimport EnhancedSettings from './components/EnhancedSettings';\nimport AdvancedAlarmScheduling from './components/AdvancedAlarmScheduling';\nimport PricingPage from './components/PricingPage';\nimport { ScreenReaderProvider } from './components/ScreenReaderProvider';\nimport TabProtectionWarning from './components/TabProtectionWarning';\nimport { ThemeProvider } from './hooks/useTheme';\nimport { useAdvancedAlarms } from './hooks/useAdvancedAlarms';\nimport { initializeCapacitor } from './services/capacitor';\nimport { AlarmService } from './services/alarm';\nimport { ErrorHandler } from './services/error-handler';\nimport OfflineStorage from './services/offline-storage';\nimport AccessibilityUtils from './utils/accessibility';\nimport ScreenReaderService from './utils/screen-reader';\nimport KeyboardNavigationService from './utils/keyboard-navigation';\nimport VoiceAccessibilityService from './utils/voice-accessibility';\nimport MobileAccessibilityService from './utils/mobile-accessibility';\nimport EnhancedFocusService from './utils/enhanced-focus';\nimport { PerformanceMonitor } from './services/performance-monitor';\nimport AppAnalyticsService from './services/app-analytics';\nimport AIRewardsService from './services/ai-rewards';\nimport { SupabaseService } from './services/supabase';\nimport { PushNotificationService } from './services/push-notifications';\nimport useAuth from './hooks/useAuth';\nimport { useScreenReaderAnnouncements } from './hooks/useScreenReaderAnnouncements';\nimport { useAnalytics, useEngagementAnalytics, usePageTracking, ANALYTICS_EVENTS } from './hooks/useAnalytics';\nimport { useEmotionalNotifications } from './hooks/useEmotionalNotifications';\nimport { useTabProtectionAnnouncements } from './hooks/useTabProtectionAnnouncements';\nimport useTabProtectionSettings from './hooks/useTabProtectionSettings';\nimport { formatProtectionMessage, formatTimeframe } from './types/tabProtection';\nimport ServiceWorkerStatus from './components/ServiceWorkerStatus';\nimport { useEnhancedServiceWorker } from './hooks/useEnhancedServiceWorker';\nimport { useUISound } from './hooks/useSoundEffects';\nimport './App.css';\n\n\n// Email Campaign Integration\nimport { PersonaType, PersonaDetectionResult } from './types';\nclass EmailCampaignService {\n  private static instance: EmailCampaignService;\n  private isInitialized = false;\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new EmailCampaignService();\n    }\n    return this.instance;\n  }\n\n  async initialize() {\n    this.isInitialized = true;\n    console.log('Email campaign service initialized');\n  }\n\n  async detectPersona(user: User): Promise<PersonaDetectionResult> {\n    let persona: PersonaType = 'struggling_sam';\n    const tier = user?.subscriptionTier || 'free';\n\n    switch (tier) {\n      case 'free': persona = 'struggling_sam'; break;\n      case 'basic': persona = 'busy_ben'; break;\n      case 'premium': persona = 'professional_paula'; break;\n      case 'pro': persona = 'enterprise_emma'; break;\n      case 'student': persona = 'student_sarah'; break;\n    }\n\n    if (user?.email?.includes('.edu')) {\n      persona = 'student_sarah';\n    }\n\n    return {\n      persona,\n      confidence: 0.8,\n      factors: [{ factor: 'subscription_tier', weight: 0.8, value: tier, influence: 0.8 }],\n      updatedAt: new Date()\n    };\n  }\n\n  async addUserToCampaign(user: User, persona: PersonaType) {\n    console.log(`Adding user ${user.email} to ${persona} campaign`);\n    // Integration with email platform would go here\n    return true;\n  }\n}\n\n// Inner App component that uses i18n hooks\nfunction AppContent() {\n  const {\n    t,\n    getNavigationLabels,\n    getActionLabels,\n    getA11yLabels,\n    isRTL,\n    getDirectionStyles,\n    formatAlarmTime\n  } = useI18n();\n  const auth = useAuth();\n  const { getCSSVariables, getThemeClasses, applyThemeWithPerformance, preloadTheme } = useTheme();\n  const { announce } = useScreenReaderAnnouncements({\n    announceNavigation: true,\n    announceStateChanges: true\n  });\n\n  // Analytics integration\n  const { identify, track, trackPageView, setUserProperties, reset } = useAnalytics();\n  const { trackSessionActivity, trackDailyActive, trackFeatureDiscovery } = useEngagementAnalytics();\n  usePageTracking('main-app');\n\n  // Advanced Alarms Hook\n  const {\n    alarms: advancedAlarms,\n    loading: _advancedAlarmsLoading,\n    error: _advancedAlarmsError,\n    createAlarm: createAdvancedAlarm,\n    updateAlarm: updateAdvancedAlarm,\n    deleteAlarm: deleteAdvancedAlarm\n  } = useAdvancedAlarms();\n\n  // Enhanced Service Worker Hook for alarm reliability\n  const {\n    state: serviceWorkerState,\n    updateAlarms: updateServiceWorkerAlarms,\n    performHealthCheck\n  } = useEnhancedServiceWorker();\n\n  // Apply theme with performance optimizations\n  useEffect(() => {\n    // Use performance-optimized theme application\n    applyThemeWithPerformance({\n      animate: !window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n      duration: 250,\n      immediate: false\n    });\n  }, [applyThemeWithPerformance]);\n\n  // Preload common themes for better performance\n  useEffect(() => {\n    // Preload opposite theme for quick switching\n    const currentTheme = document.documentElement.classList.contains('theme-dark') ? 'dark' : 'light';\n    const oppositeTheme = currentTheme === 'dark' ? 'light' : 'dark';\n    preloadTheme(oppositeTheme);\n  }, [preloadTheme]);\n\n  // Sound Effects Hook for UI feedback\n  const {\n    playClick,\n    playSuccess,\n    playError,\n    createClickHandler,\n    createSuccessHandler,\n    createErrorHandler\n  } = useUISound();\n\n  const [appState, setAppState] = useState<AppState>(INITIAL_APP_STATE);\n\n  const [showAlarmForm, setShowAlarmForm] = useState(false);\n  const [editingAlarm, setEditingAlarm] = useState<Alarm | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [accessibilityInitialized, setAccessibilityInitialized] = useState(false);\n  const [sessionStartTime] = useState(Date.now());\n  const [_syncStatus, setSyncStatus] = useState<'synced' | 'syncing' | 'error' | 'pending' | 'offline'>('synced');\n  const [_showPWAInstall, setShowPWAInstall] = useState(false);\n  const [tabProtectionEnabled, setTabProtectionEnabled] = useState(() => {\n    // Get from localStorage or default to true\n    const stored = localStorage.getItem('tabProtectionEnabled');\n    return stored !== null ? JSON.parse(stored) : true;\n  });\n\n  // Sync alarms with enhanced service worker when they change\n  useEffect(() => {\n    if (serviceWorkerState.isInitialized && appState.alarms) {\n      console.log(`App: Syncing ${appState.alarms.length} alarms with enhanced service worker`);\n      updateServiceWorkerAlarms(appState.alarms);\n    }\n  }, [appState.alarms, serviceWorkerState.isInitialized, updateServiceWorkerAlarms]);\n\n  // Emotional Intelligence Notifications Hook\n  const [emotionalState, emotionalActions] = useEmotionalNotifications({\n    userId: auth.user?.id || '',\n    enabled: !!auth.user && appState.permissions.notifications.granted\n  });\n\n  // Tab Protection Announcements Hook\n  const tabProtectionSettings = useTabProtectionSettings();\n  const { announceProtectionWarning } = useTabProtectionAnnouncements({\n    activeAlarm: appState.activeAlarm,\n    enabledAlarms: appState.alarms.filter(alarm => alarm.enabled),\n    settings: tabProtectionSettings.settings\n  });\n\n  // PWA Installation handlers\n  const handlePWAInstall = () => {\n    setShowPWAInstall(false);\n    // PWA install logic would be handled by the PWAInstallPrompt component\n  };\n\n  const handlePWADismiss = () => {\n    setShowPWAInstall(false);\n  };\n\n  const refreshRewardsSystem = useCallback(async (alarms: Alarm[] = appState.alarms) => {\n    try {\n      const aiRewards = AIRewardsService.getInstance();\n      const rewardSystem = await aiRewards.analyzeAndGenerateRewards(alarms);\n\n      setAppState(prev => ({\n        ...prev,\n        rewardSystem\n      }));\n\n      // Track rewards analysis\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('rewards_analysis', 'system_updated', {\n        totalRewards: rewardSystem.unlockedRewards.length,\n        level: rewardSystem.level,\n        currentStreak: rewardSystem.currentStreak\n      });\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to refresh rewards system',\n        { context: 'rewards_refresh' }\n      );\n    }\n  }, [appState.alarms]);\n\n  const loadUserAlarms = useCallback(async () => {\n    if (!auth.user) return;\n\n    try {\n      // Load alarms from offline storage first (faster)\n      const offlineAlarms = await OfflineStorage.getAlarms();\n      if (offlineAlarms.length > 0) {\n        setAppState(prev => ({\n          ...prev,\n          alarms: offlineAlarms,\n          isOnboarding: offlineAlarms.length === 0\n        }));\n      }\n\n      // Try to load from remote service if online\n      if (navigator.onLine) {\n        try {\n          const { alarms: savedAlarms } = await SupabaseService.loadUserAlarms(auth.user.id);\n          setAppState(prev => ({\n            ...prev,\n            alarms: savedAlarms,\n            isOnboarding: savedAlarms.length === 0\n          }));\n          // Save to offline storage\n          await OfflineStorage.saveAlarms(savedAlarms);\n\n          // Announce successful data load to screen readers\n          AccessibilityUtils.createAriaAnnouncement(\n            `Loaded ${savedAlarms.length} alarm${savedAlarms.length === 1 ? '' : 's'}`,\n            'polite'\n          );\n\n          // Initialize rewards system\n          await refreshRewardsSystem(savedAlarms);\n        } catch (error) {\n          ErrorHandler.handleError(\n            error instanceof Error ? error : new Error(String(error)),\n            'Remote alarm loading failed, using offline alarms',\n            { context: 'load_remote_alarms', metadata: { userId: auth.user.id } }\n          );\n          setSyncStatus('error');\n\n          // Initialize rewards system with offline alarms\n          await refreshRewardsSystem(offlineAlarms);\n        }\n      } else {\n        setAppState(prev => ({\n          ...prev,\n          alarms: offlineAlarms,\n          isOnboarding: offlineAlarms.length === 0\n        }));\n\n        // Initialize rewards system with offline alarms\n        await refreshRewardsSystem(offlineAlarms);\n      }\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to load user alarms',\n        { context: 'load_user_alarms', metadata: { userId: auth.user.id } }\n      );\n    }\n  }, [auth.user, setSyncStatus, refreshRewardsSystem]);\n\n  const registerEnhancedServiceWorker = useCallback(async () => {\n    if ('serviceWorker' in navigator) {\n      try {\n        console.log('App: Registering enhanced service worker...');\n        const registration = await navigator.serviceWorker.register('/sw-enhanced.js');\n\n        registration.addEventListener('updatefound', () => {\n          const newWorker = registration.installing;\n          if (newWorker) {\n            newWorker.addEventListener('statechange', () => {\n              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                console.log('App: Service worker updated');\n                // Optionally show update notification to user\n              }\n            });\n          }\n        });\n\n        // Enhanced service worker registered successfully\n        console.log('App: Enhanced service worker registered');\n\n        // Request notification permissions first\n        if ('Notification' in window && Notification.permission === 'default') {\n          try {\n            console.log('App: Requesting notification permission...');\n            const permission = await Notification.requestPermission();\n            console.log('App: Notification permission:', permission);\n\n            if (permission === 'granted') {\n              // Notify service worker about permission\n              navigator.serviceWorker.ready.then(reg => {\n                reg.active?.postMessage({\n                  type: 'REQUEST_NOTIFICATION_PERMISSION'\n                });\n              });\n            }\n          } catch (permissionError) {\n            console.warn('App: Could not request notification permission:', permissionError);\n          }\n        }\n\n        // Wait for service worker to be ready\n        const readyRegistration = await navigator.serviceWorker.ready;\n\n        // Send alarms to service worker\n        if (readyRegistration.active && appState.alarms.length > 0) {\n          console.log(`App: Sending ${appState.alarms.length} alarms to service worker`);\n\n          // Use MessageChannel for reliable communication\n          const messageChannel = new MessageChannel();\n\n          messageChannel.port1.onmessage = (event: MessageEvent) => {\n            const { success, message, error } = event.data;\n            if (success) {\n              console.log('App: Service worker response:', message);\n            } else {\n              console.error('App: Service worker error:', error);\n            }\n          };\n\n          readyRegistration.active.postMessage({\n            type: 'UPDATE_ALARMS',\n            data: { alarms: appState.alarms }\n          }, [messageChannel.port2]);\n        }\n\n        // Set up service worker message listener\n        navigator.serviceWorker.addEventListener('message', (event) => {\n          const { type, data } = event.data;\n\n          switch (type) {\n            case 'ALARM_TRIGGERED':\n              console.log('App: Alarm triggered by service worker:', data.alarm.id);\n              // Handle alarm trigger from service worker\n              handleServiceWorkerAlarmTrigger(data.alarm);\n              break;\n\n            case 'ALARM_SCHEDULED':\n              console.log('App: Alarm scheduled by service worker:', data.alarmId);\n              break;\n\n            case 'ALARM_CANCELLED':\n              console.log('App: Alarm cancelled by service worker:', data.alarmId);\n              break;\n\n            case 'NETWORK_STATUS':\n              console.log('App: Network status change:', data.isOnline);\n              // Update app state based on network status\n              break;\n\n            case 'COMPLETE_SYNC_FINISHED':\n              console.log('App: Service worker sync completed');\n              // Refresh app data if needed\n              break;\n\n            default:\n              console.log('App: Unknown service worker message:', type);\n          }\n        });\n\n        // Set up visibility change handling for alarm reliability\n        document.addEventListener('visibilitychange', () => {\n          if (document.visibilityState === 'hidden') {\n            // Ensure alarms are properly scheduled in service worker when tab becomes hidden\n            console.log('App: Tab hidden, ensuring background alarm scheduling...');\n            if (readyRegistration.active) {\n              readyRegistration.active.postMessage({\n                type: 'SYNC_ALARM_STATE'\n              });\n            }\n          } else if (document.visibilityState === 'visible') {\n            // Perform health check when tab becomes visible again\n            console.log('App: Tab visible, performing alarm health check...');\n            if (readyRegistration.active) {\n              readyRegistration.active.postMessage({\n                type: 'HEALTH_CHECK'\n              });\n            }\n          }\n        });\n\n        // Set up beforeunload event for tab close protection\n        window.addEventListener('beforeunload', (event) => {\n          // This will be handled by the tab protection system\n          // but we also notify the service worker\n          if (readyRegistration.active) {\n            readyRegistration.active.postMessage({\n              type: 'TAB_CLOSING'\n            });\n          }\n        });\n\n      } catch (error) {\n        console.error('App: Service worker registration failed:', error);\n        ErrorHandler.handleError(\n          error instanceof Error ? error : new Error(String(error)),\n          'Enhanced service worker registration failed',\n          { context: 'service_worker_registration' }\n        );\n      }\n    } else {\n      console.warn('App: Service workers not supported in this browser');\n    }\n  }, [appState.alarms, handleServiceWorkerAlarmTrigger]);\n\n  // Handle alarm triggers from service worker\n  const handleServiceWorkerAlarmTrigger = useCallback((alarm: Alarm) => {\n    console.log('App: Handling service worker alarm trigger:', alarm.id);\n\n    // Update app state to show alarm as triggered\n    setAppState(prev => ({\n      ...prev,\n      activeAlarm: alarm,\n      alarmTriggeredAt: new Date()\n    }));\n\n    // Navigate to alarm screen if needed\n    // This would integrate with your existing alarm handling logic\n\n  }, [setAppState]);\n\n  const syncOfflineChanges = useCallback(async () => {\n    if (!auth.user) return;\n\n    try {\n      const pendingChanges = await OfflineStorage.getPendingChanges();\n\n      if (pendingChanges.length > 0) {\n        // Syncing offline changes silently\n\n        for (const change of pendingChanges) {\n          try {\n            switch (change.type) {\n              case 'create':\n              case 'update':\n                if (change.data) {\n                  const saveResult = await SupabaseService.saveAlarm(change.data);\n                  if (saveResult.error) {\n                    throw new Error(saveResult.error);\n                  }\n                }\n                break;\n              case 'delete': {\n                const deleteResult = await SupabaseService.deleteAlarm(change.id);\n                if (deleteResult.error) {\n                  throw new Error(deleteResult.error);\n                }\n                break;\n              }\n            }\n          } catch (error) {\n            ErrorHandler.handleError(\n              error instanceof Error ? error : new Error(String(error)),\n              'Failed to sync offline change',\n              { context: 'sync_offline_change', metadata: { changeId: change.id, changeType: change.type } }\n            );\n          }\n        }\n\n        // Clear pending changes after successful sync\n        await OfflineStorage.clearPendingChanges();\n        setSyncStatus('synced');\n\n        // Reload alarms from server to ensure consistency\n        const { alarms: updatedAlarms } = await SupabaseService.loadUserAlarms(auth.user.id);\n        setAppState(prev => ({ ...prev, alarms: updatedAlarms }));\n        await OfflineStorage.saveAlarms(updatedAlarms);\n      }\n    } catch (error) {\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to sync offline changes');\n      setSyncStatus('error');\n    }\n  }, [auth.user, setSyncStatus]);\n\n  // Refresh rewards system based on current alarms and analytics\n  // Handle quick alarm setup with preset configurations\n  const handleQuickSetup = async (presetType: 'morning' | 'work' | 'custom') => {\n    const presets = {\n      morning: {\n        time: '07:00',\n        label: 'Morning Routine',\n        days: [1, 2, 3, 4, 5], // Monday to Friday\n        voiceMood: 'motivational' as VoiceMood\n      },\n      work: {\n        time: '06:30',\n        label: 'Work Day',\n        days: [1, 2, 3, 4, 5], // Monday to Friday\n        voiceMood: 'drill-sergeant' as VoiceMood\n      },\n      custom: {\n        time: '07:00',\n        label: 'Wake Up',\n        days: [1, 2, 3, 4, 5, 6, 7], // Every day\n        voiceMood: 'gentle' as VoiceMood\n      }\n    };\n\n    const presetConfig = presets[presetType];\n    if (presetConfig) {\n      await handleAddAlarm(presetConfig);\n\n      // Track the quick setup usage\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('quick_alarm_setup', 'preset_used', { presetType });\n    }\n  };\n\n  // Initialize all accessibility services\n  const initializeAccessibilityServices = async () => {\n    try {\n      const screenReaderService = ScreenReaderService.getInstance();\n      const keyboardService = KeyboardNavigationService.getInstance();\n      const voiceService = VoiceAccessibilityService.getInstance();\n      const mobileService = MobileAccessibilityService.getInstance();\n      const focusService = EnhancedFocusService.getInstance();\n\n      // Services are automatically initialized when getInstance() is called\n      // Just verify they're properly instantiated\n\n      // Announce app initialization\n      screenReaderService.announce('Smart Alarm app loaded with full accessibility support', 'polite');\n\n      setAccessibilityInitialized(true);\n\n      // Track accessibility initialization\n      const appAnalytics = AppAnalyticsService.getInstance();\n      appAnalytics.trackFeatureUsage('accessibility', 'services_initialized', {\n        screenReader: screenReaderService.getState().isEnabled,\n        keyboard: true,\n        voice: voiceService.getState?.().isEnabled ?? false,\n        mobile: true,\n        focus: true\n      });\n    } catch (error) {\n      ErrorHandler.handleError(\n        error instanceof Error ? error : new Error(String(error)),\n        'Failed to initialize accessibility services',\n        { context: 'accessibility_initialization' }\n      );\n      setAccessibilityInitialized(true); // Continue even if accessibility fails\n    }\n  };\n\n  // Update app state when auth state changes\n  useEffect(() => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n    const emailService = EmailCampaignService.getInstance();\n\n    setAppState(prev => ({\n      ...prev,\n      user: auth.user\n    }));\n\n    // Set analytics user context when user signs in/out\n    if (auth.user) {\n      // Use both analytics services for comprehensive tracking\n      appAnalytics.setUserContext(auth.user.id, {\n        email: auth.user.email,\n        signInMethod: 'supabase'\n      });\n\n      // New analytics hook for user identification\n      identify(auth.user.id, {\n        id: auth.user.id,\n        email: auth.user.email,\n        createdAt: auth.user.createdAt instanceof Date ? auth.user.createdAt.toISOString() : auth.user.createdAt,\n        deviceType: navigator.userAgent.includes('Mobile') ? 'mobile' : 'desktop'\n      });\n\n      // Track sign-in event\n      track(ANALYTICS_EVENTS.USER_SIGNED_IN, {\n        timestamp: new Date().toISOString(),\n        metadata: {\n          method: 'supabase'\n        }\n      });\n\n      // Track daily active user\n      trackDailyActive();\n\n      // Email Campaign Integration: Detect persona and add to campaign\n      (async () => {\n        try {\n          await emailService.initialize();\n          const personaResult = await emailService.detectPersona(auth.user);\n          console.log(`Detected persona: ${personaResult.persona} (confidence: ${personaResult.confidence})`);\n\n          // Add user to appropriate email campaign\n          await emailService.addUserToCampaign(auth.user, personaResult.persona);\n\n          // Track persona detection for analytics\n          track('PERSONA_DETECTED', {\n            persona: personaResult.persona,\n            confidence: personaResult.confidence,\n            factors: personaResult.factors.map(f => f.factor),\n            timestamp: new Date().toISOString()\n          });\n        } catch (error) {\n          console.error('Email campaign integration error:', error);\n        }\n      })();\n\n    } else {\n      // Clear user context when user signs out\n      appAnalytics.clearUserContext();\n      reset();\n\n      // Track sign-out event\n      track(ANALYTICS_EVENTS.USER_SIGNED_OUT, {\n        timestamp: new Date().toISOString()\n      });\n    }\n  }, [auth.user, identify, track, reset, trackDailyActive]);\n\n\n\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setSyncStatus('pending');\n      // Trigger sync when coming back online\n      syncOfflineChanges();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setSyncStatus('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [syncOfflineChanges]);\n\n  // Service worker message handling\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);\n\n      return () => {\n        navigator.serviceWorker.removeEventListener('message', handleServiceWorkerMessage);\n      };\n    }\n  }, [handleServiceWorkerMessage]);\n\n  // Handle emotional notification events from service worker\n  useEffect(() => {\n    const handleEmotionalAction = (event: CustomEvent) => {\n      const { action, emotion_type, notification_id, data: actionData } = event.detail;\n\n      // Track the action in analytics\n      emotionalActions.trackResponse(notification_id || 'unknown', {\n        messageId: notification_id || 'unknown',\n        emotion: emotion_type,\n        tone: (actionData?.tone || 'encouraging') as EmotionalTone,\n        actionTaken: action === 'dismiss' ? 'dismissed' : (action === 'snooze' ? 'snoozed' : 'none'),\n        notificationOpened: true,\n        timeToResponse: Date.now() - (actionData?.timestamp || Date.now())\n      });\n\n      console.log('🧠 Emotional notification action received:', action, emotion_type);\n    };\n\n    const handleServiceWorkerUpdate = (event: CustomEvent) => {\n      console.log('🔄 Service Worker update available');\n      // Could show a toast notification or update indicator\n    };\n\n    const handleServiceWorkerInstall = () => {\n      console.log('✅ Service Worker installed successfully');\n    };\n\n    // Add event listeners\n    window.addEventListener('emotional-notification-action', handleEmotionalAction as EventListener);\n    window.addEventListener('sw-update-available', handleServiceWorkerUpdate as EventListener);\n    window.addEventListener('sw-install-complete', handleServiceWorkerInstall);\n\n    return () => {\n      window.removeEventListener('emotional-notification-action', handleEmotionalAction as EventListener);\n      window.removeEventListener('sw-update-available', handleServiceWorkerUpdate as EventListener);\n      window.removeEventListener('sw-install-complete', handleServiceWorkerInstall);\n    };\n  }, [emotionalActions]);\n\n\n  const handleServiceWorkerMessage = useCallback((event: MessageEvent) => {\n    const { type, data } = event.data;\n\n    switch (type) {\n      case 'ALARM_TRIGGERED':\n        if (data.alarm) {\n          setAppState(prev => ({ ...prev, activeAlarm: data.alarm }));\n        }\n        break;\n      case 'SYNC_START':\n        setSyncStatus('pending');\n        break;\n      case 'SYNC_COMPLETE':\n        setSyncStatus('synced');\n        break;\n      case 'SYNC_ERROR':\n        setSyncStatus('error');\n        ErrorHandler.handleError(new Error(data.error || 'Sync failed'), 'Background sync failed');\n        break;\n      case 'NETWORK_STATUS':\n        setIsOnline(data.isOnline);\n        break;\n      case 'EMOTIONAL_NOTIFICATION_ACTION':\n        // Handle emotional notification actions from service worker\n        if (data.action && data.emotion_type) {\n          emotionalActions.trackResponse(data.notification_id || 'unknown', {\n            messageId: data.notification_id || 'unknown',\n            emotion: data.emotion_type,\n            tone: (data.tone || 'encouraging') as EmotionalTone,\n            actionTaken: data.action === 'dismiss' ? 'dismissed' : (data.action === 'snooze' ? 'snoozed' : 'none'),\n            notificationOpened: true,\n            timeToResponse: Date.now() - (data.timestamp || Date.now())\n          });\n\n          // Handle specific actions\n          if (data.action === 'dismiss' && appState.activeAlarm) {\n            setAppState(prev => ({ ...prev, activeAlarm: null }));\n          } else if (data.action === 'snooze' && appState.activeAlarm) {\n            // Trigger snooze functionality\n            handleAlarmSnooze(appState.activeAlarm.id);\n          }\n\n          console.log('🧠 Emotional notification action handled:', data.action);\n        }\n        break;\n      default:\n        ErrorHandler.handleError(\n          new Error(`Unknown service worker message type: ${type}`),\n          'Received unknown service worker message',\n          { context: 'service_worker_message', metadata: { type, data } }\n        );\n    }\n  }, [emotionalActions, appState.activeAlarm, handleAlarmSnooze]);\n\n  useEffect(() => {\n    const initialize = async () => {\n      try {\n        // Initialize performance monitoring and analytics\n        const performanceMonitor = PerformanceMonitor.getInstance();\n        const appAnalytics = AppAnalyticsService.getInstance();\n\n        performanceMonitor.initialize();\n\n        // Start performance tracking\n        appAnalytics.startPerformanceMarker('app_initialization');\n\n        // Initialize analytics services (Sentry + PostHog)\n        await appAnalytics.initializeAnalytics();\n\n        // Track app launch\n        appAnalytics.trackPageView('dashboard', {\n          isInitialLoad: true,\n          userAuthenticated: !!auth.user\n        });\n\n        // Track session activity with enhanced analytics\n        trackSessionActivity();\n\n        // Track app installation/update if first time\n        const isFirstTime = !localStorage.getItem('app_launched_before');\n        if (isFirstTime) {\n          track(ANALYTICS_EVENTS.APP_INSTALLED, {\n            timestamp: new Date().toISOString(),\n            metadata: {\n              version: import.meta.env.VITE_APP_VERSION || '1.0.0',\n              platform: navigator.userAgent.includes('Mobile') ? 'mobile' : 'desktop'\n            }\n          });\n          localStorage.setItem('app_launched_before', 'true');\n        }\n\n        // Initialize Capacitor\n        await initializeCapacitor();\n\n        // Initialize Push Notifications\n        try {\n          await PushNotificationService.initialize();\n        } catch (error) {\n          console.warn('Push notification initialization failed:', error);\n        }\n\n        // Initialize enhanced service worker\n        await registerEnhancedServiceWorker();\n\n        // Initialize accessibility services\n        await initializeAccessibilityServices();\n\n        // Only load alarms if user is authenticated\n        if (auth.user) {\n          await loadUserAlarms();\n        }\n\n        setIsInitialized(true);\n      } catch (error) {\n        ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to initialize app', {\n          context: 'app_initialization'\n        });\n        setIsInitialized(true);\n      }\n    };\n\n    if (auth.isInitialized) {\n      initialize();\n    }\n  }, [auth.isInitialized, auth.user, loadUserAlarms, registerEnhancedServiceWorker, track, trackSessionActivity]);\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setSyncStatus('pending');\n      // Trigger sync when coming back online\n      syncOfflineChanges();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setSyncStatus('offline');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [syncOfflineChanges]);\n\n  // Service worker message handling\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.addEventListener('message', handleServiceWorkerMessage);\n\n      return () => {\n        navigator.serviceWorker.removeEventListener('message', handleServiceWorkerMessage);\n      };\n    }\n  }, [handleServiceWorkerMessage]);\n\n  // Prevent accidental tab closure when alarms are active\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      // Only show protection if user has enabled it\n      if (!tabProtectionSettings.settings.enabled) {\n        return;\n      }\n\n      // Check if there's an active alarm (currently ringing)\n      if (appState.activeAlarm && tabProtectionSettings.settings.protectionTiming.activeAlarmWarning) {\n        // Announce the warning for accessibility\n        announceProtectionWarning();\n\n        const message = formatProtectionMessage(\n          tabProtectionSettings.settings.customMessages.activeAlarmMessage,\n          { alarmName: appState.activeAlarm.label }\n        );\n        event.preventDefault();\n        event.returnValue = message; // Chrome requires returnValue to be set\n        return message; // For other browsers\n      }\n\n      // Check if there are enabled alarms that could ring soon\n      if (tabProtectionSettings.settings.protectionTiming.upcomingAlarmWarning) {\n        const enabledAlarms = appState.alarms.filter(alarm => alarm.enabled);\n        if (enabledAlarms.length > 0) {\n          // Check if any alarm is within the configured threshold\n          const now = new Date();\n          const thresholdFromNow = new Date(now.getTime() + tabProtectionSettings.settings.protectionTiming.upcomingAlarmThreshold * 60 * 1000);\n\n          const upcomingAlarms = enabledAlarms.filter(alarm => {\n            const today = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n            // Check if alarm is set for today\n            if (!alarm.days.includes(today)) {\n              return false;\n            }\n\n            // Parse alarm time\n            const [hours, minutes] = alarm.time.split(':').map(Number);\n            const alarmTime = new Date(now);\n            alarmTime.setHours(hours, minutes, 0, 0);\n\n            // If alarm time has passed today, check if it's for tomorrow\n            if (alarmTime <= now) {\n              alarmTime.setDate(alarmTime.getDate() + 1);\n            }\n\n            return alarmTime <= thresholdFromNow;\n          });\n\n          if (upcomingAlarms.length > 0) {\n            // Announce the warning for accessibility\n            announceProtectionWarning();\n\n            const timeframe = formatTimeframe(tabProtectionSettings.settings.protectionTiming.upcomingAlarmThreshold);\n            const message = formatProtectionMessage(\n              tabProtectionSettings.settings.customMessages.upcomingAlarmMessage,\n              { count: upcomingAlarms.length, timeframe }\n            );\n            event.preventDefault();\n            event.returnValue = message;\n            return message;\n          }\n        }\n      }\n    };\n\n    // Add the event listener\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    // Cleanup function to remove the event listener\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, [appState.activeAlarm, appState.alarms, announceProtectionWarning, tabProtectionSettings.settings]); // Re-run when activeAlarm, alarms, announcement function, or protection settings change\n\n  // Listen for changes to tab protection setting from localStorage\n  useEffect(() => {\n    const handleStorageChange = () => {\n      const stored = localStorage.getItem('tabProtectionEnabled');\n      const enabled = stored !== null ? JSON.parse(stored) : true;\n      setTabProtectionEnabled(enabled);\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n\n  const handleAddAlarm = async (alarmData: {\n    time: string;\n    label: string;\n    days: number[];\n    voiceMood: VoiceMood;\n    difficulty?: AlarmDifficulty;\n    nuclearChallenges?: string[];\n    soundType?: 'built-in' | 'custom' | 'voice-only';\n    customSoundId?: string;\n    snoozeEnabled?: boolean;\n    snoozeInterval?: number;\n    maxSnoozes?: number;\n  }) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(new Error('User not authenticated'), 'Cannot create alarm without authentication');\n      return;\n    }\n\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    // Start performance tracking\n    appAnalytics.startPerformanceMarker('alarm_creation');\n\n    try {\n      let newAlarm: Alarm;\n\n      // Prepare alarm data with user ID\n\n      if (isOnline) {\n        // Online: save to server and local storage\n        newAlarm = {\n          id: `alarm-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n          userId: auth.user.id,\n          enabled: true,\n          isActive: true,\n          dayNames: alarmData.days ? alarmData.days.map(d => ([\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"][d] as DayOfWeek)) : [],\n          sound: 'default',\n          difficulty: 'medium',\n          snoozeEnabled: true,\n          snoozeInterval: 5,\n          maxSnoozes: 3,\n          snoozeCount: 0,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          ...alarmData\n        };\n\n        const saveResult = await SupabaseService.saveAlarm(newAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n\n        await OfflineStorage.saveAlarm(newAlarm);\n      } else {\n        // Offline: save locally only\n        newAlarm = {\n          id: `offline-${Date.now()}`,\n          userId: auth.user.id,\n          enabled: true,\n          isActive: true,\n          dayNames: alarmData.days ? alarmData.days.map(d => ([\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"][d] as DayOfWeek)) : [],\n          sound: 'default',\n          difficulty: 'medium',\n          snoozeEnabled: true,\n          snoozeInterval: 5,\n          maxSnoozes: 3,\n          snoozeCount: 0,\n          lastTriggered: undefined,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          ...alarmData\n        };\n        await OfflineStorage.saveAlarm(newAlarm);\n      }\n\n      const updatedAlarms = [...appState.alarms, newAlarm];\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms\n      }));\n      setShowAlarmForm(false);\n\n      // Announce successful alarm creation\n      AccessibilityUtils.createAriaAnnouncement(\n        `Alarm created successfully for ${newAlarm.label} at ${newAlarm.time}`,\n        'polite'\n      );\n\n      // Play success sound\n      playSuccess();\n\n      // Refresh rewards system with new alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track comprehensive analytics\n      appAnalytics.trackAlarmCreated(newAlarm, {\n        isQuickSetup: false\n      });\n\n      // Track performance\n      const duration = appAnalytics.endPerformanceMarker('alarm_creation', {\n        success: true,\n        isOnline,\n        totalAlarms: updatedAlarms.length\n      });\n\n      appAnalytics.trackAlarmAction('create', newAlarm.id, { success: true, duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms([...appState.alarms, newAlarm]);\n\n      // Schedule push notification for new alarm\n      try {\n        await PushNotificationService.scheduleAlarmPush(newAlarm);\n      } catch (error) {\n        console.warn('Failed to schedule push notification for new alarm:', error);\n      }\n\n    } catch (error) {\n      // Track error and performance\n      const duration = appAnalytics.endPerformanceMarker('alarm_creation', {\n        success: false,\n        error: error instanceof Error ? error.message : String(error)\n      });\n\n      appAnalytics.trackAlarmAction('create', 'unknown', { success: false, error: error instanceof Error ? error.message : String(error), duration });\n      appAnalytics.trackError(error instanceof Error ? error : new Error(String(error)), {\n        action: 'create_alarm',\n        alarmData\n      });\n\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to create alarm', {\n        context: 'create_alarm',\n        metadata: { alarmData, isOnline }\n      });\n    }\n  };\n\n  const handleEditAlarm = async (alarmId: string, alarmData: {\n    time: string;\n    label: string;\n    days: number[];\n    voiceMood: VoiceMood;\n    difficulty?: AlarmDifficulty;\n    nuclearChallenges?: string[];\n    soundType?: 'built-in' | 'custom' | 'voice-only';\n    customSoundId?: string;\n    snoozeEnabled?: boolean;\n    snoozeInterval?: number;\n    maxSnoozes?: number;\n  }) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(new Error('User not authenticated'), 'Cannot edit alarm without authentication');\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('edit', alarmId, { voiceMood: alarmData.voiceMood });\n      const existingAlarm = appState.alarms.find(a => a.id === alarmId);\n      if (!existingAlarm) throw new Error('Alarm not found');\n\n      const updatedAlarm: Alarm = {\n        ...existingAlarm,\n        ...alarmData,\n        updatedAt: new Date()\n      };\n\n      if (isOnline) {\n        // Online: update server and local storage\n        const saveResult = await SupabaseService.saveAlarm(updatedAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      } else {\n        // Offline: update locally only\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      }\n\n      const updatedAlarms = appState.alarms.map(alarm =>\n        alarm.id === alarmId ? updatedAlarm : alarm\n      );\n\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms\n      }));\n      setEditingAlarm(null);\n      setShowAlarmForm(false);\n\n      // Announce successful alarm update\n      AccessibilityUtils.createAriaAnnouncement(\n        `Alarm updated successfully for ${updatedAlarm.label} at ${updatedAlarm.time}`,\n        'polite'\n      );\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('edit', updatedAlarm.id, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_editing', 'completed', { voiceMood: alarmData.voiceMood, duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('edit', editingAlarm?.id || 'unknown', { success: false, error: error instanceof Error ? error.message : String(error), duration });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), { action: 'edit_alarm' });\n\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to edit alarm', {\n        context: 'edit_alarm',\n        metadata: { alarmId, alarmData, isOnline }\n      });\n    }\n  };\n\n  const handleDeleteAlarm = async (alarmId: string) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(new Error('User not authenticated'), 'Cannot delete alarm without authentication');\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('delete', alarmId);\n      if (isOnline) {\n        // Online: delete from server and local storage\n        const deleteResult = await SupabaseService.deleteAlarm(alarmId);\n        if (deleteResult.error) {\n          throw new Error(deleteResult.error);\n        }\n        await OfflineStorage.deleteAlarm(alarmId);\n      } else {\n        // Offline: delete locally only\n        await OfflineStorage.deleteAlarm(alarmId);\n      }\n\n      const alarmToDelete = appState.alarms.find(a => a.id === alarmId);\n      const updatedAlarms = appState.alarms.filter(alarm => alarm.id !== alarmId);\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms\n      }));\n\n      // Announce successful alarm deletion\n      if (alarmToDelete) {\n        announce({\n          type: 'alarm-delete',\n          data: { alarm: alarmToDelete },\n          priority: 'polite'\n        });\n      }\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('delete', alarmId, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_deletion', 'completed', { duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('delete', alarmId, { success: false, error: error instanceof Error ? error.message : String(error), duration });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), { action: 'delete_alarm' });\n\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to delete alarm', {\n        context: 'delete_alarm',\n        metadata: { alarmId, isOnline }\n      });\n    }\n  };\n\n  const handleToggleAlarm = async (alarmId: string, enabled: boolean) => {\n    if (!auth.user) {\n      ErrorHandler.handleError(new Error('User not authenticated'), 'Cannot toggle alarm without authentication');\n      return;\n    }\n\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('toggle', alarmId, { enabled });\n      const existingAlarm = appState.alarms.find(a => a.id === alarmId);\n      if (!existingAlarm) throw new Error('Alarm not found');\n\n      const updatedAlarm: Alarm = {\n        ...existingAlarm,\n        enabled,\n        updatedAt: new Date()\n      };\n\n      if (isOnline) {\n        // Online: update server and local storage\n        const saveResult = await SupabaseService.saveAlarm(updatedAlarm);\n        if (saveResult.error) {\n          throw new Error(saveResult.error);\n        }\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      } else {\n        // Offline: update locally only\n        await OfflineStorage.saveAlarm(updatedAlarm);\n      }\n\n      const updatedAlarms = appState.alarms.map(alarm =>\n        alarm.id === alarmId ? updatedAlarm : alarm\n      );\n\n      setAppState(prev => ({\n        ...prev,\n        alarms: updatedAlarms\n      }));\n\n      // Announce alarm toggle state change\n      announce({\n        type: 'alarm-toggle',\n        data: { alarm: updatedAlarm, enabled },\n        priority: 'polite'\n      });\n\n      // Refresh rewards system with updated alarms\n      await refreshRewardsSystem(updatedAlarms);\n\n      // Track performance and analytics\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('toggle', alarmId, { success: true, enabled, duration });\n      analytics.trackFeatureUsage('alarm_toggle', 'completed', { enabled, duration });\n\n      // Update service worker\n      updateServiceWorkerAlarms(updatedAlarms);\n\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('toggle', alarmId, { success: false, enabled, error: error instanceof Error ? error.message : String(error), duration });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), { action: 'toggle_alarm' });\n\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to toggle alarm', {\n        context: 'toggle_alarm',\n        metadata: { alarmId, enabled, isOnline }\n      });\n    }\n  };\n\n\n\n  const handleOnboardingComplete = () => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    // Track onboarding completion\n    appAnalytics.trackOnboardingCompleted(\n      5, // Number of onboarding steps\n      Date.now() - sessionStartTime, // Time spent in onboarding\n      false // Not skipped\n    );\n\n    setAppState(prev => ({ ...prev, isOnboarding: false }));\n  };\n\n  const handleAlarmDismiss = (alarmId: string, method: 'voice' | 'button' | 'shake' | 'challenge') => {\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    const performDismiss = async () => {\n      try {\n        analytics.trackAlarmAction('dismiss', alarmId, { method });\n\n        if (isOnline) {\n          await AlarmService.dismissAlarm(alarmId, method);\n        }\n\n        const duration = performance.now() - startTime;\n        analytics.trackAlarmAction('dismiss', alarmId, { success: true, method, duration });\n        analytics.trackFeatureUsage('alarm_dismissal', 'completed', { method, duration });\n\n        setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n      } catch (error) {\n        const duration = performance.now() - startTime;\n        analytics.trackAlarmAction('dismiss', alarmId, { success: false, method, error: error instanceof Error ? error.message : String(error), duration });\n        analytics.trackError(error instanceof Error ? error : new Error(String(error)), { action: 'dismiss_alarm' });\n\n        ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to dismiss alarm', {\n          context: 'dismiss_alarm',\n          metadata: { alarmId, method, isOnline }\n        });\n        // Fallback: still dismiss the alarm even if logging fails\n        setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n      }\n    };\n    \n    performDismiss();\n  };\n\n  const handleAlarmSnooze = useCallback(async (alarmId: string) => {\n    const analytics = AppAnalyticsService.getInstance();\n    const startTime = performance.now();\n\n    try {\n      analytics.trackAlarmAction('snooze', alarmId);\n\n      if (isOnline) {\n        await AlarmService.snoozeAlarm(alarmId);\n      }\n\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('snooze', alarmId, { success: true, duration });\n      analytics.trackFeatureUsage('alarm_snooze', 'completed', { duration });\n\n      setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n    } catch (error) {\n      const duration = performance.now() - startTime;\n      analytics.trackAlarmAction('snooze', alarmId, { success: false, error: error instanceof Error ? error.message : String(error), duration });\n      analytics.trackError(error instanceof Error ? error : new Error(String(error)), { action: 'snooze_alarm' });\n\n      ErrorHandler.handleError(error instanceof Error ? error : new Error(String(error)), 'Failed to snooze alarm', {\n        context: 'snooze_alarm',\n        metadata: { alarmId, isOnline }\n      });\n      // Fallback: still hide the alarm even if snooze fails\n      setAppState(prev => ({ ...prev, activeAlarm: null, currentView: 'dashboard' }));\n    }\n  }, [isOnline]);\n\n\n  // Show loading screen while auth is initializing\n  if (!auth.isInitialized || !isInitialized) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-primary-900\">\n        <div className=\"text-center text-white\">\n          <Clock className=\"w-16 h-16 mx-auto mb-4 animate-spin\" />\n          <h2 className=\"text-xl font-semibold\">{t('common:app.loading')}</h2>\n          <p className=\"text-primary-200 mt-2\">\n            {!auth.isInitialized ? t('auth:loading.checkingAuth', { defaultValue: 'Checking authentication...' }) :\n             !accessibilityInitialized ? t('common:accessibility.loading', { defaultValue: 'Initializing accessibility services...' }) :\n             t('common:status.loading', { defaultValue: 'Initializing offline capabilities...' })}\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show authentication flow if user is not logged in\n  if (!auth.user) {\n    return (\n      <ErrorBoundary\n        context=\"Authentication\"\n        fallback={\n          <div className=\"min-h-screen bg-red-50 dark:bg-red-900/10 flex items-center justify-center p-4\">\n            <div className=\"text-center max-w-md mx-auto\">\n              <h2 className=\"text-xl font-bold text-red-800 dark:text-red-200 mb-2\">Authentication Error</h2>\n              <p className=\"text-red-600 dark:text-red-300 mb-4\">\n                There was a problem with the authentication system. Please refresh the page or try again later.\n              </p>\n              <button\n                onClick={() => window.location.reload()}\n                className=\"bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors\"\n              >\n                Refresh Page\n              </button>\n            </div>\n          </div>\n        }\n      >\n        <AuthenticationFlow\n          onAuthSuccess={() => {\n            // Auth success is handled by the useAuth hook\n          }}\n          onSignUp={auth.signUp}\n          onSignIn={auth.signIn}\n          onForgotPassword={auth.resetPassword}\n          isLoading={auth.isLoading}\n          error={auth.error}\n          forgotPasswordSuccess={auth.forgotPasswordSuccess}\n        />\n      </ErrorBoundary>\n    );\n  }\n\n  // Show onboarding flow for new users (after authentication)\n  if (appState.isOnboarding) {\n    return (\n      <OnboardingFlow\n        onComplete={handleOnboardingComplete}\n        appState={appState}\n        setAppState={setAppState}\n      />\n    );\n  }\n\n  if (appState.activeAlarm) {\n    return (\n      <ErrorBoundary context=\"AlarmRinging\" fallback={\n        <div className=\"min-h-screen bg-red-50 dark:bg-red-900/10 flex items-center justify-center p-4\">\n          <div className=\"text-center\">\n            <h2 className=\"text-xl font-bold text-red-800 dark:text-red-200 mb-2\">Alarm Error</h2>\n            <p className=\"text-red-600 dark:text-red-300 mb-4\">There was a problem with the alarm. It has been dismissed.</p>\n            <button\n              onClick={() => setAppState(prev => ({ ...prev, activeAlarm: null }))}\n              className=\"bg-red-600 text-white px-4 py-2 rounded-lg\"\n            >\n              Back to Dashboard\n            </button>\n          </div>\n        </div>\n      }>\n        <AlarmRinging\n          alarm={appState.activeAlarm}\n          user={auth.user!}\n          onDismiss={handleAlarmDismiss}\n          onSnooze={handleAlarmSnooze}\n        />\n      </ErrorBoundary>\n    );\n  }\n\n  const renderContent = () => {\n    const appAnalytics = AppAnalyticsService.getInstance();\n\n    switch (appState.currentView) {\n      case 'dashboard':\n        appAnalytics.trackPageView('dashboard', {\n          totalAlarms: appState.alarms.length,\n          activeAlarms: appState.alarms.filter(a => a.enabled).length\n        });\n        return (\n          <ErrorBoundary context=\"Dashboard\">\n            <Dashboard\n              alarms={appState.alarms}\n              onAddAlarm={() => {\n                appAnalytics.trackFeatureUsage('add_alarm', 'button_clicked');\n                setShowAlarmForm(true);\n              }}\n              onQuickSetup={handleQuickSetup}\n              onNavigateToAdvanced={() => {\n                appAnalytics.trackFeatureUsage('navigation', 'advanced_scheduling_from_dashboard');\n                setAppState(prev => ({ ...prev, currentView: 'advanced-scheduling' }));\n              }}\n            />\n          </ErrorBoundary>\n        );\n      case 'alarms':\n        appAnalytics.trackPageView('alarms', {\n          totalAlarms: appState.alarms.length\n        });\n        return (\n          <ErrorBoundary context=\"AlarmList\">\n            <AlarmList\n              alarms={appState.alarms}\n              onToggleAlarm={handleToggleAlarm}\n              onEditAlarm={(alarm) => {\n                appAnalytics.trackFeatureUsage('edit_alarm', 'button_clicked', {\n                  alarmId: alarm.id,\n                  alarmLabel: alarm.label\n                });\n                setEditingAlarm(alarm);\n                setShowAlarmForm(true);\n              }}\n              onDeleteAlarm={handleDeleteAlarm}\n            />\n          </ErrorBoundary>\n        );\n      case 'advanced-scheduling':\n        appAnalytics.trackPageView('advanced_scheduling');\n        appAnalytics.trackFeatureUsage('advanced_scheduling', 'accessed');\n        return (\n          <ErrorBoundary context=\"AdvancedAlarmScheduling\">\n            <AdvancedAlarmScheduling\n              alarms={advancedAlarms}\n              onCreateAlarm={createAdvancedAlarm}\n              onUpdateAlarm={updateAdvancedAlarm}\n              onDeleteAlarm={deleteAdvancedAlarm}\n            />\n          </ErrorBoundary>\n        );\n      case 'gaming':\n        appAnalytics.trackPageView('gaming');\n        appAnalytics.trackFeatureUsage('gaming_hub', 'accessed');\n        return (\n          <ErrorBoundary context=\"GamingHub\">\n            <GamingHub\n              currentUser={auth.user as User}\n              rewardSystem={appState.rewardSystem}\n              activeBattles={appState.activeBattles || []}\n              friends={appState.friends || []}\n              onCreateBattle={(battle) => {\n                // Add battle to state with complete Battle object\n                const completeBattle: Battle = {\n                  id: battle.id || Math.random().toString(36).substr(2, 9),\n                  type: battle.type || 'speed',\n                  participants: battle.participants || [],\n                  creatorId: battle.creatorId || auth.user?.id || '',\n                  status: battle.status || 'pending',\n                  startTime: battle.startTime || new Date().toISOString(),\n                  endTime: battle.endTime || new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n                  settings: battle.settings || { duration: 'PT24H', difficulty: 'medium' },\n                  createdAt: battle.createdAt || new Date().toISOString(),\n                  ...battle\n                };\n                setAppState(prev => ({\n                  ...prev,\n                  activeBattles: [...(prev.activeBattles || []), completeBattle]\n                }));\n                appAnalytics.trackFeatureUsage('battle_creation', 'created', {\n                  battleType: completeBattle.type\n                });\n              }}\n              onJoinBattle={(battleId) => {\n                appAnalytics.trackFeatureUsage('battle_participation', 'joined', { battleId });\n              }}\n              onSendTrashTalk={(battleId, message) => {\n                appAnalytics.trackFeatureUsage('trash_talk', 'sent', {\n                  battleId,\n                  messageLength: message.length\n                });\n              }}\n              onRefreshRewards={() => refreshRewardsSystem()}\n            />\n          </ErrorBoundary>\n        );\n      case 'settings':\n        appAnalytics.trackPageView('settings');\n        return (\n          <ErrorBoundary context=\"EnhancedSettings\">\n            <div className=\"p-4 space-y-6 max-w-4xl mx-auto\">\n              {/* Alarm Reliability Status Section */}\n              <section aria-labelledby=\"alarm-reliability-heading\">\n                <h2 id=\"alarm-reliability-heading\" className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                  Alarm Reliability Status\n                </h2>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\n                  Monitor your background alarm system to ensure alarms fire reliably even when switching tabs or closing the app.\n                </p>\n                <ServiceWorkerStatus />\n              </section>\n\n              {/* Divider */}\n              <hr className=\"border-gray-200 dark:border-gray-600\" />\n\n              {/* App Settings Section */}\n              <section aria-labelledby=\"app-settings-heading\">\n                <h2 id=\"app-settings-heading\" className=\"text-lg font-semibold text-gray-900 dark:text-white mb-3\">\n                  App Settings\n                </h2>\n                <EnhancedSettings\n                  appState={appState}\n                  setAppState={setAppState}\n                  onUpdateProfile={auth.updateUserProfile}\n                  onSignOut={auth.signOut}\n                  isLoading={auth.isLoading}\n                  error={auth.error}\n                />\n              </section>\n            </div>\n          </ErrorBoundary>\n        );\n      case 'pricing':\n        appAnalytics.trackPageView('pricing');\n        appAnalytics.trackFeatureUsage('pricing_page', 'accessed');\n        return (\n          <ErrorBoundary context=\"PricingPage\">\n            <PricingPage\n              user={auth.user as User}\n              onUpgrade={(plan) => {\n                appAnalytics.trackFeatureUsage('subscription', 'upgraded', {\n                  plan: plan.id,\n                  price: plan.price\n                });\n                // Show success message or redirect\n              }}\n              onManageSubscription={() => {\n                appAnalytics.trackFeatureUsage('subscription', 'manage_clicked');\n                // Handle subscription management\n              }}\n            />\n          </ErrorBoundary>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <ThemeProvider defaultTheme=\"light\" enableSystem={true}>\n      <ScreenReaderProvider enabled={true} verbosity=\"medium\">\n        <div className=\"min-h-screen flex flex-col safe-top safe-bottom\" style={{\n          backgroundColor: 'var(--theme-background)',\n          color: 'var(--theme-text-primary)'\n        }}>\n      {/* Skip to main content */}\n      <a\n        href=\"#main-content\"\n        className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-600 text-white px-4 py-2 rounded-lg font-medium z-50\"\n      >\n        {getA11yLabels().skipToContent}\n      </a>\n\n      {/* Header with Offline Indicator */}\n      <header className=\"shadow-sm border-b\" style={{\n        backgroundColor: 'var(--theme-surface)',\n        borderColor: 'var(--theme-border)',\n        color: 'var(--theme-text-primary)'\n      }} role=\"banner\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <h1 className=\"text-xl font-bold\" style={{ color: 'var(--theme-text-primary)' }}>\n                🚀 {t('common:app.name')}\n              </h1>\n              {auth.user && (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm\" style={{ color: 'var(--theme-text-secondary)' }}>\n                    {auth.user.name || auth.user.email}\n                  </span>\n                  {auth.user.level && (\n                    <span className=\"text-xs px-2 py-1 rounded\" style={{\n                      backgroundColor: 'var(--theme-primary-100)',\n                      color: 'var(--theme-primary-800)'\n                    }}>\n                      Level {auth.user.level}\n                    </span>\n                  )}\n                </div>\n              )}\n            </div>\n            <div className=\"flex items-center gap-3\" role=\"group\" aria-label=\"Header actions\">\n              <OfflineIndicator />\n              {tabProtectionSettings.settings.enabled && tabProtectionSettings.settings.visualSettings.showVisualWarning && (\n                <TabProtectionWarning\n                  activeAlarm={appState.activeAlarm}\n                  enabledAlarms={appState.alarms.filter(alarm => alarm.enabled)}\n                  settings={tabProtectionSettings.settings}\n                />\n              )}\n              <button\n                onClick={createClickHandler(() => setShowAlarmForm(true))}\n                className=\"alarm-button alarm-button-primary p-2 rounded-full\"\n                aria-label=\"Add new alarm\"\n                aria-describedby=\"add-alarm-desc\"\n              >\n                <Plus className=\"w-5 h-5\" aria-hidden=\"true\" />\n                <span id=\"add-alarm-desc\" className=\"sr-only\">Opens the new alarm creation form</span>\n              </button>\n              <button\n                onClick={auth.signOut}\n                className=\"p-2 rounded-full text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-600 focus:ring-offset-2\"\n                aria-label=\"Sign out\"\n                aria-describedby=\"sign-out-desc\"\n              >\n                <LogOut className=\"w-5 h-5\" aria-hidden=\"true\" />\n                <span id=\"sign-out-desc\" className=\"sr-only\">Sign out of your account</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main id=\"main-content\" className=\"flex-1 overflow-y-auto\" role=\"main\">\n        {renderContent()}\n      </main>\n\n      {/* Bottom Navigation */}\n      <nav\n        className=\"border-t\"\n        style={{\n          backgroundColor: 'var(--theme-surface)',\n          borderColor: 'var(--theme-border)'\n        }}\n        role=\"navigation\"\n        aria-label=\"Main navigation\"\n      >\n        <div className=\"grid grid-cols-6 px-1 py-2\" role=\"tablist\" aria-label=\"App sections\">\n          <button\n            onClick={createClickHandler(() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'dashboard_clicked');\n              setAppState(prev => ({ ...prev, currentView: 'dashboard' }));\n              AccessibilityUtils.announcePageChange('Dashboard');\n            })}\n            className=\"flex flex-col items-center py-2 rounded-lg transition-colors border-2\"\n            style={appState.currentView === 'dashboard' ? {\n              color: 'var(--theme-primary-800)',\n              backgroundColor: 'var(--theme-primary-100)',\n              borderColor: 'var(--theme-primary-300)'\n            } : {\n              color: 'var(--theme-text-secondary)',\n              backgroundColor: 'transparent',\n              borderColor: 'transparent'\n            }}\n            onMouseEnter={(e) => {\n              if (appState.currentView !== 'dashboard') {\n                e.currentTarget.style.backgroundColor = 'var(--theme-surface-hover)';\n                e.currentTarget.style.color = 'var(--theme-text-primary)';\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (appState.currentView !== 'dashboard') {\n                e.currentTarget.style.backgroundColor = 'transparent';\n                e.currentTarget.style.color = 'var(--theme-text-secondary)';\n              }\n            }}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'dashboard'}\n            aria-current={appState.currentView === 'dashboard' ? 'page' : undefined}\n            aria-label=\"Dashboard - Overview of your alarms\"\n            aria-controls=\"main-content\"\n          >\n            <Clock className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().dashboard}</span>\n          </button>\n\n          <button\n            onClick={createClickHandler(() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'alarms_clicked', {\n                totalAlarms: appState.alarms.length\n              });\n              setAppState(prev => ({ ...prev, currentView: 'alarms' }));\n              AccessibilityUtils.announcePageChange('Alarms');\n            })}\n            className=\"flex flex-col items-center py-2 rounded-lg transition-colors border-2\"\n            style={appState.currentView === 'alarms' ? {\n              color: 'var(--theme-primary-800)',\n              backgroundColor: 'var(--theme-primary-100)',\n              borderColor: 'var(--theme-primary-300)'\n            } : {\n              color: 'var(--theme-text-secondary)',\n              backgroundColor: 'transparent',\n              borderColor: 'transparent'\n            }}\n            onMouseEnter={(e) => {\n              if (appState.currentView !== 'alarms') {\n                e.currentTarget.style.backgroundColor = 'var(--theme-surface-hover)';\n                e.currentTarget.style.color = 'var(--theme-text-primary)';\n              }\n            }}\n            onMouseLeave={(e) => {\n              if (appState.currentView !== 'alarms') {\n                e.currentTarget.style.backgroundColor = 'transparent';\n                e.currentTarget.style.color = 'var(--theme-text-secondary)';\n              }\n            }}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'alarms'}\n            aria-current={appState.currentView === 'alarms' ? 'page' : undefined}\n            aria-label=\"Alarms - Manage your alarm list\"\n            aria-controls=\"main-content\"\n          >\n            <Bell className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().alarms}</span>\n          </button>\n\n          <button\n            onClick={createClickHandler(() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'advanced_scheduling_clicked');\n              setAppState(prev => ({ ...prev, currentView: 'advanced-scheduling' }));\n              AccessibilityUtils.announcePageChange('Advanced Scheduling');\n            })}\n            className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n              appState.currentView === 'advanced-scheduling'\n                ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n            }`}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'advanced-scheduling'}\n            aria-current={appState.currentView === 'advanced-scheduling' ? 'page' : undefined}\n            aria-label=\"Advanced Scheduling - Create smart alarms with AI optimization\"\n            aria-controls=\"main-content\"\n          >\n            <Brain className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().advanced}</span>\n          </button>\n\n          <button\n            onClick={createClickHandler(() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'gaming_clicked', {\n                currentLevel: appState.rewardSystem?.level,\n                hasRewards: !!appState.rewardSystem?.unlockedRewards.length,\n                activeBattles: appState.activeBattles?.length\n              });\n              setAppState(prev => ({ ...prev, currentView: 'gaming' }));\n              AccessibilityUtils.announcePageChange('Gaming Hub');\n            })}\n            className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n              appState.currentView === 'gaming'\n                ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n            }`}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'gaming'}\n            aria-current={appState.currentView === 'gaming' ? 'page' : undefined}\n            aria-label=\"Gaming - Rewards, battles, and community challenges\"\n            aria-controls=\"main-content\"\n          >\n            <Gamepad2 className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().gaming}</span>\n          </button>\n\n          <button\n            onClick={createClickHandler(() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'settings_clicked');\n              setAppState(prev => ({ ...prev, currentView: 'settings' }));\n              AccessibilityUtils.announcePageChange('Settings');\n            })}\n            className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n              appState.currentView === 'settings'\n                ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n            }`}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'settings'}\n            aria-current={appState.currentView === 'settings' ? 'page' : undefined}\n            aria-label=\"Settings - App preferences, analytics, and accessibility\"\n            aria-controls=\"main-content\"\n          >\n            <Settings className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().settings}</span>\n          </button>\n\n          <button\n            onClick={() => {\n              const appAnalytics = AppAnalyticsService.getInstance();\n              appAnalytics.trackFeatureUsage('navigation', 'pricing_clicked');\n              setAppState(prev => ({ ...prev, currentView: 'pricing' }));\n              AccessibilityUtils.announcePageChange('Premium Plans');\n            }}\n            className={`flex flex-col items-center py-2 rounded-lg transition-colors ${\n              appState.currentView === 'pricing'\n                ? 'text-primary-800 dark:text-primary-100 bg-primary-100 dark:bg-primary-800 border-2 border-primary-300 dark:border-primary-600'\n                : 'text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-dark-700 border border-transparent hover:border-gray-300 dark:hover:border-dark-600'\n            }`}\n            role=\"tab\"\n            aria-selected={appState.currentView === 'pricing'}\n            aria-current={appState.currentView === 'pricing' ? 'page' : undefined}\n            aria-label=\"Premium - Subscription plans and premium features\"\n            aria-controls=\"main-content\"\n          >\n            <Crown className=\"w-5 h-5 mb-1\" aria-hidden=\"true\" />\n            <span className=\"text-xs font-medium\">{getNavigationLabels().premium}</span>\n          </button>\n\n        </div>\n      </nav>\n\n      {/* Alarm Form Modal */}\n      {showAlarmForm && (\n        <ErrorBoundary context=\"AlarmForm\">\n          <AlarmForm\n            alarm={editingAlarm}\n            onSave={editingAlarm ?\n              (data) => handleEditAlarm(editingAlarm.id, data) :\n              handleAddAlarm\n            }\n            onCancel={() => {\n              setShowAlarmForm(false);\n              setEditingAlarm(null);\n            }}\n            userId={auth.user?.id || ''}\n            user={auth.user!}\n          />\n        </ErrorBoundary>\n      )}\n\n      {/* PWA Install Prompt */}\n      <PWAInstallPrompt\n        onInstall={handlePWAInstall}\n        onDismiss={handlePWADismiss}\n      />\n        </div>\n      </ScreenReaderProvider>\n    </ThemeProvider>\n  );\n}\n\n// Main App component that provides the LanguageProvider\nfunction App() {\n  return (\n    <LanguageProvider defaultLanguage=\"en\" enableAutoDetect={true}>\n      <AppContent />\n    </LanguageProvider>\n  );\n}\n\nexport default App;","usedDeprecatedRules":[]}]
