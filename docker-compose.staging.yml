# Docker Compose for Relife Smart Alarm App - Staging
version: '3.8'

services:
  # Main application container - Staging build
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_APP_ENV: staging
        VITE_APP_VERSION: ${VITE_APP_VERSION:-2.0.0-staging}
        VITE_BUILD_TIME: ${VITE_BUILD_TIME}
        VITE_SUPABASE_URL: ${VITE_SUPABASE_URL}
        VITE_SUPABASE_ANON_KEY: ${VITE_SUPABASE_ANON_KEY}
        VITE_POSTHOG_KEY: ${VITE_POSTHOG_KEY}
        VITE_POSTHOG_HOST: ${VITE_POSTHOG_HOST}
        VITE_SENTRY_DSN: ${VITE_SENTRY_DSN}
        VITE_PERFORMANCE_MONITORING: ${VITE_PERFORMANCE_MONITORING:-true}
        VITE_PERFORMANCE_ENDPOINT: ${VITE_PERFORMANCE_ENDPOINT}
        VITE_ANALYTICS_ENDPOINT: ${VITE_ANALYTICS_ENDPOINT}
    
    container_name: relife-app-staging
    
    ports:
      - "80:80"
      - "443:443"
    
    environment:
      - NODE_ENV=production
      - VITE_APP_ENV=staging
      - MONITORING_ENABLED=true
      - PERFORMANCE_MONITORING=true
      - LOG_LEVEL=DEBUG  # More verbose logging for staging
      - NGINX_WORKER_PROCESSES=2
    
    volumes:
      # SSL certificates (if using)
      - ${SSL_CERT_PATH:-./certs}:/etc/ssl/certs:ro
      - ${SSL_KEY_PATH:-./certs}:/etc/ssl/private:ro
      # Logs
      - staging-logs:/var/log/nginx
      - staging-logs:/var/log/app
    
    networks:
      - staging-network
      - monitoring-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["/usr/local/bin/health-check.sh", "health"]
      interval: 20s
      timeout: 15s
      retries: 5
      start_period: 30s
    
    labels:
      # Traefik labels
      - "traefik.enable=true"
      - "traefik.http.routers.relife-staging.rule=Host(`${STAGING_DOMAIN:-staging.relife.app}`)"
      - "traefik.http.routers.relife-staging.tls=true"
      - "traefik.http.routers.relife-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.relife-staging.loadbalancer.server.port=80"
      # Basic Auth for staging (optional)
      - "traefik.http.middlewares.staging-auth.basicauth.users=${STAGING_AUTH_USERS}"
      - "traefik.http.routers.relife-staging.middlewares=staging-auth"
    
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 768M
        reservations:
          cpus: '0.5'
          memory: 256M

  # API Backend for staging
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    
    container_name: relife-api-staging
    
    ports:
      - "3001:3001"
    
    environment:
      - NODE_ENV=staging
      - PORT=3001
      - DATABASE_URL=${STAGING_DATABASE_URL}
      - REDIS_URL=${STAGING_REDIS_URL}
      - LOG_LEVEL=debug
    
    volumes:
      - staging-api-logs:/app/logs
    
    networks:
      - staging-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for staging
  redis:
    image: redis:7-alpine
    container_name: relife-redis-staging
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-staging-data:/data
    
    networks:
      - staging-network
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Testing container for automated tests
  testing:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
    
    container_name: relife-testing-staging
    
    environment:
      - NODE_ENV=test
      - VITE_APP_ENV=staging
      - TEST_BASE_URL=http://app
    
    volumes:
      - ./test-results:/app/test-results
      - staging-logs:/var/log/test
    
    networks:
      - staging-network
    
    depends_on:
      - app
      - api
    
    profiles:
      - testing
    
    command: >
      sh -c "
        echo 'Waiting for app to be ready...' &&
        sleep 30 &&
        npm run test:e2e &&
        npm run test:performance &&
        npm run test:accessibility
      "

  # Prometheus for metrics (staging config)
  prometheus:
    image: prom/prometheus:latest
    container_name: relife-prometheus-staging
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'  # Shorter retention for staging
      - '--web.enable-lifecycle'
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-staging-data:/prometheus
    
    networks:
      - monitoring-network
    
    restart: unless-stopped

  # Grafana for staging monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: relife-grafana-staging
    
    ports:
      - "3002:3000"
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=true  # Allow sign up in staging
      - GF_SERVER_ROOT_URL=https://${STAGING_DOMAIN:-staging.relife.app}/grafana/
      - GF_ANALYTICS_REPORTING_ENABLED=false
    
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning-staging:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      - monitoring-network
    
    restart: unless-stopped

  # Performance testing container
  performance-tests:
    image: loadimpact/k6:latest
    container_name: relife-k6-staging
    
    volumes:
      - ./performance-tests:/scripts
      - ./test-results:/results
    
    networks:
      - staging-network
    
    depends_on:
      - app
    
    profiles:
      - performance-testing
    
    command: >
      run
      --out json=/results/performance-results.json
      --summary-export=/results/performance-summary.json
      /scripts/load-test.js

  # Security scanning
  security-scan:
    image: owasp/zap2docker-stable
    container_name: relife-security-staging
    
    volumes:
      - ./security-reports:/zap/wrk
    
    networks:
      - staging-network
    
    depends_on:
      - app
    
    profiles:
      - security-testing
    
    command: >
      zap-baseline.py
      -t http://app
      -J security-report.json
      -r security-report.html

# Networks
networks:
  staging-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.24.0.0/16
  
  monitoring-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

# Volumes
volumes:
  redis-staging-data:
    driver: local
  
  grafana-staging-data:
    driver: local
  
  prometheus-staging-data:
    driver: local
  
  staging-logs:
    driver: local
  
  staging-api-logs:
    driver: local