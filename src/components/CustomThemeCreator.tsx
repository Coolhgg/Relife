import React, { useState, useCallback } from 'react';\nimport { Palette, Download, Upload, Share, Save, X, Check } from 'lucide-react';\n\ninterface ColorPickerProps {\n  label: string;\n  color: string;\n  onChange: (color: string) => void;\n  className?: string;\n}\n\nconst ColorPicker: React.FC<ColorPickerProps> = ({ label, color, onChange, className = '' }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [tempColor, setTempColor] = useState(color);\n\n  const handleColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTempColor(e.target.value);\n  };\n\n  const applyColor = () => {\n    onChange(tempColor);\n    setIsOpen(false);\n  };\n\n  const cancelColor = () => {\n    setTempColor(color);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className={`relative ${className}`}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full flex items-center gap-3 p-3 rounded-lg border-2 border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600 transition-colors\"\n      >\n        <div \n          className=\"w-6 h-6 rounded-full border-2 border-white shadow-sm\"\n          style={{ backgroundColor: color }}\n        />\n        <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n          {label}\n        </span>\n        <span className=\"text-xs text-gray-500 dark:text-gray-400 ml-auto\">\n          {color.toUpperCase()}\n        </span>\n      </button>\n      \n      {isOpen && (\n        <div className=\"absolute top-full left-0 right-0 mt-2 p-4 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700 z-50\">\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                Pick Color\n              </span>\n              <div className=\"flex gap-2\">\n                <button\n                  onClick={applyColor}\n                  className=\"p-1 text-green-600 hover:bg-green-100 dark:hover:bg-green-900 rounded\"\n                >\n                  <Check className=\"w-4 h-4\" />\n                </button>\n                <button\n                  onClick={cancelColor}\n                  className=\"p-1 text-red-600 hover:bg-red-100 dark:hover:bg-red-900 rounded\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n            \n            <input\n              type=\"color\"\n              value={tempColor}\n              onChange={handleColorChange}\n              className=\"w-full h-12 rounded-lg border-0 cursor-pointer\"\n            />\n            \n            <input\n              type=\"text\"\n              value={tempColor}\n              onChange={(e) => setTempColor(e.target.value)}\n              className=\"w-full px-3 py-2 text-sm border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n              placeholder=\"#000000\"\n            />\n            \n            {/* Predefined colors */}\n            <div className=\"grid grid-cols-8 gap-1\">\n              {[\n                '#ef4444', '#f97316', '#eab308', '#22c55e',\n                '#06b6d4', '#3b82f6', '#8b5cf6', '#ec4899',\n                '#374151', '#6b7280', '#d1d5db', '#ffffff',\n                '#7f1d1d', '#7c2d12', '#365314', '#14532d'\n              ].map((presetColor) => (\n                <button\n                  key={presetColor}\n                  onClick={() => setTempColor(presetColor)}\n                  className=\"w-6 h-6 rounded border-2 border-white shadow-sm hover:scale-110 transition-transform\"\n                  style={{ backgroundColor: presetColor }}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\ninterface CustomThemeCreatorProps {\n  onThemeCreated: (theme: any) => void;\n  onClose: () => void;\n}\n\nconst CustomThemeCreator: React.FC<CustomThemeCreatorProps> = ({ onThemeCreated, onClose }) => {\n  const [themeName, setThemeName] = useState('');\n  const [primaryColor, setPrimaryColor] = useState('#3b82f6');\n  const [secondaryColor, setSecondaryColor] = useState('#8b5cf6');\n  const [accentColor, setAccentColor] = useState('#f59e0b');\n  const [gradientDirection, setGradientDirection] = useState('45deg');\n\n  const generateGradient = useCallback(() => {\n    return `linear-gradient(${gradientDirection}, ${primaryColor}, ${secondaryColor}, ${accentColor})`;\n  }, [primaryColor, secondaryColor, accentColor, gradientDirection]);\n\n  const handleSave = () => {\n    if (!themeName.trim()) {\n      alert('Please enter a theme name');\n      return;\n    }\n\n    const customTheme = {\n      id: `custom-${Date.now()}`,\n      name: themeName,\n      colors: {\n        primary: primaryColor,\n        secondary: secondaryColor,\n        accent: accentColor\n      },\n      gradient: generateGradient(),\n      isCustom: true,\n      createdAt: new Date().toISOString()\n    };\n\n    onThemeCreated(customTheme);\n    onClose();\n  };\n\n  const exportTheme = () => {\n    const themeData = {\n      name: themeName,\n      colors: {\n        primary: primaryColor,\n        secondary: secondaryColor,\n        accent: accentColor\n      },\n      gradient: generateGradient(),\n      version: '1.0'\n    };\n\n    const blob = new Blob([JSON.stringify(themeData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${themeName || 'custom-theme'}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-2xl p-6 w-full max-w-lg max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2\">\n            <Palette className=\"w-6 h-6\" />\n            Create Custom Theme\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Theme Name */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Theme Name\n            </label>\n            <input\n              type=\"text\"\n              value={themeName}\n              onChange={(e) => setThemeName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n              placeholder=\"My Awesome Theme\"\n            />\n          </div>\n\n          {/* Color Pickers */}\n          <div className=\"space-y-4\">\n            <ColorPicker\n              label=\"Primary Color\"\n              color={primaryColor}\n              onChange={setPrimaryColor}\n            />\n            <ColorPicker\n              label=\"Secondary Color\"\n              color={secondaryColor}\n              onChange={setSecondaryColor}\n            />\n            <ColorPicker\n              label=\"Accent Color\"\n              color={accentColor}\n              onChange={setAccentColor}\n            />\n          </div>\n\n          {/* Gradient Direction */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Gradient Direction\n            </label>\n            <select\n              value={gradientDirection}\n              onChange={(e) => setGradientDirection(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-200 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"45deg\">Diagonal (45°)</option>\n              <option value=\"90deg\">Vertical</option>\n              <option value=\"180deg\">Horizontal</option>\n              <option value=\"135deg\">Diagonal (135°)</option>\n              <option value=\"radial-gradient(circle\">Radial</option>\n            </select>\n          </div>\n\n          {/* Preview */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Preview\n            </label>\n            <div \n              className=\"h-24 rounded-lg flex items-center justify-center text-white font-medium\"\n              style={{ background: generateGradient() }}\n            >\n              {themeName || 'Custom Theme'}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex gap-3\">\n            <button\n              onClick={handleSave}\n              className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              Save Theme\n            </button>\n            <button\n              onClick={exportTheme}\n              className=\"px-4 py-2 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors flex items-center gap-2\"\n            >\n              <Download className=\"w-4 h-4\" />\n              Export\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { ColorPicker, CustomThemeCreator };\nexport default CustomThemeCreator;