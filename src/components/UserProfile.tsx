import { useState } from 'react';
import { User, Mail, Settings, Shield, Bell, Mic, Palette, Clock, Save, X, AlertCircle, CheckCircle } from 'lucide-react';
import type { User as AppUser, VoiceMood } from '../types';

interface UserProfileProps {
  user: AppUser;
  onUpdateProfile: (updates: Partial<AppUser>) => Promise<void>;
  onSignOut: () => void;
  isLoading: boolean;
  error: string | null;
}

export default function UserProfile({ 
  user, 
  onUpdateProfile, 
  onSignOut, 
  isLoading, 
  error 
}: UserProfileProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [editForm, setEditForm] = useState({
    name: user.name || '',
    preferences: { ...user.preferences }
  });
  const [hasChanges, setHasChanges] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);

  const handleInputChange = (field: string, value: any) => {
    if (field === 'name') {
      setEditForm(prev => ({ ...prev, name: value }));
    } else {
      setEditForm(prev => ({
        ...prev,
        preferences: { ...prev.preferences, [field]: value }
      }));
    }
    setHasChanges(true);
    setSaveSuccess(false);
  };

  const handleSave = async () => {
    try {
      await onUpdateProfile({
        name: editForm.name,
        preferences: editForm.preferences
      });
      setIsEditing(false);
      setHasChanges(false);
      setSaveSuccess(true);
      
      // Clear success message after 3 seconds
      setTimeout(() => setSaveSuccess(false), 3000);
    } catch (error) {
      console.error('Failed to update profile:', error);
    }
  };

  const handleCancel = () => {
    setEditForm({
      name: user.name || '',
      preferences: { ...user.preferences }
    });
    setIsEditing(false);
    setHasChanges(false);
    setSaveSuccess(false);
  };

  const voiceMoodOptions: { value: VoiceMood; label: string; description: string }[] = [
    { value: 'motivational', label: 'Motivational', description: 'Encouraging and uplifting' },
    { value: 'gentle', label: 'Gentle', description: 'Soft and calming' },
    { value: 'drill-sergeant', label: 'Drill Sergeant', description: 'Intense and commanding' },
    { value: 'sweet-angel', label: 'Sweet Angel', description: 'Kind and nurturing' },
    { value: 'anime-hero', label: 'Anime Hero', description: 'Energetic and heroic' },
    { value: 'savage-roast', label: 'Savage Roast', description: 'Humorous and teasing' }
  ];

  return (
    <div className="max-w-2xl mx-auto p-6 space-y-8">
      {/* Success Message */}
      {saveSuccess && (
        <div 
          className="p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg"
          role="alert"
          aria-live="polite"
        >
          <div className="flex items-center gap-3">
            <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" aria-hidden="true" />
            <p className="text-green-800 dark:text-green-200 font-medium">
              Profile updated successfully!
            </p>
          </div>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div \n          className=\"p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\"\n          role=\"alert\"\n          aria-live=\"polite\"\n        >\n          <div className=\"flex items-start gap-3\">\n            <AlertCircle className=\"w-5 h-5 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0\" aria-hidden=\"true\" />\n            <div>\n              <h3 className=\"font-medium text-red-800 dark:text-red-200 mb-1\">\n                Profile Update Failed\n              </h3>\n              <p className=\"text-sm text-red-700 dark:text-red-300\">\n                {error}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Profile Header */}\n      <div className=\"bg-white dark:bg-dark-800 rounded-xl p-6 shadow-sm\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"w-16 h-16 bg-primary-100 dark:bg-primary-900 rounded-full flex items-center justify-center\">\n              <User className=\"w-8 h-8 text-primary-600 dark:text-primary-400\" aria-hidden=\"true\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {isEditing ? (\n                  <input\n                    type=\"text\"\n                    value={editForm.name}\n                    onChange={(e) => handleInputChange('name', e.target.value)}\n                    className=\"bg-gray-50 dark:bg-dark-700 border border-gray-300 dark:border-dark-600 rounded-lg px-3 py-1 text-xl font-bold focus:outline-none focus:ring-2 focus:ring-primary-500\"\n                    placeholder=\"Enter your name\"\n                    aria-label=\"Edit your name\"\n                  />\n                ) : (\n                  user.name || 'User'\n                )}\n              </h2>\n              <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\n                <Mail className=\"w-4 h-4\" aria-hidden=\"true\" />\n                <span className=\"text-sm\">{user.email}</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {isEditing ? (\n              <>\n                <button\n                  onClick={handleCancel}\n                  className=\"p-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white rounded-lg hover:bg-gray-100 dark:hover:bg-dark-700\"\n                  aria-label=\"Cancel editing\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </button>\n                <button\n                  onClick={handleSave}\n                  disabled={!hasChanges || isLoading}\n                  className=\"alarm-button alarm-button-primary p-2 disabled:opacity-50\"\n                  aria-label=\"Save profile changes\"\n                >\n                  <Save className=\"w-5 h-5\" />\n                </button>\n              </>\n            ) : (\n              <button\n                onClick={() => setIsEditing(true)}\n                className=\"alarm-button alarm-button-secondary\"\n                aria-label=\"Edit profile\"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Edit Profile\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Account Info */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n          <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\n            <Shield className=\"w-4 h-4\" aria-hidden=\"true\" />\n            <span>Member since {user.createdAt.toLocaleDateString()}</span>\n          </div>\n          <div className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400\">\n            <Clock className=\"w-4 h-4\" aria-hidden=\"true\" />\n            <span>ID: {user.id.slice(0, 8)}...</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Preferences */}\n      <div className=\"bg-white dark:bg-dark-800 rounded-xl p-6 shadow-sm\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6 flex items-center gap-2\">\n          <Settings className=\"w-5 h-5\" aria-hidden=\"true\" />\n          App Preferences\n        </h3>\n\n        <div className=\"space-y-6\">\n          {/* Theme Preference */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              <Palette className=\"w-4 h-4 inline mr-2\" aria-hidden=\"true\" />\n              Theme\n            </label>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {['light', 'dark', 'auto'].map((theme) => (\n                <button\n                  key={theme}\n                  onClick={() => isEditing && handleInputChange('theme', theme)}\n                  disabled={!isEditing}\n                  className={`p-3 border-2 rounded-lg text-sm font-medium transition-colors capitalize ${\n                    (isEditing ? editForm.preferences.theme : user.preferences.theme) === theme\n                      ? 'border-primary-500 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300'\n                      : 'border-gray-200 dark:border-dark-600 text-gray-700 dark:text-gray-300 hover:border-gray-300 dark:hover:border-dark-500'\n                  } ${!isEditing ? 'cursor-default' : ''}`}\n                  aria-label={`Set theme to ${theme}`}\n                  aria-pressed={(isEditing ? editForm.preferences.theme : user.preferences.theme) === theme}\n                >\n                  {theme}\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Default Voice Mood */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n              <Mic className=\"w-4 h-4 inline mr-2\" aria-hidden=\"true\" />\n              Default Voice Mood\n            </label>\n            <select\n              value={isEditing ? editForm.preferences.defaultVoiceMood : user.preferences.defaultVoiceMood}\n              onChange={(e) => isEditing && handleInputChange('defaultVoiceMood', e.target.value)}\n              disabled={!isEditing}\n              className=\"w-full p-3 border border-gray-300 dark:border-dark-600 rounded-lg bg-white dark:bg-dark-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:opacity-50\"\n              aria-label=\"Select default voice mood for new alarms\"\n            >\n              {voiceMoodOptions.map((mood) => (\n                <option key={mood.value} value={mood.value}>\n                  {mood.label} - {mood.description}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Notifications Settings */}\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2\">\n              <Bell className=\"w-4 h-4\" aria-hidden=\"true\" />\n              Notification Settings\n            </h4>\n            \n            <div className=\"grid grid-cols-1 gap-4\">\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    Enable Notifications\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Receive alarm notifications\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.notificationsEnabled : user.preferences.notificationsEnabled}\n                  onChange={(e) => isEditing && handleInputChange('notificationsEnabled', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle notifications on or off\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    Haptic Feedback\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Vibrate on mobile devices\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.hapticFeedback : user.preferences.hapticFeedback}\n                  onChange={(e) => isEditing && handleInputChange('hapticFeedback', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle haptic feedback on or off\"\n                />\n              </label>\n            </div>\n          </div>\n\n          {/* Alarm Settings */}\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" aria-hidden=\"true\" />\n              Alarm Settings\n            </h4>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Snooze Duration (minutes)\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"30\"\n                  value={isEditing ? editForm.preferences.snoozeMinutes : user.preferences.snoozeMinutes}\n                  onChange={(e) => isEditing && handleInputChange('snoozeMinutes', parseInt(e.target.value))}\n                  disabled={!isEditing}\n                  className=\"w-full p-3 border border-gray-300 dark:border-dark-600 rounded-lg bg-white dark:bg-dark-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:opacity-50\"\n                  aria-label=\"Set snooze duration in minutes\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                  Max Snoozes\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"10\"\n                  value={isEditing ? editForm.preferences.maxSnoozes : user.preferences.maxSnoozes}\n                  onChange={(e) => isEditing && handleInputChange('maxSnoozes', parseInt(e.target.value))}\n                  disabled={!isEditing}\n                  className=\"w-full p-3 border border-gray-300 dark:border-dark-600 rounded-lg bg-white dark:bg-dark-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:opacity-50\"\n                  aria-label=\"Set maximum number of snoozes allowed\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Voice Dismissal Sensitivity (1-10)\n              </label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"10\"\n                value={isEditing ? editForm.preferences.voiceDismissalSensitivity : user.preferences.voiceDismissalSensitivity}\n                onChange={(e) => isEditing && handleInputChange('voiceDismissalSensitivity', parseInt(e.target.value))}\n                disabled={!isEditing}\n                className=\"w-full h-2 bg-gray-200 dark:bg-dark-600 rounded-lg appearance-none cursor-pointer focus:outline-none focus:ring-2 focus:ring-primary-500 disabled:opacity-50\"\n                aria-label=\"Set voice dismissal sensitivity level\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                <span>Less sensitive</span>\n                <span className=\"font-medium\">\n                  {isEditing ? editForm.preferences.voiceDismissalSensitivity : user.preferences.voiceDismissalSensitivity}\n                </span>\n                <span>More sensitive</span>\n              </div>\n            </div>\n          </div>\n\n          {/* AI & Rewards Settings */}\n          <div className=\"space-y-4\">\n            <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 flex items-center gap-2\">\n              <Settings className=\"w-4 h-4\" aria-hidden=\"true\" />\n              AI & Rewards\n            </h4>\n            \n            <div className=\"space-y-3\">\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    AI Insights\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Get personalized recommendations\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.aiInsightsEnabled : user.preferences.aiInsightsEnabled}\n                  onChange={(e) => isEditing && handleInputChange('aiInsightsEnabled', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle AI insights on or off\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    Rewards System\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Earn achievements and track progress\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.rewardsEnabled : user.preferences.rewardsEnabled}\n                  onChange={(e) => isEditing && handleInputChange('rewardsEnabled', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle rewards system on or off\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    Personalized Messages\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    AI-powered custom alarm messages\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.personalizedMessagesEnabled : user.preferences.personalizedMessagesEnabled}\n                  onChange={(e) => isEditing && handleInputChange('personalizedMessagesEnabled', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle personalized messages on or off\"\n                />\n              </label>\n\n              <label className=\"flex items-center justify-between p-3 border border-gray-200 dark:border-dark-600 rounded-lg\">\n                <div>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    Share Achievements\n                  </span>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    Allow sharing progress with others\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={isEditing ? editForm.preferences.shareAchievements : user.preferences.shareAchievements}\n                  onChange={(e) => isEditing && handleInputChange('shareAchievements', e.target.checked)}\n                  disabled={!isEditing}\n                  className=\"w-5 h-5 text-primary-600 border-gray-300 dark:border-dark-600 rounded focus:ring-primary-500 focus:ring-2 disabled:opacity-50\"\n                  aria-label=\"Toggle achievement sharing on or off\"\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Account Actions */}\n      <div className=\"bg-white dark:bg-dark-800 rounded-xl p-6 shadow-sm\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2\">\n          <Shield className=\"w-5 h-5\" aria-hidden=\"true\" />\n          Account\n        </h3>\n        \n        <div className=\"space-y-3\">\n          <button\n            onClick={onSignOut}\n            className=\"w-full alarm-button alarm-button-secondary text-red-600 dark:text-red-400 border-red-200 dark:border-red-800 hover:bg-red-50 dark:hover:bg-red-900/20\"\n            aria-label=\"Sign out of your account\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n            Sign Out\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}