import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Play, Volume2, VolumeX, Palette, Music, Zap } from 'lucide-react';\nimport { soundEffectsService, SoundTheme } from '../services/sound-effects';\nimport { motion } from 'framer-motion';\n\ninterface ThemeCategory {\n  name: string;\n  icon: React.ReactNode;\n  color: string;\n  themes: Array<{\n    id: SoundTheme;\n    name: string;\n    description: string;\n    color: string;\n  }>;\n}\n\nconst SoundThemeDemo: React.FC = () => {\n  const [currentTheme, setCurrentTheme] = useState<SoundTheme>('default');\n  const [isPlaying, setIsPlaying] = useState<{[key: string]: boolean}>({});\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [testResults, setTestResults] = useState<{[key: string]: 'success' | 'error' | 'testing'}>({});\n\n  // Organized theme categories for better presentation\n  const themeCategories: ThemeCategory[] = [\n    {\n      name: 'Core Themes',\n      icon: <Palette className=\"w-5 h-5\" />,\n      color: 'blue',\n      themes: [\n        { id: 'default', name: 'Default', description: 'Clean and modern sounds', color: 'blue' },\n        { id: 'minimal', name: 'Minimal', description: 'Subtle and understated sounds', color: 'gray' }\n      ]\n    },\n    {\n      name: 'Nature & Ambient',\n      icon: <div className=\"text-green-500\">ðŸŒ¿</div>,\n      color: 'green',\n      themes: [\n        { id: 'nature', name: 'Nature', description: 'Organic wood taps and wind chimes', color: 'green' },\n        { id: 'ambient', name: 'Ambient', description: 'Ethereal pads and atmospheric sounds', color: 'cyan' },\n        { id: 'seasonal', name: 'Seasonal', description: 'Crystal winter sparkles and ice sounds', color: 'sky' }\n      ]\n    },\n    {\n      name: 'Electronic & Futuristic',\n      icon: <Zap className=\"w-5 h-5 text-purple-500\" />,\n      color: 'purple',\n      themes: [\n        { id: 'electronic', name: 'Electronic', description: 'Sharp digital clicks and arpeggios', color: 'indigo' },\n        { id: 'cyberpunk', name: 'Cyberpunk', description: 'Dark dystopian tech with distortion', color: 'pink' },\n        { id: 'scifi', name: 'Sci-Fi', description: 'Futuristic laser sweeps and space sounds', color: 'blue' }\n      ]\n    },\n    {\n      name: 'Artistic & Creative',\n      icon: <div className=\"text-purple-500\">âœ¨</div>,\n      color: 'purple',\n      themes: [\n        { id: 'fantasy', name: 'Fantasy', description: 'Magical sparkles and bell harmonics', color: 'emerald' },\n        { id: 'horror', name: 'Horror', description: 'Dissonant tones and creepy ambience', color: 'zinc' },\n        { id: 'classical', name: 'Classical', description: 'Harpsichord plucks and orchestral progressions', color: 'yellow' },\n        { id: 'lofi', name: 'Lo-Fi', description: 'Warm vintage sounds with vinyl crackle', color: 'rose' }\n      ]\n    },\n    {\n      name: 'Energy & Activity',\n      icon: <div className=\"text-red-500\">ðŸ’ª</div>,\n      color: 'red',\n      themes: [\n        { id: 'workout', name: 'Workout', description: 'High-energy motivational beats', color: 'red' },\n        { id: 'retro', name: 'Retro', description: '8-bit gaming sounds and square waves', color: 'fuchsia' }\n      ]\n    }\n  ];\n\n  // Sound types for testing\n  const soundTypes = [\n    { id: 'ui.click', name: 'Click', description: 'Primary interaction sound' },\n    { id: 'ui.hover', name: 'Hover', description: 'Rollover feedback' },\n    { id: 'ui.success', name: 'Success', description: 'Positive confirmation' },\n    { id: 'ui.error', name: 'Error', description: 'Negative feedback' }\n  ];\n\n  const alarmTypes = [\n    { name: 'Gentle Awakening', description: 'Soft morning alarm' },\n    { name: 'Energetic Wake', description: 'High-energy alarm' }\n  ];\n\n  // Play sound effect\n  const playSound = async (soundId: string, themeId: SoundTheme) => {\n    if (!soundEnabled) return;\n    \n    const key = `${themeId}-${soundId}`;\n    setIsPlaying(prev => ({ ...prev, [key]: true }));\n    setTestResults(prev => ({ ...prev, [key]: 'testing' }));\n\n    try {\n      // Temporarily switch to theme for testing\n      const originalTheme = soundEffectsService.getSoundTheme();\n      if (themeId !== originalTheme) {\n        await soundEffectsService.setSoundTheme(themeId);\n      }\n      \n      // Play the sound\n      await soundEffectsService.playSound(soundId as any, { force: true });\n      \n      // Restore original theme if changed\n      if (themeId !== originalTheme) {\n        await soundEffectsService.setSoundTheme(originalTheme);\n      }\n      \n      setTestResults(prev => ({ ...prev, [key]: 'success' }));\n    } catch (error) {\n      console.error('Sound test failed:', error);\n      setTestResults(prev => ({ ...prev, [key]: 'error' }));\n    } finally {\n      setTimeout(() => {\n        setIsPlaying(prev => ({ ...prev, [key]: false }));\n      }, 500);\n    }\n  };\n\n  // Play alarm sound (simulated)\n  const playAlarmSound = async (alarmType: string, themeId: SoundTheme) => {\n    if (!soundEnabled) return;\n    \n    const key = `${themeId}-alarm-${alarmType}`;\n    setIsPlaying(prev => ({ ...prev, [key]: true }));\n    \n    // Simulate alarm sound by playing success sound with loop simulation\n    await playSound('ui.success', themeId);\n    \n    setTimeout(() => {\n      setIsPlaying(prev => ({ ...prev, [key]: false }));\n    }, 2000);\n  };\n\n  // Apply theme to entire demo\n  const applyTheme = async (themeId: SoundTheme) => {\n    try {\n      await soundEffectsService.setSoundTheme(themeId);\n      setCurrentTheme(themeId);\n      \n      // Play a sample sound to demonstrate\n      if (soundEnabled) {\n        setTimeout(() => {\n          soundEffectsService.playSound('ui.success', { force: true });\n        }, 200);\n      }\n    } catch (error) {\n      console.error('Failed to apply theme:', error);\n    }\n  };\n\n  const getStatusColor = (key: string) => {\n    const status = testResults[key];\n    if (status === 'testing') return 'animate-pulse text-blue-500';\n    if (status === 'success') return 'text-green-500';\n    if (status === 'error') return 'text-red-500';\n    return 'text-gray-400';\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6 }}\n        >\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n            ðŸŽµ Sound Theme Showcase\n          </h1>\n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mt-2\">\n            Experience all 13 themes with UI sounds and alarm variations\n          </p>\n        </motion.div>\n        \n        <div className=\"flex items-center justify-center gap-4\">\n          <Button\n            variant={soundEnabled ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSoundEnabled(!soundEnabled)}\n            className=\"flex items-center gap-2\"\n          >\n            {soundEnabled ? <Volume2 className=\"w-4 h-4\" /> : <VolumeX className=\"w-4 h-4\" />}\n            {soundEnabled ? 'Sounds On' : 'Sounds Off'}\n          </Button>\n          \n          <Badge variant=\"outline\" className=\"text-sm\">\n            Current: {themeCategories.flatMap(cat => cat.themes).find(t => t.id === currentTheme)?.name || 'Default'}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Theme Categories */}\n      {themeCategories.map((category, categoryIndex) => (\n        <motion.div\n          key={category.name}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.6, delay: categoryIndex * 0.1 }}\n          className=\"space-y-4\"\n        >\n          <div className=\"flex items-center gap-3\">\n            {category.icon}\n            <h2 className=\"text-2xl font-semibold text-gray-800 dark:text-gray-200\">\n              {category.name}\n            </h2>\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {category.themes.length} themes\n            </Badge>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {category.themes.map((theme, themeIndex) => (\n              <motion.div\n                key={theme.id}\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.4, delay: themeIndex * 0.05 }}\n                whileHover={{ scale: 1.02 }}\n              >\n                <Card className={`h-full border-2 transition-all duration-300 ${\n                  currentTheme === theme.id \n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-950/20 shadow-lg' \n                    : 'border-gray-200 dark:border-gray-700 hover:border-gray-300'\n                }`}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\n                        {theme.name}\n                        {currentTheme === theme.id && <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\" />}\n                      </CardTitle>\n                      <Button\n                        size=\"sm\"\n                        variant={currentTheme === theme.id ? 'default' : 'outline'}\n                        onClick={() => applyTheme(theme.id)}\n                      >\n                        {currentTheme === theme.id ? 'Active' : 'Apply'}\n                      </Button>\n                    </div>\n                    <CardDescription className=\"text-sm\">\n                      {theme.description}\n                    </CardDescription>\n                  </CardHeader>\n                  \n                  <CardContent className=\"space-y-4\">\n                    {/* UI Sounds */}\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2 text-gray-700 dark:text-gray-300\">\n                        UI Sounds\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-1\">\n                        {soundTypes.map((sound) => {\n                          const key = `${theme.id}-${sound.id}`;\n                          const isPlayingThis = isPlaying[key];\n                          return (\n                            <Button\n                              key={sound.id}\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className={`h-8 text-xs justify-start ${getStatusColor(key)}`}\n                              onClick={() => playSound(sound.id, theme.id)}\n                              disabled={isPlayingThis}\n                            >\n                              <Play className={`w-3 h-3 mr-1 ${isPlayingThis ? 'animate-spin' : ''}`} />\n                              {sound.name}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                    </div>\n\n                    {/* Alarm Sounds */}\n                    <div className=\"border-t pt-3\">\n                      <h4 className=\"text-sm font-medium mb-2 text-gray-700 dark:text-gray-300 flex items-center gap-1\">\n                        <Music className=\"w-4 h-4\" />\n                        Alarm Sounds\n                      </h4>\n                      <div className=\"space-y-1\">\n                        {alarmTypes.map((alarm, index) => {\n                          const key = `${theme.id}-alarm-${alarm.name}`;\n                          const isPlayingThis = isPlaying[key];\n                          return (\n                            <Button\n                              key={index}\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 text-xs justify-start w-full\"\n                              onClick={() => playAlarmSound(alarm.name, theme.id)}\n                              disabled={isPlayingThis}\n                            >\n                              <Play className={`w-3 h-3 mr-1 ${isPlayingThis ? 'animate-pulse' : ''}`} />\n                              {alarm.name}\n                            </Button>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n      ))}\n\n      {/* Footer Info */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.6, delay: 0.8 }}\n        className=\"mt-12 p-6 bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-lg\"\n      >\n        <h3 className=\"text-lg font-semibold mb-3\">ðŸŽ¨ About Sound Themes</h3>\n        <div className=\"grid md:grid-cols-2 gap-4 text-sm text-gray-600 dark:text-gray-300\">\n          <div>\n            <p><strong>13 Total Themes:</strong> From minimal to cyberpunk, fantasy to classical</p>\n            <p><strong>78 Sound Files:</strong> Each theme includes 4 UI sounds + 2 alarm variations</p>\n          </div>\n          <div>\n            <p><strong>Procedural Audio:</strong> All sounds generated using Web Audio API</p>\n            <p><strong>Instant Switching:</strong> Change themes immediately with persistent preferences</p>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 flex flex-wrap gap-2\">\n          <Badge variant=\"outline\">Web Audio API</Badge>\n          <Badge variant=\"outline\">44.1kHz WAV</Badge>\n          <Badge variant=\"outline\">TypeScript</Badge>\n          <Badge variant=\"outline\">React</Badge>\n          <Badge variant=\"outline\">Framer Motion</Badge>\n        </div>\n      </motion.div>\n    </div>\n  );\n};\n\nexport default SoundThemeDemo;