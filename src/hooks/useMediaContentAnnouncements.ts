import { useCallback } from 'react';\nimport { useScreenReaderAnnouncements } from './useScreenReaderAnnouncements';\nimport type { \n  CustomSound, \n  Playlist, \n  MotivationalQuote, \n  PhotoChallenge, \n  MediaLibrary,\n  ContentPreferences \n} from '../types/index';\n\nexport function useMediaContentAnnouncements() {\n  const { announce } = useScreenReaderAnnouncements();\n\n  // Tab navigation announcements\n  const announceTabChange = useCallback((tabName: string) => {\n    const tabDescriptions: Record<string, string> = {\n      sounds: 'Sounds tab selected. Browse and manage audio content for alarms.',\n      playlists: 'Playlists tab selected. Create and manage custom sound playlists.',\n      quotes: 'Quotes tab selected. Browse and submit motivational quotes.',\n      challenges: 'Photo challenges tab selected. Complete photo challenges for rewards.'\n    };\n    \n    const description = tabDescriptions[tabName] || `${tabName} tab selected`;\n    announce(description, 'polite');\n  }, [announce]);\n\n  // Audio playback announcements\n  const announceAudioPlayback = useCallback((sound: CustomSound, isPlaying: boolean) => {\n    const action = isPlaying ? 'playing' : 'paused';\n    const message = `${sound.name} ${action}. Duration: ${Math.floor(sound.duration / 60)} minutes and ${sound.duration % 60} seconds. Category: ${sound.category}.`;\n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceAudioEnd = useCallback((sound: CustomSound) => {\n    announce(`${sound.name} finished playing.`, 'polite');\n  }, [announce]);\n\n  // Search announcements\n  const announceSearchResults = useCallback((query: string, resultCount: number) => {\n    if (query.trim() === '') {\n      announce('Search cleared. Showing all sounds.', 'polite');\n    } else {\n      announce(`Found ${resultCount} sound${resultCount === 1 ? '' : 's'} matching \"${query}\".`, 'polite');\n    }\n  }, [announce]);\n\n  // Upload announcements\n  const announceUploadStart = useCallback((fileName: string) => {\n    announce(`Starting upload of ${fileName}. Please wait...`, 'polite');\n  }, [announce]);\n\n  const announceUploadComplete = useCallback((sound: CustomSound) => {\n    announce(`Upload completed! ${sound.name} has been added to your custom sounds library.`, 'assertive');\n  }, [announce]);\n\n  const announceUploadError = useCallback((error: string) => {\n    announce(`Upload failed: ${error}. Please try again.`, 'assertive');\n  }, [announce]);\n\n  // Storage announcements\n  const announceStorageStatus = useCallback((used: number, total: number, percentage: number) => {\n    const usedMB = Math.round(used / (1024 * 1024));\n    const totalMB = Math.round(total / (1024 * 1024));\n    \n    let message = `Storage: ${usedMB} MB used of ${totalMB} MB total. ${percentage}% capacity.`;\n    \n    if (percentage >= 90) {\n      message += ' Warning: Storage almost full!';\n    } else if (percentage >= 75) {\n      message += ' Storage getting full.';\n    }\n    \n    announce(message, percentage >= 90 ? 'assertive' : 'polite');\n  }, [announce]);\n\n  // Playlist announcements\n  const announcePlaylistAction = useCallback((action: 'created' | 'updated' | 'deleted' | 'played', playlist: Playlist) => {\n    let message = '';\n    \n    switch (action) {\n      case 'created':\n        message = `Playlist \"${playlist.name}\" created with ${playlist.sounds.length} sound${playlist.sounds.length === 1 ? '' : 's'}.`;\n        break;\n      case 'updated':\n        message = `Playlist \"${playlist.name}\" updated. Now contains ${playlist.sounds.length} sound${playlist.sounds.length === 1 ? '' : 's'}.`;\n        break;\n      case 'deleted':\n        message = `Playlist \"${playlist.name}\" deleted.`;\n        break;\n      case 'played':\n        message = `Playing playlist \"${playlist.name}\" with ${playlist.sounds.length} sound${playlist.sounds.length === 1 ? '' : 's'}.`;\n        break;\n    }\n    \n    announce(message, action === 'deleted' ? 'assertive' : 'polite');\n  }, [announce]);\n\n  const announcePlaylistProgress = useCallback((playlist: Playlist, currentIndex: number, totalSounds: number) => {\n    const currentSound = playlist.sounds[currentIndex]?.sound;\n    if (currentSound) {\n      announce(\n        `Playing sound ${currentIndex + 1} of ${totalSounds} in playlist \"${playlist.name}\": ${currentSound.name}.`,\n        'polite'\n      );\n    }\n  }, [announce]);\n\n  // Quote announcements\n  const announceQuoteAction = useCallback((action: 'submitted' | 'liked' | 'used' | 'browsing', quote: MotivationalQuote) => {\n    let message = '';\n    \n    switch (action) {\n      case 'submitted':\n        message = `Quote submitted: \"${quote.text.substring(0, 50)}${quote.text.length > 50 ? '...' : ''}\" by ${quote.author || 'Anonymous'}.`;\n        break;\n      case 'liked':\n        message = `Quote liked: \"${quote.text.substring(0, 30)}${quote.text.length > 30 ? '...' : ''}\" Now has ${quote.likes + 1} likes.`;\n        break;\n      case 'used':\n        message = `Quote selected for alarm: \"${quote.text.substring(0, 50)}${quote.text.length > 50 ? '...' : ''}\" by ${quote.author || 'Anonymous'}.`;\n        break;\n      case 'browsing':\n        message = `Quote: \"${quote.text}\" by ${quote.author || 'Anonymous'}. ${quote.likes} likes, used in ${quote.uses} alarms.`;\n        break;\n    }\n    \n    announce(message, action === 'used' ? 'assertive' : 'polite');\n  }, [announce]);\n\n  // Photo challenge announcements\n  const announcePhotoChallengeAction = useCallback((action: 'started' | 'completed' | 'failed' | 'uploaded', challenge: PhotoChallenge, details?: { xp?: number; badge?: string }) => {\n    let message = '';\n    \n    switch (action) {\n      case 'started':\n        message = `Photo challenge started: ${challenge.name}. ${challenge.description}. Time limit: ${challenge.timeLimit} minutes.`;\n        break;\n      case 'completed':\n        message = `Congratulations! Photo challenge completed: ${challenge.name}.`;\n        if (details?.xp) {\n          message += ` You earned ${details.xp} experience points`;\n        }\n        if (details?.badge) {\n          message += ` and the ${details.badge} badge`;\n        }\n        message += '!';\n        break;\n      case 'failed':\n        message = `Photo challenge expired: ${challenge.name}. You can try again tomorrow!`;\n        break;\n      case 'uploaded':\n        message = `Photo uploaded for challenge: ${challenge.name}. Waiting for review and rewards.`;\n        break;\n    }\n    \n    announce(message, action === 'completed' ? 'assertive' : 'polite');\n  }, [announce]);\n\n  const announcePhotoChallengeProgress = useCallback((challenge: PhotoChallenge, timeRemaining: number) => {\n    const minutes = Math.floor(timeRemaining / 60);\n    const seconds = timeRemaining % 60;\n    \n    let message = `${challenge.name} challenge: ${minutes} minute${minutes === 1 ? '' : 's'}`;\n    if (seconds > 0) {\n      message += ` and ${seconds} second${seconds === 1 ? '' : 's'}`;\n    }\n    message += ' remaining.';\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  // Content preferences announcements\n  const announcePreferenceChange = useCallback((setting: string, newValue: any, description: string) => {\n    let message = '';\n    \n    if (typeof newValue === 'boolean') {\n      message = `${setting} ${newValue ? 'enabled' : 'disabled'}. ${description}`;\n    } else {\n      message = `${setting} changed to ${newValue}. ${description}`;\n    }\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  // Sharing announcements\n  const announceShare = useCallback((contentType: 'sound' | 'playlist' | 'quote', contentName: string) => {\n    announce(`${contentType} \"${contentName}\" shared successfully!`, 'polite');\n  }, [announce]);\n\n  // Download announcements\n  const announceDownload = useCallback((contentType: 'sound' | 'playlist', contentName: string, action: 'started' | 'completed' | 'failed') => {\n    let message = '';\n    \n    switch (action) {\n      case 'started':\n        message = `Starting download of ${contentType} \"${contentName}\".`;\n        break;\n      case 'completed':\n        message = `Download completed: ${contentType} \"${contentName}\" is now available offline.`;\n        break;\n      case 'failed':\n        message = `Download failed for ${contentType} \"${contentName}\". Please check your connection and try again.`;\n        break;\n    }\n    \n    announce(message, action === 'failed' ? 'assertive' : 'polite');\n  }, [announce]);\n\n  // Rating and feedback announcements\n  const announceRating = useCallback((contentType: 'sound' | 'playlist' | 'quote', contentName: string, rating: number, maxRating: number) => {\n    announce(\n      `${contentType} \"${contentName}\" rated ${rating} out of ${maxRating} stars.`,\n      'polite'\n    );\n  }, [announce]);\n\n  // Click-to-hear detailed information\n  const announceDetailedSoundInfo = useCallback((sound: CustomSound) => {\n    const duration = `${Math.floor(sound.duration / 60)} minutes and ${sound.duration % 60} seconds`;\n    const tags = sound.tags.join(', ');\n    \n    let message = `Detailed sound information: ${sound.name}. ${sound.description}. Duration: ${duration}. Category: ${sound.category}.`;\n    \n    if (sound.tags.length > 0) {\n      message += ` Tags: ${tags}.`;\n    }\n    \n    if (!sound.isCustom && sound.rating) {\n      message += ` Rating: ${sound.rating} out of 5 stars with ${sound.downloads} downloads.`;\n    }\n    \n    if (sound.isCustom && sound.uploadedAt) {\n      message += ` Custom sound uploaded on ${new Date(sound.uploadedAt).toLocaleDateString()}.`;\n    }\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceDetailedPlaylistInfo = useCallback((playlist: Playlist) => {\n    let message = `Detailed playlist information: ${playlist.name}. ${playlist.description}. Contains ${playlist.sounds.length} sound${playlist.sounds.length === 1 ? '' : 's'}.`;\n    \n    if (playlist.playCount) {\n      message += ` Played ${playlist.playCount} times.`;\n    }\n    \n    if (playlist.likeCount) {\n      message += ` ${playlist.likeCount} likes.`;\n    }\n    \n    if (playlist.tags.length > 0) {\n      message += ` Tags: ${playlist.tags.join(', ')}.`;\n    }\n    \n    const soundNames = playlist.sounds.slice(0, 3).map(s => s.sound.name).join(', ');\n    message += ` Sound preview: ${soundNames}`;\n    if (playlist.sounds.length > 3) {\n      message += ` and ${playlist.sounds.length - 3} more`;\n    }\n    message += '.';\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceDetailedQuoteInfo = useCallback((quote: MotivationalQuote) => {\n    let message = `Detailed quote information: \"${quote.text}\" by ${quote.author || 'Anonymous'}.`;\n    \n    message += ` Category: ${quote.category}. ${quote.likes} likes, used in ${quote.uses} alarms.`;\n    \n    if (quote.tags.length > 0) {\n      message += ` Tags: ${quote.tags.join(', ')}.`;\n    }\n    \n    if (quote.isCustom && quote.submittedAt) {\n      message += ` Custom quote submitted on ${new Date(quote.submittedAt).toLocaleDateString()}.`;\n    }\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceDetailedChallengeInfo = useCallback((challenge: PhotoChallenge) => {\n    let message = `Detailed photo challenge: ${challenge.name}. ${challenge.description}. Difficulty: ${challenge.difficulty}.`;\n    \n    if (challenge.timeLimit) {\n      message += ` Time limit: ${challenge.timeLimit} minutes.`;\n    }\n    \n    message += ` Requirements: ${challenge.prompts.filter(p => !p.optional).length} required, ${challenge.prompts.filter(p => p.optional).length} optional.`;\n    \n    const rewards = challenge.rewards.map(r => `${r.value} ${r.description}`).join(', ');\n    message += ` Rewards: ${rewards}.`;\n    \n    message += ` Popularity: ${challenge.popularity}%. Completion rate: ${challenge.completionRate}%.`;\n    \n    announce(message, 'polite');\n  }, [announce]);\n\n  return {\n    announceTabChange,\n    announceAudioPlayback,\n    announceAudioEnd,\n    announceSearchResults,\n    announceUploadStart,\n    announceUploadComplete,\n    announceUploadError,\n    announceStorageStatus,\n    announcePlaylistAction,\n    announcePlaylistProgress,\n    announceQuoteAction,\n    announcePhotoChallengeAction,\n    announcePhotoChallengeProgress,\n    announcePreferenceChange,\n    announceShare,\n    announceDownload,\n    announceRating,\n    announceDetailedSoundInfo,\n    announceDetailedPlaylistInfo,\n    announceDetailedQuoteInfo,\n    announceDetailedChallengeInfo\n  };\n}