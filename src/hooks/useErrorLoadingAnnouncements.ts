import { useCallback } from 'react';\nimport { useScreenReaderAnnouncements } from './useScreenReaderAnnouncements';\n\nexport function useErrorLoadingAnnouncements() {\n  const { announce } = useScreenReaderAnnouncements();\n\n  // Loading state announcements\n  const announceLoadingStart = useCallback((operation: string, context?: string) => {\n    let message = `Loading ${operation}`;\n    if (context) {\n      message += ` for ${context}`;\n    }\n    message += '. Please wait.';\n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceLoadingComplete = useCallback((operation: string, context?: string, result?: string) => {\n    let message = `${operation} loaded successfully`;\n    if (context) {\n      message += ` for ${context}`;\n    }\n    if (result) {\n      message += `. ${result}`;\n    }\n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceLoadingProgress = useCallback((operation: string, progress: number, total?: number) => {\n    let message;\n    if (total) {\n      message = `Loading ${operation}: ${progress} of ${total} items completed.`;\n    } else {\n      message = `Loading ${operation}: ${progress}% complete.`;\n    }\n    announce(message, 'polite');\n  }, [announce]);\n\n  // Error announcements\n  const announceError = useCallback((error: string, operation?: string, severity: 'warning' | 'error' | 'critical' = 'error') => {\n    let message = '';\n    \n    switch (severity) {\n      case 'warning':\n        message = 'Warning: ';\n        break;\n      case 'error':\n        message = 'Error: ';\n        break;\n      case 'critical':\n        message = 'Critical error: ';\n        break;\n    }\n    \n    message += error;\n    \n    if (operation) {\n      message += ` during ${operation}`;\n    }\n    \n    announce(message, 'assertive');\n  }, [announce]);\n\n  const announceNetworkError = useCallback((operation?: string) => {\n    let message = 'Network connection error.';\n    if (operation) {\n      message += ` Unable to ${operation}.`;\n    }\n    message += ' Please check your internet connection and try again.';\n    announce(message, 'assertive');\n  }, [announce]);\n\n  const announceValidationError = useCallback((field: string, errorMessage: string) => {\n    announce(`Validation error in ${field}: ${errorMessage}`, 'assertive');\n  }, [announce]);\n\n  const announceFormError = useCallback((errors: Record<string, string>) => {\n    const errorCount = Object.keys(errors).length;\n    const fields = Object.keys(errors).join(', ');\n    \n    if (errorCount === 1) {\n      const field = Object.keys(errors)[0];\n      announce(`Form error in ${field}: ${errors[field]}`, 'assertive');\n    } else {\n      announce(`Form has ${errorCount} errors in the following fields: ${fields}. Please review and correct.`, 'assertive');\n    }\n  }, [announce]);\n\n  // Success announcements\n  const announceSuccess = useCallback((operation: string, context?: string, details?: string) => {\n    let message = `${operation} successful`;\n    if (context) {\n      message += ` for ${context}`;\n    }\n    if (details) {\n      message += `. ${details}`;\n    }\n    announce(message, 'polite');\n  }, [announce]);\n\n  const announceFormSuccess = useCallback((operation: string, details?: string) => {\n    let message = `Form ${operation} successfully`;\n    if (details) {\n      message += `. ${details}`;\n    }\n    announce(message, 'polite');\n  }, [announce]);\n\n  // Permission and access announcements\n  const announcePermissionError = useCallback((permission: string, reason?: string) => {\n    let message = `Permission denied for ${permission}.`;\n    if (reason) {\n      message += ` ${reason}`;\n    }\n    announce(message, 'assertive');\n  }, [announce]);\n\n  const announceAccessError = useCallback((resource: string, reason?: string) => {\n    let message = `Cannot access ${resource}.`;\n    if (reason) {\n      message += ` ${reason}`;\n    } else {\n      message += ' You may not have the necessary permissions.';\n    }\n    announce(message, 'assertive');\n  }, [announce]);\n\n  // Offline/online status announcements\n  const announceOfflineMode = useCallback(() => {\n    announce('You are currently offline. Some features may be limited. The app will sync when connection is restored.', 'assertive');\n  }, [announce]);\n\n  const announceOnlineMode = useCallback() => {\n    announce('You are back online. Syncing data now.', 'polite');\n  }, [announce]);\n\n  const announceDataSync = useCallback((status: 'started' | 'completed' | 'failed', details?: string) => {\n    let message = '';\n    \n    switch (status) {\n      case 'started':\n        message = 'Data synchronization started.';\n        break;\n      case 'completed':\n        message = 'Data synchronized successfully.';\n        if (details) {\n          message += ` ${details}`;\n        }\n        break;\n      case 'failed':\n        message = 'Data synchronization failed.';\n        if (details) {\n          message += ` ${details}`;\n        }\n        message += ' Will retry automatically.';\n        break;\n    }\n    \n    announce(message, status === 'failed' ? 'assertive' : 'polite');\n  }, [announce]);\n\n  // Timeout and retry announcements\n  const announceTimeout = useCallback((operation: string) => {\n    announce(`${operation} timed out. Please try again. If the problem persists, check your internet connection.`, 'assertive');\n  }, [announce]);\n\n  const announceRetry = useCallback((operation: string, attemptNumber: number, maxAttempts: number) => {\n    announce(`Retrying ${operation}. Attempt ${attemptNumber} of ${maxAttempts}.`, 'polite');\n  }, [announce]);\n\n  const announceMaxRetriesReached = useCallback((operation: string) => {\n    announce(`Maximum retry attempts reached for ${operation}. Please try again later or contact support if the problem persists.`, 'assertive');\n  }, [announce]);\n\n  // Data state announcements\n  const announceDataEmpty = useCallback((dataType: string) => {\n    announce(`No ${dataType} available. Try refreshing or adding some content.`, 'polite');\n  }, [announce]);\n\n  const announceDataUpdated = useCallback((dataType: string, updateType: 'added' | 'updated' | 'deleted', itemName?: string) => {\n    let message = `${dataType} ${updateType}`;\n    if (itemName) {\n      message += `: ${itemName}`;\n    }\n    message += ' successfully.';\n    announce(message, 'polite');\n  }, [announce]);\n\n  // API and service announcements\n  const announceApiError = useCallback((endpoint: string, statusCode?: number, statusText?: string) => {\n    let message = `API request failed for ${endpoint}.`;\n    if (statusCode) {\n      message += ` Status: ${statusCode}`;\n      if (statusText) {\n        message += ` ${statusText}`;\n      }\n    }\n    message += ' Please try again later.';\n    announce(message, 'assertive');\n  }, [announce]);\n\n  const announceServiceUnavailable = useCallback((serviceName: string) => {\n    announce(`${serviceName} is temporarily unavailable. Please try again later.`, 'assertive');\n  }, [announce]);\n\n  // File operation announcements\n  const announceFileError = useCallback((operation: 'upload' | 'download' | 'delete' | 'read', filename: string, error: string) => {\n    announce(`File ${operation} failed for ${filename}: ${error}`, 'assertive');\n  }, [announce]);\n\n  const announceFileSuccess = useCallback((operation: 'uploaded' | 'downloaded' | 'deleted' | 'saved', filename: string, details?: string) => {\n    let message = `File ${operation} successfully: ${filename}`;\n    if (details) {\n      message += `. ${details}`;\n    }\n    announce(message, 'polite');\n  }, [announce]);\n\n  // Session and authentication announcements\n  const announceSessionExpired = useCallback(() => {\n    announce('Your session has expired. Please log in again to continue.', 'assertive');\n  }, [announce]);\n\n  const announceAuthenticationRequired = useCallback((action?: string) => {\n    let message = 'Authentication required';\n    if (action) {\n      message += ` to ${action}`;\n    }\n    message += '. Please log in to continue.';\n    announce(message, 'assertive');\n  }, [announce]);\n\n  return {\n    announceLoadingStart,\n    announceLoadingComplete,\n    announceLoadingProgress,\n    announceError,\n    announceNetworkError,\n    announceValidationError,\n    announceFormError,\n    announceSuccess,\n    announceFormSuccess,\n    announcePermissionError,\n    announceAccessError,\n    announceOfflineMode,\n    announceOnlineMode,\n    announceDataSync,\n    announceTimeout,\n    announceRetry,\n    announceMaxRetriesReached,\n    announceDataEmpty,\n    announceDataUpdated,\n    announceApiError,\n    announceServiceUnavailable,\n    announceFileError,\n    announceFileSuccess,\n    announceSessionExpired,\n    announceAuthenticationRequired\n  };\n}