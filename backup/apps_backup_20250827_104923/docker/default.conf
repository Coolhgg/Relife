# Default server configuration for Relife Smart Alarm App
# Optimized for PWA, SPA routing, and performance monitoring

server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # PWA headers
    add_header Service-Worker-Allowed "/" always;
    
    # CORS headers for API calls
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;

    # Performance monitoring endpoint
    location /api/performance {
        # Rate limiting for performance data
        limit_req zone=api burst=20 nodelay;
        
        # Forward to API backend
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Caching for performance data
        proxy_cache api_cache;
        proxy_cache_valid 200 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        add_header X-Cache-Status $upstream_cache_status;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Analytics endpoint
    location /api/analytics {
        # Rate limiting for analytics
        limit_req zone=api burst=50 nodelay;
        
        # Forward to API backend
        proxy_pass http://api_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # No caching for analytics
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        
        # Timeouts
        proxy_connect_timeout 3s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Metrics endpoint for monitoring
    location /metrics {
        access_log off;
        return 200 '{"status":"ok","timestamp":"$time_iso8601","server":"$hostname"}';
        add_header Content-Type application/json;
    }

    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        # Rate limiting for static assets
        limit_req zone=static burst=100 nodelay;
        
        # Caching headers
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache-Status "static";
        
        # Compression
        gzip_static on;
        
        # Security
        add_header X-Content-Type-Options nosniff;
        
        # Access logs for static assets (disabled for performance)
        access_log off;
        
        # Try files
        try_files $uri =404;
    }

    # Service Worker
    location /sw.js {
        # No caching for service worker
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        
        # Correct MIME type
        add_header Content-Type application/javascript;
        
        # Security
        add_header Service-Worker-Allowed "/";
        
        try_files $uri =404;
    }

    # Enhanced Service Worker
    location /sw-enhanced.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Content-Type application/javascript;
        add_header Service-Worker-Allowed "/";
        
        try_files $uri =404;
    }

    # Manifest file
    location /manifest.json {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type application/manifest+json;
        
        try_files $uri =404;
    }

    # Robots and sitemap
    location ~ ^/(robots\.txt|sitemap\.xml)$ {
        expires 1d;
        add_header Cache-Control "public";
        
        try_files $uri =404;
    }

    # SPA routing - serve index.html for all routes
    location / {
        # Rate limiting for main app
        limit_req zone=static burst=50 nodelay;
        
        # SPA fallback
        try_files $uri $uri/ /index.html;
        
        # Caching for HTML
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        
        # Security headers for HTML
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block common attack patterns
    location ~* (eval\(|javascript:|<script|base64_decode|gzip|GLOBALS|REQUEST|wget|curl) {
        deny all;
        access_log off;
        log_not_found off;
    }
}