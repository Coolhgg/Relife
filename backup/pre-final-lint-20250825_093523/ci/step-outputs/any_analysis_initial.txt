TypeScript 'any' Usage Analysis - Initial Report
=================================================

Total instances found: 2990 (in src/ directory)

TOP 20 MOST FREQUENT PATTERNS:
------------------------------
1.  setState((prev: any                    -> 72 instances  [Priority: HIGH]
2.  ) => { // auto: implicit any          -> 50 instances  [Priority: HIGH]
3.  setAuthState((prev: any               -> 31 instances  [Priority: HIGH]
4.  onChange={(e: any                     -> 28 instances  [Priority: HIGH]
5.  onChange={(e: any                     -> 24 instances  [Priority: HIGH]
6.  setStatus((prev: any                  -> 22 instances  [Priority: HIGH]
7.  expect.any(Function)                  -> 22 instances  [Priority: LOW - test code]
8.  onChange={(e: any                     -> 17 instances  [Priority: HIGH]
9.  metadata?: Record<string, any>;       -> 16 instances  [Priority: MEDIUM]
10. e: any // auto: implicit any          -> 16 instances  [Priority: HIGH]
11. ) => any) | null = null;              -> 15 instances  [Priority: MEDIUM]
12. ) => Promise<any>>;                   -> 15 instances  [Priority: HIGH]
13. } as any;                             -> 15 instances  [Priority: MEDIUM]
14. [key: string]: any;                   -> 13 instances  [Priority: MEDIUM]
15. onChange={(e: any                     -> 13 instances  [Priority: HIGH]
16. onChange={(e: any                     -> 13 instances  [Priority: HIGH]
17. onChange={(e: any                     -> 13 instances  [Priority: HIGH]
18. onChange={(e: any                     -> 13 instances  [Priority: HIGH]
19. // auto: implicit any                 -> 12 instances  [Priority: HIGH]
20. onChange={(e: any                     -> 12 instances  [Priority: HIGH]

CATEGORIES FOR REPLACEMENT:
===========================

A. EVENT HANDLERS (High Priority - ~150 instances)
   - onChange={(e: any => React.ChangeEvent<HTMLInputElement>
   - onMouseEnter={(e: any => React.MouseEvent<HTMLElement>
   - onClick={(e: any => React.MouseEvent<HTMLButtonElement>

B. STATE SETTERS (High Priority - ~125 instances)
   - setState((prev: any => setState((prev: AppState) =>
   - setAuthState((prev: any => setAuthState((prev: AuthState) =>
   - setStatus((prev: any => setStatus((prev: StatusState) =>

C. PROMISE/API RESPONSES (High Priority - ~40 instances)
   - Promise<any> => Promise<UserResponse | AlarmDTO | void>
   - API response objects with proper interfaces

D. OBJECT TYPES (Medium Priority - ~45 instances)
   - Record<string, any> => specific interfaces
   - [key: string]: any => proper index signatures
   - } as any => typed assertions

IMPLEMENTATION STRATEGY:
========================
1. Create utility types file (Nullable<T>, Optional<T>, RecordMap<K,V>)
2. Replace event handlers with proper React types
3. Create lightweight API response interfaces
4. Fix state setter types with proper state interfaces
5. Replace Promise<any> with specific return types
6. Add documentation comments for each replacement

ESTIMATED IMPACT:
================
- Top 10 patterns alone account for ~350 instances
- Event handlers + State setters = ~275 instances (40% of total)
- High priority items = ~500+ instances (potential 50%+ reduction)