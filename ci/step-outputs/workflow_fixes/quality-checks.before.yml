name: Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch: # Allow manual triggers

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better blame info

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Check for Python files
        id: check_python
        run: |
          if find . -name "*.py" -not -path "./node_modules/*" -not -path "./.venv/*" | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Python dependencies
        if: steps.check_python.outputs.python_files == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Check Python code formatting with Black
        if: steps.check_python.outputs.python_files == 'true'
        run: python -m black --check --diff .

      - name: Check Python import sorting with isort
        if: steps.check_python.outputs.python_files == 'true'
        run: python -m isort --check-only --diff .

      - name: Lint Python code with Flake8
        if: steps.check_python.outputs.python_files == 'true'
        run: python -m flake8 .

      - name: Type check Python code with MyPy
        if: steps.check_python.outputs.python_files == 'true'
        run: python -m mypy .
        continue-on-error: true # Type checking is informational for now

      - name: Check JavaScript/TypeScript/JSON/YAML formatting with Prettier
        run: npx prettier --check .

      - name: Lint shell scripts with ShellCheck
        run: |
          # Find and check shell scripts
          find . -name "*.sh" -not -path "./node_modules/*" -not -path "./.venv/*" | xargs -r shellcheck
        continue-on-error: true # Shell scripts may not exist

      - name: Run Python tests
        if: steps.check_python.outputs.python_files == 'true'
        run: |
          if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ] || [ -d "tests" ]; then
            python -m pytest -v --tb=short
          else
            echo "No tests found, skipping test execution"
          fi
        continue-on-error: true # Tests may not exist yet

      - name: Check for security vulnerabilities (Python)
        if: steps.check_python.outputs.python_files == 'true'
        run: |
          pip install safety
          safety check --json || true # Non-blocking for now
        continue-on-error: true

      - name: Generate quality report
        if: always()
        run: |
          echo "## Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_python.outputs.python_files }}" == "true" ]; then
            echo "- ✅ Black formatting check completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ isort import sorting check completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Flake8 linting completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ MyPy type checking completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ Python checks skipped (no Python files found)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- ✅ Prettier formatting check completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ ShellCheck completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Commit Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Check for Python files
        id: check_python_deps
        run: |
          if find . -name "*.py" -not -path "./node_modules/*" -not -path "./.venv/*" | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Python dependencies
        if: steps.check_python_deps.outputs.python_files == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check Python dependencies with pip-audit
        if: steps.check_python_deps.outputs.python_files == 'true'
        run: |
          pip install pip-audit
          pip-audit --format=json --output=audit-results.json || true
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  commit-validation:
    name: Commit Message Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install commitlint dependencies
        run: |
          npm install @commitlint/cli @commitlint/config-conventional

      - name: Validate commit messages
        run: |
          npx commitlint --from=${{ github.event.pull_request.base.sha }} --to=${{ github.event.pull_request.head.sha }}
