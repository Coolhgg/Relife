# Production Deployment Pipeline with Bun Support
# Streamlined deployment with Bun package manager

name: üöÄ Production Deploy (Bun)

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  # Build and test
  build:
    name: üèóÔ∏è Build & Test
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Generate version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ ! "$VERSION" =~ ^v[0-9] ]]; then
            VERSION="v$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Run quality checks
        run: |
          bun run lint
          bun run type-check

      - name: Run tests
        run: bun run test:coverage

      - name: Build application
        run: bun run build
        env:
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.environment == 'staging' || github.ref == 'refs/heads/main' }}
    environment:
      name: staging
      url: https://staging.relife.app

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging..."
          # Add your deployment commands here
          # e.g., rsync, FTP, cloud deployment, etc.

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.relife.app/ || exit 1

  # Production deployment
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: ${{ inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/') }}
    environment:
      name: production
      url: https://relife.app

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: dist/

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment commands here

      - name: Run production smoke tests
        run: |
          sleep 45
          curl -f https://relife.app/ || exit 1

  # Notification
  notify:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.deploy-production.result == 'success' }}
        run: |
          echo "‚úÖ Deployment successful!"
          # Add notification logic here

      - name: Notify on failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          # Add notification logic here
