{
  "found_exports": {
    "Alarm": [
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarm = <T extends CreateAlarmOptions = CreateAlarmOptions>(",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmInstance = (alarmId: string): AlarmInstance => ({",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmEvent = (alarmId: string): AlarmEvent => ({",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleAlarm = (overrides: Partial<Alarm> = {}): Alarm => {",
      "src/__tests__/factories/core-factories.ts:export const _createActiveAlarm = () =>",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmTime = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmDays = () => {",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmTime = _generateRealisticAlarmTime;",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmDays = _generateRealisticAlarmDays;",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAlarmService extends MockBaseService implements AlarmServiceInterface {",
      "src/__tests__/mocks/service-mocks.ts:export class MockAlarmService {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class AlarmPerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export const alarmPerformanceTester = new AlarmPerformanceTester();",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const AlarmTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useAlarmTest = () => useContext(AlarmTestContext);",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedAlarmService = (): MockAlarmService => {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.MockedFunction<() => Promise<string>>;",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),",
      "src/__tests__/providers/service-providers.tsx:export const _useAlarmServiceTest = () => useContext(AlarmServiceContext);",
      "src/__tests__/providers/test-providers.tsx:export const _createMockAlarmContext = (",
      "src/__tests__/providers/test-providers.tsx:export const MockAlarmProvider: React.FC<{",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidAlarm = (alarm: any): alarm is TestAlarm => {",
      "src/__tests__/utils/data-builders.ts:export class TestAlarmBuilder {",
      "src/__tests__/utils/data-builders.ts:export const _createAlarm = (overrides?: Partial<TestAlarm>) =>",
      "src/__tests__/utils/data-builders.ts:export { TestUserBuilder, TestAlarmBuilder, TestBattleBuilder };",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockAlarm = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/backend/cloudflare-functions.ts:export class AlarmTriggerProcessor {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export function isDatabaseAlarm(obj: unknown): obj is DatabaseAlarm {",
      "src/backend/database-types.ts:export function isDatabaseAlarmEvent(obj: unknown): obj is DatabaseAlarmEvent {",
      "src/components/ActiveAlarm.tsx:export function ActiveAlarm({",
      "src/components/ActiveAlarm.tsx:export default ActiveAlarm;",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmList: React.FC<AdaptiveAlarmListProps> = ({",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmListWithErrorBoundary: React.FC<",
      "src/components/AdaptiveAlarmList.tsx:export default AdaptiveAlarmList;",
      "src/components/AdvancedAlarmScheduling.tsx:export default AdvancedAlarmScheduling;",
      "src/components/AlarmForm.tsx:export default AlarmForm;",
      "src/components/AlarmList.tsx:export default AlarmList;",
      "src/components/AlarmManagement.tsx:export function AlarmManagement({",
      "src/components/AlarmManagement.tsx:export default AlarmManagement;",
      "src/components/AlarmRinging.tsx:export default AlarmRinging;",
      "src/components/AlarmTester.tsx:export function AlarmTester({ onClose, userId = 'demo-_user' }: AlarmTesterProps) {",
      "src/components/AlarmTester.tsx:export default AlarmTester;",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeBrowser.tsx:export default AlarmThemeBrowser;",
      "src/components/AlarmThemeSelector.tsx:export const AlarmThemeSelector: React.FC<AlarmThemeSelectorProps> = ({",
      "src/components/AlarmThemeSelector.tsx:export default AlarmThemeSelector;",
      "src/components/CompleteThemeSystemDemo.tsx:export const AlarmFormIntegration: React.FC<{",
      "src/components/EnhancedSmartAlarmSettings.tsx:export default EnhancedSmartAlarmSettings;",
      "src/components/MobileAlarmCard.tsx:export const MobileAlarmList: React.FC = () => {",
      "src/components/MobileAlarmCard.tsx:export default MobileAlarmCard;",
      "src/components/QuickAlarmSetup.tsx:export function QuickAlarmSetup({ onAlarmSet, userId }: QuickAlarmSetupProps) {",
      "src/components/QuickAlarmSetup.tsx:export default QuickAlarmSetup;",
      "src/components/SmartAlarmDashboard.tsx:export default SmartAlarmDashboard;",
      "src/components/SmartAlarmSettings.tsx:export default SmartAlarmSettings;",
      "src/components/VirtualScroll.tsx:export const VirtualAlarmHistory: React.FC<{",
      "src/components/VisualAlarmDisplay.tsx:export const VisualAlarmDisplay: React.FC<VisualAlarmDisplayProps> = ({",
      "src/components/VisualAlarmDisplay.tsx:export default VisualAlarmDisplay;",
      "src/components/animations/LoadingStates.tsx:export const AlarmCardSkeleton: React.FC<{ count?: number }> = ({ count = 3 }) => {",
      "src/components/animations/LoadingStates.tsx:export const AlarmRingingLoader: React.FC = () => {",
      "src/components/premium/PremiumAlarmFeatures.tsx:export function PremiumAlarmFeatures({",
      "src/components/premium/PremiumAlarmFeatures.tsx:export default PremiumAlarmFeatures;",
      "src/hooks/useAdvancedAlarms.ts:export function useAdvancedAlarms() {",
      "src/hooks/useAlarmRingingAnnouncements.ts:export function useAlarmRingingAnnouncements() {",
      "src/hooks/useAnalytics.ts:export const useAlarmAnalytics = () => {",
      "src/hooks/useAudioLazyLoading.ts:export function useAlarmSoundPreloading(alarms: any[]) {",
      "src/hooks/useCapacitor.ts:export function useAlarmNotifications() {",
      "src/hooks/useCapacitor.ts:export function useCapacitorAlarmApp() {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalPreloading(alarms: Alarm[]): CriticalPreloadingState {",
      "src/hooks/useCriticalPreloading.ts:export function useAlarmReadiness(alarmId: string, enabled: boolean = true) {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useEnhancedSmartAlarms.ts:export const useEnhancedSmartAlarms = (): UseEnhancedSmartAlarmsResult => {",
      "src/hooks/useEnhancedSmartAlarms.ts:export default useEnhancedSmartAlarms;",
      "src/hooks/useI18n.ts:export const useAlarmI18n = () => {",
      "src/hooks/usePWA.ts:export function useAlarmPWA() {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/hooks/useSoundEffects.tsx:export function useAlarmSounds() {",
      "src/services/advanced-alarm-scheduler.ts:export class AdvancedAlarmScheduler {",
      "src/services/alarm-access-control.ts:export class AlarmAccessControl {",
      "src/services/alarm-access-control.ts:export default AlarmAccessControl.getInstance();",
      "src/services/alarm-api-security.ts:export class AlarmAPISecurityService {",
      "src/services/alarm-api-security.ts:export default AlarmAPISecurityService.getInstance();",
      "src/services/alarm-backup-redundancy.ts:export class AlarmBackupRedundancyService {",
      "src/services/alarm-backup-redundancy.ts:export default AlarmBackupRedundancyService.getInstance();",
      "src/services/alarm-battle-integration.ts:export class AlarmBattleIntegrationService {",
      "src/services/alarm-battle-integration.ts:export const alarmBattleIntegration = AlarmBattleIntegrationService.getInstance();",
      "src/services/alarm-enhanced.ts:export class EnhancedAlarmService {",
      "src/services/alarm-executor.ts:export class AlarmExecutor {",
      "src/services/alarm-integrity-monitor.ts:export class AlarmIntegrityMonitor {",
      "src/services/alarm-integrity-monitor.ts:export default AlarmIntegrityMonitor.getInstance();",
      "src/services/alarm-parser.ts:export class AlarmParser {",
      "src/services/alarm-rate-limiting.ts:export class AlarmRateLimitingService {",
      "src/services/alarm-rate-limiting.ts:export default AlarmRateLimitingService.getInstance();",
      "src/services/alarm-security-integration.ts:export class AlarmSecurityIntegrationService {",
      "src/services/alarm-security-integration.ts:export default AlarmSecurityIntegrationService.getInstance();",
      "src/services/alarm-stub.ts:export const AlarmService = {",
      "src/services/alarm.ts:export class AlarmService {",
      "src/services/alarm.ts:export const enhancedAlarmTracking = {",
      "src/services/capacitor-enhanced.ts:export interface AlarmNotification {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-alarm.ts:export class EnhancedAlarmService extends BaseService implements AlarmServiceInterface {",
      "src/services/enhanced-alarm.ts:export const createAlarmService = (",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export class EnhancedSmartAlarmScheduler extends SmartAlarmScheduler {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export default EnhancedSmartAlarmScheduler;",
      "src/services/ml-alarm-optimizer.ts:export class MLAlarmOptimizer {",
      "src/services/ml-alarm-optimizer.ts:export default MLAlarmOptimizer;",
      "src/services/real-time-smart-adapter.ts:export interface SmartAlarmStatus {",
      "src/services/secure-alarm-storage.ts:export class SecureAlarmStorageService {",
      "src/services/secure-alarm-storage.ts:export default SecureAlarmStorageService.getInstance();",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface AlarmOptimization {",
      "src/services/smart-alarm-scheduler.ts:export class SmartAlarmScheduler {",
      "src/services/smart-alarm-scheduler.ts:export default SmartAlarmScheduler;",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:export const visualAlarmThemes = VisualAlarmThemesService.getInstance();",
      "src/services/visual-alarm-themes.ts:export default VisualAlarmThemesService;",
      "src/stories/components/AlarmForm.stories.tsx:export const NewAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const EditAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const EditPremiumAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const WeekendAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const CustomSoundAlarm: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const WithAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const SingleAlarm: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const OnlyDisabledAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const ManyAlarms: Story = {",
      "src/stories/ui/Card.stories.tsx:export const AlarmCard: Story = {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/alarm.d.ts:  export class AlarmService {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:export type AlarmAction =",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:export const validateAlarmState = (state: AlarmState): boolean => {",
      "src/types/app-state.ts:export const isAlarmState = (value: any): value is AlarmState => {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/domain.ts:export interface Alarm {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/push-notifications.ts:export interface AlarmNotificationData {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSyncStatusPayload {",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/realtime-messages.ts:export const isAlarmMessage = (",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/services/backend-api.ts:export interface Alarm {",
      "src/types/services/backend-api.ts:export interface AlarmSound {",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/utility-types.ts:export interface AlarmHistoryData {",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/utils/alarm-conversion.ts:export class AlarmConversionUtil {",
      "src/utils/alarm-conversion.ts:export default AlarmConversionUtil;",
      "src/utils/index.ts:export const getNextAlarmTime = (alarm: Alarm): Date | null => {",
      "src/utils/index.ts:export const generateAlarmId = (): string => {",
      "src/utils/index.ts:export const isAlarmTime = (alarm: Alarm): boolean => {",
      "src/utils/index.ts:export const getTimeUntilNextAlarm = (",
      "src/utils/index.ts:export const validateAlarmForm = (data: {",
      "src/utils/lazy-loading.tsx:export const AlarmForm = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AlarmRinging = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmSettings = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmDashboard = lazyWithPreload(",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmTime(): string {",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmDays(): string[] {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {",
      "src/utils/validation.ts:export const validateAlarmData = (alarmData: {",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed SmartAlarmSettings', () => {",
      "src/__tests__/providers/index.ts:  type MockAlarmContextValue,",
      "src/__tests__/providers/index.ts:  type MockAlarmService,",
      "src/components/ActiveAlarm.tsx:import type { Alarm, AlarmDifficulty, AlarmInstance } from '../types/index';",
      "src/components/AdaptiveAlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AdvancedSchedulingDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/AlarmForm.tsx:import type { Alarm, VoiceMood, CustomSound, AlarmDifficulty, User } from '../types';",
      "src/components/AlarmForm.tsx:import { validateAlarmData, type AlarmValidationErrors } from '../utils/validation';",
      "src/components/AlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AlarmManagement.tsx:import type { Alarm, DayOfWeek, AlarmDifficulty, VoiceMood } from '../types/index';",
      "src/components/AlarmManagement.tsx:import { type EnhancedSmartAlarm } from '../services/enhanced-smart-alarm-scheduler';",
      "src/components/AlarmRinging.tsx:import type { Alarm, User } from '../types';",
      "src/components/Dashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EnhancedDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type EnhancedSmartAlarm,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type SmartAlarmMetrics,",
      "src/components/NuclearModeBattle.tsx:import type { Alarm, User, AlarmDifficulty } from '../types';",
      "src/components/SmartAlarmDashboard.tsx:  type EnhancedSmartAlarm,",
      "src/components/SmartAlarmDashboard.tsx:  type SmartAlarmStatus,",
      "src/components/SmartAlarmSettings.tsx:  type SmartAlarm,",
      "src/components/StrugglingSamWrapper.tsx:import type { Alarm } from '../types';",
      "src/components/TabProtectionWarning.tsx:import type { Alarm } from '../types';",
      "src/components/__tests__/AlarmForm.test.tsx:import type { Alarm, VoiceMood } from '../../types';",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Custom Alarm');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Work Alarm');",
      "src/components/premium/PremiumAlarmFeatures.tsx:import type { Alarm } from '../../types';",
      "src/components/premium/PremiumFeaturePreview.tsx:import type { VoiceMood, AlarmDifficulty } from '../../types';",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmRinging).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmSnoozed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmDismissed).toBe('function');",
      "src/hooks/useAdvancedAlarms.ts:import type { Alarm } from '../types';",
      "src/hooks/useAlarmRingingAnnouncements.ts:import type { Alarm } from '../types/index';",
      "src/hooks/useCriticalPreloading.ts:import type { Alarm } from '../types';",
      "src/hooks/useEnhancedServiceWorker.ts:import type { Alarm } from '../types';",
      "src/hooks/useEnhancedSmartAlarms.ts:  type EnhancedSmartAlarm,",
      "src/hooks/usePushNotifications.ts:import type { Alarm } from '../types';",
      "src/hooks/useScreenReaderAnnouncements.ts:import ScreenReaderService, { type AlarmAnnouncement } from '../utils/screen-reader';",
      "src/hooks/useScreenReaderAnnouncements.ts:import type { Alarm } from '../types';",
      "src/hooks/useTabProtectionAnnouncements.ts:import type { Alarm } from '../types';",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { AlarmState, AlarmAction } from '../../types/app-state';",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { Alarm } from '../../types/domain';",
      "src/reducers/alarmReducer.ts:import type { AlarmState, AlarmAction } from '../types/app-state';",
      "src/services/__tests__/alarm.test.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../../types';",
      "src/services/__tests__/voice.test.ts:import type { Alarm, VoiceMood } from '../../types';",
      "src/services/advanced-analytics.ts:import type { Alarm, User } from '../types';",
      "src/services/advanced-conditions-helper.ts:  type EnhancedSmartAlarm,",
      "src/services/alarm-access-control.ts:import type { Alarm, User } from '../types';",
      "src/services/alarm-access-control.ts:type AlarmAction =",
      "src/services/alarm-api-security.ts:type AlarmAPIEndpoint =",
      "src/services/alarm-backup-redundancy.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm-enhanced.ts:import type { Alarm, VoiceMood, AlarmEvent } from '../types';",
      "src/services/alarm-integrity-monitor.ts:import type { Alarm } from '../types';",
      "src/services/alarm-parser.ts:import type { Alarm, RecurrencePattern } from '../types/index';",
      "src/services/alarm-rate-limiting.ts:type AlarmOperation =",
      "src/services/alarm-security-integration.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/app-analytics.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/audio-manager.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/critical-preloader.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/enhanced-alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/enhanced-offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SmartAlarm,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SmartAlarmRecommendation,",
      "src/services/enhanced-smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/notification.ts:import type { Alarm } from '../types';",
      "src/services/offline-manager.ts:import type { Alarm } from '../types';",
      "src/services/offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/push-notifications.ts:import type { Alarm } from '../types';",
      "src/services/real-time-smart-adapter.ts:  type EnhancedSmartAlarm,",
      "src/services/realtime-service.ts:import type { Alarm, User } from '../types';",
      "src/services/secure-alarm-storage.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/secure-push-notification.ts:import type { Alarm } from '../types';",
      "src/services/sleep-analysis.ts:import type { Alarm } from '../types';",
      "src/services/smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/supabase.ts:import type { Alarm, AlarmEvent, User as AppUser } from '../types';",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/voice-ai-enhanced.ts:import type { Alarm, VoiceMood, User } from '../types';",
      "src/services/voice-enhanced.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-pro.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-smart-integration.ts:import type { User, Alarm } from '../types';",
      "src/services/voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/stories/components/AlarmForm.stories.tsx:import type { Alarm, VoiceMood, AlarmDifficulty, User } from '../../types';",
      "src/stories/components/AlarmForm.stories.tsx:const meta: Meta<typeof AlarmForm> = {",
      "src/types/alarm.d.ts:// Additional type definitions for Advanced Alarm Scheduler",
      "src/types/app-state.ts:   * @type {Alarm[]}",
      "src/types/app-state.ts:   * @type {Alarm[]}",
      "src/types/app-state.ts:   * @type {AlarmInstance[]}",
      "src/types/app-state.ts:     * @type {Partial<Alarm> | null}",
      "src/types/app-state.ts:export type AlarmAction =",
      "src/types/app-state.ts:  | { type: 'ALARMS_LOAD_SUCCESS'; payload: Alarm[] }",
      "src/types/app-state.ts:  | { type: 'ALARM_CREATE_SUCCESS'; payload: Alarm }",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_SUCCESS'; payload: Alarm }",
      "src/types/app-state.ts:  | { type: 'UPDATE_DRAFT_ALARM'; payload: Partial<Alarm> }",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/realtime-messages.ts:import type { Alarm, VoiceMood, User, Battle } from './index';",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/services/backend-api.ts:  type: AlarmEventType;",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/utils/index.ts:import type { VoiceMood, VoiceMoodConfig, Alarm } from '../types';",
      "src/utils/service-worker-manager.ts:import type { Alarm } from '../types';",
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockAlarmNotification {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/test-providers.tsx:interface AlarmContextValue {",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/__tests__/utils/storage-helpers.ts:interface AlarmStorageData {",
      "src/backend/api.ts:interface Alarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/components/ActiveAlarm.tsx:interface ActiveAlarmProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AlarmItemProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListWrapperProps extends AdaptiveAlarmListProps {",
      "src/components/AdvancedAlarmScheduling.tsx:interface AdvancedAlarmSchedulingProps {",
      "src/components/AlarmForm.tsx:interface AlarmFormProps {",
      "src/components/AlarmList.tsx:interface AlarmListProps {",
      "src/components/AlarmManagement.tsx:interface AlarmManagementProps {",
      "src/components/AlarmRinging.tsx:interface AlarmRingingProps {",
      "src/components/AlarmTester.tsx:interface AlarmTesterProps {",
      "src/components/AlarmThemeBrowser.tsx:interface AlarmThemeBrowserProps {",
      "src/components/AlarmThemeSelector.tsx:interface AlarmThemeSelectorProps {",
      "src/components/EnhancedSmartAlarmSettings.tsx:interface EnhancedSmartAlarmSettingsProps {",
      "src/components/MobileAlarmCard.tsx:interface Alarm {",
      "src/components/MobileAlarmCard.tsx:interface MobileAlarmCardProps {",
      "src/components/QuickAlarmSetup.tsx:interface QuickAlarmSetupProps {",
      "src/components/SmartAlarmDashboard.tsx:interface SmartAlarmDashboardProps {",
      "src/components/SmartAlarmSettings.tsx:interface SmartAlarmSettingsProps {",
      "src/components/VirtualScroll.tsx:interface AlarmHistoryItem {",
      "src/components/VisualAlarmDisplay.tsx:interface VisualAlarmDisplayProps {",
      "src/components/premium/PremiumAlarmFeatures.tsx:interface PremiumAlarmFeaturesProps {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/services/capacitor-enhanced.ts:export interface AlarmNotification {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/real-time-smart-adapter.ts:export interface SmartAlarmStatus {",
      "src/services/secure-alarm-storage.ts:interface SecureAlarmData {",
      "src/services/secure-alarm-storage.ts:interface AlarmBackupData {",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface AlarmOptimization {",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/app-state.ts: * @interface AlarmState",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:// Helper interfaces for AlarmState",
      "src/types/app-state.ts:interface WeeklyAlarmPattern {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/domain.ts:export interface Alarm {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/push-notifications.ts:export interface AlarmNotificationData {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSyncStatusPayload {",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/services/backend-api.ts:export interface Alarm {",
      "src/types/services/backend-api.ts:export interface AlarmSound {",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/utility-types.ts:export interface AlarmHistoryData {",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {"
    ],
    "ApiError": [
      "src/__tests__/mocks/msw-setup.ts:export const mockApiError = (",
      "src/types/api.ts:export interface ApiError {",
      "src/types/index.ts:export const isApiError = (value: unknown): value is ApiError => {",
      "src/types/index.ts:    typeof (value as ApiError).code === 'string' &&",
      "src/types/index.ts:    typeof (value as ApiError).message === 'string'",
      "src/types/api.ts:export interface ApiError {"
    ],
    "ApiResponse": [
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse;",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export const isErrorResponse = (response: ApiResponse): response is ErrorResponse => {",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:  export type AccountResponse = ApiResponse<ConvertKitAccount>;",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:  export type MockResponse<T> = ApiResponse<TestServiceResponse<T>>;",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts:export interface ApiResponse<T = unknown> {",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/index.ts:export const isApiResponse = <T>(value: unknown): value is ApiResponse<T> => {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/stripe-api.ts:export interface StripeServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/webhook-api.ts:export interface WebhookServiceResponse extends ApiResponse {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utils.ts:export type ApiResponse<T> = Result<",
      "src/types/api-responses.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse;",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:  export type AccountResponse = ApiResponse<ConvertKitAccount>;",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:  export type MockResponse<T> = ApiResponse<TestServiceResponse<T>>;",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/index.ts:    typeof (value as ApiResponse).success === 'boolean' &&",
      "src/types/index.ts:    typeof (value as ApiResponse).timestamp === 'string'",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utils.ts:export type ApiResponse<T> = Result<",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api.ts:export interface ApiResponse<T = unknown> {",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/stripe-api.ts:export interface StripeServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/webhook-api.ts:export interface WebhookServiceResponse extends ApiResponse {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {"
    ],
    "App": [
      "src/App.tsx:export default App;",
      "src/__tests__/factories/support-factories.ts:export const _createTestAppSettings = (userId?: string): AppSettings =>",
      "src/__tests__/mocks/capacitor.mock.ts:export const App = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _App = App;",
      "src/config/initializeApp.ts:export const initializeApp = async (): Promise<void> => {",
      "src/constants/initialDomainState.ts:export const INITIAL_DOMAIN_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export const INITIAL_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export function isValidAppState(obj: any): obj is AppState {",
      "src/constants/initialState.ts:export function createFreshAppState(): AppState {",
      "src/hooks/useCapacitor.ts:export function useAppState() {",
      "src/hooks/useCapacitor.ts:export function useAppUrlOpen() {",
      "src/hooks/useCapacitor.ts:export function useCapacitorAlarmApp() {",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificTestCategories: Record<string, TestCategory> = {",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificCategoryConfig = {",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/app-analytics.ts:export default AppAnalyticsService;",
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:export const createAppSelectors = (state: AppState) => ({",
      "src/types/custom-sound-themes.ts:export interface AppliedFilter {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/user.ts:export interface AppUser {",
      "src/types/user.ts:export function normalizeUserSubscription(_user: Partial<User | AppUser>): User {",
      "src/types/user.ts:export function isPremiumUser(_user: User | AppUser | null | undefined): boolean {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/__tests__/theme-integration.test.tsx:import type { AppState, User } from '../types';",
      "src/components/EnhancedSettings.tsx:import type { AppState, User } from '../types';",
      "src/components/ExtendedScreenReaderTester.tsx:            key as keyof typeof additionalAppSpecificCategoryConfig",
      "src/components/OnboardingFlow.tsx:import type { AppState } from '../types';",
      "src/components/SettingsPage.tsx:import type { AppState, VoiceMood, Theme } from '../types';",
      "src/components/UserProfile.tsx:import type { User as AppUser, VoiceMood } from '../types';",
      "src/constants/initialDomainState.ts: * Provides properly typed initial state that matches the AppState interface",
      "src/constants/initialState.ts: * @description Centralized type-safe default values for the AppState interface.",
      "src/reducers/rootReducer.ts:import type { AppState, AppAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:  action: AppAction | { type: 'APP_UPDATE'; payload: AppState }",
      "src/services/supabase.ts:import type { Alarm, AlarmEvent, User as AppUser } from '../types';",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/custom-sound-themes.ts:export interface AppliedFilter {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/user.ts:export interface AppUser {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/utils/keyboard-navigation.ts:    // This method provides the expected interface for App.tsx",
      "src/utils/mobile-accessibility.ts:    // This method provides the expected interface for App.tsx",
      "src/utils/screen-reader.ts:    // This method provides the expected interface for App.tsx",
      "src/utils/voice-accessibility.ts:    // This method provides the expected interface for App.tsx"
    ],
    "AppInfo": [
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {",
      "",
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {"
    ],
    "AppState": [
      "src/constants/initialDomainState.ts:export const INITIAL_DOMAIN_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export const INITIAL_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export function isValidAppState(obj: any): obj is AppState {",
      "src/constants/initialState.ts:export function createFreshAppState(): AppState {",
      "src/hooks/useCapacitor.ts:export function useAppState() {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/app-state.ts:export const createAppSelectors = (state: AppState) => ({",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/__tests__/theme-integration.test.tsx:import type { AppState, User } from '../types';",
      "src/components/EnhancedSettings.tsx:import type { AppState, User } from '../types';",
      "src/components/OnboardingFlow.tsx:import type { AppState } from '../types';",
      "src/components/SettingsPage.tsx:import type { AppState, VoiceMood, Theme } from '../types';",
      "src/constants/initialDomainState.ts: * Provides properly typed initial state that matches the AppState interface",
      "src/constants/initialState.ts: * @description Centralized type-safe default values for the AppState interface.",
      "src/reducers/rootReducer.ts:import type { AppState, AppAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:  action: AppAction | { type: 'APP_UPDATE'; payload: AppState }",
      "src/types/app-state.ts:export interface AppState {"
    ],
    "B": [
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattle = (options: CreateBattleOptions = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattleParticipant = (userId?: string): BattleParticipant => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleBattle = (overrides: Partial<Battle> = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export function _createBatch<T>(",
      "src/__tests__/factories/core-factories.ts:export const _createCompletedBattle = () =>",
      "src/__tests__/factories/factory-utils.ts:export const _generateBattleDuration = () => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattle = (overrides: Partial<Battle> = {}): Battle => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipant = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipantStats = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleSettings = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattlePrize = (",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattle = _createTestBattle;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipant = _createTestBattleParticipant;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipantStats = _createTestBattleParticipantStats;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleSettings = _createTestBattleSettings;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattlePrize = _createTestBattlePrize;",
      "src/__tests__/mocks/capacitor.mock.ts:export const StatusBar = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Badge = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const BackgroundMode = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Browser = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _StatusBar = StatusBar;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Badge = Badge;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _BackgroundMode = BackgroundMode;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Browser = Browser;",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export abstract class MockBaseService implements BaseService {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAlarmService extends MockBaseService implements AlarmServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockBattleService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockVoiceService extends MockBaseService implements VoiceServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const createMockServiceContainer = (): Map<string, BaseService> => {",
      "src/__tests__/mocks/platform-service-mocks.ts:export { MockSupabaseClient, MockSupabaseQueryBuilder, MockSupabaseRealtimeChannel };",
      "src/__tests__/mocks/react-router.mock.ts:export const _BrowserRouter = vi.fn(({ children, basename }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _createBrowserRouter = vi.fn((routes: any[], options?: any) => {",
      "src/__tests__/mocks/service-mocks.ts:export class MockBattleService {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedBattleService = (): MockBattleService => {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/providers/service-providers.tsx:export const _useBattleServiceTest = () => useContext(BattleServiceContext);",
      "src/__tests__/realtime/websocket-testing.ts:export class BattleRealTimeTester {",
      "src/__tests__/realtime/websocket-testing.ts:export default { MockWebSocket, BattleRealTimeTester, setupWebSocketTesting };",
      "src/__tests__/setup/after-env-setup.ts:        exportKey: jest.fn(() => Promise.resolve(new ArrayBuffer(32))),",
      "src/__tests__/theme-integration.test.tsx:      expect(screen.getByTestId('export-btn')).toBeInTheDocument();",
      "src/__tests__/utils/data-builders.ts:export class TestUserBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestAlarmBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestBattleBuilder {",
      "src/__tests__/utils/data-builders.ts:export const _createBattle = (overrides?: Partial<TestBattle>) =>",
      "src/__tests__/utils/data-builders.ts:export { TestUserBuilder, TestAlarmBuilder, TestBattleBuilder };",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/storage-helpers.ts:export const _indexedDBMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const indexedDBMocks = _indexedDBMocks;",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/backend/webhook-config.ts:export const WEBHOOK_EVENTS = [",
      "src/backend/webhook-config.ts:export type WebhookEventType = (typeof WEBHOOK_EVENTS)[number];",
      "src/backend/webhook-config.ts:export const WEBHOOK_CONFIG = {",
      "src/components/AchievementBadges.tsx:export const AchievementBadges: React.FC<AchievementBadgesProps> = ({",
      "src/components/AchievementBadges.tsx:export default AchievementBadges;",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmListWithErrorBoundary: React.FC<",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveButton.tsx:export const AdaptiveButton = memo<AdaptiveButtonProps>(",
      "src/components/AdaptiveButton.tsx:export default AdaptiveButton;",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingButton = memo<AdaptiveLoadingButtonProps>(",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeBrowser.tsx:export default AlarmThemeBrowser;",
      "src/components/BattleSystem.tsx:export function BattleSystem({",
      "src/components/BattleSystem.tsx:export default BattleSystem;",
      "src/components/ConsentBanner.tsx:export default function ConsentBanner({",
      "src/components/EnhancedBattles.tsx:export function EnhancedBattles({",
      "src/components/EnhancedBattles.tsx:export default EnhancedBattles;",
      "src/components/ErrorBoundary.tsx:export default ErrorBoundary;",
      "src/components/ErrorBoundaryTest.tsx:export default ErrorBoundaryTest;",
      "src/components/NuclearModeBattle.tsx:export const NuclearModeBattle: React.FC<NuclearModeBattleProps> = ({",
      "src/components/NuclearModeBattle.tsx:export default NuclearModeBattle;",
      "src/components/PersonaDrivenUI.tsx:export function usePersonaDetection(userId: string, userBehavior: any) {",
      "src/components/RootErrorBoundary.tsx:export class RootErrorBoundary extends Component<Props, State> {",
      "src/components/RootErrorBoundary.tsx:export default RootErrorBoundary;",
      "src/components/SpecializedErrorBoundaries.tsx:export class AnalyticsErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class MediaErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class AIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class APIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class DataErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class FormErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/StrugglingSamWrapper.tsx:export const usePersonaBasedFeatures = (_user?: any) => {",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/premium/BillingHistory.tsx:export function BillingHistory({",
      "src/components/premium/BillingHistory.tsx:export default BillingHistory;",
      "src/components/premium/FeatureUtils.tsx:export function FeatureBadge({",
      "src/components/premium/index.ts:export { default as BillingHistory } from './BillingHistory';",
      "src/components/ui/badge.tsx:export { Badge, badgeVariants };",
      "src/components/ui/button.tsx:export { Button, buttonVariants };",
      "src/components/ui/scroll-area.tsx:export { ScrollArea, ScrollBar };",
      "src/components/user-testing/ABTestWrapper.tsx:export const ABTestContext = React.createContext<ABTestContextType>({",
      "src/components/user-testing/ABTestWrapper.tsx:export function ABTestWrapper({",
      "src/components/user-testing/ABTestWrapper.tsx:export function useABTest() {",
      "src/components/user-testing/ABTestWrapper.tsx:export function withABTest<P extends object>(",
      "src/components/user-testing/ABTestWrapper.tsx:export function ABTestProps<T>({",
      "src/components/user-testing/ABTestWrapper.tsx:export default ABTestWrapper;",
      "src/components/user-testing/BetaTestingProgram.tsx:export function BetaTestingProgram() {",
      "src/components/user-testing/BetaTestingProgram.tsx:export default BetaTestingProgram;",
      "src/components/user-testing/BugReportModal.tsx:export function BugReportModal({",
      "src/components/user-testing/BugReportModal.tsx:export default BugReportModal;",
      "src/components/user-testing/index.ts:export { default as BugReportModal } from './BugReportModal';",
      "src/config/convertkit-generated.ts:export const WEBHOOK_URLS = {",
      "src/config/stripe.ts:export function getPlanByTier(tier: string) {",
      "src/constants/initialState.ts:export const DEFAULT_AVAILABLE_THEMES: ThemePreset[] = [",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/useABTesting.tsx:export const useABTesting = (userId?: string) => {",
      "src/hooks/useABTesting.tsx:export const withABTest = <T extends object>(",
      "src/hooks/useABTesting.tsx:export const useABTestComponent = (featureKey: FeatureKey, userId?: string) => {",
      "src/hooks/useABTesting.tsx:export default useABTesting;",
      "src/hooks/useAccessibility.ts:export const useColorBlindFriendly = () => {",
      "src/hooks/useAnimations.ts:export const useStaggerChildren = (delayBetweenChildren: number = 0.1) => {",
      "src/hooks/useCapacitor.ts:export function useBackButton() {",
      "src/hooks/useMobilePerformance.ts:export const useBatteryOptimization = () => {",
      "src/hooks/useMobileTouch.ts:export function useEnhancedButton(hapticType: 'light' | 'medium' | 'heavy' = 'light') {",
      "src/hooks/useMobileTouch.ts:export function useMobileBehavior() {",
      "src/hooks/usePWA.ts:export function useBackgroundSync() {",
      "src/services/__tests__/theme-persistence.test.ts:      expect(typeof exported).toBe('string');",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/advanced-conditions-helper.ts:export const CUSTOM_CONDITION_TEMPLATES: Record<string, ConditionBasedAdjustment> = {",
      "src/services/alarm-backup-redundancy.ts:export class AlarmBackupRedundancyService {",
      "src/services/alarm-backup-redundancy.ts:export default AlarmBackupRedundancyService.getInstance();",
      "src/services/alarm-battle-integration.ts:export class AlarmBattleIntegrationService {",
      "src/services/alarm-battle-integration.ts:export const alarmBattleIntegration = AlarmBattleIntegrationService.getInstance();",
      "src/services/base/BaseService.ts:export abstract class BaseService implements IBaseService {",
      "src/services/base/BaseService.ts:export function createServiceBuilder<T extends BaseService>(): ServiceBuilderImpl<T> {",
      "src/services/base/CacheManager.ts:export class IndexedDBCacheProvider implements CacheProvider {",
      "src/services/base/ServiceContainer.ts:export function registerService<T extends BaseService>(",
      "src/services/base/ServiceContainer.ts:export function getService<T extends BaseService>(name: string): T {",
      "src/services/base/ServiceContainer.ts:export function resolveService<T extends BaseService>(name: string): Promise<T> {",
      "src/services/battle.ts:export class BattleService {",
      "src/services/battle.ts:export const battleService = BattleService.getInstance();",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/custom-test-scenarios.ts:export const gamingBattlesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export function filterTestsByFeatureAccess(",
      "src/services/enhanced-alarm.ts:export class EnhancedAlarmService extends BaseService implements AlarmServiceInterface {",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-battle.ts:export class EnhancedBattleService",
      "src/services/enhanced-battle.ts:export const createBattleService = (",
      "src/services/enhanced-battle.ts:export const battleService = createBattleService();",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/enhanced-voice.ts:export class EnhancedVoiceService extends BaseService implements VoiceServiceInterface {",
      "src/services/performance-budget-manager.ts:export class PerformanceBudgetManager {",
      "src/services/performance-budget-manager.ts:export const performanceBudgetManager = PerformanceBudgetManager.getInstance();",
      "src/services/pwa-service.ts:export interface BackgroundSyncStatus {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/user-testing.ts:export interface ABTest {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface ABTestMetric {",
      "src/services/user-testing.ts:export interface BugReport {",
      "src/services/voice-biometrics.ts:export default VoiceBiometricsService;",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/stories/Button.tsx:export const Button = ({",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/templates/email-templates.ts:export const RELIFE_BRAND = {",
      "src/templates/email-templates.ts:export const generateBaseTemplate = (",
      "src/tests/alarm-themes-integration.test.ts:      expect(exportData).toBeDefined();",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/themes/premium-themes.ts:export const oceanBreezeTheme: ThemeConfig = {",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BroadcastStats {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface SelectedBuiltInSound {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/email-campaigns.ts:export interface ABTestConfig {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface ABTestResults {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/realtime/index.ts:export const DEFAULT_WEBSOCKET_CONFIG: WebSocketConfig = {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/service-architecture.ts:export interface EventBus {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export function isBaseService(obj: any): obj is BaseService {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/struggling-sam.ts:export interface ABTestGroup {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface ABTestResults {",
      "src/types/struggling-sam.ts:export interface ABTestMetrics {",
      "src/types/struggling-sam.ts:export interface UserABTest {",
      "src/types/struggling-sam.ts:export interface UserABTestMetrics {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface ABTestContext {",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/tabProtection.ts:export const DEFAULT_TAB_PROTECTION_SETTINGS: TabProtectionSettings = {",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export const createBrandedId = <B>(prefix: string) => {",
      "src/types/utils.ts:export const extractIdFromBranded = <B>(brandedId: Branded<string, B>): string =>",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/utils/fallback-strategies.tsx:export class FallbackErrorBoundary extends React.Component<",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {",
      "src/utils/premium-testing.ts:export const MOCK_SUBSCRIPTION_DATA = {",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/App.tsx:              type: 'TAB_CLOSING',",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof alarm.is_active).toBe('boolean');",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof response.success).toBe('boolean');",
      "src/__tests__/api/enhanced-msw-handlers.ts:import type { DefaultBodyType, HttpResponseResolver, PathParams } from 'msw';",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.email).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.username).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.subscriptionTier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.level).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.userId).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.tier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.status).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.amount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.currency).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.elevenlabsVoices).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.customVoiceMessages).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.premiumThemes).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.advancedAIInsights).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.nuclearMode).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.prioritySupport).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.theme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.colorPreferences.colorblindFriendly).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.typographyPreferences.preferredFontSize).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.motionPreferences.enableAnimations).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.soundPreferences.enableSounds).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.layoutPreferences.density).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof gameTheme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.weatherEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.locationEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.fitnessEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.smartWakeWindow).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.adaptiveDifficulty).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.contextualTasks).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.environmentalAdjustments).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleParticipantStats', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.tasksCompleted).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.snoozeCount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.score).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof stats.wakeTime).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleSettings', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof settings.duration).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.maxParticipants).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.allowLateJoins).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.speedTarget).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.description).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.completed).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattlePrize', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof battle.prize.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.title).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.badge).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.seasonPoints).toBe('number');",
      "src/__tests__/factories/core-factories.ts:  type?: BattleType;",
      "src/__tests__/factories/core-factories.ts:    type = faker.helpers.arrayElement(COMMON_DATA.battleTypes) as BattleType,",
      "src/__tests__/factories/core-factories.ts:  type: BattleType;",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.alarmAccuracy).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.wakeUpSuccess).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.userSatisfaction).toBe('number');",
      "src/__tests__/factories/factories.test.ts:      expect(asset.type).toBe('audio');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(loadAction.type).toBe('ALARMS_LOAD_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(loginAction.type).toBe('USER_LOGIN_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:        type: 'SUBSCRIPTION_UPGRADE_SUCCESS',",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(upgradeAction.type).toBe('SUBSCRIPTION_UPGRADE_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:        type: 'SUBSCRIPTION_UPGRADE_SUCCESS',",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(alarmAction.type).toBe('ALARM_CREATE_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(userAction.type).toBe('USER_LOGIN_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(subscriptionAction.type).toBe('SUBSCRIPTION_UPGRADE_SUCCESS');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[1]?.currentActivity?.type).toBe('in_meeting');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(analysisResults[0]?.type).toBe('sleep_pattern');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(notifications[0]?.type).toBe('warning');",
      "src/__tests__/providers/enhanced-service-providers.tsx:import type { BaseService, ServiceConfig } from '../../types/service-architecture';",
      "src/__tests__/providers/index.ts:  type MockBattleService,",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('sync_requested');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('user_presence_update');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('ai_analysis_request');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.payload.type).toBe('sleep_pattern');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(notifications[0]?.type).toBe('info');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(alerts[0]?.type).toBe('service_outage');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(syncUpdates[0]?.type).toBe('incremental_sync');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(errors[0]?.type).toBe('INVALID_MESSAGE');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[1]?.type).toBe('user_presence_update');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub1?.type).toBe('alarm_updates');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub2?.type).toBe('user_activity');",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(mobileDevice.type).toBe('mobile');",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(desktopDevice.type).toBe('desktop');",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(_error.type).toBeTruthy();",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(typeof _error.recoverable).toBe('boolean');",
      "src/__tests__/types/websocket-types.unit.test.ts:        expect(_error.type).toBe(type);",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(connectionInfo.deviceInfo?.type).toBeTruthy();",
      "src/__tests__/utils/i18n-helpers.ts:      expect(typeof value).toBe('object');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof value).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof translated).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof formattedNumber).toBe('string');",
      "src/backend/webhook-config.ts:export type WebhookEventType = (typeof WEBHOOK_EVENTS)[number];",
      "src/backend/webhook-endpoint.ts:        typeof request.body === 'string' ? request.body.substring(0, 1000) : '[Buffer]',",
      "src/components/BattleSystem.tsx:    type: 'speed' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'consistency' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'tasks' as BattleType,",
      "src/components/BattleSystem.tsx:      const battleType = BATTLE_TYPES.find(bt => bt.type === selectedBattleType)!;",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type ConditionBasedAdjustment,",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'Early Bird', description: 'Early Bird Badge' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'No Snooze Hero', description: 'Daily Badge' },",
      "src/components/Gamification.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/GamingHub.tsx:import type { User, Battle, RewardSystem } from '../types';",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Early Bird', description: 'Morning Selfie Badge' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Nutrition Expert', description: 'Healthy Eating Badge' },",
      "src/components/PWAStatusDashboard.tsx:  type BackgroundSyncStatus,",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Coffee Enthusiast', description: 'Coffee Badge' },",
      "src/components/SmartFeatures.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Step Master', description: 'Daily Steps Badge' },",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'My Epic Battle');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/GamingHub.test.tsx:import type { User, Battle, RewardSystem } from '../../types';",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Test description');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Recovery Test');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Testing recovery');",
      "src/components/premium/SubscriptionPage.tsx:import type { SubscriptionPlan, BillingInterval } from '../../types/premium';",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4000000000000002'); // Declined card",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PricingTable.test.tsx:import type { SubscriptionPlan, BillingInterval } from '../../../types/premium';",
      "src/components/ui/carousel.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/carousel.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/pagination.tsx:} & Pick<React.ComponentProps<typeof Button>, 'size'> &",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {",
      "src/components/ui/sidebar.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/sidebar.tsx:} & VariantProps<typeof sidebarMenuButtonVariants>) {",
      "src/components/user-testing/BetaTestingProgram.tsx:                      <Badge variant=\"outline\">{item.type}</Badge>",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_CELEBRATION'; payload: HabitCelebration }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'DISMISS_CELEBRATION'; payload: string }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_AB_TEST_GROUP'; payload: ABTestGroup }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_USER_AB_TEST'; payload: UserABTest }",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'DISMISS_CELEBRATION', payload: celebrationId });",
      "src/hooks/__tests__/useAccessibilityPreferences.test.ts:    expect(typeof mockService.subscribe.mock.calls[0][0]).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmRinging).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmSnoozed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmDismissed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:      { type: 'sound', soundName: 'Birds' },",
      "src/hooks/__tests__/useAuth.test.ts:      expect(typeof rateLimitInfo.remaining).toBe('number');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceError).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceLoading).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceSuccess).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceValidationError).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFormSuccess).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFieldChange).toBe('function');",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[0].type).toBe('triggered');",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[1].type).toBe('dismissed');",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[2].type).toBe('snoozed');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof cssVars).toBe('object');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof isAccessible).toBe('boolean');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/useGamingAnnouncements.ts:  const battleName = data.type ? battleTypeNames[data.type] : 'Battle';",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'SUBSCRIPTION_LOAD_SUCCESS',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'SUBSCRIPTION_UPGRADE_SUCCESS',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'SUBSCRIPTION_CANCEL_SUCCESS',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'SUBSCRIPTION_UPGRADE_ERROR',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'SUBSCRIPTION_LOAD_ERROR',",
      "src/services/__tests__/analytics.test.ts:        expect(typeof duration).toBe('number');",
      "src/services/__tests__/performance-monitor.test.ts:      expect(resources[0].type).toBe('image');",
      "src/services/__tests__/theme-accessibility.test.ts:      expect(typeof result.overallScore).toBe('number');",
      "src/services/__tests__/theme-accessibility.test.ts:        expect(typeof value).toBe('boolean');",
      "src/services/__tests__/theme-persistence.test.ts:      expect(typeof exported).toBe('string');",
      "src/services/__tests__/voice.test.ts:      expect(typeof result).toBe('string');",
      "src/services/advanced-conditions-helper.ts:  type ConditionBasedAdjustment,",
      "src/services/app-specific-test-scenarios.ts:      'Chronotype Analysis Complete! Based on 30 days of data, you are identified as a \"Bear\" chronotype. Optimal sleep: 11:00 PM to 7:00 AM. Peak productivity: 10:00 AM to 2:00 PM.',",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).serviceEventBus?.publish === 'function') {",
      "src/services/battle.ts:    type?: BattleType;",
      "src/services/enhanced-battle.ts:  type?: BattleType;",
      "src/services/offline-manager.ts:          type: 'BACKGROUND_ALARM',",
      "src/services/typed-realtime-service.ts:        indexedDB: typeof indexedDB !== 'undefined',",
      "src/stories/Button.stories.ts:} satisfies Meta<typeof Button>;",
      "src/stories/ui/Button.stories.tsx:const meta: Meta<typeof Button> = {",
      "src/tests/alarm-themes-integration.test.ts:        expect(typeof combo.popularity).toBe('number');",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_LOAD_START' }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_LOAD_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_LOAD_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_UPGRADE_START' }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_UPGRADE_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_UPGRADE_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_CANCEL_START' }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_CANCEL_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_CANCEL_ERROR'; payload: string }",
      "src/types/browser-apis.d.ts:// Comprehensive type definitions for Browser APIs used in the application",
      "src/types/browser-apis.d.ts:    BroadcastChannel: typeof BroadcastChannel;",
      "src/types/browser-apis.d.ts:    prototype: BroadcastChannel;",
      "src/types/cloudflare-runtime.d.ts:    get(key: string, type?: 'text' | 'json' | 'arrayBuffer' | 'stream'): Promise<any>;",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:  type: Battle['type'];",
      "src/types/helpers.d.ts: * Utility types for Phase 2B TypeScript implicit any parameter fixes",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/realtime-messages.ts:import type { Alarm, VoiceMood, User, Battle } from './index';",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:  type: BattleChallengeType;",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:    type: BattleChallengeType;",
      "src/types/supabase-realtime.ts:  type: BroadcastMessageType;",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/utils/service-worker-manager.ts:          type: 'TAB_CLOSING',",
      "src/vite-env.d.ts:// Global type extensions for Browser APIs",
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockBatteryInfo {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/storage-helpers.ts:interface MockIndexedDBDatabase {",
      "src/backend/api.ts:interface Battle {",
      "src/backend/api.ts:interface BattleParticipant {",
      "src/backend/api.ts:interface BattleSettings {",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/components/AchievementBadges.tsx:interface AchievementBadgesProps {",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AlarmThemeBrowser.tsx:interface AlarmThemeBrowserProps {",
      "src/components/BattleSystem.tsx:interface BattleSystemProps {",
      "src/components/ConsentBanner.tsx:interface ConsentBannerProps {",
      "src/components/EnhancedBattles.tsx:interface EnhancedBattlesProps {",
      "src/components/ErrorBoundaryTest.tsx:interface ErrorBoundaryTestProps {",
      "src/components/MobileAlarmCard.tsx:interface ActionButtonProps {",
      "src/components/MobileNavigation.tsx:interface NavigationButtonProps {",
      "src/components/NuclearModeBattle.tsx:interface NuclearModeBattleProps {",
      "src/components/PWAInstallPrompt.tsx:interface BeforeInstallPromptEvent extends Event {",
      "src/components/SoundPicker.tsx:interface BuiltInSound {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryProps {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryState {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface FloatingActionButtonProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedButtonProps {",
      "src/components/premium/BillingHistory.tsx:interface BillingHistoryProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureBadgeProps {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestWrapperProps {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestContextType {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestPropsProps<T> {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaProgram {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaTester {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaFeedback {",
      "src/components/user-testing/BugReportModal.tsx:interface BugReportModalProps {",
      "src/contexts/StrugglingsamContext.tsx:interface StrugglingSamContextType extends StrugglingSamState, ABTestContext {",
      "src/hooks/useABTesting.tsx:interface ABTestingState {",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/ai-rewards.ts:interface BehaviorPattern {",
      "src/services/alarm-backup-redundancy.ts:interface BackupMetadata {",
      "src/services/alarm-backup-redundancy.ts:interface BackupData {",
      "src/services/alarm-backup-redundancy.ts:interface BackupLocation {",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-offline-storage.ts:interface BackupMetadata {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/ml-alarm-optimizer.ts:interface UserBehaviorPattern {",
      "src/services/offline-gaming.ts:interface BattleAction {",
      "src/services/offline-manager.ts:interface OfflineDB extends DBSchema {",
      "src/services/pwa-manager.ts:interface BeforeInstallPromptEvent extends Event {",
      "src/services/pwa-service.ts:export interface BackgroundSyncStatus {",
      "src/services/secure-alarm-storage.ts:interface AlarmBackupData {",
      "src/services/theme-accessibility.ts:interface ColorBlindnessSimulation {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/user-testing.ts:export interface ABTest {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface ABTestMetric {",
      "src/services/user-testing.ts:export interface BugReport {",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BroadcastStats {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/app-state.ts:interface BattleResult {",
      "src/types/app-state.ts:interface BattleStats {",
      "src/types/app-state.ts:interface Badge {",
      "src/types/browser-apis.d.ts:interface IDBDatabase {",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface SelectedBuiltInSound {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/email-campaigns.ts:export interface ABTestConfig {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface ABTestResults {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export interface EventBus {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/struggling-sam.ts:export interface ABTestGroup {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface ABTestResults {",
      "src/types/struggling-sam.ts:export interface ABTestMetrics {",
      "src/types/struggling-sam.ts:export interface UserABTest {",
      "src/types/struggling-sam.ts:export interface UserABTestMetrics {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface ABTestContext {",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {"
    ],
    "BackgroundMode": [
      "src/__tests__/mocks/capacitor.mock.ts:export const BackgroundMode = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _BackgroundMode = BackgroundMode;"
    ],
    "Badge": [
      "src/__tests__/mocks/capacitor.mock.ts:export const Badge = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Badge = Badge;",
      "src/components/AchievementBadges.tsx:export const AchievementBadges: React.FC<AchievementBadgesProps> = ({",
      "src/components/AchievementBadges.tsx:export default AchievementBadges;",
      "src/components/premium/FeatureUtils.tsx:export function FeatureBadge({",
      "src/components/ui/badge.tsx:export { Badge, badgeVariants };",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'Early Bird', description: 'Early Bird Badge' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'No Snooze Hero', description: 'Daily Badge' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Early Bird', description: 'Morning Selfie Badge' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Nutrition Expert', description: 'Healthy Eating Badge' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Coffee Enthusiast', description: 'Coffee Badge' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Step Master', description: 'Daily Steps Badge' },",
      "src/components/user-testing/BetaTestingProgram.tsx:                      <Badge variant=\"outline\">{item.type}</Badge>",
      "src/components/AchievementBadges.tsx:interface AchievementBadgesProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureBadgeProps {",
      "src/types/app-state.ts:interface Badge {"
    ],
    "Bug": [
      "src/components/user-testing/BugReportModal.tsx:export function BugReportModal({",
      "src/components/user-testing/BugReportModal.tsx:export default BugReportModal;",
      "src/components/user-testing/index.ts:export { default as BugReportModal } from './BugReportModal';",
      "src/services/user-testing.ts:export interface BugReport {",
      "",
      "src/components/user-testing/BugReportModal.tsx:interface BugReportModalProps {",
      "src/services/user-testing.ts:export interface BugReport {"
    ],
    "Button": [
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveButton.tsx:export const AdaptiveButton = memo<AdaptiveButtonProps>(",
      "src/components/AdaptiveButton.tsx:export default AdaptiveButton;",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingButton = memo<AdaptiveLoadingButtonProps>(",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/ui/button.tsx:export { Button, buttonVariants };",
      "src/hooks/useCapacitor.ts:export function useBackButton() {",
      "src/hooks/useMobileTouch.ts:export function useEnhancedButton(hapticType: 'light' | 'medium' | 'heavy' = 'light') {",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/stories/Button.tsx:export const Button = ({",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/components/ui/carousel.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/carousel.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/pagination.tsx:} & Pick<React.ComponentProps<typeof Button>, 'size'> &",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {",
      "src/components/ui/sidebar.tsx:}: React.ComponentProps<typeof Button>) {",
      "src/components/ui/sidebar.tsx:} & VariantProps<typeof sidebarMenuButtonVariants>) {",
      "src/stories/Button.stories.ts:} satisfies Meta<typeof Button>;",
      "src/stories/ui/Button.stories.tsx:const meta: Meta<typeof Button> = {",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/MobileAlarmCard.tsx:interface ActionButtonProps {",
      "src/components/MobileNavigation.tsx:interface NavigationButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface FloatingActionButtonProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedButtonProps {",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {"
    ],
    "Calendar": [
      "src/components/ui/calendar.tsx:export { Calendar };",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/enhanced-calendar-service.ts:export default EnhancedCalendarService;",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/services/enhanced-calendar-service.ts:      name: `${type.charAt(0).toUpperCase() + type.slice(1)} Calendar`,",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:interface CalendarProvider {",
      "src/types/alarm-scheduling.ts:interface CalendarRule {"
    ],
    "Card": [
      "src/components/MobileAlarmCard.tsx:export default MobileAlarmCard;",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenPricingCard({",
      "src/components/PremiumFeatureCard.tsx:export default PremiumFeatureCard;",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedCard: React.FC<AnimatedCardProps> = ({",
      "src/components/animations/LoadingStates.tsx:export const AlarmCardSkeleton: React.FC<{ count?: number }> = ({ count = 3 }) => {",
      "src/components/ui/hover-card.tsx:export { HoverCard, HoverCardTrigger, HoverCardContent };",
      "src/stories/ui/Card.stories.tsx:export const AlarmCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const FeatureCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const StatsCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const CardVariations: Story = {",
      "src/components/ui/hover-card.tsx:function HoverCard({ ...props }: React.ComponentProps<typeof HoverCardPrimitive.Root>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {",
      "src/stories/ui/Card.stories.tsx:const meta: Meta<typeof Card> = {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeCardProps {",
      "src/components/MobileAlarmCard.tsx:interface MobileAlarmCardProps {",
      "src/components/PremiumDashboard.tsx:interface FeatureCardProps {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeatureCardProps {",
      "src/components/PremiumThemeShowcase.tsx:interface ThemeCardProps {",
      "src/components/ThemeGallery.tsx:interface ThemeCard {",
      "src/components/VoiceSelector.tsx:interface VoiceCardProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedCardProps {"
    ],
    "CardContent": [
      "src/components/ui/hover-card.tsx:export { HoverCard, HoverCardTrigger, HoverCardContent };"
    ],
    "ConnectionStatus": [
      "src/types/realtime-service.ts:export interface ConnectionStatus {",
      "",
      "src/types/realtime-service.ts:export interface ConnectionStatus {"
    ],
    "Console": [
      "src/__tests__/utils/index.ts:export const _testConsole = {",
      "src/__tests__/utils/mock-helpers.ts:export const _mockConsole = () => {"
    ],
    "D1Database": [
      "src/backend/monitoring-integration.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/performance-monitoring.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/types/cloudflare-runtime.d.ts:  interface D1Database {"
    ],
    "DBSchema": [
      "src/services/offline-manager.ts:interface OfflineDB extends DBSchema {"
    ],
    "DurableObjectNamespace": [
      "src/types/cloudflare-runtime.d.ts:  interface DurableObjectNamespace {"
    ],
    "ExtendableEvent": [
      "src/types/browser-apis.d.ts:interface SyncEvent extends ExtendableEvent {"
    ],
    "FeatureAccess": [
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const FeatureAccessTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);",
      "src/__tests__/providers/test-providers.tsx:export const _createMockFeatureAccessContext = (",
      "src/__tests__/providers/test-providers.tsx:export const MockFeatureAccessProvider: React.FC<{",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithFeatureAccess = (",
      "src/contexts/FeatureAccessContext.tsx:export function FeatureAccessProvider({",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccessContext(): FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:export function withFeatureAccess<P extends object>(",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccess(feature: string) {",
      "src/contexts/FeatureAccessContext.tsx:export default FeatureAccessContext;",
      "src/services/custom-test-scenarios.ts:export function filterTestsByFeatureAccess(",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/premium.ts:export interface FeatureAccess {",
      "src/__tests__/providers/index.ts:  type MockFeatureAccessContextValue,",
      "src/components/PremiumDashboard.tsx:import type { PremiumFeatureAccess } from '../types';",
      "src/services/feature-gate-service.ts:import type { FeatureAccess, FeatureGate, PremiumFeature } from '../types/premium';",
      "src/types/app-state.ts:  | { type: 'FEATURE_ACCESS_UPDATE'; payload: FeatureAccess }",
      "src/utils/premium-testing.ts:import type { Subscription, PremiumFeatureAccess, PremiumUsage } from '../types';",
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessProviderProps {",
      "src/services/feature-gate-service.ts:interface FeatureAccessResult {",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/premium.ts:export interface FeatureAccess {"
    ],
    "HttpClient": [
      "src/types/api.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface StripeClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ConvertKitClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface GitHubClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpClientTestUtils {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/http-client.ts:export interface HttpClientPlugin {",
      "src/utils/http-client.ts:export class EnhancedHttpClient implements HttpClient {",
      "src/utils/http-client.ts:export function createHttpClient(_config?: HttpClientConfig): HttpClient {",
      "src/utils/http-client.ts:export const httpClient = createHttpClient({",
      "",
      "src/types/api.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface StripeClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ConvertKitClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface GitHubClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpClientTestUtils {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/http-client.ts:export interface HttpClientPlugin {"
    ],
    "HttpError": [
      "src/types/http-client.ts:export interface HttpError extends Error {",
      "",
      "src/types/http-client.ts:export interface HttpError extends Error {"
    ],
    "KVNamespace": [
      "src/backend/monitoring-integration.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/performance-monitoring.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/types/cloudflare-runtime.d.ts:  interface KVNamespace {"
    ],
    "KeepAwake": [
      "src/__tests__/mocks/capacitor.mock.ts:export const KeepAwake = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _KeepAwake = KeepAwake;"
    ],
    "Mail": [
      "src/types/api-responses.ts:export interface MailchimpMergeFields {",
      "",
      "src/types/api-responses.ts:export interface MailchimpMergeFields {"
    ],
    "Network": [
      "src/__tests__/mocks/capacitor.mock.ts:export const Network = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Network = Network;",
      "src/hooks/useCapacitor.ts:export function useNetworkStatus() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useNetworkOptimizations() {",
      "src/hooks/useMobilePerformance.ts:export const useNetworkAwareLoading = () => {",
      "src/services/enhanced-performance-monitor.ts:export interface NetworkMetric {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface NetworkMetrics {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/utils/network-optimization.tsx:export interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:export const networkOptimizer = new NetworkOptimizer();",
      "src/utils/network-optimization.tsx:export function useNetworkStats() {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {",
      "src/utils/network-optimization.tsx:export const NetworkStatus: React.FC<NetworkStatusProps> = ({",
      "",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockNetworkStatus {",
      "src/services/enhanced-performance-monitor.ts:export interface NetworkMetric {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface NetworkMetrics {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/utils/network-optimization.tsx:export interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:  interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {"
    ],
    "NotificationEvent": [
      "src/hooks/useCapacitor.ts:export function useNotificationEvents() {"
    ],
    "NotificationPreferences": [
      "src/types/push-notifications.ts:export interface NotificationPreferences {",
      "src/types/realtime/index.ts:export const DEFAULT_NOTIFICATION_PREFERENCES: NotificationPreferences = {",
      "",
      "src/types/push-notifications.ts:export interface NotificationPreferences {"
    ],
    "PaginatedResponse": [
      "src/types/api.ts:export interface PaginatedResponse<T> {",
      "src/types/index.ts:export const isPaginatedResponse = <T>(",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/index.ts:    typeof (value as PaginatedResponse<T>).meta === 'object'",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/api.ts:export interface PaginatedResponse<T> {"
    ],
    "PaginationParams": [
      "src/types/api.ts:export interface PaginationParams {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/index.ts:export const DEFAULT_PAGINATION: PaginationParams = {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "",
      "src/types/api.ts:export interface PaginationParams {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {"
    ],
    "PremiumFeature": [
      "src/__tests__/factories/premium-factories.ts:export const _createTestPremiumFeature = (",
      "src/__tests__/factories/premium-factories.ts:export const createTestPremiumFeature = _createTestPremiumFeature;",
      "src/components/PremiumFeatureCard.tsx:export default PremiumFeatureCard;",
      "src/components/PremiumFeatureTest.tsx:export default PremiumFeatureTest;",
      "src/components/premium/PremiumFeaturePreview.tsx:export default PremiumFeaturePreview;",
      "src/components/premium/enhanced-index.ts:export { default as PremiumFeaturePreview } from './PremiumFeaturePreview';",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/premium.ts:export interface PremiumFeature {",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/components/PremiumDashboard.tsx:import type { PremiumFeatureAccess } from '../types';",
      "src/services/feature-gate-service.ts:import type { FeatureAccess, FeatureGate, PremiumFeature } from '../types/premium';",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/utils/premium-testing.ts:import type { Subscription, PremiumFeatureAccess, PremiumUsage } from '../types';",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeature {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeatureCardProps {",
      "src/components/PremiumFeatureTest.tsx:interface PremiumFeatureTestProps {",
      "src/components/premium/PremiumFeaturePreview.tsx:interface PremiumFeaturePreviewProps {",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/premium.ts:export interface PremiumFeature {"
    ],
    "Progress": [
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementProgress = (): AchievementProgress => ({",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementProgress = _createTestAchievementProgress;",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedProgress: React.FC<AnimatedProgressProps> = ({",
      "src/components/premium/FeatureUtils.tsx:export function UsageProgress({",
      "src/components/ui/progress.tsx:export { Progress };",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/struggling-sam.ts:export interface AchievementProgress {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export const progressiveLoader = new ProgressiveLoadManager();",
      "src/utils/progressive-loading.tsx:export function useProgressiveLoad<T>(",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export const ProgressiveWrapper: React.FC<ProgressiveWrapperProps> = ({",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps",
      "src/utils/progressive-loading.tsx:export const ProgressiveImage: React.FC<ProgressiveImageProps> = ({",
      "src/components/ui/progress.tsx:}: React.ComponentProps<typeof ProgressPrimitive.Root>) {",
      "src/hooks/useAudioLazyLoading.ts:import type { AudioLoadProgress, AudioCacheEntry } from '../services/audio-manager';",
      "src/services/lazy-audio-loader.ts:import type { AudioLoadProgress, AudioCacheEntry } from './audio-manager';",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedProgressProps {",
      "src/components/premium/FeatureUtils.tsx:interface UsageProgressProps {",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/struggling-sam.ts:export interface AchievementProgress {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps"
    ],
    "RTLContainer": [
      "src/components/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLLayout/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLLayout/index.ts:export { RTLContainer } from './RTLContainer';",
      "",
      "src/components/RTLLayout/RTLContainer.tsx:interface RTLContainerProps {"
    ],
    "RTLFlex": [
      "src/components/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLLayout/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLLayout/index.ts:export { RTLFlex } from './RTLFlex';",
      "src/hooks/useRTL.ts:export const useRTLFlex = () => {",
      "",
      "src/components/RTLLayout/RTLFlex.tsx:interface RTLFlexProps {"
    ],
    "RTLForm": [
      "src/components/RTLForm.tsx:export default RTLForm;",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLForm: React.FC<RTLFormProps> = ({",
      "src/components/RTLLayout/RTLForm.tsx:export const useRTLFormContext = () => {",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLFormField: React.FC<RTLFormFieldProps> = ({",
      "src/components/RTLLayout/index.ts:export { RTLForm, RTLFormField, useRTLFormContext } from './RTLForm';",
      "src/hooks/useRTL.ts:export const useRTLForm = () => {",
      "",
      "src/components/RTLLayout/RTLForm.tsx:interface RTLFormProps {",
      "src/components/RTLLayout/RTLForm.tsx:interface RTLFormFieldProps {"
    ],
    "RTLGrid": [
      "src/components/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/index.ts:export { RTLGrid } from './RTLGrid';",
      "",
      "src/components/RTLLayout/RTLGrid.tsx:interface RTLGridProps {"
    ],
    "RTLText": [
      "src/components/RTLLayout/RTLText.tsx:export default RTLText;",
      "src/components/RTLLayout/index.ts:export { RTLText } from './RTLText';",
      "src/components/RTLText.tsx:export default RTLText;",
      "src/hooks/useRTL.ts:export const useRTLText = () => {",
      "",
      "src/components/RTLLayout/RTLText.tsx:interface RTLTextProps {"
    ],
    "React": [
      "src/__tests__/providers/context-providers.tsx:export const FeatureAccessTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const LanguageTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const AlarmTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const ThemeTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const ContextTestProvider: React.FC<{",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const EnhancedServiceProvider: React.FC<ServiceProviderProps> = ({",
      "src/__tests__/providers/integration-provider.tsx:export const IntegrationTestProvider: React.FC<{",
      "src/__tests__/providers/service-providers.tsx:export const ServiceTestProviders: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockFeatureAccessProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockLanguageProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAuthProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockThemeProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAlarmProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockSubscriptionProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockServiceProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const TestProviders: React.FC<{",
      "src/__tests__/utils/hook-testing-utils.tsx:export const AllTheProviders: React.FC<AllTheProvidersProps> = ({",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsGuest = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderMobile = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderTablet = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderDesktop = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderOffline = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderRTL = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/analytics/PersonaAnalytics.tsx:export const PersonaAnalyticsProvider: React.FC<{",
      "src/components/AchievementBadges.tsx:export const AchievementBadges: React.FC<AchievementBadgesProps> = ({",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmList: React.FC<AdaptiveAlarmListProps> = ({",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmListWithErrorBoundary: React.FC<",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeSelector.tsx:export const AlarmThemeSelector: React.FC<AlarmThemeSelectorProps> = ({",
      "src/components/AnalyticsProvider.tsx:export const AnalyticsProvider: React.FC<AnalyticsProviderProps> = ({ children }) => {",
      "src/components/CommunityChallenge.tsx:export const CommunityChallenge: React.FC<CommunityChallengeProps> = ({",
      "src/components/CompleteThemeSystemDemo.tsx:export const CustomThemeCreator: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const SmartThemesDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const AlarmFormIntegration: React.FC<{",
      "src/components/CompleteThemeSystemDemo.tsx:export const AudioSetupDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const CompleteThemeSystemDemo: React.FC = () => {",
      "src/components/CustomSoundThemeCreator.tsx:export const CustomSoundThemeCreator: React.FC<CustomSoundThemeCreatorProps> = ({",
      "src/components/CustomThemeManager.tsx:export const CustomThemeManager: React.FC<CustomThemeManagerProps> = ({",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNudgeModal: React.FC<EmotionalNudgeModalProps> = ({",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNotificationSettings: React.FC<{",
      "src/components/HabitCelebration.tsx:export const HabitCelebration: React.FC<HabitCelebrationProps> = ({",
      "src/components/MobileAccessibilityProvider.tsx:export const MobileAccessibilityProvider: React.FC<",
      "src/components/MobileAlarmCard.tsx:export const MobileAlarmList: React.FC = () => {",
      "src/components/NuclearModeBattle.tsx:export const NuclearModeBattle: React.FC<NuclearModeBattleProps> = ({",
      "src/components/NuclearModeChallenge.tsx:export const NuclearModeChallenge: React.FC<NuclearModeChallengeProps> = ({",
      "src/components/NuclearModeResults.tsx:export const NuclearModeResults: React.FC<NuclearModeResultsProps> = ({",
      "src/components/NuclearModeSelector.tsx:export const NuclearModeSelector: React.FC<NuclearModeSelectorProps> = ({",
      "src/components/PerformanceProfilerWrapper.tsx:export const PerformanceProfilerWrapper: React.FC<PerformanceProfilerWrapperProps> = ({",
      "src/components/PersonaAnalyticsDashboard.tsx:export const PersonaAnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({",
      "src/components/PremiumDashboard.tsx:export const PremiumDashboard: React.FC<PremiumDashboardProps> = ({",
      "src/components/PremiumThemeSettings.tsx:export const PremiumThemeSettings: React.FC<PremiumThemeSettingsProps> = ({",
      "src/components/PremiumUsageTracker.tsx:export const PremiumUsageTracker: React.FC<UsageTrackerProps> = ({",
      "src/components/PushNotificationSettings.tsx:export const PushNotificationSettingsComponent: React.FC<",
      "src/components/PushNotificationTester.tsx:export const PushNotificationTester: React.FC = () => {",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLForm: React.FC<RTLFormProps> = ({",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLFormField: React.FC<RTLFormFieldProps> = ({",
      "src/components/ServiceWorkerStatus.tsx:export const ServiceWorkerStatus: React.FC = () => {",
      "src/components/SmartUpgradePrompt.tsx:export const SmartUpgradePrompt: React.FC<SmartUpgradePromptProps> = ({",
      "src/components/SocialProof.tsx:export const SocialProof: React.FC<SocialProofProps> = ({",
      "src/components/SoundPicker.tsx:export const SoundPicker: React.FC<SoundPickerProps> = ({",
      "src/components/SoundPreviewSystem.tsx:export const SoundPreviewSystem: React.FC<SoundPreviewSystemProps> = ({",
      "src/components/SoundUploader.tsx:export const SoundUploader: React.FC<SoundUploaderProps> = ({",
      "src/components/StreakCounter.tsx:export const StreakCounter: React.FC<StreakCounterProps> = ({",
      "src/components/StrugglingSamWrapper.tsx:export const StrugglingSamWrapper: React.FC<StrugglingSamWrapperProps> = ({",
      "src/components/TabProtectionSettings.tsx:export const TabProtectionSettings: React.FC<TabProtectionSettingsProps> = ({",
      "src/components/TabProtectionWarning.tsx:export const TabProtectionWarning: React.FC<TabProtectionWarningProps> = ({",
      "src/components/ThemeSelector.tsx:export const ThemeSelector: React.FC = () => {",
      "src/components/TranslationDashboard.tsx:export const TranslationDashboard: React.FC = () => {",
      "src/components/VirtualScroll.tsx:export const VirtualAlarmHistory: React.FC<{",
      "src/components/VirtualScroll.tsx:export const VirtualSleepHistory: React.FC<{",
      "src/components/VisualAlarmDisplay.tsx:export const VisualAlarmDisplay: React.FC<VisualAlarmDisplayProps> = ({",
      "src/components/VoicePersonalitySelector.tsx:export const VoicePersonalitySelector: React.FC<VoicePersonalitySelectorProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const PulseLoader: React.FC<{ size?: string; className?: string }> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const SkeletonLoader: React.FC<{",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedCard: React.FC<AnimatedCardProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const ScrollReveal: React.FC<ScrollRevealProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedToggle: React.FC<AnimatedToggleProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedNotification: React.FC<NotificationProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerContainer: React.FC<StaggerContainerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerItem: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const AlarmCardSkeleton: React.FC<{ count?: number }> = ({ count = 3 }) => {",
      "src/components/animations/LoadingStates.tsx:export const AlarmRingingLoader: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const VoiceListeningIndicator: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const VoiceProcessingLoader: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const DashboardSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const SettingsFormSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const AnalyticsChartSkeleton: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const PageLoader: React.FC<{",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedInput: React.FC<AnimatedInputProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedSelect: React.FC<AnimatedSelectProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedCheckbox: React.FC<AnimatedCheckboxProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedProgress: React.FC<AnimatedProgressProps> = ({",
      "src/components/user-testing/ABTestWrapper.tsx:export const ABTestContext = React.createContext<ABTestContextType>({",
      "src/contexts/LanguageContext.tsx:export const LanguageProvider: React.FC<LanguageProviderProps> = ({",
      "src/contexts/StrugglingsamContext.tsx:export const StrugglingSamProvider: React.FC<{",
      "src/hooks/useCulturalTheme.tsx:export const CulturalThemeProvider: React.FC<CulturalThemeProviderProps> = ({",
      "src/hooks/useDeviceCapabilities.tsx:export function DeviceCapabilityProvider({ children }: { children: ReactNode }) {",
      "src/hooks/useRealtime.tsx:export const RealtimeProvider: React.FC<RealtimeProviderProps> = ({",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/utils/fallback-strategies.tsx:export class FallbackErrorBoundary extends React.Component<",
      "src/utils/frame-rate-manager.tsx:export const FrameRateMonitor: React.FC<FrameRateMonitorProps> = ({",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {",
      "src/utils/image-optimization.tsx:export const OptimizedImage: React.FC<OptimizedImageProps> = ({",
      "src/utils/lazy-loading.tsx:export const useMemoryCleanup = (cleanup: () => void, deps: React.DependencyList) => {",
      "src/utils/network-optimization.tsx:export const NetworkStatus: React.FC<NetworkStatusProps> = ({",
      "src/utils/performance-alerts.tsx:export const PerformanceAlertDisplay: React.FC<PerformanceAlertDisplayProps> = ({",
      "src/utils/progressive-loading.tsx:export const ProgressiveWrapper: React.FC<ProgressiveWrapperProps> = ({",
      "src/utils/progressive-loading.tsx:export const Skeleton: React.FC<SkeletonProps> = ({",
      "src/utils/progressive-loading.tsx:export const ProgressiveImage: React.FC<ProgressiveImageProps> = ({",
      "src/utils/rtl-testing.tsx:export const renderWithRTL = (ui: ReactElement, options: RTLRenderOptions = {}) => {",
      "src/components/AnalyticsProvider.tsx:import type { ReactNode } from 'react';",
      "src/components/ErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/RootErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/SpecializedErrorBoundaries.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/types/state-updaters.ts: * These types help ensure proper typing for React useState setters",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {"
    ],
    "RealtimeServiceConfig": [
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {",
      "src/types/realtime/index.ts:export const DEFAULT_REALTIME_CONFIG: RealtimeServiceConfig = {",
      "",
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {"
    ],
    "RedesignedFeedbackModal": [
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export function RedesignedFeedbackModal({",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export default RedesignedFeedbackModal;",
      "",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:interface RedesignedFeedbackModalProps {"
    ],
    "Send": [
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {",
      "",
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {"
    ],
    "SpeechRecognition": [
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionEvent extends Event {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionErrorEvent extends Event {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionResult {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionAlternative {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionResultList {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognition extends EventTarget {"
    ],
    "SubscriptionTier": [
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/domain.ts:export type SubscriptionTier = ",
      "src/types/premium.ts:export type SubscriptionTier =",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionTier(tier: string): boolean;",
      "src/types/user.ts:export type { SubscriptionTier, Subscription, User };",
      "src/types/user.ts:export function hasSubscriptionTier(",
      "src/services/premium.ts:import type { SubscriptionTier } from '../types/premium';",
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/domain.ts:export type SubscriptionTier = ",
      "src/types/premium.ts:export type SubscriptionTier =",
      "src/types/user.ts:import type { SubscriptionTier, Subscription } from './premium';",
      "src/types/user.ts:export type { SubscriptionTier, Subscription, User };"
    ],
    "Textarea": [
      "src/components/ui/textarea.tsx:export { Textarea };"
    ],
    "Theme": [
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestTheme = (options: CreateThemeOptions = {}): ThemeConfig => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleTheme = (",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/context-providers.tsx:  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;",
      "src/__tests__/providers/context-providers.tsx:  exportTheme: jest.fn(),",
      "src/__tests__/providers/context-providers.tsx:export const ThemeTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useThemeTest = () => useContext(ThemeTestContext);",
      "src/__tests__/providers/test-providers.tsx:export const _createMockThemeContext = (",
      "src/__tests__/providers/test-providers.tsx:export const MockThemeProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:    exportTheme: jest.fn(),",
      "src/__tests__/theme-integration.test.tsx:        <button data-testid=\"export-btn\">Export Themes</button>",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidTheme = (theme: any): theme is TestTheme => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export { MockThemeContext, MockLanguageContext, MockAuthContext };",
      "src/__tests__/utils/index.ts:export interface TestTheme {",
      "src/__tests__/utils/render-helpers.ts:    exportThemes: jest.fn(() => Promise.resolve(JSON.stringify({ themes }))),",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithEnhancedTheme = (",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeBrowser.tsx:export default AlarmThemeBrowser;",
      "src/components/AlarmThemeSelector.tsx:export const AlarmThemeSelector: React.FC<AlarmThemeSelectorProps> = ({",
      "src/components/AlarmThemeSelector.tsx:export default AlarmThemeSelector;",
      "src/components/CompleteThemeSystemDemo.tsx:export const CustomThemeCreator: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const SmartThemesDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const CompleteThemeSystemDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export default CompleteThemeSystemDemo;",
      "src/components/CustomSoundThemeCreator.tsx:export const CustomSoundThemeCreator: React.FC<CustomSoundThemeCreatorProps> = ({",
      "src/components/CustomSoundThemeCreator.tsx:export default CustomSoundThemeCreator;",
      "src/components/CustomThemeManager.tsx:export const CustomThemeManager: React.FC<CustomThemeManagerProps> = ({",
      "src/components/CustomThemeManager.tsx:export default CustomThemeManager;",
      "src/components/PremiumThemeSettings.tsx:export const PremiumThemeSettings: React.FC<PremiumThemeSettingsProps> = ({",
      "src/components/PremiumThemeSettings.tsx:export default PremiumThemeSettings;",
      "src/components/PremiumThemeShowcase.tsx:export default PremiumThemeShowcase;",
      "src/components/SoundThemeDemo.tsx:export default SoundThemeDemo;",
      "src/components/ThemeCreator.tsx:export default ThemeCreator;",
      "src/components/ThemeCustomizationStudio.tsx:  const exportTheme = useCallback(async () => {",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateSCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = JSON.stringify(customTheme, null, 2);",
      "src/components/ThemeCustomizationStudio.tsx:              onClick={exportTheme}",
      "src/components/ThemeCustomizationStudio.tsx:export default ThemeCustomizationStudio;",
      "src/components/ThemeDemo.tsx:export default ThemeDemo;",
      "src/components/ThemeGallery.tsx:export default ThemeGallery;",
      "src/components/ThemeManager.tsx:  const exportThemes = () => {",
      "src/components/ThemeManager.tsx:              onClick={exportThemes}",
      "src/components/ThemeManager.tsx:              onClick={exportThemes}",
      "src/components/ThemeManager.tsx:export default ThemeManager;",
      "src/components/ThemeSelector.tsx:export const ThemeSelector: React.FC = () => {",
      "src/components/ThemeSelector.tsx:export default ThemeSelector;",
      "src/components/ThemeStudio.tsx:export default ThemeStudio;",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/config/themes.ts:export const REGIONAL_THEMES: Record<string, CulturalTheme> = {",
      "src/config/themes.ts:export const getRegionalTheme = (language: SupportedLanguage): CulturalTheme => {",
      "src/config/themes.ts:export const getAllThemes = (): CulturalTheme[] => {",
      "src/config/themes.ts:export const applyTheme = (theme: CulturalTheme): void => {",
      "src/config/themes.ts:export const getThemeCSS = (theme: CulturalTheme): string => {",
      "src/constants/initialState.ts:export const DEFAULT_THEME_CONFIG: ThemeConfig = {",
      "src/constants/initialState.ts:export const DEFAULT_AVAILABLE_THEMES: ThemePreset[] = [",
      "src/hooks/__tests__/useTheme.test.tsx:      exportThemes: jest.fn().mockResolvedValue('{}'),",
      "src/hooks/__tests__/useTheme.test.tsx:        exportData = await result.current.exportThemes();",
      "src/hooks/useCulturalTheme.tsx:export const useCulturalTheme = (",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:export const CulturalThemeProvider: React.FC<CulturalThemeProviderProps> = ({",
      "src/hooks/useCulturalTheme.tsx:export const useThemeContext = (): CulturalThemeContextValue => {",
      "src/hooks/useCulturalTheme.tsx:export const withCulturalTheme = <P extends object>(",
      "src/hooks/useCulturalTheme.tsx:export const useThemeStyles = () => {",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:  exportThemes: () => Promise<string>;",
      "src/hooks/useTheme.tsx:export function useTheme(): ThemeContextValue {",
      "src/hooks/useTheme.tsx:export function ThemeProvider({",
      "src/hooks/useTheme.tsx:  const exportThemes = useCallback(async (): Promise<string> => {",
      "src/hooks/useTheme.tsx:      return await persistenceServiceRef.current.exportThemes();",
      "src/hooks/useTheme.tsx:    exportThemes,",
      "src/hooks/useTheme.tsx:export default useTheme;",
      "src/services/__tests__/theme-persistence.test.ts:      const exported = await persistenceService.exportThemes();",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface ThemeContext {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/contextual-themes.ts:export interface ThemeCondition {",
      "src/services/contextual-themes.ts:export const contextualThemes = ContextualThemesService.getInstance();",
      "src/services/contextual-themes.ts:export default ContextualThemesService;",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/premium-theme-animations.ts:export default PremiumThemeAnimationService;",
      "src/services/sound-effects.ts:export type SoundTheme =",
      "src/services/theme-accessibility.ts:export default ThemeAccessibilityService;",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type ThemeMood =",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-combinations.ts:export interface ThemeCollection {",
      "src/services/theme-combinations.ts:  exportUserThemes(): string {",
      "src/services/theme-combinations.ts:export const themeCombinations = ThemeCombinationsService.getInstance();",
      "src/services/theme-combinations.ts:export default ThemeCombinationsService;",
      "src/services/theme-performance.ts:export default ThemePerformanceService;",
      "src/services/theme-persistence.ts:  async exportThemes(): Promise<string> {",
      "src/services/theme-persistence.ts:export default ThemePersistenceService;",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:export const visualAlarmThemes = VisualAlarmThemesService.getInstance();",
      "src/services/visual-alarm-themes.ts:export default VisualAlarmThemesService;",
      "src/tests/alarm-themes-integration.test.ts:      const exportData = themeCombinations.exportUserThemes();",
      "src/themes/premium-themes.ts:export const oceanBreezeTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const sunsetGlowTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const forestDreamTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const midnightCosmosTheme: ThemeConfig = {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundTheme {",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeUISounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAmbientSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeRequirements {",
      "src/types/custom-sound-themes.ts:export type ThemePermission =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePreview {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePermissions {",
      "src/types/custom-sound-themes.ts:export type ThemePermissionLevel =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCollection {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeExport {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeImport {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeListResponse {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeEvent =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface Theme {",
      "src/types/domain.ts:export interface ThemeColors {",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/utils/lazy-loading.tsx:export const ThemeCreator = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const CustomThemeManager = lazyWithPreload(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.premiumThemes).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return proper Theme type for gameTheme', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof gameTheme).toBe('string');",
      "src/__tests__/providers/index.ts:  type MockThemeContextValue,",
      "src/components/CustomThemeManager.tsx:type FilterCategory = 'all' | CustomSoundThemeCategory;",
      "src/components/Gamification.tsx:      { type: 'theme', value: 'champion', description: 'Champion Theme' },",
      "src/components/PremiumThemeSettings.tsx:import type { ThemeConfig } from '../types';",
      "src/components/SettingsPage.tsx:import type { AppState, VoiceMood, Theme } from '../types';",
      "src/components/SoundSettings.tsx:import type { SoundEffectId, SoundTheme } from '../services/sound-effects';",
      "src/components/ThemeGallery.tsx:import type { CustomThemeConfig, ThemePreset, Theme } from '../types';",
      "src/components/ThemeManager.tsx:import type { Theme, CustomThemeConfig } from '../types';",
      "src/components/ThemeStudio.tsx:import type { CustomThemeConfig } from '../types';",
      "src/constants/initialState.ts:    typeof obj.currentTheme === 'string' &&",
      "src/hooks/__tests__/useTheme.test.tsx:import type { Theme, PersonalizationSettings } from '../../types';",
      "src/hooks/useSoundEffects.tsx:  type SoundTheme,",
      "src/services/CloudSyncService.ts:import type { PersonalizationSettings, Theme, ThemeConfig } from '../types';",
      "src/services/__tests__/theme-persistence.test.ts:import type { Theme } from '../../types';",
      "src/services/sound-effects.ts:export type SoundTheme =",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type ThemeMood =",
      "src/services/theme-performance.ts:    options: Parameters<typeof this.applyTheme>[2] = {}",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/types/custom-sound-themes.ts:import type { SoundTheme, SoundEffectId } from '../services/sound-effects';",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:export type ThemePermission =",
      "src/types/custom-sound-themes.ts:export type ThemePermissionLevel =",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeEvent =",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface ThemeContextValue {",
      "src/__tests__/utils/hook-testing-utils.tsx:interface MockThemeContextValue {",
      "src/__tests__/utils/index.ts:export interface TestTheme {",
      "src/components/AlarmThemeBrowser.tsx:interface AlarmThemeBrowserProps {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeCardProps {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeListItemProps {",
      "src/components/AlarmThemeSelector.tsx:interface ThemeCombination {",
      "src/components/AlarmThemeSelector.tsx:interface AlarmThemeSelectorProps {",
      "src/components/CustomSoundThemeCreator.tsx:interface CustomSoundThemeCreatorProps {",
      "src/components/CustomThemeManager.tsx:interface CustomThemeManagerProps {",
      "src/components/PremiumThemeSettings.tsx:interface PremiumThemeSettingsProps {",
      "src/components/PremiumThemeSettings.tsx:interface ThemeState {",
      "src/components/PremiumThemeShowcase.tsx:interface ThemeCardProps {",
      "src/components/SoundPreviewSystem.tsx:interface ThemeTestResults {",
      "src/components/SoundThemeDemo.tsx:interface ThemeCategory {",
      "src/components/ThemeCreator.tsx:interface ThemeCreatorProps {",
      "src/components/ThemeDemo.tsx:interface ThemeDemoProps {",
      "src/components/ThemeGallery.tsx:interface ThemeGalleryProps {",
      "src/components/ThemeGallery.tsx:interface ThemeCard {",
      "src/components/ThemeManager.tsx:interface ThemeManagerProps {",
      "src/components/ThemeManager.tsx:interface QuickTheme {",
      "src/components/ThemeStudio.tsx:interface ThemeStudioProps {",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeOptions {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeReturn {",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:interface CulturalThemeProviderProps {",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:interface ThemeProviderProps {",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface ThemeContext {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/contextual-themes.ts:export interface ThemeCondition {",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-combinations.ts:export interface ThemeCollection {",
      "src/services/theme-performance.ts:interface ThemeTransition {",
      "src/services/theme-persistence.ts:interface ThemeStorageData {",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundTheme {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeUISounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAmbientSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePreview {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePermissions {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCollection {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeExport {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeImport {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeListResponse {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface Theme {",
      "src/types/domain.ts:export interface ThemeColors {"
    ],
    "ThemePreset": [
      "src/constants/initialState.ts:export const DEFAULT_AVAILABLE_THEMES: ThemePreset[] = [",
      "src/components/ThemeGallery.tsx:import type { CustomThemeConfig, ThemePreset, Theme } from '../types';"
    ],
    "TimeoutHandle": [
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;",
      "src/types/timers.ts:export function safeClearTimeout(handle: MaybeTimeoutHandle): void {",
      "src/types/timers.ts:export function safeSetTimeout(callback: () => void, delay: number): TimeoutHandle {",
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;"
    ],
    "UserTestingService": [
      "src/components/user-testing/index.ts:export { default as UserTestingService } from '../../services/user-testing';",
      "src/services/user-testing.ts:export class UserTestingService {",
      "src/services/user-testing.ts:export default UserTestingService;"
    ],
    "VariantProps": [
      "src/components/ui/toggle-group.tsx:import { type VariantProps } from 'class-variance-authority';"
    ],
    "WebSocketConfig": [
      "src/types/realtime/index.ts:export const DEFAULT_WEBSOCKET_CONFIG: WebSocketConfig = {",
      "src/types/websocket.ts:export interface WebSocketConfig {",
      "",
      "src/types/websocket.ts:export interface WebSocketConfig {"
    ],
    "WebSocketMessage": [
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/realtime-messages.ts:import type { WebSocketMessage } from './websocket';",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/websocket.ts:  type: WebSocketMessageType;",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {"
    ],
    "WebSocketMessageType": [
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/websocket.ts:  type: WebSocketMessageType;",
      "src/types/websocket.ts:export type WebSocketMessageType ="
    ],
    "WebhookPayload": [
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {"
    ],
    "X": [
      "src/components/Gamification.tsx:      { type: 'experience', value: 250, description: '250 XP' },",
      "src/components/Gamification.tsx:      { type: 'experience', value: 1000, description: '1000 XP' },",
      "src/components/Gamification.tsx:      { type: 'experience', value: 500, description: '500 XP' },",
      "src/components/Gamification.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/Gamification.tsx:    rewards: [{ type: 'experience', value: 100, description: '100 XP' }],",
      "src/components/Gamification.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/Gamification.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 50, description: '50 XP' },",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 100, description: '100 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 100, description: '100 XP' },"
    ],
    "_config": [
      "src/hooks/useAnimations.ts:export const useHoverAnimation = (_config: {",
      "src/types/alarm-scheduling.ts:export const validateSchedulingConfig = (_config: SchedulingConfig): boolean => {",
      "src/utils/frame-rate-manager.tsx:export function useOptimizedAnimation(animationId: string, _config: AnimationConfig) {",
      "src/utils/http-client.ts:export function createHttpClient(_config?: HttpClientConfig): HttpClient {",
      "src/utils/http-client.ts:export const createSupabaseClient = (_config: { url: string; key: string }) =>",
      "src/utils/http-client.ts:export const createStripeClient = (_config: { secretKey: string }) =>",
      "src/utils/http-client.ts:export const createConvertKitClient = (_config: { apiKey: string }) =>",
      "src/components/ui/chart.tsx:type ChartContextProps = { _config: ChartConfig };",
      "src/services/base/BaseService.ts:    if (typeof this._config.enabled !== 'boolean') {",
      "src/services/smart-notification-service.ts:        priority as keyof typeof this._config.vibrationPatterns",
      "src/services/smart-notification-service.ts:      this.config.soundProfiles[timeOfDay as keyof typeof this._config.soundProfiles] ||",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'Layout Stability Issue' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'High Memory Usage' } },",
      "src/utils/performance-alerts.tsx:          { type: 'optimization', _config: { type: 'memory_cleanup' } },",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },"
    ],
    "_error": [
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting theme:', _error);",
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting themes:', _error);",
      "src/components/ThemeCustomizationStudio.tsx:      console._error('Failed to export theme:', _error);",
      "src/services/__tests__/error-handler.test.ts:    test('exports _error data for debugging', () => {",
      "src/services/privacy-compliance.ts:      console.error('Failed to create data export:', _error);",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/utils.ts:export const failure = <E = Error>(_error: E): Result<never, E> => ({",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'auth_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'api_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'network_error', _error });",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'card_error';",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'invalid_request_error';",
      "src/__tests__/payments/payment-testing-utilities.ts:        type: 'card_error',",
      "src/__tests__/services/realtime-service.integration.test.ts:          this.emit('_error', { type: 'INVALID_MESSAGE', _error });",
      "src/__tests__/services/realtime-service.integration.test.ts:      this.emit('_error', { type: 'SEND_FAILED', _error });",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(typeof _error.recoverable).toBe('boolean');",
      "src/__tests__/types/websocket-types.unit.test.ts:          message: `Test ${type} _error`,",
      "src/__tests__/utils/accessibility-helpers.ts:  type: '_error' | 'warning';",
      "src/__tests__/utils/accessibility-helpers.ts:        type: '_error',",
      "src/__tests__/utils/accessibility-helpers.ts:          type: '_error',",
      "src/__tests__/utils/async-helpers.ts:    Promise.reject(typeof error === 'string' ? new Error(_error) : error),",
      "src/components/RealtimeDemo.tsx:                  Type: {_error.type} | Severity: {_error.severity}",
      "src/components/animations/AnimationLibrary.tsx:  type: 'success' | '_error' | 'warning' | 'info';",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice', _error: string) => {",
      "src/hooks/useAuthAnnouncements.ts:        `${type} authentication failed: ${_error}. Please try again or use alternative method.`,",
      "src/hooks/useCapacitor.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useFormAnnouncements.ts:        type: '_error',",
      "src/hooks/useMobileTouch.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useProfileAnnouncements.ts:        type: '_error',",
      "src/hooks/useScreenReaderAnnouncements.ts:          type: '_error',",
      "src/hooks/useSettingsAnnouncements.ts:        type: '_error',",
      "src/services/alarm-executor.ts:        console._error('Error applying optimization:', optimization.type, _error);",
      "src/services/alarm-executor.ts:        console._error(`Error evaluating conditional rule ${rule.type}:`, _error);",
      "src/services/capacitor-enhanced.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/error-handler.ts:        type: e._error.constructor.name,",
      "src/services/mobile-touch.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/performance-analytics.ts:      console.warn(`Failed to observe ${type} performance entries:`, _error);",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:          type: '_error',",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:    const isValid = issues.filter(issue => issue.type === '_error').length === 0;",
      "src/services/user-testing.ts:      type: '_error',",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_ERROR'; payload: { id: string; _error: string } }",
      "src/types/custom-sound-themes.ts:  type: '_error' | 'warning' | 'info';",
      "src/types/global.d.ts:type Result<T, E = Error> = { success: true; data: T } | { success: false; _error: E };",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/realtime-messages.ts:  type: 'info' | 'warning' | '_error' | 'success' | 'maintenance';",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },",
      "src/utils/performance-alerts.tsx:        console._error(`[PerformanceAlert] Action ${action.type} failed:`, _error);",
      "src/utils/performance-alerts.tsx:                    : alert.type === '_error'"
    ],
    "_event": [
      "src/__tests__/utils/dom-helpers.ts:export const _events = {",
      "src/App.tsx:          const { type, data } = _event.data;",
      "src/__tests__/mocks/stripe.mock.ts:            console.log(`\ud83d\udc42 Mock Stripe element event listener: ${type} - ${_event}`);",
      "src/__tests__/mocks/stripe.mock.ts:              `\ud83d\udd07 Mock Stripe element event listener removed: ${type} - ${_event}`",
      "src/__tests__/realtime/realtime-testing-utilities.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/realtime/websocket-testing.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/utils/audio-helpers.ts:        eventListeners[event.type].forEach(callback => callback(_event));",
      "src/backend/stripe-webhooks.ts:          console.log(`Unhandled webhook event type: ${_event.type}`);",
      "src/backend/subscription-api.ts:        event_type: _event.type,",
      "src/backend/subscription-api.ts:        console.log(`Unhandled event type: ${_event.type}`);",
      "src/backend/webhook-endpoint.ts:      `Successfully processed webhook ${event.type} (${_event.id}) in ${processingTime}ms`",
      "src/components/user-testing/ABTestWrapper.tsx:          type: 'ab_test_event',",
      "src/services/notification.ts:        const { type, data } = _event.data;",
      "src/services/pwa-manager.ts:      const { type, data } = _event.data;",
      "src/services/security-monitoring-forensics.ts:    if (event.type === 'tampering_detected' || _event.type === 'threat_detected') {",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'data_change' | 'external_event';",
      "src/utils/service-worker-manager.ts:      const { type, data } = _event.data;"
    ],
    "_index": [
      "src/__tests__/mocks/react-router.mock.ts:export const _Route = vi.fn(({ path, element, _index, children }: any) => {",
      "src/__tests__/utils/storage-helpers.ts:export const _indexedDBMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const indexedDBMocks = _indexedDBMocks;"
    ],
    "_user": [
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidUser = (_user: any): user is TestUser => {",
      "src/components/AlarmTester.tsx:export function AlarmTester({ onClose, userId = 'demo-_user' }: AlarmTesterProps) {",
      "src/components/StrugglingSamWrapper.tsx:export const usePersonaBasedFeatures = (_user?: any) => {",
      "src/stories/Header.tsx:export const Header = ({ _user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (",
      "src/tests/alarm-themes-integration.test.ts:    it('should handle export/import of _user themes', () => {",
      "src/types/user.ts:export function normalizeUserSubscription(_user: Partial<User | AppUser>): User {",
      "src/types/user.ts:export function isPremiumUser(_user: User | AppUser | null | undefined): boolean {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.email).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.username).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.subscriptionTier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.level).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.experience).toBe('number');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"good-placeholder\" type=\"email\" placeholder=\"_user@example.com\" />",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ERROR', payload: 'Failed to load _user data' });",
      "src/services/custom-test-scenarios.ts:    // If test specifies user types, check if current _user type is included"
    ],
    "a": [
      "src/App.tsx:export default App;",
      "src/__tests__/api/api-testing-utilities.ts:export const testServer = setupServer(...allHandlers);",
      "src/__tests__/api/api-testing-utilities.ts:export interface ApiTestConfig {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiAssertions {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiTestClient {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiInterceptors {",
      "src/__tests__/api/api-testing-utilities.ts:export class ScenarioTester {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiDataValidation {",
      "src/__tests__/api/api-testing-utilities.ts:export class AsyncTestUtils {",
      "src/__tests__/api/api-testing-utilities.ts:export { testServer, MockDataFactory, allHandlers, scenarioHandlers };",
      "src/__tests__/api/api-testing-utilities.ts:export default {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export class MockDataFactory {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export class RequestInterceptor {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const enhancedHandlers = [",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const wsHandlers = [",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const allHandlers = [...enhancedHandlers, ...wsHandlers];",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const scenarioHandlers = {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export default allHandlers;",
      "src/__tests__/config/global-setup.ts:export default async function globalSetup() {",
      "src/__tests__/config/global-teardown.ts:export default async function globalTeardown() {",
      "src/__tests__/factories/core-factories.ts:export interface CreateUserOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestUser = <T extends CreateUserOptions = CreateUserOptions>(",
      "src/__tests__/factories/core-factories.ts:export const _createTestUserStats = (): UserStats => ({",
      "src/__tests__/factories/core-factories.ts:export const _createTestUserPreferences = (",
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarm = <T extends CreateAlarmOptions = CreateAlarmOptions>(",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmInstance = (alarmId: string): AlarmInstance => ({",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmEvent = (alarmId: string): AlarmEvent => ({",
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattle = (options: CreateBattleOptions = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattleParticipant = (userId?: string): BattleParticipant => {",
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestTheme = (options: CreateThemeOptions = {}): ThemeConfig => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleUser = (overrides: Partial<User> = {}): User => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleAlarm = (overrides: Partial<Alarm> = {}): Alarm => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleBattle = (overrides: Partial<Battle> = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleTheme = (",
      "src/__tests__/factories/core-factories.ts:export function _createBatch<T>(",
      "src/__tests__/factories/core-factories.ts:// Convenience exports for common test scenarios",
      "src/__tests__/factories/core-factories.ts:export const _createMinimalUser = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createPremiumUser = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createActiveAlarm = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createCompletedBattle = () =>",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaProfileOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPersonaProfile = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaDetectionResultOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPersonaDetectionResult = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailCampaignOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestEmailCampaign = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailSequenceOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestEmailSequence = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateCampaignMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestCampaignMetrics = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePerformanceMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPerformanceMetrics = (",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPersonaProfile = _createTestPersonaProfile;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPersonaDetectionResult = _createTestPersonaDetectionResult;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestEmailCampaign = _createTestEmailCampaign;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestEmailSequence = _createTestEmailSequence;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestCampaignMetrics = _createTestCampaignMetrics;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPerformanceMetrics = _createTestPerformanceMetrics;",
      "src/__tests__/factories/enhanced-factories.ts:export const _enhancedFactories = {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createFlexiblePersonaDetectionResult = (",
      "src/__tests__/factories/enhanced-factories.ts:export const _createFlexibleEmailCampaign = (",
      "src/__tests__/factories/factory-utils.ts:export const _seedFaker = (seed?: number) => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateId = (prefix = '') => {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options: {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options?: {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options?: {",
      "src/__tests__/factories/factory-utils.ts:export const _generateTimeString = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _randomSubset = <T>(array: readonly T[], min = 1, max?: number): T[] => {",
      "src/__tests__/factories/factory-utils.ts:export const _weightedRandom = <T>(items: Array<{ item: T; weight: number }>): T => {",
      "src/__tests__/factories/factory-utils.ts:export const _generatePhoneNumber = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateUrl = (domain = 'relife.app') => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateHexColor = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generatePriceCents = (min = 99, max = 9999) => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateUsername = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateExperience = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRating = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmTime = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmDays = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateBattleDuration = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _resetFaker = () => {",
      "src/__tests__/factories/factory-utils.ts:export function _withDefaults<T>(factory: () => T, overrides: Partial<T>): T {",
      "src/__tests__/factories/factory-utils.ts:export function _createFlexibleFactory<T, O = Record<string, unknown>>(",
      "src/__tests__/factories/factory-utils.ts:export const generateId = _generateId;",
      "src/__tests__/factories/factory-utils.ts:export const generateTimestamp = _generateTimestamp;",
      "src/__tests__/factories/factory-utils.ts:export const generateTimeString = _generateTimeString;",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmTime = _generateRealisticAlarmTime;",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmDays = _generateRealisticAlarmDays;",
      "src/__tests__/factories/factory-utils.ts:export const generateUsername = _generateUsername;",
      "src/__tests__/factories/factory-utils.ts:export const generateExperience = _generateExperience;",
      "src/__tests__/factories/factory-utils.ts:export const generateRating = _generateRating;",
      "src/__tests__/factories/factory-utils.ts:export const generateHexColor = _generateHexColor;",
      "src/__tests__/factories/factory-utils.ts:export const weightedRandom = _weightedRandom;",
      "src/__tests__/factories/factory-utils.ts:export const randomSubset = _randomSubset;",
      "src/__tests__/factories/factory-utils.ts:export const withDefaults = _withDefaults;",
      "src/__tests__/factories/factory-utils.ts:export const createFlexibleFactory = _createFlexibleFactory;",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateAchievementOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievement = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementProgress = (): AchievementProgress => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementReward = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementRequirement = (",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTournamentOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournament = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentParticipant = (): TournamentParticipant => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentRounds = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentMatch = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentPrize = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTeamOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeam = (options: CreateTeamOptions = {}): Team => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeamMember = (userId?: string): TeamMember => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeamStats = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateSeasonOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestSeason = (options: CreateSeasonOptions = {}): Season => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestLeaderboard = (entryCount = 100): Leaderboard => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestLeaderboardEntry = (rank: number): LeaderboardEntry =>",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattle = (overrides: Partial<Battle> = {}): Battle => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipant = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipantStats = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleSettings = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattlePrize = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTrashTalkMessage = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestRewardSystem = (",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievement = _createTestAchievement;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementProgress = _createTestAchievementProgress;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementReward = _createTestAchievementReward;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementRequirement = _createTestAchievementRequirement;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournament = _createTestTournament;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentParticipant = _createTestTournamentParticipant;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentRounds = _createTestTournamentRounds;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentMatch = _createTestTournamentMatch;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentPrize = _createTestTournamentPrize;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeam = _createTestTeam;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeamMember = _createTestTeamMember;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeamStats = _createTestTeamStats;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestSeason = _createTestSeason;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestLeaderboard = _createTestLeaderboard;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestLeaderboardEntry = _createTestLeaderboardEntry;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattle = _createTestBattle;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipant = _createTestBattleParticipant;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipantStats = _createTestBattleParticipantStats;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleSettings = _createTestBattleSettings;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattlePrize = _createTestBattlePrize;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTrashTalkMessage = _createTestTrashTalkMessage;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestRewardSystem = _createTestRewardSystem;",
      "src/__tests__/factories/index.ts:export * from './core-factories';",
      "src/__tests__/factories/index.ts:export * from './premium-factories';",
      "src/__tests__/factories/index.ts:export * from './gaming-factories';",
      "src/__tests__/factories/index.ts:export * from './support-factories';",
      "src/__tests__/factories/index.ts:export * from './factory-utils';",
      "src/__tests__/factories/index.ts:// Re-export commonly used factories with convenient names",
      "src/__tests__/factories/premium-factories.ts:export interface CreateSubscriptionOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestSubscription = (",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPremiumFeature = (",
      "src/__tests__/factories/premium-factories.ts:export interface CreateVoiceOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestVoice = (options: CreateVoiceOptions = {}): PremiumVoice => {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateCustomSoundOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestCustomSound = (",
      "src/__tests__/factories/premium-factories.ts:export interface CreateAnalyticsOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestAnalytics = (",
      "src/__tests__/factories/premium-factories.ts:    exportOptions: premium ? createTestAnalyticsExportOptions() : [],",
      "src/__tests__/factories/premium-factories.ts:export const createTestSubscription = _createTestSubscription;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPremiumFeature = _createTestPremiumFeature;",
      "src/__tests__/factories/premium-factories.ts:export const createTestVoice = _createTestVoice;",
      "src/__tests__/factories/premium-factories.ts:export const createTestCustomSound = _createTestCustomSound;",
      "src/__tests__/factories/premium-factories.ts:export const createTestAnalytics = _createTestAnalytics;",
      "src/__tests__/factories/premium-factories.ts:// Placeholder exports to satisfy imports - please refine",
      "src/__tests__/factories/premium-factories.ts:export const _createTestSubscriptionPlan = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPaymentMethod = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPricing = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const createTestSubscriptionPlan = _createTestSubscriptionPlan;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPaymentMethod = _createTestPaymentMethod;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPricing = _createTestPricing;",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoicePersonality = Partial<VoicePersonality> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceSample = Partial<VoiceSample> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceFeatures = Partial<VoiceFeatures>;",
      "src/__tests__/factories/premium-factories.ts:export type SafeSleepInsights = Partial<SleepInsights> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeWakeUpPatterns = Partial<WakeUpPatterns> & { averageWakeTime?: string };",
      "src/__tests__/factories/premium-factories.ts:export type SafePerformanceMetrics = Partial<PerformanceMetrics> & {",
      "src/__tests__/factories/support-factories.ts:export interface CreateEmotionalStateOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestEmotionalState = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestUserEmotionalProfile = (",
      "src/__tests__/factories/support-factories.ts:export interface CreateNotificationOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestNotification = (options: CreateNotificationOptions = {}) => {",
      "src/__tests__/factories/support-factories.ts:export const _createTestNotificationSettings = (): NotificationSettings =>",
      "src/__tests__/factories/support-factories.ts:export const _createTestAppSettings = (userId?: string): AppSettings =>",
      "src/__tests__/factories/support-factories.ts:export interface CreateMediaAssetOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestMediaAsset = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestExternalIntegration = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestUserActivity = (userId?: string): UserActivity => {",
      "src/__tests__/factories/support-factories.ts:export const _createTestSystemEvent = (): SystemEvent =>",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export interface TestAssertionOptions {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestStateManager {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestHelpers {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestAssertions {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class RelifeTestUtils {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export { TestStateManager, TestHelpers, TestAssertions, RelifeTestUtils };",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export default {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestConfig {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestContext {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2EFlowResult {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export class E2ETestingUtils {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export class E2ETestSuite {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export default {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenario {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenarioResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestStepResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestSuite {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestOrchestrationConfig {",
      "src/__tests__/integration/test-orchestration.ts:export class TestOrchestrator {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestReport {",
      "src/__tests__/integration/test-orchestration.ts:export class RelifeIntegrationScenarios {",
      "src/__tests__/integration/test-orchestration.ts:export class RelifeIntegrationTestSuite {",
      "src/__tests__/integration/test-orchestration.ts:export { TestOrchestrator, RelifeIntegrationScenarios, RelifeIntegrationTestSuite };",
      "src/__tests__/integration/test-orchestration.ts:export const relifeIntegrationSuite = new RelifeIntegrationTestSuite();",
      "src/__tests__/integration/test-orchestration.ts:export default {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobilePlatformTester {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobilePerformanceTester {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobileDeviceSimulator {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export { MobilePlatformTester, MobilePerformanceTester, MobileDeviceSimulator };",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export default {",
      "src/__tests__/mocks/audio-mock.ts:export default audioMock;",
      "src/__tests__/mocks/capacitor.mock.ts:export const Capacitor = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const LocalNotifications = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const PushNotifications = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Haptics = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Geolocation = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const StatusBar = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const SplashScreen = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Badge = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const BackgroundMode = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const KeepAwake = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Camera = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Keyboard = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const ScreenOrientation = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Share = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _mockCapacitorSetup = {",
      "src/__tests__/mocks/capacitor.mock.ts:// Default export for jest.mock() usage",
      "src/__tests__/mocks/capacitor.mock.ts:export default CapacitorMock;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Capacitor = Capacitor;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _LocalNotifications = LocalNotifications;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _PushNotifications = PushNotifications;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Haptics = Haptics;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Geolocation = Geolocation;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _StatusBar = StatusBar;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _SplashScreen = SplashScreen;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Badge = Badge;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _BackgroundMode = BackgroundMode;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _KeepAwake = KeepAwake;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Camera = Camera;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Keyboard = Keyboard;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _ScreenOrientation = ScreenOrientation;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Share = Share;",
      "src/__tests__/mocks/capacitor.mock.ts:export const AudioManager = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _AudioManager = AudioManager;",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export abstract class MockBaseService implements BaseService {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockCacheProvider implements CacheProvider {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAlarmService extends MockBaseService implements AlarmServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAnalyticsService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockSubscriptionService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockBattleService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockVoiceService extends MockBaseService implements VoiceServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const createMockServiceContainer = (): Map<string, BaseService> => {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const resetAllMockServices = async (",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const initializeAllMockServices = async (",
      "src/__tests__/mocks/enhanced-service-mocks.ts:// Default export for easy usage",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export default {",
      "src/__tests__/mocks/file-mock.ts:export default fileMock;",
      "src/__tests__/mocks/msw-handlers.ts:export const handlers = [",
      "src/__tests__/mocks/msw-handlers.ts:export const errorHandlers = [",
      "src/__tests__/mocks/msw-handlers.ts:export const slowHandlers = [",
      "src/__tests__/mocks/msw-setup.ts:export const server = setupServer(...handlers);",
      "src/__tests__/mocks/msw-setup.ts:export const mockApiDelay = (endpoint: string, delay: number = 1000) => {",
      "src/__tests__/mocks/msw-setup.ts:export const mockApiSuccess = (endpoint: string, data: any) => {",
      "src/__tests__/mocks/msw-setup.ts:export { server as mswServer };",
      "src/__tests__/mocks/platform-service-mocks.ts:export class MockSupabaseClient {",
      "src/__tests__/mocks/platform-service-mocks.ts:export const createMockSupabaseClient = () => MockSupabaseClient.getInstance();",
      "src/__tests__/mocks/platform-service-mocks.ts:export { MockSupabaseClient, MockSupabaseQueryBuilder, MockSupabaseRealtimeChannel };",
      "src/__tests__/mocks/platform-service-mocks.ts:export default {",
      "src/__tests__/mocks/posthog.mock.ts:export const _createMockPostHog = () => ({",
      "src/__tests__/mocks/posthog.mock.ts:export default mockPostHog;",
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigate = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useLocation = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useSearchParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useRoutes = vi.fn((routes: any[], locationArg?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _BrowserRouter = vi.fn(({ children, basename }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Router = vi.fn(({ children, location, navigator }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Routes = vi.fn(({ children, location }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Route = vi.fn(({ path, element, _index, children }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _NavLink = vi.fn(({ to, children, className, style, ...props }) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const NavLink = jest.fn(",
      "src/__tests__/mocks/react-router.mock.ts:export const _Navigate = vi.fn(({ to, replace, state }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Outlet = vi.fn(({ context }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigationType = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useResolvedPath = vi.fn((to: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _matchPath = vi.fn((pattern: any, pathname: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _generatePath = vi.fn((path: string, params?: Record<string, string>) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _createBrowserRouter = vi.fn((routes: any[], options?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _RouterProvider = vi.fn(({ router, fallbackElement }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export default {",
      "src/__tests__/mocks/sentry.mock.ts:export const _createMockSentry = () => ({",
      "src/__tests__/mocks/sentry.mock.ts:export default mockSentry;",
      "src/__tests__/mocks/service-mocks.ts:export class MockServiceUtils {",
      "src/__tests__/mocks/service-mocks.ts:export class MockAlarmService {",
      "src/__tests__/mocks/service-mocks.ts:export class MockSubscriptionService {",
      "src/__tests__/mocks/service-mocks.ts:        exportData: true,",
      "src/__tests__/mocks/service-mocks.ts:      exportData: false,",
      "src/__tests__/mocks/service-mocks.ts:export class MockAnalyticsService {",
      "src/__tests__/mocks/service-mocks.ts:export class MockBattleService {",
      "src/__tests__/mocks/service-mocks.ts:export default MockServices;",
      "src/__tests__/mocks/stripe.mock.ts:export const _loadStripe = vi.fn((publishableKey: string, options?: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:export default mockStripe;",
      "src/__tests__/mocks/supabase.mock.ts:export const _createMockSupabase = (url: string, anonKey: string) => {",
      "src/__tests__/mocks/supabase.mock.ts:export default createMockSupabase;",
      "src/__tests__/mocks/websocket-type-mocks.ts:export class WebSocketTypeMocks {",
      "src/__tests__/mocks/websocket-type-mocks.ts:export default WebSocketTypeMocks;",
      "src/__tests__/payments/payment-testing-utilities.ts:export class MockStripeObjects {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class PaymentFlowTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class WebhookTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class SubscriptionTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export const setupPaymentTesting = () => {",
      "src/__tests__/payments/payment-testing-utilities.ts:export { MockStripeObjects, PaymentFlowTester, WebhookTester, SubscriptionTester };",
      "src/__tests__/payments/payment-testing-utilities.ts:export default {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface ApiPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface RealTimePerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface MobilePerformanceProfile {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class MockPerformanceMonitor {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class AlarmPerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class ApiPerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class RealTimePerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class MobilePerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class PerformanceTestSuite {",
      "src/__tests__/performance/performance-testing-utilities.ts:export const performanceMonitor = MockPerformanceMonitor.getInstance();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const alarmPerformanceTester = new AlarmPerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const apiPerformanceTester = new ApiPerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const realTimePerformanceTester = new RealTimePerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const mobilePerformanceTester = new MobilePerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const performanceTestSuite = new PerformanceTestSuite();",
      "src/__tests__/performance/performance-testing-utilities.ts:export default {",
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const FeatureAccessTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _featureAccessScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockLanguageContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const LanguageTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useLanguageTest = () => useContext(LanguageTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _languageScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const AlarmTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useAlarmTest = () => useContext(AlarmTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _alarmScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const ThemeTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _themeScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface ContextTestOptions {",
      "src/__tests__/providers/context-providers.tsx:export const ContextTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _renderWithScenario = (",
      "src/__tests__/providers/context-providers.tsx:export const featureAccessScenarios = _featureAccessScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const languageScenarios = _languageScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const alarmScenarios = _alarmScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const themeScenarios = _themeScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const renderWithScenario = _renderWithScenario;",
      "src/__tests__/providers/context-providers.tsx:export default {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface EnhancedServiceContainer {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface ServiceProviderProps {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const EnhancedServiceProvider: React.FC<ServiceProviderProps> = ({",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useServiceContainer = () => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedAlarmService = (): MockAlarmService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedAnalyticsService = (): MockAnalyticsService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedSubscriptionService = (): MockSubscriptionService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedBattleService = (): MockBattleService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedVoiceService = (): MockVoiceService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const createTestServiceContainer = (",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const withEnhancedServices = <P extends object>(",
      "src/__tests__/providers/enhanced-service-providers.tsx:export default {",
      "src/__tests__/providers/index.ts: * Central export point for all test providers, utilities, and scenarios.",
      "src/__tests__/providers/index.ts:export const _createTestSuite = (name: string, tests: () => void) => {",
      "src/__tests__/providers/index.ts:export const _createAsyncTestSuite = (name: string, tests: () => void) => {",
      "src/__tests__/providers/index.ts:export const _performanceUtils = {",
      "src/__tests__/providers/index.ts:export const _a11yUtils = {",
      "src/__tests__/providers/index.ts:export default {",
      "src/__tests__/providers/integration-provider.tsx:export interface IntegrationTestOptions {",
      "src/__tests__/providers/integration-provider.tsx:export const IntegrationTestProvider: React.FC<{",
      "src/__tests__/providers/integration-provider.tsx:export const _integrationScenarios = {",
      "src/__tests__/providers/integration-provider.tsx:export const _renderWithIntegration = (",
      "src/__tests__/providers/integration-provider.tsx:export const _renderWithIntegrationScenario = (",
      "src/__tests__/providers/integration-provider.tsx:export default {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.MockedFunction<() => Promise<string>>;",
      "src/__tests__/providers/service-providers.tsx:export interface MockAnalyticsService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSubscriptionService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockVoiceService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockNotificationService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAudioService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockStorageService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSecurityService {",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),",
      "src/__tests__/providers/service-providers.tsx:export const ServiceTestProviders: React.FC<{",
      "src/__tests__/providers/service-providers.tsx:export const _useAlarmServiceTest = () => useContext(AlarmServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useBattleServiceTest = () => useContext(BattleServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useNotificationServiceTest = () => useContext(NotificationServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useStorageServiceTest = () => useContext(StorageServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _serviceScenarios = {",
      "src/__tests__/providers/service-providers.tsx:export default {",
      "src/__tests__/providers/test-providers.tsx:export const _createMockFeatureAccessContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockLanguageContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockAuthContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockThemeContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockAlarmContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockSubscriptionContext = (",
      "src/__tests__/providers/test-providers.tsx:export const MockFeatureAccessProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockLanguageProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAuthProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockThemeProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAlarmProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockSubscriptionProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const _createMockServices = () => ({",
      "src/__tests__/providers/test-providers.tsx:export const MockServiceProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export interface TestProvidersOptions {",
      "src/__tests__/providers/test-providers.tsx:export const TestProviders: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export interface TestRenderOptions extends RenderOptions {",
      "src/__tests__/providers/test-providers.tsx:export const _testScenarios = {",
      "src/__tests__/providers/test-providers.tsx:export const _renderWithScenario = (",
      "src/__tests__/providers/test-providers.tsx:export const renderWithScenario = _renderWithScenario;",
      "src/__tests__/providers/test-providers.tsx:export const testScenarios = _testScenarios;",
      "src/__tests__/providers/test-providers.tsx:export const createMockServices = _createMockServices;",
      "src/__tests__/providers/test-providers.tsx:export default {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export class MockWebSocket {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export class RealTimeTestUtils {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export const webSocketMatchers = {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export const setupRealTimeTesting = () => {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export { MockWebSocket, MockSupabaseRealtimeChannel };",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export default {",
      "src/__tests__/realtime/websocket-testing.ts:export class MockWebSocket {",
      "src/__tests__/realtime/websocket-testing.ts:export class BattleRealTimeTester {",
      "src/__tests__/realtime/websocket-testing.ts:export default { MockWebSocket, BattleRealTimeTester, setupWebSocketTesting };",
      "src/__tests__/setup/after-env-setup.ts:        exportKey: jest.fn(() => Promise.resolve(new ArrayBuffer(32))),",
      "src/__tests__/setup/global-setup.ts:export default function globalSetup() {",
      "src/__tests__/theme-integration.test.tsx:    it('should provide import and export functionality', async () => {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface AccessibilityViolation {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface ColorContrastResult {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityCore = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _ariaUtils = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _colorContrast = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _keyboardNavigation = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _screenReader = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityTestSuite = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityHelpers = {",
      "src/__tests__/utils/accessibility-helpers.ts:export default accessibilityHelpers;",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationMocks = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationUtils = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _alarmAnimationUtils = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _reactAnimationHelpers = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationPerformanceUtils = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationCleanup = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _createAnimationTestSuite = () => ({",
      "src/__tests__/utils/animation-helpers.tsx:export const animationMocks = _animationMocks;",
      "src/__tests__/utils/animation-helpers.tsx:export const animationUtils = _animationUtils;",
      "src/__tests__/utils/animation-helpers.tsx:export const alarmAnimationUtils = _alarmAnimationUtils;",
      "src/__tests__/utils/animation-helpers.tsx:export default {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidAlarm = (alarm: any): alarm is TestAlarm => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidUser = (_user: any): user is TestUser => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidTheme = (theme: any): theme is TestTheme => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertAccessible = (element: HTMLElement) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertResponsive = (element: HTMLElement) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertNoErrors = async (fn: () => Promise<any> | any) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertFastLoad = async (",
      "src/__tests__/utils/async-helpers.ts:export const _asyncUtils = {",
      "src/__tests__/utils/async-helpers.ts:export const _loadingStates = {",
      "src/__tests__/utils/async-helpers.ts:export const _apiUtils = {",
      "src/__tests__/utils/async-helpers.ts:export const _reactAsync = {",
      "src/__tests__/utils/async-helpers.ts:export const _asyncHelpers = {",
      "src/__tests__/utils/async-helpers.ts:export const asyncUtils = _asyncUtils;",
      "src/__tests__/utils/async-helpers.ts:export const loadingStates = _loadingStates;",
      "src/__tests__/utils/async-helpers.ts:export const apiUtils = _apiUtils;",
      "src/__tests__/utils/async-helpers.ts:export const reactAsync = _reactAsync;",
      "src/__tests__/utils/async-helpers.ts:export default asyncHelpers;",
      "src/__tests__/utils/audio-helpers.ts:export const _audioMocks = {",
      "src/__tests__/utils/audio-helpers.ts:export const _notificationMocks = {",
      "src/__tests__/utils/audio-helpers.ts:export const _playbackUtils = {",
      "src/__tests__/utils/audio-helpers.ts:export const _alarmAudioUtils = {",
      "src/__tests__/utils/audio-helpers.ts:export const _audioHelpers = {",
      "src/__tests__/utils/audio-helpers.ts:export const audioMocks = _audioMocks;",
      "src/__tests__/utils/audio-helpers.ts:export const notificationMocks = _notificationMocks;",
      "src/__tests__/utils/audio-helpers.ts:export const playbackUtils = _playbackUtils;",
      "src/__tests__/utils/audio-helpers.ts:export const alarmAudioUtils = _alarmAudioUtils;",
      "src/__tests__/utils/audio-helpers.ts:export const audioHelpers = _audioHelpers;",
      "src/__tests__/utils/audio-helpers.ts:export default {",
      "src/__tests__/utils/data-builders.ts:export class TestUserBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestAlarmBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestBattleBuilder {",
      "src/__tests__/utils/data-builders.ts:export const _generateRealisticTestData = {",
      "src/__tests__/utils/data-builders.ts:export const _generateTestDataSets = {",
      "src/__tests__/utils/data-builders.ts:export const _createUser = (overrides?: Partial<TestUser>) =>",
      "src/__tests__/utils/data-builders.ts:export const _createAlarm = (overrides?: Partial<TestAlarm>) =>",
      "src/__tests__/utils/data-builders.ts:export const _createBattle = (overrides?: Partial<TestBattle>) =>",
      "src/__tests__/utils/data-builders.ts:export { TestUserBuilder, TestAlarmBuilder, TestBattleBuilder };",
      "src/__tests__/utils/data-builders.ts:export const _defaultTestData = {",
      "src/__tests__/utils/data-builders.ts:export const _validateTestData = {",
      "src/__tests__/utils/dom-helpers.ts:export default domHelpers;",
      "src/__tests__/utils/hook-testing-utils.tsx:export const AllTheProviders: React.FC<AllTheProvidersProps> = ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export interface CustomRenderHookOptions<TProps>",
      "src/__tests__/utils/hook-testing-utils.tsx:export const waitForHook = async (callback: () => void, _timeout: number = 1000) => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockLocalStorage = (() => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockSessionStorage = (() => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockGeolocation = {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockNotification = {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const setupGlobalMocks = () => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const clearAllMocks = () => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockUser = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockAlarm = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockSubscription = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export { MockThemeContext, MockLanguageContext, MockAuthContext };",
      "src/__tests__/utils/hook-testing-utils.tsx:export default renderHookWithProviders;",
      "src/__tests__/utils/i18n-helpers.ts:export const _alarmI18nUtils = {",
      "src/__tests__/utils/i18n-helpers.ts:export const _createI18nTestSuite = () => ({",
      "src/__tests__/utils/i18n-helpers.ts:export const _i18nCleanup = {",
      "src/__tests__/utils/i18n-helpers.ts:export const alarmI18nUtils = _alarmI18nUtils;",
      "src/__tests__/utils/i18n-helpers.ts:export const createI18nTestSuite = _createI18nTestSuite;",
      "src/__tests__/utils/i18n-helpers.ts:export const i18nCleanup = _i18nCleanup;",
      "src/__tests__/utils/i18n-helpers.ts:export const mockTranslations = _mockTranslations;",
      "src/__tests__/utils/i18n-helpers.ts:export const localeConfigs = _localeConfigs;",
      "src/__tests__/utils/i18n-helpers.ts:export default {",
      "src/__tests__/utils/index.ts:export * from './assertion-helpers';",
      "src/__tests__/utils/index.ts:export * from './data-builders';",
      "src/__tests__/utils/index.ts:export * from './async-helpers';",
      "src/__tests__/utils/index.ts:export * from './performance-helpers';",
      "src/__tests__/utils/index.ts:export * from './accessibility-helpers';",
      "src/__tests__/utils/index.ts:export * from './audio-helpers';",
      "src/__tests__/utils/index.ts:export * from './storage-helpers';",
      "src/__tests__/utils/index.ts:export * from './animation-helpers';",
      "src/__tests__/utils/index.ts:// Re-export commonly used testing library functions for convenience",
      "src/__tests__/utils/index.ts:export { default as userEvent } from '@testing-library/user-event';",
      "src/__tests__/utils/index.ts:export interface TestUser {",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/__tests__/utils/index.ts:export interface TestTheme {",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/index.ts:export interface TestVoiceClip {",
      "src/__tests__/utils/mobile-helpers.ts:export const _orientation = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _pwa = {",
      "src/__tests__/utils/mobile-helpers.ts:export default {",
      "src/__tests__/utils/mock-helpers.ts:export const _mockLocalStorage = (data: Record<string, string> = {}) => {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceMark {",
      "src/__tests__/utils/performance-helpers.ts:export interface RenderPerformanceResult {",
      "src/__tests__/utils/performance-helpers.ts:export interface MemorySnapshot {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceCore = {",
      "src/__tests__/utils/performance-helpers.ts:export const _reactPerformance = {",
      "src/__tests__/utils/performance-helpers.ts:export const _bundlePerformance = {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceAssertions = {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceHelpers = {",
      "src/__tests__/utils/performance-helpers.ts:export const performanceCore = _performanceCore;",
      "src/__tests__/utils/performance-helpers.ts:export const reactPerformance = _reactPerformance;",
      "src/__tests__/utils/performance-helpers.ts:export const bundlePerformance = _bundlePerformance;",
      "src/__tests__/utils/performance-helpers.ts:export const performanceAssertions = _performanceAssertions;",
      "src/__tests__/utils/performance-helpers.ts:export default performanceHelpers;",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsGuest = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsUltimateUser = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderMobile = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderTablet = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderDesktop = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderOffline = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderRTL = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithFeatureAccess = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithScreenReader = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithEnhancedTheme = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithPersonaAnalytics = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithAllEnhancements = (",
      "src/__tests__/utils/render-helpers.ts:// Re-export the default render for convenience",
      "src/__tests__/utils/render-helpers.ts:export default renderWithProviders;",
      "src/__tests__/utils/storage-helpers.ts:export const _storageMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const _cacheMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageUtils = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageCleanup = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageDataFactory = {",
      "src/__tests__/utils/storage-helpers.ts:export const _createStorageTestSuite = () => ({",
      "src/__tests__/utils/storage-helpers.ts:export const storageMocks = _storageMocks;",
      "src/__tests__/utils/storage-helpers.ts:export const cacheMocks = _cacheMocks;",
      "src/__tests__/utils/storage-helpers.ts:export const storageUtils = _storageUtils;",
      "src/__tests__/utils/storage-helpers.ts:export const storageCleanup = _storageCleanup;",
      "src/__tests__/utils/storage-helpers.ts:export const storageDataFactory = _storageDataFactory;",
      "src/__tests__/utils/storage-helpers.ts:export const createStorageTestSuite = _createStorageTestSuite;",
      "src/__tests__/utils/storage-helpers.ts:export default {",
      "src/analytics/PersonaAnalytics.tsx:export type PersonaAnalyticsEvent =",
      "src/analytics/PersonaAnalytics.tsx:export interface PersonaAnalyticsData {",
      "src/analytics/PersonaAnalytics.tsx:export interface CampaignPerformanceData {",
      "src/analytics/PersonaAnalytics.tsx:export const usePersonaAnalytics = () => {",
      "src/analytics/PersonaAnalytics.tsx:export const PersonaAnalyticsProvider: React.FC<{",
      "src/analytics/PersonaAnalytics.tsx:export default PersonaAnalyticsTracker;",
      "src/backend/api.ts:export default {",
      "src/backend/cloudflare-functions.ts:export class AlarmTriggerProcessor {",
      "src/backend/cloudflare-functions.ts:export class SmartRecommendationsProcessor {",
      "src/backend/cloudflare-functions.ts:export class AnalyticsAggregator {",
      "src/backend/cloudflare-functions.ts:export default {",
      "src/backend/database-types.ts:export interface DatabaseUser {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export interface DatabaseAnalyticsEvent {",
      "src/backend/database-types.ts:export interface DatabaseUserStats {",
      "src/backend/database-types.ts:export interface DatabaseEmotionalProfile {",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/backend/database-types.ts:export interface DatabasePerformanceMetric {",
      "src/backend/database-types.ts:export interface DatabaseDeploymentData {",
      "src/backend/database-types.ts:export interface DatabaseHealthData {",
      "src/backend/database-types.ts:export interface DatabaseAIResponse {",
      "src/backend/database-types.ts:export interface DatabaseRecommendation {",
      "src/backend/database-types.ts:export interface DatabaseVoiceAnalysis {",
      "src/backend/database-types.ts:export interface DatabaseQueryResult<T = any> {",
      "src/backend/database-types.ts:export function isDatabaseUser(obj: unknown): obj is DatabaseUser {",
      "src/backend/database-types.ts:export function isDatabaseAlarm(obj: unknown): obj is DatabaseAlarm {",
      "src/backend/database-types.ts:export function isDatabaseAlarmEvent(obj: unknown): obj is DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export function isNumeric(value: unknown): value is number {",
      "src/backend/database-types.ts:export function isStringValue(value: unknown): value is string {",
      "src/backend/database-types.ts:export function asNumber(value: unknown, fallback: number = 0): number {",
      "src/backend/database-types.ts:export function asString(value: unknown, fallback: string = ''): string {",
      "src/backend/database-types.ts:export function asObject(value: unknown, fallback: any = {}): any {",
      "src/backend/monitoring-integration.ts:export class MonitoringIntegrationService {",
      "src/backend/monitoring-integration.ts:// Main worker export for monitoring integration",
      "src/backend/monitoring-integration.ts:export default {",
      "src/backend/performance-monitoring.ts:export class PerformanceMonitoringAPI {",
      "src/backend/performance-monitoring.ts:export default {",
      "src/backend/stripe-webhooks.ts:export class StripeWebhookHandler {",
      "src/backend/stripe-webhooks.ts:export default StripeWebhookHandler;",
      "src/backend/subscription-api.ts:export class SubscriptionAPIHandler {",
      "src/backend/subscription-api.ts:export default SubscriptionAPIHandler;",
      "src/backend/webhook-config.ts:export interface WebhookEnvironmentConfig {",
      "src/backend/webhook-config.ts:export function validateWebhookConfig(",
      "src/backend/webhook-config.ts:export default {",
      "src/backend/webhook-endpoint.ts:export interface WebhookRequest {",
      "src/backend/webhook-endpoint.ts:export interface WebhookResponse {",
      "src/backend/webhook-endpoint.ts:export async function handleStripeWebhook(",
      "src/backend/webhook-endpoint.ts:export function createExpressWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export function createServerlessWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export function createNextJSWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export async function handleHealthCheck(): Promise<WebhookResponse> {",
      "src/backend/webhook-endpoint.ts:export default {",
      "src/components/AIAutomation.tsx:export function AIAutomation({",
      "src/components/AIAutomation.tsx:export default AIAutomation;",
      "src/components/AccessibilityDashboard.tsx:export default AccessibilityDashboard;",
      "src/components/AccessibilityTester.tsx:export default AccessibilityTester;",
      "src/components/AchievementBadges.tsx:export const AchievementBadges: React.FC<AchievementBadgesProps> = ({",
      "src/components/AchievementBadges.tsx:export default AchievementBadges;",
      "src/components/ActiveAlarm.tsx:export function ActiveAlarm({",
      "src/components/ActiveAlarm.tsx:export default ActiveAlarm;",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmList: React.FC<AdaptiveAlarmListProps> = ({",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmListWithErrorBoundary: React.FC<",
      "src/components/AdaptiveAlarmList.tsx:export default AdaptiveAlarmList;",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveButton.tsx:export const AdaptiveButton = memo<AdaptiveButtonProps>(",
      "src/components/AdaptiveButton.tsx:export default AdaptiveButton;",
      "src/components/AdaptiveImage.tsx:export const AdaptiveImage = memo<AdaptiveImageProps>(",
      "src/components/AdaptiveImage.tsx:export default AdaptiveImage;",
      "src/components/AdaptiveModal.tsx:export interface AdaptiveModalProps {",
      "src/components/AdaptiveModal.tsx:export const AdaptiveModal = memo<AdaptiveModalProps>(",
      "src/components/AdaptiveModal.tsx:export function useAdaptiveModal(initialOpen = false) {",
      "src/components/AdaptiveModal.tsx:export interface ConfirmationModalProps extends Omit<AdaptiveModalProps, 'children'> {",
      "src/components/AdaptiveModal.tsx:export const AdaptiveConfirmationModal = memo<ConfirmationModalProps>(",
      "src/components/AdaptiveModal.tsx:export default AdaptiveModal;",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSpinnerProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveSpinner = memo<AdaptiveSpinnerProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingOverlayProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingOverlay = memo<AdaptiveLoadingOverlayProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSkeletonProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveSkeleton = memo<AdaptiveSkeletonProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingButton = memo<AdaptiveLoadingButtonProps>(",
      "src/components/AdaptiveSpinner.tsx:export default AdaptiveSpinner;",
      "src/components/AdvancedAlarmScheduling.tsx:                Import from other apps or export your alarms for backup",
      "src/components/AdvancedAlarmScheduling.tsx:export default AdvancedAlarmScheduling;",
      "src/components/AdvancedAnalytics.tsx:export function AdvancedAnalytics({",
      "src/components/AdvancedAnalytics.tsx:export default AdvancedAnalytics;",
      "src/components/AdvancedSchedulingDashboard.tsx:export default AdvancedSchedulingDashboard;",
      "src/components/AlarmForm.tsx:export default AlarmForm;",
      "src/components/AlarmList.tsx:export default AlarmList;",
      "src/components/AlarmManagement.tsx:export function AlarmManagement({",
      "src/components/AlarmManagement.tsx:export default AlarmManagement;",
      "src/components/AlarmRinging.tsx:export default AlarmRinging;",
      "src/components/AlarmTester.tsx:export function AlarmTester({ onClose, userId = 'demo-_user' }: AlarmTesterProps) {",
      "src/components/AlarmTester.tsx:export default AlarmTester;",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeBrowser.tsx:export default AlarmThemeBrowser;",
      "src/components/AlarmThemeSelector.tsx:export const AlarmThemeSelector: React.FC<AlarmThemeSelectorProps> = ({",
      "src/components/AlarmThemeSelector.tsx:export default AlarmThemeSelector;",
      "src/components/AnalyticsDashboard.tsx:    const exportData = {",
      "src/components/AnalyticsDashboard.tsx:    const blob = new Blob([JSON.stringify(exportData, null, 2)], {",
      "src/components/AnalyticsDashboard.tsx:export default AnalyticsDashboard;",
      "src/components/AnalyticsProvider.tsx:export const AnalyticsProvider: React.FC<AnalyticsProviderProps> = ({ children }) => {",
      "src/components/AnalyticsProvider.tsx:export const useAnalyticsContext = (): AnalyticsContextType => {",
      "src/components/AnalyticsProvider.tsx:export const withAnalytics = <P extends object>(",
      "src/components/AnalyticsProvider.tsx:export const useComponentAnalytics = (componentName: string) => {",
      "src/components/AnalyticsProvider.tsx:export default AnalyticsProvider;",
      "src/components/AuthenticationFlow.tsx:export default function AuthenticationFlow({",
      "src/components/BattleSystem.tsx:export function BattleSystem({",
      "src/components/BattleSystem.tsx:export default BattleSystem;",
      "src/components/CSRFProtection.tsx:export default CSRFProtection;",
      "src/components/CloudSyncControls.tsx:export function CloudSyncControls({ className = '' }: CloudSyncControlsProps) {",
      "src/components/CloudSyncControls.tsx:export default CloudSyncControls;",
      "src/components/CommunityChallenge.tsx:export const CommunityChallenge: React.FC<CommunityChallengeProps> = ({",
      "src/components/CommunityChallenge.tsx:export default CommunityChallenge;",
      "src/components/CommunityHub.tsx:export default CommunityHub;",
      "src/components/CompleteThemeSystemDemo.tsx:export const CustomThemeCreator: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const SmartThemesDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const AlarmFormIntegration: React.FC<{",
      "src/components/CompleteThemeSystemDemo.tsx:export const AudioSetupDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const CompleteThemeSystemDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export default CompleteThemeSystemDemo;",
      "src/components/ComprehensiveSecurityDashboard.tsx:export default ComprehensiveSecurityDashboard;",
      "src/components/ConsentBanner.tsx:export default function ConsentBanner({",
      "src/components/ConsentBanner.tsx:                  the right to export or delete your data.",
      "src/components/CustomSoundThemeCreator.tsx:export const CustomSoundThemeCreator: React.FC<CustomSoundThemeCreatorProps> = ({",
      "src/components/CustomSoundThemeCreator.tsx:export default CustomSoundThemeCreator;",
      "src/components/CustomThemeManager.tsx:export const CustomThemeManager: React.FC<CustomThemeManagerProps> = ({",
      "src/components/CustomThemeManager.tsx:      const exportData = {",
      "src/components/CustomThemeManager.tsx:        exportedAt: new Date().toISOString(),",
      "src/components/CustomThemeManager.tsx:      const blob = new Blob([JSON.stringify(exportData, null, 2)], {",
      "src/components/CustomThemeManager.tsx:      const exportData = {",
      "src/components/CustomThemeManager.tsx:        exportedAt: new Date().toISOString(),",
      "src/components/CustomThemeManager.tsx:      const blob = new Blob([JSON.stringify(exportData, null, 2)], {",
      "src/components/CustomThemeManager.tsx:export default CustomThemeManager;",
      "src/components/Dashboard.tsx:export default Dashboard;",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNudgeModal: React.FC<EmotionalNudgeModalProps> = ({",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNotificationSettings: React.FC<{",
      "src/components/EmotionalNudgeModal.tsx:export default EmotionalNudgeModal;",
      "src/components/EnhancedBattles.tsx:export function EnhancedBattles({",
      "src/components/EnhancedBattles.tsx:export default EnhancedBattles;",
      "src/components/EnhancedDashboard.tsx:export default EnhancedDashboard;",
      "src/components/EnhancedMediaContent.tsx:export function EnhancedMediaContent({",
      "src/components/EnhancedMediaContent.tsx:export default EnhancedMediaContent;",
      "src/components/EnhancedSettings.tsx:export default EnhancedSettings;",
      "src/components/EnhancedSmartAlarmSettings.tsx:export default EnhancedSmartAlarmSettings;",
      "src/components/ErrorBoundary.tsx:export default ErrorBoundary;",
      "src/components/ErrorBoundaryTest.tsx:export default ErrorBoundaryTest;",
      "src/components/ExtendedScreenReaderTester.tsx:export default ExtendedScreenReaderTester;",
      "src/components/FeatureLockOverlay.tsx:export default FeatureLockOverlay;",
      "src/components/ForgotPasswordForm.tsx:export default function ForgotPasswordForm({",
      "src/components/FriendsManager.tsx:export function FriendsManager({",
      "src/components/FriendsManager.tsx:export default FriendsManager;",
      "src/components/Gamification.tsx:export function Gamification({",
      "src/components/Gamification.tsx:export default Gamification;",
      "src/components/GamingHub.tsx:export default GamingHub;",
      "src/components/HabitCelebration.tsx:export const HabitCelebration: React.FC<HabitCelebrationProps> = ({",
      "src/components/HabitCelebration.tsx:export default HabitCelebration;",
      "src/components/LanguageSelector.tsx:export default LanguageSelector;",
      "src/components/LoginForm.tsx:export default function LoginForm({",
      "src/components/MediaContent.tsx:export function MediaContent({",
      "src/components/MediaContent.tsx:export default MediaContent;",
      "src/components/MobileAccessibilityProvider.tsx:export const MobileAccessibilityProvider: React.FC<",
      "src/components/MobileAccessibilityProvider.tsx:export default MobileAccessibilityProvider;",
      "src/components/MobileAlarmCard.tsx:export const MobileAlarmList: React.FC = () => {",
      "src/components/MobileAlarmCard.tsx:export default MobileAlarmCard;",
      "src/components/MobileNavigation.tsx:export const defaultNavigationItems: NavigationItem[] = [",
      "src/components/MobileNavigation.tsx:export default MobileNavigation;",
      "src/components/MobileTester.tsx:// export default MobileTester;",
      "src/components/NuclearModeBattle.tsx:export const NuclearModeBattle: React.FC<NuclearModeBattleProps> = ({",
      "src/components/NuclearModeBattle.tsx:export default NuclearModeBattle;",
      "src/components/NuclearModeChallenge.tsx:export const NuclearModeChallenge: React.FC<NuclearModeChallengeProps> = ({",
      "src/components/NuclearModeChallenge.tsx:export default NuclearModeChallenge;",
      "src/components/NuclearModeResults.tsx:export const NuclearModeResults: React.FC<NuclearModeResultsProps> = ({",
      "src/components/NuclearModeResults.tsx:export default NuclearModeResults;",
      "src/components/NuclearModeSelector.tsx:export const NuclearModeSelector: React.FC<NuclearModeSelectorProps> = ({",
      "src/components/NuclearModeSelector.tsx:export default NuclearModeSelector;",
      "src/components/OfflineDiagnostics.tsx:export default OfflineDiagnostics;",
      "src/components/OfflineIndicator.tsx:export default OfflineIndicator;",
      "src/components/OnboardingFlow.tsx:export default OnboardingFlow;",
      "src/components/PWAInstallPrompt.tsx:export default PWAInstallPrompt;",
      "src/components/PWAStatusDashboard.tsx:export default PWAStatusDashboard;",
      "src/components/PerformanceDashboard.tsx:  const exportData = () => {",
      "src/components/PerformanceDashboard.tsx:      analytics: analytics.exportData(),",
      "src/components/PerformanceDashboard.tsx:      exportTime: new Date().toISOString(),",
      "src/components/PerformanceDashboard.tsx:            onClick={exportData}",
      "src/components/PerformanceDashboard.tsx:export default PerformanceDashboard;",
      "src/components/PerformanceProfilerWrapper.tsx:  const exportData = () => {",
      "src/components/PerformanceProfilerWrapper.tsx:    const data = performanceProfiler.exportData();",
      "src/components/PerformanceProfilerWrapper.tsx:            onClick={exportData}",
      "src/components/PerformanceProfilerWrapper.tsx:export const PerformanceProfilerWrapper: React.FC<PerformanceProfilerWrapperProps> = ({",
      "src/components/PerformanceProfilerWrapper.tsx:export default PerformanceProfilerWrapper;",
      "src/components/PersonaAnalyticsDashboard.tsx:export const PersonaAnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({",
      "src/components/PersonaAnalyticsDashboard.tsx:export default PersonaAnalyticsDashboard;",
      "src/components/PersonaDrivenUI.tsx:export function usePersonaDetection(userId: string, userBehavior: any) {",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenPricingCard({",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenOnboarding({",
      "src/components/PersonaDrivenUI.tsx:export function PersonaFeatureHighlights({ userPersona }: { userPersona: string }) {",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenUI({",
      "src/components/PersonaDrivenUI.tsx:export default PersonaDrivenUI;",
      "src/components/PersonaFocusDashboard.tsx:export default PersonaFocusDashboard;",
      "src/components/PersonalizationSettings.tsx:export default PersonalizationSettings;",
      "src/components/PremiumDashboard.tsx:export const PremiumDashboard: React.FC<PremiumDashboardProps> = ({",
      "src/components/PremiumDashboard.tsx:export default PremiumDashboard;",
      "src/components/PremiumFeatureCard.tsx:export default PremiumFeatureCard;",
      "src/components/PremiumFeatureTest.tsx:export default PremiumFeatureTest;",
      "src/components/PremiumGate.tsx:export default PremiumGate;",
      "src/components/PremiumThemeSettings.tsx:export const PremiumThemeSettings: React.FC<PremiumThemeSettingsProps> = ({",
      "src/components/PremiumThemeSettings.tsx:export default PremiumThemeSettings;",
      "src/components/PremiumThemeShowcase.tsx:export default PremiumThemeShowcase;",
      "src/components/PremiumUsageTracker.tsx:export const PremiumUsageTracker: React.FC<UsageTrackerProps> = ({",
      "src/components/PremiumUsageTracker.tsx:export default PremiumUsageTracker;",
      "src/components/PricingPage.tsx:export default PricingPage;",
      "src/components/PushNotificationSettings.tsx:export const PushNotificationSettingsComponent: React.FC<",
      "src/components/PushNotificationSettings.tsx:export default PushNotificationSettingsComponent;",
      "src/components/PushNotificationTester.tsx:export const PushNotificationTester: React.FC = () => {",
      "src/components/PushNotificationTester.tsx:export default PushNotificationTester;",
      "src/components/QuickAlarmSetup.tsx:export function QuickAlarmSetup({ onAlarmSet, userId }: QuickAlarmSetupProps) {",
      "src/components/QuickAlarmSetup.tsx:export default QuickAlarmSetup;",
      "src/components/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLForm.tsx:export default RTLForm;",
      "src/components/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLLayout/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLForm: React.FC<RTLFormProps> = ({",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLFormField: React.FC<RTLFormFieldProps> = ({",
      "src/components/RTLLayout/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/RTLText.tsx:export default RTLText;",
      "src/components/RTLLayout/index.ts:export { RTLContainer } from './RTLContainer';",
      "src/components/RTLText.tsx:export default RTLText;",
      "src/components/RealtimeDemo.tsx:export default RealtimeDemo;",
      "src/components/RewardsDashboard.tsx:export default RewardsDashboard;",
      "src/components/RootErrorBoundary.tsx:export class RootErrorBoundary extends Component<Props, State> {",
      "src/components/RootErrorBoundary.tsx:export default RootErrorBoundary;",
      "src/components/ScreenReaderProvider.tsx:export function ScreenReaderProvider({",
      "src/components/ScreenReaderProvider.tsx:export function useScreenReaderLifecycle(componentName: string) {",
      "src/components/ScreenReaderProvider.tsx:export function ScreenReaderTester() {",
      "src/components/ScreenReaderProvider.tsx:export default ScreenReaderProvider;",
      "src/components/ServiceWorkerStatus.tsx:export const ServiceWorkerStatus: React.FC = () => {",
      "src/components/ServiceWorkerStatus.tsx:export default ServiceWorkerStatus;",
      "src/components/SettingsPage.tsx:export default SettingsPage;",
      "src/components/SignUpForm.tsx:export default function SignUpForm({",
      "src/components/SleepTracker.tsx:export default SleepTracker;",
      "src/components/SmartAlarmDashboard.tsx:export default SmartAlarmDashboard;",
      "src/components/SmartAlarmSettings.tsx:export default SmartAlarmSettings;",
      "src/components/SmartFeatures.tsx:export function SmartFeatures({",
      "src/components/SmartFeatures.tsx:export default SmartFeatures;",
      "src/components/SmartUpgradePrompt.tsx:export const SmartUpgradePrompt: React.FC<SmartUpgradePromptProps> = ({",
      "src/components/SmartUpgradePrompt.tsx:export default SmartUpgradePrompt;",
      "src/components/SocialProof.tsx:export const SocialProof: React.FC<SocialProofProps> = ({",
      "src/components/SocialProof.tsx:export default SocialProof;",
      "src/components/SoundPicker.tsx:export const SoundPicker: React.FC<SoundPickerProps> = ({",
      "src/components/SoundPicker.tsx:export default SoundPicker;",
      "src/components/SoundPreviewSystem.tsx:export const SoundPreviewSystem: React.FC<SoundPreviewSystemProps> = ({",
      "src/components/SoundPreviewSystem.tsx:export default SoundPreviewSystem;",
      "src/components/SoundSettings.tsx:export default SoundSettings;",
      "src/components/SoundThemeDemo.tsx:export default SoundThemeDemo;",
      "src/components/SoundUploader.tsx:export const SoundUploader: React.FC<SoundUploaderProps> = ({",
      "src/components/SoundUploader.tsx:export default SoundUploader;",
      "src/components/SpecializedErrorBoundaries.tsx:export class AnalyticsErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class MediaErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class AIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class APIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class DataErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class FormErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/Statistics.tsx:export function Statistics({ userId }: StatisticsProps) {",
      "src/components/Statistics.tsx:export default Statistics;",
      "src/components/StreakCounter.tsx:export const StreakCounter: React.FC<StreakCounterProps> = ({",
      "src/components/StreakCounter.tsx:export default StreakCounter;",
      "src/components/StrugglingSamWrapper.tsx:export const StrugglingSamWrapper: React.FC<StrugglingSamWrapperProps> = ({",
      "src/components/StrugglingSamWrapper.tsx:export const usePersonaBasedFeatures = (_user?: any) => {",
      "src/components/StrugglingSamWrapper.tsx:export default StrugglingSamWrapper;",
      "src/components/SubscriptionModal.tsx:export default SubscriptionModal;",
      "src/components/SubscriptionStatus.tsx:export default SubscriptionStatus;",
      "src/components/SyncStatus.tsx:export default SyncStatus;",
      "src/components/TabProtectionSettings.tsx:export const TabProtectionSettings: React.FC<TabProtectionSettingsProps> = ({",
      "src/components/TabProtectionSettings.tsx:export default TabProtectionSettings;",
      "src/components/TabProtectionWarning.tsx:export const TabProtectionWarning: React.FC<TabProtectionWarningProps> = ({",
      "src/components/TabProtectionWarning.tsx:export default TabProtectionWarning;",
      "src/components/ThemeCreator.tsx:export default ThemeCreator;",
      "src/components/ThemeCustomizationStudio.tsx:  const [exportFormat, setExportFormat] = useState<'json' | 'css' | 'scss'>('json');",
      "src/components/ThemeCustomizationStudio.tsx:  const exportTheme = useCallback(async () => {",
      "src/components/ThemeCustomizationStudio.tsx:      let exportData: string;",
      "src/components/ThemeCustomizationStudio.tsx:      switch (exportFormat) {",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = JSON.stringify(",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateSCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = JSON.stringify(customTheme, null, 2);",
      "src/components/ThemeCustomizationStudio.tsx:      const blob = new Blob([exportData], { type: 'application/json' });",
      "src/components/ThemeCustomizationStudio.tsx:      link.download = `custom-theme-${theme}.${exportFormat}`;",
      "src/components/ThemeCustomizationStudio.tsx:  }, [customTheme, animationEffects, theme, exportFormat]);",
      "src/components/ThemeCustomizationStudio.tsx:              value={exportFormat}",
      "src/components/ThemeCustomizationStudio.tsx:              className=\"export-format-select\"",
      "src/components/ThemeCustomizationStudio.tsx:        .export-format-select,",
      "src/components/ThemeCustomizationStudio.tsx:        .export-button:disabled {",
      "src/components/ThemeCustomizationStudio.tsx:export default ThemeCustomizationStudio;",
      "src/components/ThemeDemo.tsx:export default ThemeDemo;",
      "src/components/ThemeGallery.tsx:export default ThemeGallery;",
      "src/components/ThemeManager.tsx:      exportDate: new Date().toISOString(),",
      "src/components/ThemeManager.tsx:    const exportFileDefaultName = 'relife-themes.json';",
      "src/components/ThemeManager.tsx:    linkElement.setAttribute('download', exportFileDefaultName);",
      "src/components/ThemeManager.tsx:export default ThemeManager;",
      "src/components/ThemeSelector.tsx:export const ThemeSelector: React.FC = () => {",
      "src/components/ThemeSelector.tsx:export default ThemeSelector;",
      "src/components/ThemeStudio.tsx:export default ThemeStudio;",
      "src/components/TranslationDashboard.tsx:export const TranslationDashboard: React.FC = () => {",
      "src/components/TranslationDashboard.tsx:export default TranslationDashboard;",
      "src/components/UpgradePrompt.tsx:export default UpgradePrompt;",
      "src/components/UserProfile.tsx:export default function UserProfile({",
      "src/components/VirtualScroll.tsx:export function VirtualScroll<T>({",
      "src/components/VirtualScroll.tsx:export const VirtualAlarmHistory: React.FC<{",
      "src/components/VirtualScroll.tsx:export const VirtualSleepHistory: React.FC<{",
      "src/components/VirtualScroll.tsx:export default VirtualScroll;",
      "src/components/VisualAlarmDisplay.tsx:export const VisualAlarmDisplay: React.FC<VisualAlarmDisplayProps> = ({",
      "src/components/VisualAlarmDisplay.tsx:export default VisualAlarmDisplay;",
      "src/components/VoiceAnalyticsDashboard.tsx:  const exportAnalytics = () => {",
      "src/components/VoiceAnalyticsDashboard.tsx:                onClick={exportAnalytics}",
      "src/components/VoiceAnalyticsDashboard.tsx:export default VoiceAnalyticsDashboard;",
      "src/components/VoiceCloning.tsx:export default VoiceCloning;",
      "src/components/VoicePersonalitySelector.tsx:export const VoicePersonalitySelector: React.FC<VoicePersonalitySelectorProps> = ({",
      "src/components/VoicePersonalitySelector.tsx:export default VoicePersonalitySelector;",
      "src/components/VoiceSelector.tsx:export default VoiceSelector;",
      "src/components/VoiceSettings.tsx:export default VoiceSettings;",
      "src/components/WakeUpFeedbackModal.tsx:export default WakeUpFeedbackModal;",
      "src/components/animations/AnimationLibrary.tsx:export const easingCurves = {",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const PulseLoader: React.FC<{ size?: string; className?: string }> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const SkeletonLoader: React.FC<{",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedCard: React.FC<AnimatedCardProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const ScrollReveal: React.FC<ScrollRevealProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedToggle: React.FC<AnimatedToggleProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedNotification: React.FC<NotificationProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerContainer: React.FC<StaggerContainerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerItem: React.FC<{",
      "src/components/animations/AnimationLibrary.tsx:export default {",
      "src/components/animations/LoadingStates.tsx:export const AlarmCardSkeleton: React.FC<{ count?: number }> = ({ count = 3 }) => {",
      "src/components/animations/LoadingStates.tsx:export const AlarmRingingLoader: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const VoiceListeningIndicator: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const VoiceProcessingLoader: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const DashboardSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const SettingsFormSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const AnalyticsChartSkeleton: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const PageLoader: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export default {",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedInput: React.FC<AnimatedInputProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedSelect: React.FC<AnimatedSelectProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedCheckbox: React.FC<AnimatedCheckboxProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedProgress: React.FC<AnimatedProgressProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export default {",
      "src/components/premium/BillingHistory.tsx:export default BillingHistory;",
      "src/components/premium/EnhancedUpgradePrompt.tsx:export default EnhancedUpgradePrompt;",
      "src/components/premium/FeatureGate.tsx:export default FeatureGate;",
      "src/components/premium/FeatureUtils.tsx:export function FeatureBadge({",
      "src/components/premium/FeatureUtils.tsx:export function TierComparison({",
      "src/components/premium/FeatureUtils.tsx:export function UsageProgress({",
      "src/components/premium/FeatureUtils.tsx:export function FeatureHighlight({",
      "src/components/premium/FeatureUtils.tsx:export function TeamFeatureIndicator({",
      "src/components/premium/FeatureUtils.tsx:export default {",
      "src/components/premium/PaymentFlow.tsx:export function PaymentFlow({",
      "src/components/premium/PaymentFlow.tsx:export default PaymentFlow;",
      "src/components/premium/PaymentMethodManager.tsx:export function PaymentMethodManager({",
      "src/components/premium/PaymentMethodManager.tsx:export default PaymentMethodManager;",
      "src/components/premium/PremiumAlarmFeatures.tsx:export function PremiumAlarmFeatures({",
      "src/components/premium/PremiumAlarmFeatures.tsx:export default PremiumAlarmFeatures;",
      "src/components/premium/PremiumAnalytics.tsx:  const [exportFormat, setExportFormat] = useState('pdf');",
      "src/components/premium/PremiumAnalytics.tsx:            <Select value={exportFormat} onValueChange={setExportFormat}>",
      "src/components/premium/PremiumAnalytics.tsx:export function PremiumAnalytics({ className = '' }: PremiumAnalyticsProps) {",
      "src/components/premium/PremiumAnalytics.tsx:export default PremiumAnalytics;",
      "src/components/premium/PremiumFeaturePreview.tsx:export default PremiumFeaturePreview;",
      "src/components/premium/PremiumTeamFeatures.tsx:export function PremiumTeamFeatures({ className = '' }: PremiumTeamFeaturesProps) {",
      "src/components/premium/PremiumTeamFeatures.tsx:export default PremiumTeamFeatures;",
      "src/components/premium/PremiumVoiceFeatures.tsx:export function PremiumVoiceFeatures({ className = '' }: PremiumVoiceFeaturesProps) {",
      "src/components/premium/PremiumVoiceFeatures.tsx:export default PremiumVoiceFeatures;",
      "src/components/premium/PricingTable.tsx:export function PricingTable({",
      "src/components/premium/PricingTable.tsx:export default PricingTable;",
      "src/components/premium/PsychologyDrivenCTA.tsx:export default PsychologyDrivenCTA;",
      "src/components/premium/SubscriptionDashboard.tsx:export function SubscriptionDashboard({",
      "src/components/premium/SubscriptionDashboard.tsx:export default SubscriptionDashboard;",
      "src/components/premium/SubscriptionManagement.tsx:export function SubscriptionManagement({",
      "src/components/premium/SubscriptionManagement.tsx:export default SubscriptionManagement;",
      "src/components/premium/SubscriptionPage.tsx:export function SubscriptionPage({",
      "src/components/premium/SubscriptionPage.tsx:export default SubscriptionPage;",
      "src/components/premium/enhanced-index.ts:export { default as EnhancedUpgradePrompt } from './EnhancedUpgradePrompt';",
      "src/components/premium/enhanced-index.ts:export { default as PremiumFeaturePreview } from './PremiumFeaturePreview';",
      "src/components/premium/enhanced-index.ts:export { default as PsychologyDrivenCTA } from './PsychologyDrivenCTA';",
      "src/components/premium/enhanced-index.ts:export { default as PricingTable } from './PricingTable';",
      "src/components/premium/enhanced-index.ts:export { default as FeatureGate } from './FeatureGate';",
      "src/components/premium/enhanced-index.ts:export { default as SubscriptionDashboard } from './SubscriptionDashboard';",
      "src/components/premium/enhanced-index.ts:export { default as PaymentFlow } from './PaymentFlow';",
      "src/components/premium/index.ts:// Centralized exports for all premium subscription components",
      "src/components/premium/index.ts:export { default as FeatureGate } from './FeatureGate';",
      "src/components/premium/index.ts:export { default as FeatureUtils } from './FeatureUtils';",
      "src/components/premium/index.ts:export { default as PricingTable } from './PricingTable';",
      "src/components/premium/index.ts:export { default as PaymentMethodManager } from './PaymentMethodManager';",
      "src/components/premium/index.ts:export { default as SubscriptionDashboard } from './SubscriptionDashboard';",
      "src/components/premium/index.ts:export { default as BillingHistory } from './BillingHistory';",
      "src/components/premium/index.ts:export { default as PaymentFlow } from './PaymentFlow';",
      "src/components/premium/index.ts:export { default as SubscriptionManagement } from './SubscriptionManagement';",
      "src/components/premium/index.ts:export { default as SubscriptionPage } from './SubscriptionPage';",
      "src/components/ui/aspect-ratio.tsx:export { AspectRatio };",
      "src/components/ui/avatar.tsx:export { Avatar, AvatarImage, AvatarFallback };",
      "src/components/ui/badge.tsx:export { Badge, badgeVariants };",
      "src/components/ui/button.tsx:export { Button, buttonVariants };",
      "src/components/ui/calendar.tsx:export { Calendar };",
      "src/components/ui/chart.tsx:export type ChartConfig = {",
      "src/components/ui/collapsible.tsx:export { Collapsible, CollapsibleTrigger, CollapsibleContent };",
      "src/components/ui/hover-card.tsx:export { HoverCard, HoverCardTrigger, HoverCardContent };",
      "src/components/ui/input-otp.tsx:export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };",
      "src/components/ui/label.tsx:export { Label };",
      "src/components/ui/radio-group.tsx:export { RadioGroup, RadioGroupItem };",
      "src/components/ui/resizable.tsx:export { ResizablePanelGroup, ResizablePanel, ResizableHandle };",
      "src/components/ui/scroll-area.tsx:export { ScrollArea, ScrollBar };",
      "src/components/ui/separator.tsx:export { Separator };",
      "src/components/ui/sonner.tsx:export { Toaster };",
      "src/components/ui/tabs.tsx:export { Tabs, TabsList, TabsTrigger, TabsContent };",
      "src/components/ui/textarea.tsx:export { Textarea };",
      "src/components/ui/toggle.tsx:export { Toggle, toggleVariants };",
      "src/components/user-testing/ABTestWrapper.tsx:export const ABTestContext = React.createContext<ABTestContextType>({",
      "src/components/user-testing/ABTestWrapper.tsx:export function ABTestWrapper({",
      "src/components/user-testing/ABTestWrapper.tsx:export default ABTestWrapper;",
      "src/components/user-testing/BetaTestingProgram.tsx:export function BetaTestingProgram() {",
      "src/components/user-testing/BetaTestingProgram.tsx:export default BetaTestingProgram;",
      "src/components/user-testing/BugReportModal.tsx:export function BugReportModal({",
      "src/components/user-testing/BugReportModal.tsx:export default BugReportModal;",
      "src/components/user-testing/FeedbackModal.tsx:export function FeedbackModal({",
      "src/components/user-testing/FeedbackModal.tsx:export default FeedbackModal;",
      "src/components/user-testing/FeedbackWidget.tsx:export function FeedbackWidget({",
      "src/components/user-testing/FeedbackWidget.tsx:export default FeedbackWidget;",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export function RedesignedFeedbackModal({",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export default RedesignedFeedbackModal;",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:export function RedesignedFeedbackWidget({",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:export default RedesignedFeedbackWidget;",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:export function UsabilityAnalyticsDashboard() {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:export default UsabilityAnalyticsDashboard;",
      "src/components/user-testing/index.ts:export { default as FeedbackModal } from './FeedbackModal';",
      "src/components/user-testing/index.ts:export { default as BugReportModal } from './BugReportModal';",
      "src/components/user-testing/index.ts:export { default as FeedbackWidget } from './FeedbackWidget';",
      "src/components/user-testing/index.ts:export { default as UsabilityAnalyticsDashboard } from './UsabilityAnalyticsDashboard';",
      "src/components/user-testing/index.ts:export { default as UserTestingService } from '../../services/user-testing';",
      "src/config/convertkit-config.ts:export interface PersonaConvertKitConfig {",
      "src/config/convertkit-config.ts:export interface PersonaAutomationRule {",
      "src/config/convertkit-config.ts:export interface ConvertKitFormTemplate {",
      "src/config/convertkit-config.ts:export interface ConvertKitSequenceTemplate {",
      "src/config/convertkit-config.ts:export interface SequenceEmailTemplate {",
      "src/config/convertkit-config.ts:export const PERSONA_CONVERTKIT_CONFIG: Record<PersonaType, PersonaConvertKitConfig> = {",
      "src/config/convertkit-config.ts:export const CONVERTKIT_FORM_TEMPLATES: Record<PersonaType, ConvertKitFormTemplate> = {",
      "src/config/convertkit-config.ts:export default {",
      "src/config/convertkit-generated.ts:export interface GeneratedConvertKitConfig {",
      "src/config/convertkit-generated.ts:export const CONVERTKIT_IDS: GeneratedConvertKitConfig = {",
      "src/config/convertkit-generated.ts:export default CONVERTKIT_IDS;",
      "src/config/environment.ts:export type Environment = 'development' | 'staging' | 'production';",
      "src/config/environment.ts:export interface EnvironmentConfig {",
      "src/config/environment.ts:export function createEnvironmentConfig(): EnvironmentConfig {",
      "src/config/environment.ts:export const config = createEnvironmentConfig();",
      "src/config/environment.ts:export function validateEnvironmentConfig(): {",
      "src/config/environment.ts:export function getPerformanceThresholds() {",
      "src/config/environment.ts:export function isFeatureEnabled(",
      "src/config/environment.ts:export function getApiUrl(path: string): string {",
      "src/config/environment.ts:export function getCdnUrl(asset: string): string {",
      "src/config/environment.ts:export default config;",
      "src/config/i18n.ts:export type SupportedLanguage = keyof typeof SUPPORTED_LANGUAGES;",
      "src/config/i18n.ts:export const getCurrentLanguage = (): SupportedLanguage => {",
      "src/config/i18n.ts:export const getLanguageInfo = (lang?: SupportedLanguage) => {",
      "src/config/i18n.ts:export const isRTL = (lang?: SupportedLanguage): boolean => {",
      "src/config/i18n.ts:export const changeLanguage = async (lang: SupportedLanguage): Promise<void> => {",
      "src/config/i18n.ts:export const formatMessage = (",
      "src/config/i18n.ts:export const formatRelativeTime = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatTime = (time: string, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatDate = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatShortDate = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatCurrency = (amount: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatNumber = (num: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatPercentage = (value: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatList = (items: string[], lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatDuration = (seconds: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const validateTranslationKey = (key: string, namespace?: string): boolean => {",
      "src/config/i18n.ts:export const getMissingTranslationKeys = (): string[] => {",
      "src/config/i18n.ts:export const getPluralizationRules = (lang?: SupportedLanguage): Intl.PluralRules => {",
      "src/config/i18n.ts:export const smartPlural = (",
      "src/config/i18n.ts:export default initI18n;",
      "src/config/initializeApp.ts:export const initializeApp = async (): Promise<void> => {",
      "src/config/stripe.ts:export interface StripeConfig {",
      "src/config/stripe.ts:export const subscriptionPlans = {",
      "src/config/stripe.ts:export function getStripePublishableKey(): string {",
      "src/config/stripe.ts:export function isStripeEnabled(): boolean {",
      "src/config/stripe.ts:export function getPlanByTier(tier: string) {",
      "src/config/stripe.ts:export function getAllPlans() {",
      "src/config/stripe.ts:export function validateStripeConfig(): { isValid: boolean; errors: string[] } {",
      "src/config/stripe.ts:export default stripeConfig;",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/config/themes.ts:export const REGIONAL_THEMES: Record<string, CulturalTheme> = {",
      "src/config/themes.ts:export const getRegionalTheme = (language: SupportedLanguage): CulturalTheme => {",
      "src/config/themes.ts:export const getAllThemes = (): CulturalTheme[] => {",
      "src/config/themes.ts:export const applyTheme = (theme: CulturalTheme): void => {",
      "src/config/themes.ts:export const getThemeCSS = (theme: CulturalTheme): string => {",
      "src/constants/initialDomainState.ts:export const INITIAL_DOMAIN_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export const DEFAULT_PERSONALIZATION: PersonalizationSettings = {",
      "src/constants/initialState.ts:export const INITIAL_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export function isValidAppState(obj: any): obj is AppState {",
      "src/constants/initialState.ts:export function createFreshAppState(): AppState {",
      "src/contexts/FeatureAccessContext.tsx:export function FeatureAccessProvider({",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccessContext(): FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:export function withFeatureAccess<P extends object>(",
      "src/contexts/FeatureAccessContext.tsx:export function ConditionalFeature({",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccess(feature: string) {",
      "src/contexts/FeatureAccessContext.tsx:export default FeatureAccessContext;",
      "src/contexts/LanguageContext.tsx:export const useLanguage = (): LanguageContextType => {",
      "src/contexts/LanguageContext.tsx:export const LanguageProvider: React.FC<LanguageProviderProps> = ({",
      "src/contexts/LanguageContext.tsx:export const useTranslationNamespace = (namespace: string) => {",
      "src/contexts/LanguageContext.tsx:export const useLanguageAwareNavigation = () => {",
      "src/contexts/LanguageContext.tsx:export { LanguageContext };",
      "src/contexts/LanguageContext.tsx:export default LanguageProvider;",
      "src/contexts/StrugglingsamContext.tsx:export const StrugglingSamProvider: React.FC<{",
      "src/contexts/StrugglingsamContext.tsx:export const useStrugglingSam = () => {",
      "src/contexts/StrugglingsamContext.tsx:export default StrugglingSamContext;",
      "src/data/emotional-message-templates.ts:export interface MessageTemplate {",
      "src/data/emotional-message-templates.ts:export function getEmotionalMessageTemplate(",
      "src/data/emotional-message-templates.ts:export function personalizeMessage(",
      "src/hooks/__tests__/integration/cross-hook.integration.test.tsx:        export_data: {",
      "src/hooks/__tests__/integration/cross-hook.integration.test.tsx:        features: ['advanced_alarms', 'premium_themes', 'export_data'],",
      "src/hooks/__tests__/integration/useFeatureGate.integration.test.tsx:          export_data: {",
      "src/hooks/__tests__/integration/useFeatureGate.integration.test.tsx:      const { result } = renderHook(() => useFeatureGate('export_data'), {",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    it.todo('should export alarms successfully');",
      "src/hooks/__tests__/useTheme.test.tsx:      exportThemes: jest.fn().mockResolvedValue('{}'),",
      "src/hooks/__tests__/useTheme.test.tsx:    it('should export themes', async () => {",
      "src/hooks/__tests__/useTheme.test.tsx:      let exportData;",
      "src/hooks/__tests__/useTheme.test.tsx:        exportData = await result.current.exportThemes();",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/useABTesting.tsx:export type FeatureKey = keyof typeof STRUGGLING_SAM_FEATURES.FULL_OPTIMIZATION;",
      "src/hooks/useABTesting.tsx:export const useABTestComponent = (featureKey: FeatureKey, userId?: string) => {",
      "src/hooks/useABTesting.tsx:export default useABTesting;",
      "src/hooks/useAccessibility.ts:export const useScreenReader = () => {",
      "src/hooks/useAccessibility.ts:export const useFocusManagement = () => {",
      "src/hooks/useAccessibility.ts:export const useHighContrast = () => {",
      "src/hooks/useAccessibility.ts:export const useKeyboardNavigation = () => {",
      "src/hooks/useAccessibility.ts:export default {",
      "src/hooks/useAccessibilityPreferences.ts:export function useReducedMotion(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useHighContrast(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useDarkMode(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useScreenReader(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useTouchDevice(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useFontScale(): number {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibleAnimation() {",
      "src/hooks/useAccessibilityPreferences.ts:export default useAccessibilityPreferences;",
      "src/hooks/useAdvancedAlarms.ts:export function useAdvancedAlarms() {",
      "src/hooks/useAlarmRingingAnnouncements.ts:export function useAlarmRingingAnnouncements() {",
      "src/hooks/useAnalytics.ts:export const useAnalytics = (): UseAnalyticsReturn => {",
      "src/hooks/useAnalytics.ts:export const useAlarmAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const useEngagementAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const usePerformanceAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const usePageTracking = (pageName: string) => {",
      "src/hooks/useAnimations.ts:export const animationPresets = {",
      "src/hooks/useAnimations.ts:export const useEntranceAnimation = (",
      "src/hooks/useAnimations.ts:export const useHoverAnimation = (_config: {",
      "src/hooks/useAnimations.ts:export const useStaggerChildren = (delayBetweenChildren: number = 0.1) => {",
      "src/hooks/useAnimations.ts:export const useScrollAnimation = (",
      "src/hooks/useAnimations.ts:export const useParallaxScroll = (offset: number = 50) => {",
      "src/hooks/useAnimations.ts:export const useMouseTracking = (strength: number = 1, damping: number = 0.1) => {",
      "src/hooks/useAnimations.ts:export const useTypingAnimation = (",
      "src/hooks/useAnimations.ts:export const useCounterAnimation = (",
      "src/hooks/useAnimations.ts:export const useGestureAnimation = () => {",
      "src/hooks/useAnimations.ts:export const useNotificationAnimation = () => {",
      "src/hooks/useAnimations.ts:export const useLoadingAnimation = (isLoading: boolean) => {",
      "src/hooks/useAnimations.ts:export const useAnimationSequence = (",
      "src/hooks/useAnimations.ts:export default {",
      "src/hooks/useAudioLazyLoading.ts:export interface AudioLoadingState {",
      "src/hooks/useAudioLazyLoading.ts:export function useAudioLazyLoading(",
      "src/hooks/useAudioLazyLoading.ts:export function usePlaylistLazyLoading(",
      "src/hooks/useAudioLazyLoading.ts:export function useAlarmSoundPreloading(alarms: any[]) {",
      "src/hooks/useAudioLazyLoading.ts:export function useLazyLoadingStats() {",
      "src/hooks/useAudioLazyLoading.ts:export function useLazyLoadingControl() {",
      "src/hooks/useAudioLazyLoading.ts:export function useSmartPreloading(",
      "src/hooks/useAuth.ts:export default useAuth;",
      "src/hooks/useCapacitor.ts:export function useCapacitor() {",
      "src/hooks/useCapacitor.ts:export function useAlarmNotifications() {",
      "src/hooks/useCapacitor.ts:export function useHapticFeedback() {",
      "src/hooks/useCapacitor.ts:export function useAppState() {",
      "src/hooks/useCapacitor.ts:export function useNetworkStatus() {",
      "src/hooks/useCapacitor.ts:export function useWakeLock() {",
      "src/hooks/useCapacitor.ts:export function useNotificationEvents() {",
      "src/hooks/useCapacitor.ts:export function useBackButton() {",
      "src/hooks/useCapacitor.ts:export function useCapacitorAlarmApp() {",
      "src/hooks/useCriticalPreloading.ts:export interface CriticalPreloadingState {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalPreloading(alarms: Alarm[]): CriticalPreloadingState {",
      "src/hooks/useCriticalPreloading.ts:export function useAlarmReadiness(alarmId: string, enabled: boolean = true) {",
      "src/hooks/useCriticalPreloading.ts:export function useEmergencyPreloading() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadStrategy() {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalAssetStatus() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadPerformance() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadDebugging() {",
      "src/hooks/useCulturalTheme.tsx:export const useCulturalTheme = (",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:export const CulturalThemeProvider: React.FC<CulturalThemeProviderProps> = ({",
      "src/hooks/useCulturalTheme.tsx:export const useThemeContext = (): CulturalThemeContextValue => {",
      "src/hooks/useCulturalTheme.tsx:export const withCulturalTheme = <P extends object>(",
      "src/hooks/useDeviceCapabilities.tsx:export interface DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function useDeviceCapabilities(): DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function usePerformanceOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useMemoryOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useNetworkOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useAnimationOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function DeviceCapabilityProvider({ children }: { children: ReactNode }) {",
      "src/hooks/useDeviceCapabilities.tsx:export function useDeviceCapabilityContext(): DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function usePerformanceMonitoring() {",
      "src/hooks/useDynamicFocus.ts:export function useDynamicFocus(options: DynamicFocusOptions = {}) {",
      "src/hooks/useDynamicFocus.ts:export default useDynamicFocus;",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotifications({",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotificationResponse(",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotificationSettings(userId: string) {",
      "src/hooks/useEnhancedCaching.ts:export interface CacheState {",
      "src/hooks/useEnhancedCaching.ts:export function useEnhancedCaching(): {",
      "src/hooks/useEnhancedCaching.ts:export function useCachePerformance() {",
      "src/hooks/useEnhancedCaching.ts:export function useCacheWarming() {",
      "src/hooks/useEnhancedCaching.ts:export function useCachePolicy() {",
      "src/hooks/useEnhancedCaching.ts:export function useAutoOptimization(enabled: boolean = true) {",
      "src/hooks/useEnhancedCaching.ts:export function useCacheDebugging() {",
      "src/hooks/useEnhancedServiceWorker.ts:export interface ServiceWorkerState {",
      "src/hooks/useEnhancedServiceWorker.ts:export function useEnhancedServiceWorker() {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useEnhancedSmartAlarms.ts:export const useEnhancedSmartAlarms = (): UseEnhancedSmartAlarmsResult => {",
      "src/hooks/useEnhancedSmartAlarms.ts:export default useEnhancedSmartAlarms;",
      "src/hooks/useErrorLoadingAnnouncements.ts:export function useErrorLoadingAnnouncements() {",
      "src/hooks/useFeatureGate.ts:export default useFeatureGate;",
      "src/hooks/useFocusRestoration.ts:export function useFocusRestoration(options: FocusRestorationOptions = {}) {",
      "src/hooks/useFocusRestoration.ts:export default useFocusRestoration;",
      "src/hooks/useFocusTrap.ts:export function useFocusTrap({",
      "src/hooks/useFocusTrap.ts:export default useFocusTrap;",
      "src/hooks/useFormAnnouncements.ts:export interface FormFieldChange {",
      "src/hooks/useFormAnnouncements.ts:export default useFormAnnouncements;",
      "src/hooks/useGamingAnnouncements.ts:export function useGamingAnnouncements(enabled = true) {",
      "src/hooks/useGamingAnnouncements.ts:export default useGamingAnnouncements;",
      "src/hooks/useI18n.ts:export const useI18n = (namespace?: string) => {",
      "src/hooks/useI18n.ts:export const useAlarmI18n = () => {",
      "src/hooks/useI18n.ts:export const useGamingI18n = () => {",
      "src/hooks/useI18n.ts:export default useI18n;",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardNavigation(): KeyboardNavigationHookReturn {",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardNavigationEvents() {",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardFocusTrap(",
      "src/hooks/useKeyboardNavigation.ts:export default useKeyboardNavigation;",
      "src/hooks/useMediaContentAnnouncements.ts:export function useMediaContentAnnouncements() {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceMetrics {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceOptimizations {",
      "src/hooks/useMobilePerformance.ts:export const useMobilePerformance = () => {",
      "src/hooks/useMobilePerformance.ts:export const useLazyLoading = () => {",
      "src/hooks/useMobilePerformance.ts:export const useBatteryOptimization = () => {",
      "src/hooks/useMobilePerformance.ts:export const useNetworkAwareLoading = () => {",
      "src/hooks/useMobilePerformance.ts:export const usePerformanceAwareAnimations = () => {",
      "src/hooks/useMobileTouch.ts:export function useEnhancedButton(hapticType: 'light' | 'medium' | 'heavy' = 'light') {",
      "src/hooks/useMobileTouch.ts:export function useHaptic() {",
      "src/hooks/useMobileTouch.ts:export function usePullToRefresh(onRefresh: () => Promise<void>, enabled = true) {",
      "src/hooks/useMobileTouch.ts:export function useSwipeNavigation(",
      "src/hooks/useMobileTouch.ts:export function useMobileBehavior() {",
      "src/hooks/useMobileTouch.ts:export function useLongPress(onLongPress: () => void, delay = 500) {",
      "src/hooks/useNavigationAnnouncements.ts:export function useNavigationAnnouncements() {",
      "src/hooks/usePWA.ts:export function useInstallPrompt() {",
      "src/hooks/usePWA.ts:export function useServiceWorkerUpdate() {",
      "src/hooks/usePWA.ts:export function usePushNotifications() {",
      "src/hooks/usePWA.ts:export function useBackgroundSync() {",
      "src/hooks/usePWA.ts:export function useAlarmPWA() {",
      "src/hooks/useProfileAnnouncements.ts:export default useProfileAnnouncements;",
      "src/hooks/usePushNotifications.ts:export interface PushNotificationStatus {",
      "src/hooks/usePushNotifications.ts:export interface UsePushNotificationsReturn {",
      "src/hooks/usePushNotifications.ts:export const usePushNotifications = (): UsePushNotificationsReturn => {",
      "src/hooks/usePushNotifications.ts:export default usePushNotifications;",
      "src/hooks/useRTL.ts:export const useRTLSpacing = () => {",
      "src/hooks/useRTL.ts:export const useRTLAnimation = () => {",
      "src/hooks/useRealtime.tsx:export const RealtimeProvider: React.FC<RealtimeProviderProps> = ({",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeOptions {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export const useRealtime = (options: UseRealtimeOptions = {}): UseRealtimeReturn => {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseUserRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAIRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UsePushNotificationReturn {",
      "src/hooks/useRealtime.tsx:export const useRealtimeMessage = <T = any,>(",
      "src/hooks/useRealtime.tsx:export const useConnectionQuality = (): {",
      "src/hooks/useRealtime.tsx:export const useRealtimeMetrics = (",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useScreenReaderAnnouncements(options: UseScreenReaderOptions = {}) {",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useFocusAnnouncements(componentName: string, enabled = true) {",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useStateChangeAnnouncements<T>(",
      "src/hooks/useScreenReaderAnnouncements.ts:export default useScreenReaderAnnouncements;",
      "src/hooks/useSettingsAnnouncements.ts:export interface SettingsAnnouncement {",
      "src/hooks/useSettingsAnnouncements.ts:export default useSettingsAnnouncements;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:export function useSmartFeaturesAnnouncements() {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectHandlers {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectControls {",
      "src/hooks/useSoundEffects.tsx:export function useSoundEffects(): SoundEffectControls & SoundEffectHandlers {",
      "src/hooks/useSoundEffects.tsx:export function useNotificationSounds() {",
      "src/hooks/useSoundEffects.tsx:export function useAlarmSounds() {",
      "src/hooks/useSoundEffects.tsx:export default useSoundEffects;",
      "src/hooks/useSubscription.ts:export default useSubscription;",
      "src/hooks/useTabProtectionAnnouncements.ts:export const useTabProtectionAnnouncements = ({",
      "src/hooks/useTabProtectionAnnouncements.ts:export default useTabProtectionAnnouncements;",
      "src/hooks/useTabProtectionSettings.ts:export const useTabProtectionSettings = (): UseTabProtectionSettingsReturn => {",
      "src/hooks/useTabProtectionSettings.ts:  const exportSettings = useCallback(() => {",
      "src/hooks/useTabProtectionSettings.ts:export default useTabProtectionSettings;",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:export function useTheme(): ThemeContextValue {",
      "src/hooks/useTheme.tsx:  const exportThemes = useCallback(async (): Promise<string> => {",
      "src/hooks/useTheme.tsx:    const exportData = {",
      "src/hooks/useTheme.tsx:      exportedAt: new Date().toISOString(),",
      "src/hooks/useTheme.tsx:    return JSON.stringify(exportData, null, 2);",
      "src/hooks/useTheme.tsx:export default useTheme;",
      "src/lib/utils.ts:export function cn(...inputs: ClassValue[]) {",
      "src/reducers/alarmReducer.ts:export const alarmReducer = (",
      "src/reducers/rootReducer.ts:export default rootReducer;",
      "src/services/CloudSyncService.ts:export interface CloudSyncPreferences {",
      "src/services/CloudSyncService.ts:export interface CloudSyncOptions {",
      "src/services/CloudSyncService.ts:export interface CloudSyncStatus {",
      "src/services/CloudSyncService.ts:export { CloudSyncStatus };",
      "src/services/CloudSyncService.ts:export default CloudSyncService;",
      "src/services/__tests__/error-handler.test.ts:  describe('_error export and debugging', () => {",
      "src/services/__tests__/error-handler.test.ts:    test('exports _error data for debugging', () => {",
      "src/services/__tests__/error-handler.test.ts:      const exportData = ErrorHandler.exportErrorData();",
      "src/services/__tests__/error-handler.test.ts:      expect(exportData).toMatch(/^data:application\\/json/);",
      "src/services/__tests__/error-handler.test.ts:      const jsonData = JSON.parse(decodeURIComponent(exportData.split(',')[1]));",
      "src/services/__tests__/error-handler.test.ts:      const exportData = ErrorHandler.exportErrorData();",
      "src/services/__tests__/error-handler.test.ts:      const jsonData = JSON.parse(decodeURIComponent(exportData.split(',')[1]));",
      "src/services/__tests__/performance-monitor.test.ts:    test('exports performance data for analysis', () => {",
      "src/services/__tests__/performance-monitor.test.ts:      const exportData = monitor.exportPerformanceData();",
      "src/services/__tests__/performance-monitor.test.ts:      expect(exportData).toMatch(/^data:application\\/json;charset=utf-8,/);",
      "src/services/__tests__/performance-monitor.test.ts:      const jsonData = JSON.parse(decodeURIComponent(exportData.split(',')[1]));",
      "src/services/__tests__/theme-persistence.test.ts:    it('should export theme data as JSON string', async () => {",
      "src/services/__tests__/theme-persistence.test.ts:      const exported = await persistenceService.exportThemes();",
      "src/services/accessibility-preferences.ts:export interface AccessibilityPreferences {",
      "src/services/accessibility-preferences.ts:export interface AccessibilityState extends AccessibilityPreferences {",
      "src/services/accessibility-preferences.ts:export default AccessibilityPreferencesService;",
      "src/services/additional-app-specific-test-scenarios.ts:export const onboardingFlowTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const emotionalIntelligenceTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const privacySecurityTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:      'You can export all your Relife data at any time. This includes alarm history, sleep patterns, voice command logs, and preferences. Would you like to download your data now?',",
      "src/services/additional-app-specific-test-scenarios.ts:export const feedbackTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const pwaTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const tabProtectionTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificTestCategories: Record<string, TestCategory> = {",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificCategoryConfig = {",
      "src/services/additional-app-specific-test-scenarios.ts:export default {",
      "src/services/advanced-alarm-scheduler.ts:export class AdvancedAlarmScheduler {",
      "src/services/advanced-analytics.ts:export interface AnalyticsInsight {",
      "src/services/advanced-analytics.ts:export interface UserAnalytics {",
      "src/services/advanced-analytics.ts:export interface TrendData {",
      "src/services/advanced-analytics.ts:export interface PeerComparison {",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/advanced-analytics.ts:export interface SeasonalPattern {",
      "src/services/advanced-analytics.ts:export interface OptimalWakeTime {",
      "src/services/advanced-analytics.ts:export interface EffectivenessForecast {",
      "src/services/advanced-analytics.ts:export interface SleepRecommendation {",
      "src/services/advanced-analytics.ts:export default AdvancedAnalyticsService;",
      "src/services/advanced-conditions-helper.ts:export const CUSTOM_CONDITION_TEMPLATES: Record<string, ConditionBasedAdjustment> = {",
      "src/services/advanced-conditions-helper.ts:export interface ConfigurationValidation {",
      "src/services/advanced-conditions-helper.ts:export interface PerformanceAnalysis {",
      "src/services/advanced-conditions-helper.ts:export class AdvancedConditionsHelper {",
      "src/services/advanced-conditions-helper.ts:export class QuickSetupScripts {",
      "src/services/ai-rewards.ts:export class AIRewardsService {",
      "src/services/ai-rewards.ts:export default AIRewardsService;",
      "src/services/alarm-access-control.ts:export class AlarmAccessControl {",
      "src/services/alarm-access-control.ts:export default AlarmAccessControl.getInstance();",
      "src/services/alarm-api-security.ts:export class AlarmAPISecurityService {",
      "src/services/alarm-api-security.ts:        exportedAt: data.metadata.exportedAt",
      "src/services/alarm-api-security.ts:      'GET /alarms/export': 'alarm_export',",
      "src/services/alarm-api-security.ts:export default AlarmAPISecurityService.getInstance();",
      "src/services/alarm-backup-redundancy.ts:export class AlarmBackupRedundancyService {",
      "src/services/alarm-backup-redundancy.ts:export default AlarmBackupRedundancyService.getInstance();",
      "src/services/alarm-battle-integration.ts:export class AlarmBattleIntegrationService {",
      "src/services/alarm-battle-integration.ts:export const alarmBattleIntegration = AlarmBattleIntegrationService.getInstance();",
      "src/services/alarm-enhanced.ts:export class EnhancedAlarmService {",
      "src/services/alarm-executor.ts:export class AlarmExecutor {",
      "src/services/alarm-integrity-monitor.ts:export class AlarmIntegrityMonitor {",
      "src/services/alarm-integrity-monitor.ts:export default AlarmIntegrityMonitor.getInstance();",
      "src/services/alarm-parser.ts:export class AlarmParser {",
      "src/services/alarm-rate-limiting.ts:export class AlarmRateLimitingService {",
      "src/services/alarm-rate-limiting.ts:export default AlarmRateLimitingService.getInstance();",
      "src/services/alarm-security-integration.ts:export class AlarmSecurityIntegrationService {",
      "src/services/alarm-security-integration.ts:export default AlarmSecurityIntegrationService.getInstance();",
      "src/services/alarm-stub.ts:export const AlarmService = {",
      "src/services/alarm.ts:export class AlarmService {",
      "src/services/alarm.ts:export const enhancedAlarmTracking = {",
      "src/services/analytics-config.ts:export interface AnalyticsEnvironmentConfig {",
      "src/services/analytics-config.ts:export interface InitializationStatus {",
      "src/services/analytics-config.ts:export default AnalyticsConfigService;",
      "src/services/analytics.ts:export interface AnalyticsConfig {",
      "src/services/analytics.ts:export interface UserProperties {",
      "src/services/analytics.ts:export interface EventProperties {",
      "src/services/analytics.ts:  exportData(): any {",
      "src/services/analytics.ts:      exportTime: new Date().toISOString(),",
      "src/services/analytics.ts:export function initializeAnalytics(",
      "src/services/analytics.ts:export function createAnalyticsConfig(environment?: string): AnalyticsConfig {",
      "src/services/analytics.ts:export const defaultAnalyticsConfigs = {",
      "src/services/analytics.ts:export default AnalyticsService;",
      "src/services/animation-manager.ts:export interface AnimationPreferences {",
      "src/services/animation-manager.ts:export interface AnimationMetrics {",
      "src/services/animation-manager.ts:export default AnimationManagerService;",
      "src/services/api-service.ts:export class ApiService {",
      "src/services/api-service.ts:export const apiService = new ApiService();",
      "src/services/api-service.ts:export default apiService;",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/app-analytics.ts:export default AppAnalyticsService;",
      "src/services/app-specific-test-scenarios.ts:export const nuclearModeTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const battleSystemTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const themeSystemTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:      'Custom theme \"Ocean Sunset\" created successfully! Features deep blue backgrounds with orange accent colors. Theme exported to library and ready for use.',",
      "src/services/app-specific-test-scenarios.ts:export const voiceAnalyticsTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const gamificationTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const sleepAnalyticsTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const offlineSyncTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const subscriptionTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const appSpecificTestCategories: Record<string, TestCategory> = {",
      "src/services/app-specific-test-scenarios.ts:export const appSpecificCategoryConfig = {",
      "src/services/app-specific-test-scenarios.ts:export default {",
      "src/services/audio-manager.ts:export interface AudioCacheEntry {",
      "src/services/audio-manager.ts:export interface AudioMetadata {",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/audio-manager.ts:export interface AudioPreloadConfig {",
      "src/services/audio-manager.ts:export class AudioManager {",
      "src/services/audio-manager.ts:export const audioManager = AudioManager.getInstance();",
      "src/services/base/BaseService.ts:export abstract class BaseService implements IBaseService {",
      "src/services/base/BaseService.ts:export function createServiceBuilder<T extends BaseService>(): ServiceBuilderImpl<T> {",
      "src/services/base/CacheManager.ts:export class MemoryCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class LocalStorageCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class IndexedDBCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class CacheManager implements ICacheManager {",
      "src/services/base/CacheManager.ts:export function getCacheManager(): CacheManager {",
      "src/services/base/ServiceContainer.ts:export class ServiceContainer implements IServiceContainer {",
      "src/services/base/ServiceContainer.ts:export function getServiceContainer(): ServiceContainer {",
      "src/services/base/ServiceContainer.ts:export function registerService<T extends BaseService>(",
      "src/services/base/ServiceContainer.ts:export function getService<T extends BaseService>(name: string): T {",
      "src/services/base/ServiceContainer.ts:export function resolveService<T extends BaseService>(name: string): Promise<T> {",
      "src/services/battle.ts:export class BattleService {",
      "src/services/battle.ts:export const battleService = BattleService.getInstance();",
      "src/services/capacitor-enhanced.ts:export interface AlarmNotification {",
      "src/services/capacitor-enhanced.ts:export interface DeviceFeatures {",
      "src/services/capacitor-enhanced.ts:export class CapacitorEnhancedService {",
      "src/services/capacitor-enhanced.ts:export const capacitorEnhanced = CapacitorEnhancedService.getInstance();",
      "src/services/capacitor.ts:export interface CapacitorInitResult {",
      "src/services/capacitor.ts:export const initializeCapacitor = async (): Promise<CapacitorInitResult> => {",
      "src/services/capacitor.ts:export const requestNotificationPermissions = async (): Promise<boolean> => {",
      "src/services/capacitor.ts:export const requestPushPermissions = async (): Promise<boolean> => {",
      "src/services/capacitor.ts:export const scheduleLocalNotification = async ({",
      "src/services/capacitor.ts:export const cancelLocalNotification = async (id: number): Promise<void> => {",
      "src/services/capacitor.ts:export const setupNotificationListeners = (): void => {",
      "src/services/capacitor.ts:export const vibrate = async (duration: number = 500): Promise<void> => {",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface ThemeContext {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/contextual-themes.ts:export interface ThemeCondition {",
      "src/services/contextual-themes.ts:export const contextualThemes = ContextualThemesService.getInstance();",
      "src/services/contextual-themes.ts:export default ContextualThemesService;",
      "src/services/convertkit-service.ts:export interface ConvertKitConfig {",
      "src/services/convertkit-service.ts:export interface ConvertKitSubscriber {",
      "src/services/convertkit-service.ts:export interface ConvertKitTag {",
      "src/services/convertkit-service.ts:export interface ConvertKitForm {",
      "src/services/convertkit-service.ts:export interface ConvertKitSequence {",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/services/convertkit-service.ts:export class ConvertKitService {",
      "src/services/convertkit-service.ts:export default ConvertKitService;",
      "src/services/critical-preloader.ts:export interface CriticalAsset {",
      "src/services/critical-preloader.ts:export interface PreloadStrategy {",
      "src/services/critical-preloader.ts:export interface PreloadStats {",
      "src/services/critical-preloader.ts:export class CriticalAssetPreloader {",
      "src/services/critical-preloader.ts:export const criticalPreloader = CriticalAssetPreloader.getInstance();",
      "src/services/custom-sound-manager.ts:export interface SoundUploadResult {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundValidationResult {",
      "src/services/custom-sound-manager.ts:export class CustomSoundManager {",
      "src/services/custom-test-scenarios.ts:export interface TestScenario {",
      "src/services/custom-test-scenarios.ts:export interface TestCategory {",
      "src/services/custom-test-scenarios.ts:export interface CustomCategoryConfig {",
      "src/services/custom-test-scenarios.ts:export const customCategoryConfig: CustomCategoryConfig = {",
      "src/services/custom-test-scenarios.ts:export const voiceFeaturesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const gamingBattlesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const smartSchedulingTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const premiumFeaturesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const sleepTrackingTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const customTestCategories: Record<string, TestCategory> = {",
      "src/services/custom-test-scenarios.ts:export interface UserContext {",
      "src/services/custom-test-scenarios.ts:export function generateDynamicTestData(context: UserContext): TestScenario[] {",
      "src/services/custom-test-scenarios.ts:export function getEnabledCustomCategories(): Record<string, TestCategory> {",
      "src/services/custom-test-scenarios.ts:export function filterTestsByFeatureAccess(",
      "src/services/custom-test-scenarios.ts:export function getAllCustomTests(isPremium: boolean = false): TestScenario[] {",
      "src/services/custom-test-scenarios.ts:export function validateTestScenario(test: TestScenario): boolean {",
      "src/services/custom-test-scenarios.ts:export function getCategoryStats(): Record<",
      "src/services/custom-test-scenarios.ts:export default {",
      "src/services/device-capabilities.ts:export interface DeviceCapabilities {",
      "src/services/device-capabilities.ts:export interface DevicePerformanceMetrics {",
      "src/services/device-capabilities.ts:export type DeviceTier = 'low-end' | 'mid-range' | 'high-end';",
      "src/services/device-capabilities.ts:export interface AdaptiveConfig {",
      "src/services/device-capabilities.ts:export class DeviceCapabilityDetector {",
      "src/services/device-capabilities.ts:export const deviceCapabilities = DeviceCapabilityDetector.getInstance();",
      "src/services/device-capabilities.ts:export interface PerformanceConfig {",
      "src/services/device-capabilities.ts:export const isLowEndDevice = (): boolean => {",
      "src/services/device-capabilities.ts:export const getAdaptiveConfig = (): AdaptiveConfig | null => {",
      "src/services/device-capabilities.ts:export const shouldReduceAnimations = (): boolean => {",
      "src/services/email-campaign.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaign.ts:export class EmailCampaignService {",
      "src/services/email-campaign.ts:export default EmailCampaignService;",
      "src/services/email-campaign.ts:export const emailCampaignService = EmailCampaignService.getInstance();",
      "src/services/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/services/email-campaigns.ts:export class EmailCampaignService {",
      "src/services/email-campaigns.ts:export default EmailCampaignService;",
      "src/services/emotional-intelligence.ts:export class EmotionalIntelligenceService {",
      "src/services/emotional-intelligence.ts:export const emotionalIntelligenceService = EmotionalIntelligenceService.getInstance();",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-alarm.ts:export class EnhancedAlarmService extends BaseService implements AlarmServiceInterface {",
      "src/services/enhanced-alarm.ts:export const createAlarmService = (",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceConfig extends ServiceConfig {",
      "src/services/enhanced-analytics.ts:export interface UserProperties {",
      "src/services/enhanced-analytics.ts:export interface EventProperties {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsEvent {",
      "src/services/enhanced-analytics.ts:export interface PerformanceMetrics {",
      "src/services/enhanced-analytics.ts:export interface WebVitals {",
      "src/services/enhanced-analytics.ts:export interface UserJourneyStep {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceDependencies {",
      "src/services/enhanced-analytics.ts:export class EnhancedAnalyticsService",
      "src/services/enhanced-analytics.ts:export const createAnalyticsService = (",
      "src/services/enhanced-analytics.ts:export const analyticsService = createAnalyticsService();",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-battle.ts:export class EnhancedBattleService",
      "src/services/enhanced-battle.ts:export const createBattleService = (",
      "src/services/enhanced-battle.ts:export const battleService = createBattleService();",
      "src/services/enhanced-cache-manager.ts:export interface CacheEntry extends AudioCacheEntry {",
      "src/services/enhanced-cache-manager.ts:export interface CachePolicy {",
      "src/services/enhanced-cache-manager.ts:export interface CacheStats {",
      "src/services/enhanced-cache-manager.ts:export interface CacheWarmingConfig {",
      "src/services/enhanced-cache-manager.ts:export class EnhancedCacheManager {",
      "src/services/enhanced-cache-manager.ts:export const enhancedCacheManager = EnhancedCacheManager.getInstance();",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/enhanced-calendar-service.ts:export default EnhancedCalendarService;",
      "src/services/enhanced-location-service.ts:export class EnhancedLocationService {",
      "src/services/enhanced-location-service.ts:export default EnhancedLocationService;",
      "src/services/enhanced-offline-storage.ts:export class EnhancedOfflineStorage extends OfflineStorage {",
      "src/services/enhanced-offline-storage.ts:export default EnhancedOfflineStorage.getInstance();",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorConfig extends ServiceConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface ThresholdConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface AlertChannel {",
      "src/services/enhanced-performance-monitor.ts:export interface SeverityLevel {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorDependencies {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface WebVitalsMetrics {",
      "src/services/enhanced-performance-monitor.ts:export interface UserInteraction {",
      "src/services/enhanced-performance-monitor.ts:export interface ResourceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface MemoryMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface NetworkMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceReport {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceAlert {",
      "src/services/enhanced-performance-monitor.ts:export interface DeviceInfo {",
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {",
      "src/services/enhanced-performance-monitor.ts:export class EnhancedPerformanceMonitor",
      "src/services/enhanced-performance-monitor.ts:export const createPerformanceMonitor = (",
      "src/services/enhanced-performance-monitor.ts:export const performanceMonitor = createPerformanceMonitor();",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface WakeUpFeedback {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface OptimalTimeSlot {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface AdaptationRecord {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartRecommendation {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export class EnhancedSmartAlarmScheduler extends SmartAlarmScheduler {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export default EnhancedSmartAlarmScheduler;",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceConfig extends ServiceConfig {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceDependencies {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionCheckResult {",
      "src/services/enhanced-subscription.ts:export class EnhancedSubscriptionService",
      "src/services/enhanced-subscription.ts:export const createSubscriptionService = (",
      "src/services/enhanced-voice.ts:export interface VoiceServiceConfig extends ServiceConfig {",
      "src/services/enhanced-voice.ts:export interface VoiceServiceDependencies {",
      "src/services/enhanced-voice.ts:export interface VoiceSettings {",
      "src/services/enhanced-voice.ts:export interface AudioClip {",
      "src/services/enhanced-voice.ts:export class EnhancedVoiceService extends BaseService implements VoiceServiceInterface {",
      "src/services/enhanced-voice.ts:export const createVoiceService = (",
      "src/services/enhanced-voice.ts:export const voiceService = createVoiceService();",
      "src/services/error-handler.ts:export interface ErrorContext {",
      "src/services/error-handler.ts:export interface ErrorMetrics {",
      "src/services/error-handler.ts:export const ErrorHandler = new ErrorHandlerService();",
      "src/services/error-handler.ts:export type { ErrorEntry, ErrorContext, ErrorCategory, ErrorAnalytics };",
      "src/services/feature-gate-service.ts:export default FeatureGateService;",
      "src/services/health-tracker-integration.ts:export interface SleepData {",
      "src/services/health-tracker-integration.ts:export interface ActivityData {",
      "src/services/health-tracker-integration.ts:export interface HealthInsight {",
      "src/services/health-tracker-integration.ts:export interface CircadianProfile {",
      "src/services/health-tracker-integration.ts:export interface HealthConfig {",
      "src/services/health-tracker-integration.ts:export default HealthTrackerIntegration;",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadQueueItem {",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadStats {",
      "src/services/lazy-audio-loader.ts:export class LazyAudioLoader {",
      "src/services/lazy-audio-loader.ts:export const lazyAudioLoader = LazyAudioLoader.getInstance();",
      "src/services/ml-alarm-optimizer.ts:export class MLAlarmOptimizer {",
      "src/services/ml-alarm-optimizer.ts:export default MLAlarmOptimizer;",
      "src/services/mobile-performance.ts:export interface PerformanceConfig {",
      "src/services/mobile-performance.ts:export interface PerformanceMetrics {",
      "src/services/mobile-performance.ts:export class MobilePerformanceService {",
      "src/services/mobile-performance.ts:export const mobilePerformance = MobilePerformanceService.getInstance();",
      "src/services/mobile-performance.ts:export type { PerformanceConfig, PerformanceMetrics };",
      "src/services/mobile-touch.ts:export interface TouchGestureOptions {",
      "src/services/mobile-touch.ts:export interface TouchPoint {",
      "src/services/mobile-touch.ts:export class MobileTouchService {",
      "src/services/mobile-touch.ts:export const mobileTouchService = MobileTouchService.getInstance();",
      "src/services/notification.ts:export interface NotificationOptions {",
      "src/services/notification.ts:export interface NotificationAction {",
      "src/services/notification.ts:export interface ScheduledNotification {",
      "src/services/notification.ts:export class NotificationService {",
      "src/services/nuclear-mode.ts:export class NuclearModeService {",
      "src/services/nuclear-mode.ts:export const nuclearModeService = NuclearModeService.getInstance();",
      "src/services/offline-analytics.ts:export class OfflineAnalyticsService {",
      "src/services/offline-analytics.ts:export default OfflineAnalyticsService;",
      "src/services/offline-gaming.ts:export class OfflineGamingService {",
      "src/services/offline-gaming.ts:export default OfflineGamingService;",
      "src/services/offline-manager.ts:export interface SyncStatus {",
      "src/services/offline-manager.ts:export interface OfflineCapabilities {",
      "src/services/offline-manager.ts:export class OfflineManager {",
      "src/services/offline-manager.ts:  static async exportData(): Promise<{",
      "src/services/offline-manager.ts:export default OfflineManager;",
      "src/services/offline-sleep-tracker.ts:export class OfflineSleepTracker {",
      "src/services/offline-sleep-tracker.ts:export default OfflineSleepTracker;",
      "src/services/offline-storage.ts:export class OfflineStorage {",
      "src/services/offline-storage.ts:  async exportData(): Promise<string> {",
      "src/services/offline-storage.ts:      const exportData = {",
      "src/services/offline-storage.ts:        exportTimestamp: new Date().toISOString(),",
      "src/services/offline-storage.ts:      return JSON.stringify(exportData, null, 2);",
      "src/services/offline-storage.ts:      ErrorHandler.handleError(_error, 'Failed to export data', {",
      "src/services/offline-storage.ts:        context: 'OfflineStorage.exportData',",
      "src/services/offline-storage.ts:export default OfflineStorage.getInstance();",
      "src/services/performance-analytics.ts:export interface PerformanceMetric {",
      "src/services/performance-analytics.ts:export interface PerformanceThresholds {",
      "src/services/performance-analytics.ts:export interface WebVitalsMetrics {",
      "src/services/performance-analytics.ts:export default PerformanceAnalyticsService;",
      "src/services/performance-budget-manager.ts:export class PerformanceBudgetManager {",
      "src/services/performance-budget-manager.ts:export const performanceBudgetManager = PerformanceBudgetManager.getInstance();",
      "src/services/performance-monitor.ts:export class PerformanceMonitor {",
      "src/services/performance-monitor.ts:export default PerformanceMonitor.getInstance();",
      "src/services/performance-monitor.ts:export type { PerformanceTrends };",
      "src/services/predictive-analytics-service.ts:export class PredictiveAnalyticsService {",
      "src/services/predictive-analytics-service.ts:export default PredictiveAnalyticsService;",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/premium-theme-animations.ts:export interface PremiumAnimationEffects {",
      "src/services/premium-theme-animations.ts:export default PremiumThemeAnimationService;",
      "src/services/premium-voice.ts:export class PremiumVoiceService {",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/services/premium.ts:export interface SubscriptionPlan {",
      "src/services/premium.ts:export class PremiumService {",
      "src/services/premium.ts:export const premiumService = PremiumService.getInstance();",
      "src/services/privacy-compliance.ts:export interface ConsentSettings {",
      "src/services/privacy-compliance.ts:export interface PrivacySettings {",
      "src/services/privacy-compliance.ts:export interface UserDataRequest {",
      "src/services/privacy-compliance.ts:  type: 'export' | 'delete' | 'rectify' | 'portability';",
      "src/services/privacy-compliance.ts:export interface ConsentEvent {",
      "src/services/privacy-compliance.ts:    const requestId = `export_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;",
      "src/services/privacy-compliance.ts:      const exportData = {",
      "src/services/privacy-compliance.ts:        exportedAt: new Date().toISOString(),",
      "src/services/privacy-compliance.ts:      console.info('User data export created:', {",
      "src/services/privacy-compliance.ts:        dataSize: JSON.stringify(exportData).length,",
      "src/services/privacy-compliance.ts:   * Get analytics data for export (mock implementation)",
      "src/services/privacy-compliance.ts:   * Get error data for export (mock implementation)",
      "src/services/privacy-compliance.ts:   * Get performance data for export (mock implementation)",
      "src/services/privacy-compliance.ts:export default PrivacyComplianceService;",
      "src/services/push-notifications.ts:export interface PushNotificationPayload {",
      "src/services/push-notifications.ts:export interface PushNotificationSettings {",
      "src/services/push-notifications.ts:export interface PushSubscription {",
      "src/services/push-notifications.ts:export class PushNotificationService {",
      "src/services/pwa-manager.ts:export class PWAManager {",
      "src/services/pwa-manager.ts:export const pwaManager = PWAManager.getInstance();",
      "src/services/pwa-service.ts:export interface PWACapabilities {",
      "src/services/pwa-service.ts:export interface PWAInstallPrompt {",
      "src/services/pwa-service.ts:export interface BackgroundSyncStatus {",
      "src/services/pwa-service.ts:export interface PushSubscriptionInfo {",
      "src/services/pwa-service.ts:export class PWAService {",
      "src/services/pwa-service.ts:export default PWAService;",
      "src/services/real-time-smart-adapter.ts:export interface RealTimeAdaptationConfig {",
      "src/services/real-time-smart-adapter.ts:export interface AdaptationTrigger {",
      "src/services/real-time-smart-adapter.ts:export interface SmartAlarmStatus {",
      "src/services/real-time-smart-adapter.ts:export class RealTimeSmartAdapter {",
      "src/services/real-time-smart-adapter.ts:export default RealTimeSmartAdapter;",
      "src/services/realtime-service.ts:export interface RealtimeConfig {",
      "src/services/realtime-service.ts:export interface PresenceData {",
      "src/services/realtime-service.ts:export interface LiveUpdate {",
      "src/services/realtime-service.ts:export interface PushNotificationPayload {",
      "src/services/realtime-service.ts:export default RealtimeService;",
      "src/services/revenue-analytics.ts:export interface RevenueMetrics {",
      "src/services/revenue-analytics.ts:export interface CohortData {",
      "src/services/revenue-analytics.ts:export interface UserJourney {",
      "src/services/revenue-analytics.ts:export interface FeatureAdoptionMetrics {",
      "src/services/revenue-analytics.ts:export class RevenueAnalyticsService {",
      "src/services/revenue-analytics.ts:export default RevenueAnalyticsService.getInstance();",
      "src/services/scheduler-core.ts:export class SchedulerCore {",
      "src/services/scheduler-core.ts:      exportDate: new Date().toISOString(),",
      "src/services/secure-alarm-storage.ts:export class SecureAlarmStorageService {",
      "src/services/secure-alarm-storage.ts:export default SecureAlarmStorageService.getInstance();",
      "src/services/secure-push-notification.ts:export interface SecurePushNotificationPayload {",
      "src/services/secure-push-notification.ts:export interface PushNotificationSettings {",
      "src/services/secure-push-notification.ts:export interface SecurePushSubscription {",
      "src/services/secure-push-notification.ts:export class SecurePushNotificationService {",
      "src/services/secure-push-notification.ts:export default SecurePushNotificationService.getInstance();",
      "src/services/security-monitoring-forensics.ts:export class SecurityMonitoringForensicsService {",
      "src/services/security-monitoring-forensics.ts:export default SecurityMonitoringForensicsService.getInstance();",
      "src/services/security.ts:export interface PasswordStrength {",
      "src/services/security.ts:export default SecurityService.getInstance();",
      "src/services/sentry.ts:export interface SentryConfig {",
      "src/services/sentry.ts:export interface UserContext {",
      "src/services/sentry.ts:export interface ErrorContext {",
      "src/services/sentry.ts:export const defaultSentryConfigs = {",
      "src/services/sentry.ts:export default SentryService;",
      "src/services/service-worker-manager.ts:export { ServiceWorkerManager };",
      "src/services/service-worker-manager.ts:// Initialize and export default instance",
      "src/services/service-worker-manager.ts:export default swManager;",
      "src/services/sleep-analysis.ts:export interface SleepSession {",
      "src/services/sleep-analysis.ts:export interface SleepStage {",
      "src/services/sleep-analysis.ts:export interface EnvironmentData {",
      "src/services/sleep-analysis.ts:export interface WearableData {",
      "src/services/sleep-analysis.ts:export interface SleepPattern {",
      "src/services/sleep-analysis.ts:export interface DayPattern {",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/sleep-analysis.ts:export interface OptimalWakeWindow {",
      "src/services/sleep-analysis.ts:export class SleepAnalysisService {",
      "src/services/sleep-analysis.ts:export default SleepAnalysisService;",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartSchedule {",
      "src/services/smart-alarm-scheduler.ts:export interface AlarmOptimization {",
      "src/services/smart-alarm-scheduler.ts:export interface SleepGoal {",
      "src/services/smart-alarm-scheduler.ts:export interface UserScheduleAnalysis {",
      "src/services/smart-alarm-scheduler.ts:export interface ScheduleRecommendation {",
      "src/services/smart-alarm-scheduler.ts:export class SmartAlarmScheduler {",
      "src/services/smart-alarm-scheduler.ts:export default SmartAlarmScheduler;",
      "src/services/smart-notification-service.ts:export interface NotificationContext {",
      "src/services/smart-notification-service.ts:export interface SmartNotificationConfig {",
      "src/services/smart-notification-service.ts:export interface AdaptiveNotification {",
      "src/services/smart-notification-service.ts:export default SmartNotificationService;",
      "src/services/sound-effects.ts:export interface SoundEffectConfig {",
      "src/services/sound-effects.ts:export interface SoundEffectSettings {",
      "src/services/sound-effects.ts:export const soundEffectsService = SoundEffectsService.getInstance();",
      "src/services/sound-effects.ts:export default SoundEffectsService;",
      "src/services/stripe-service.ts:export default StripeService;",
      "src/services/struggling-sam-api.ts:export class StrugglingSamApiService {",
      "src/services/struggling-sam-api.ts:export default StrugglingSamApiService;",
      "src/services/subscription-service.ts:export default SubscriptionService;",
      "src/services/subscription.ts:export class SubscriptionService {",
      "src/services/supabase.ts:export const supabase: SupabaseClient = createClient(",
      "src/services/supabase.ts:export class SupabaseService {",
      "src/services/theme-accessibility.ts:export default ThemeAccessibilityService;",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/theme-combinations.ts:export type TimeOfDay =",
      "src/services/theme-combinations.ts:export type WeatherCondition =",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-combinations.ts:export interface ThemeCollection {",
      "src/services/theme-combinations.ts:export const themeCombinations = ThemeCombinationsService.getInstance();",
      "src/services/theme-combinations.ts:export default ThemeCombinationsService;",
      "src/services/theme-performance.ts:export default ThemePerformanceService;",
      "src/services/theme-persistence.ts:      const exportData = {",
      "src/services/theme-persistence.ts:        exportedAt: new Date().toISOString(),",
      "src/services/theme-persistence.ts:      return JSON.stringify(exportData, null, 2);",
      "src/services/theme-persistence.ts:export default ThemePersistenceService;",
      "src/services/typed-realtime-service.ts:export class TypedRealtimeService extends EventEmitter implements RealtimeService {",
      "src/services/typed-realtime-service.ts:export class TypedRealtimeServiceFactory {",
      "src/services/typed-realtime-service.ts:export default TypedRealtimeService;",
      "src/services/types/media.ts:export interface CustomSound {",
      "src/services/types/media.ts:export type SoundCategory =",
      "src/services/types/media.ts:export interface Playlist {",
      "src/services/types/media.ts:export interface PlaylistSound {",
      "src/services/types/media.ts:export interface MotivationalQuote {",
      "src/services/types/media.ts:export type QuoteCategory =",
      "src/services/types/media.ts:export interface AudioLoadOptions {",
      "src/services/types/media.ts:export interface AudioPlaybackOptions {",
      "src/services/types/media.ts:export interface MediaLibrary {",
      "src/services/types/media.ts:export interface StorageInfo {",
      "src/services/types/media.ts:export interface CacheSettings {",
      "src/services/types/media.ts:export interface CompressionSettings {",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/types/media.ts:export interface AudioFormat {",
      "src/services/types/media.ts:export const SUPPORTED_AUDIO_FORMATS: AudioFormat[] = [",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/services/types/media.ts:export interface AudioAnalysis {",
      "src/services/types/media.ts:export interface SilenceSegment {",
      "src/services/types/media.ts:export interface ModerationResult {",
      "src/services/types/media.ts:export interface ContentModerationSettings {",
      "src/services/types/performance.ts:export interface PerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/types/performance.ts:export interface PerformanceThresholds {",
      "src/services/types/performance.ts:export interface RenderingOptimizations {",
      "src/services/types/performance.ts:export interface MemoryOptimizations {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface AdaptivePerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceMetric {",
      "src/services/types/performance.ts:export interface FrameRateMetrics {",
      "src/services/types/performance.ts:export interface MemoryMetrics {",
      "src/services/types/performance.ts:export interface NetworkMetrics {",
      "src/services/types/performance.ts:export interface RenderMetrics {",
      "src/services/types/performance.ts:export interface UserExperienceMetrics {",
      "src/services/types/performance.ts:export interface PerformanceSnapshot {",
      "src/services/types/performance.ts:export interface PerformanceAlert {",
      "src/services/types/performance.ts:export interface DeviceAdaptation {",
      "src/services/types/performance.ts:export type OptimizationStrategy = 'none' | 'conservative' | 'balanced' | 'aggressive';",
      "src/services/types/performance.ts:export interface ComponentOptimization {",
      "src/services/types/performance.ts:export interface AssetOptimization {",
      "src/services/types/performance.ts:export interface CacheOptimization {",
      "src/services/user-testing.ts:export interface UserTestSession {",
      "src/services/user-testing.ts:export interface DeviceInfo {",
      "src/services/user-testing.ts:export interface UserFeedback {",
      "src/services/user-testing.ts:export interface ABTest {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface ABTestMetric {",
      "src/services/user-testing.ts:export interface UsabilityEvent {",
      "src/services/user-testing.ts:export interface BugReport {",
      "src/services/user-testing.ts:export class UserTestingService {",
      "src/services/user-testing.ts:export default UserTestingService;",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:export const visualAlarmThemes = VisualAlarmThemesService.getInstance();",
      "src/services/visual-alarm-themes.ts:export default VisualAlarmThemesService;",
      "src/services/voice-ai-enhanced.ts:export interface VoicePersonality {",
      "src/services/voice-ai-enhanced.ts:export interface ContextualResponse {",
      "src/services/voice-ai-enhanced.ts:export interface VoiceLearningData {",
      "src/services/voice-ai-enhanced.ts:export default VoiceAIEnhancedService;",
      "src/services/voice-biometrics.ts:export interface VoicePrint {",
      "src/services/voice-biometrics.ts:export interface VoiceTrainingSession {",
      "src/services/voice-biometrics.ts:export interface VoiceAuthentication {",
      "src/services/voice-biometrics.ts:export interface VoiceMoodAnalysis {",
      "src/services/voice-biometrics.ts:export default VoiceBiometricsService;",
      "src/services/voice-enhanced.ts:export class VoiceServiceEnhanced {",
      "src/services/voice-enhanced.ts:export const VoiceService = VoiceServiceEnhanced;",
      "src/services/voice-pro.ts:export interface VoiceProvider {",
      "src/services/voice-pro.ts:export interface VoiceOption {",
      "src/services/voice-pro.ts:export interface VoiceSettings {",
      "src/services/voice-pro.ts:export interface CachedVoiceMessage {",
      "src/services/voice-pro.ts:export interface RecognitionResult {",
      "src/services/voice-pro.ts:export class VoiceProService {",
      "src/services/voice-recognition-enhanced.ts:export interface EnhancedVoiceCommand {",
      "src/services/voice-recognition-enhanced.ts:export interface MultiLanguageConfig {",
      "src/services/voice-recognition-enhanced.ts:export interface GestureRecognition {",
      "src/services/voice-recognition-enhanced.ts:export interface AdvancedRecognitionConfig {",
      "src/services/voice-recognition-enhanced.ts:export default VoiceRecognitionEnhancedService;",
      "src/services/voice-recognition.ts:export interface VoiceCommand {",
      "src/services/voice-recognition.ts:export interface RecognitionConfig {",
      "src/services/voice-recognition.ts:export class VoiceRecognitionService {",
      "src/services/voice-recognition.ts:export default VoiceRecognitionService;",
      "src/services/voice-smart-integration.ts:export interface SmartHomeIntegration {",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/services/voice-smart-integration.ts:export interface VoiceIntegrationConfig {",
      "src/services/voice-smart-integration.ts:export interface VoiceShortcut {",
      "src/services/voice-smart-integration.ts:export interface VoiceAction {",
      "src/services/voice-smart-integration.ts:export interface VoiceContext {",
      "src/services/voice-smart-integration.ts:export default VoiceSmartIntegrationService;",
      "src/services/voice.ts:export class VoiceService {",
      "src/stories/Button.stories.ts:export default meta;",
      "src/stories/Button.stories.ts:export const Primary: Story = {",
      "src/stories/Button.stories.ts:export const Secondary: Story = {",
      "src/stories/Button.stories.ts:export const Large: Story = {",
      "src/stories/Button.stories.ts:export const Small: Story = {",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/stories/Header.stories.ts:export default meta;",
      "src/stories/Header.tsx:export interface HeaderProps {",
      "src/stories/Header.tsx:export const Header = ({ _user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (",
      "src/stories/Page.stories.ts:export default meta;",
      "src/stories/Page.tsx:export default Page;",
      "src/stories/components/AlarmForm.stories.tsx:export default meta;",
      "src/stories/components/AlarmForm.stories.tsx:export const NewAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const EditAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const EditPremiumAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const WeekendAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const CustomSoundAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const FormValidationExample: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const DarkMode: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const AccessibilityShowcase: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const InteractivePlayground: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export default meta;",
      "src/stories/components/Dashboard.stories.tsx:export const WithAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const EmptyState: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const LoadingState: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const SingleAlarm: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const OnlyDisabledAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const ManyAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const DarkMode: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const UserJourneyScenarios: Story = {",
      "src/stories/ui/Button.stories.tsx:export default meta;",
      "src/stories/ui/Button.stories.tsx:export const Default: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Secondary: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Small: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Large: Story = {",
      "src/stories/ui/Button.stories.tsx:export const WithTrailingIcon: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Disabled: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Loading: Story = {",
      "src/stories/ui/Button.stories.tsx:export const InteractiveShowcase: Story = {",
      "src/stories/ui/Card.stories.tsx:export default meta;",
      "src/stories/ui/Card.stories.tsx:export const Default: Story = {",
      "src/stories/ui/Card.stories.tsx:export const AlarmCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const FeatureCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const StatsCard: Story = {",
      "src/stories/ui/Card.stories.tsx:export const CardVariations: Story = {",
      "src/templates/email-templates.ts:export interface EmailTemplateConfig {",
      "src/templates/email-templates.ts:export interface TemplateVariable {",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/templates/email-templates.ts:export const generateBaseTemplate = (",
      "src/templates/email-templates.ts:export const EMAIL_TEMPLATES: Record<PersonaType, EmailTemplateConfig[]> = {",
      "src/templates/email-templates.ts:export default EMAIL_TEMPLATES;",
      "src/tests/alarm-themes-integration.test.ts:      const exportData = themeCombinations.exportUserThemes();",
      "src/tests/alarm-themes-integration.test.ts:      expect(exportData).toBeDefined();",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/tests/alarm-themes-integration.test.ts:      expect(() => JSON.parse(exportData)).not.toThrow();",
      "src/tests/alarm-themes-integration.test.ts:      const importResult = themeCombinations.importUserThemes(exportData);",
      "src/tests/alarm-themes-integration.test.ts:export default {};",
      "src/themes/premium-themes.ts:export const oceanBreezeTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const forestDreamTheme: ThemeConfig = {",
      "src/types/alarm-scheduling.ts:export interface RecurrencePattern {",
      "src/types/alarm-scheduling.ts:export interface ConditionalRule {",
      "src/types/alarm-scheduling.ts:export interface LocationTrigger {",
      "src/types/alarm-scheduling.ts:export interface SmartOptimization {",
      "src/types/alarm-scheduling.ts:export interface SeasonalAdjustment {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:export interface SunSchedule {",
      "src/types/alarm-scheduling.ts:export interface SchedulingConfig {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm-scheduling.ts:export const validateSchedulingConfig = (_config: SchedulingConfig): boolean => {",
      "src/types/alarm-scheduling.ts:export const isRecurrencePattern = (value: any): value is RecurrencePattern => {",
      "src/types/alarm-scheduling.ts:export const isConditionalRule = (value: any): value is ConditionalRule => {",
      "src/types/alarm-scheduling.ts:export const isLocationTrigger = (value: any): value is LocationTrigger => {",
      "src/types/alarm.d.ts:export interface LocationActionParameters {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/alarm.d.ts:  export class AlarmService {",
      "src/types/analytics.d.ts:export interface RevenueRecord {",
      "src/types/analytics.d.ts:export interface DailyMetric {",
      "src/types/analytics.d.ts:export interface MonthlySummary {",
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/analytics.d.ts:export type SubscriptionStatus = 'active' | 'canceled' | 'unpaid' | 'trialing';",
      "src/types/analytics.d.ts:export interface UserJourney {",
      "src/types/analytics.d.ts:export interface RevenueEventInput {",
      "src/types/analytics.d.ts:export interface FeatureAdoptionMetrics {",
      "src/types/analytics.d.ts:export interface TierCorrelation {",
      "src/types/analytics.d.ts:export interface Refund {",
      "src/types/analytics.d.ts:export interface Discount {",
      "src/types/analytics.d.ts:export interface ChartDataPoint {",
      "src/types/analytics.d.ts:export interface RevenueChartData {",
      "src/types/analytics.d.ts:export interface CohortData {",
      "src/types/analytics.d.ts:export interface CohortAnalysis {",
      "src/types/analytics.d.ts:export interface AnalyticsEventProperties {",
      "src/types/analytics.d.ts:export interface RevenueReport {",
      "src/types/analytics.d.ts:export interface RevenueMetrics {",
      "src/types/analytics.d.ts:export interface SubscriptionRecord {",
      "src/types/analytics.d.ts:export interface UserEventRecord {",
      "src/types/analytics.d.ts:export interface FeatureUsageRecord {",
      "src/types/analytics.d.ts:export type TimeRange = '7d' | '30d' | '90d' | '1y';",
      "src/types/analytics.d.ts:export type ReportFormat = 'json' | 'csv';",
      "src/types/analytics.d.ts:export interface CacheEntry<T> {",
      "src/types/analytics.d.ts:export type MetricsCache = Map<string, CacheEntry<any>>;",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ContactListSubscription {",
      "src/types/api-responses.ts:export interface SubscribeContactResponse {",
      "src/types/api-responses.ts:export interface ContactAutomation {",
      "src/types/api-responses.ts:export interface AddContactToAutomationResponse {",
      "src/types/api-responses.ts:export interface ContactTag {",
      "src/types/api-responses.ts:export interface AddTagToContactResponse {",
      "src/types/api-responses.ts:export interface CampaignStats {",
      "src/types/api-responses.ts:export interface AutomationStats {",
      "src/types/api-responses.ts:export interface ConvertKitAccount {",
      "src/types/api-responses.ts:export interface BroadcastStats {",
      "src/types/api-responses.ts:export interface GrowthStats {",
      "src/types/api-responses.ts:export interface UserFeatures {",
      "src/types/api-responses.ts:export interface EngagementMetrics {",
      "src/types/api-responses.ts:export interface ConvertKitCustomFields {",
      "src/types/api-responses.ts:export interface MailchimpMergeFields {",
      "src/types/api-responses.ts:export interface TestServiceResponse<T = any> {",
      "src/types/api-responses.ts:export interface NotificationExtras {",
      "src/types/api-responses.ts:export interface CacheGetResponse<T = any> {",
      "src/types/api-responses.ts:export interface CacheSetResponse {",
      "src/types/api-responses.ts:export interface PerformanceMetadata {",
      "src/types/api-responses.ts:export interface AnalyticsMetadata {",
      "src/types/api-responses.ts:export interface FeatureContext {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api-responses.ts:export const createSuccessResponse = <T>(data: T): SuccessResponse<T> => ({",
      "src/types/api-responses.ts:export const createErrorResponse = (",
      "src/types/api-responses.ts:export namespace ActiveCampaign {",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:export namespace ConvertKit {",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:export namespace AI {",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:export namespace Testing {",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts:export interface ApiResponse<T = unknown> {",
      "src/types/api.ts:export interface ApiError {",
      "src/types/api.ts:export interface PaginationParams {",
      "src/types/api.ts:export interface PaginationMeta {",
      "src/types/api.ts:export interface PaginatedResponse<T> {",
      "src/types/api.ts:export interface HttpRequestConfig {",
      "src/types/api.ts:export interface HttpResponse<T = unknown> {",
      "src/types/api.ts:export interface HttpClient {",
      "src/types/api.ts:export interface HealthCheckResponse {",
      "src/types/api.ts:export interface CreateUserRequest {",
      "src/types/api.ts:export interface UpdateUserRequest {",
      "src/types/api.ts:export interface UserStatsResponse {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/api.ts:export interface PerformanceMetric {",
      "src/types/api.ts:export interface WebVitalsData {",
      "src/types/api.ts:export interface ErrorReportData {",
      "src/types/api.ts:export interface PerformanceDashboardResponse {",
      "src/types/api.ts:export interface SupabaseAuthResponse {",
      "src/types/api.ts:export interface StripeSubscriptionResponse {",
      "src/types/api.ts:export interface StripePaymentIntentResponse {",
      "src/types/api.ts:export interface ConvertKitSubscriberResponse {",
      "src/types/api.ts:export interface GitHubUserResponse {",
      "src/types/api.ts:export interface SocialMediaPostResponse {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/api.ts:export interface ApiEndpoint {",
      "src/types/api.ts:export interface ApiEndpoints {",
      "src/types/api.ts:export interface ApiConfiguration {",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:export interface UserState {",
      "src/types/app-state.ts:export interface SubscriptionState {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/app-state.ts:export type AlarmAction =",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:export const createAppSelectors = (state: AppState) => ({",
      "src/types/app-state.ts:export const validateAlarmState = (state: AlarmState): boolean => {",
      "src/types/app-state.ts:export const validateUserState = (state: UserState): boolean => {",
      "src/types/app-state.ts:export const validateSubscriptionState = (state: SubscriptionState): boolean => {",
      "src/types/app-state.ts:export const isAlarmState = (value: any): value is AlarmState => {",
      "src/types/app-state.ts:export const isUserState = (value: any): value is UserState => {",
      "src/types/app-state.ts:export const isSubscriptionState = (value: any): value is SubscriptionState => {",
      "src/types/configuration-interfaces.ts:export interface ConvertKitAutomationParameters {",
      "src/types/configuration-interfaces.ts:export interface EmotionalMessageVariables {",
      "src/types/configuration-interfaces.ts:export interface PerformanceEventMetadata {",
      "src/types/configuration-interfaces.ts:export interface AnalyticsEventProperties {",
      "src/types/configuration-interfaces.ts:export interface FormFieldData {",
      "src/types/configuration-interfaces.ts:export interface FeatureTrackingContext {",
      "src/types/configuration-interfaces.ts:export interface NotificationExtrasData {",
      "src/types/configuration-interfaces.ts:export interface CacheConfiguration {",
      "src/types/configuration-interfaces.ts:export const isEmotionalMessageVariables = (",
      "src/types/configuration-interfaces.ts:export const isAnalyticsEventProperties = (",
      "src/types/configuration-interfaces.ts:export const isPerformanceEventMetadata = (",
      "src/types/configuration-interfaces.ts:export const DEFAULT_CACHE_CONFIG: CacheConfiguration = {",
      "src/types/configuration-interfaces.ts:export const DEFAULT_PERFORMANCE_METADATA: PerformanceEventMetadata = {",
      "src/types/configuration-interfaces.ts:export const validateFormFieldData = (data: FormFieldData): boolean => {",
      "src/types/configuration-interfaces.ts:export const sanitizeCustomFields = (customFields: any): Record<string, any> => {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundTheme {",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeUISounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAmbientSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundAssignment {",
      "src/types/custom-sound-themes.ts:export interface CustomSound {",
      "src/types/custom-sound-themes.ts:export type SoundCategory =",
      "src/types/custom-sound-themes.ts:export interface SoundReview {",
      "src/types/custom-sound-themes.ts:export interface AudioAnalysis {",
      "src/types/custom-sound-themes.ts:export interface AudioCharacteristics {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundConfig {",
      "src/types/custom-sound-themes.ts:export type GeneratedSoundType =",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundParameters {",
      "src/types/custom-sound-themes.ts:export interface ModulationConfig {",
      "src/types/custom-sound-themes.ts:export interface EnvelopeConfig {",
      "src/types/custom-sound-themes.ts:export interface FilterConfig {",
      "src/types/custom-sound-themes.ts:export interface EffectConfig {",
      "src/types/custom-sound-themes.ts:export interface HarmonicConfig {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface AudioQualityInfo {",
      "src/types/custom-sound-themes.ts:export interface CompatibilityInfo {",
      "src/types/custom-sound-themes.ts:export type Platform = 'web' | 'ios' | 'android' | 'desktop';",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface DeviceRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePreview {",
      "src/types/custom-sound-themes.ts:export interface PreviewSound {",
      "src/types/custom-sound-themes.ts:export interface DemoSequence {",
      "src/types/custom-sound-themes.ts:export interface DemoTiming {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePermissions {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export type CreationStep =",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/custom-sound-themes.ts:export interface RequiredField {",
      "src/types/custom-sound-themes.ts:export interface OptionalField {",
      "src/types/custom-sound-themes.ts:export interface UploadedFile {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSound {",
      "src/types/custom-sound-themes.ts:export interface SelectedBuiltInSound {",
      "src/types/custom-sound-themes.ts:export interface SoundCustomization {",
      "src/types/custom-sound-themes.ts:export interface ValidationResult {",
      "src/types/custom-sound-themes.ts:export interface ValidationIssue {",
      "src/types/custom-sound-themes.ts:export interface ValidationSuggestion {",
      "src/types/custom-sound-themes.ts:export interface CreationError {",
      "src/types/custom-sound-themes.ts:export interface CreationWarning {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCollection {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export type RecommendationSource =",
      "src/types/custom-sound-themes.ts:export interface LibrarySettings {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeExport {",
      "src/types/custom-sound-themes.ts:  exportedAt: Date;",
      "src/types/custom-sound-themes.ts:  exportType: 'single' | 'collection' | 'library';",
      "src/types/custom-sound-themes.ts:export interface ExportMetadata {",
      "src/types/custom-sound-themes.ts:export interface ExportFile {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeImport {",
      "src/types/custom-sound-themes.ts:export interface ImportOptions {",
      "src/types/custom-sound-themes.ts:export interface ImportResult {",
      "src/types/custom-sound-themes.ts:export interface ImportError {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface UsageContext {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface SoundPopularity {",
      "src/types/custom-sound-themes.ts:export interface UsagePattern {",
      "src/types/custom-sound-themes.ts:export interface TimePattern {",
      "src/types/custom-sound-themes.ts:export interface ContextPattern {",
      "src/types/custom-sound-themes.ts:export interface PerformanceMetrics {",
      "src/types/custom-sound-themes.ts:export interface LatencyMetrics {",
      "src/types/custom-sound-themes.ts:export interface FeedbackSummary {",
      "src/types/custom-sound-themes.ts:export interface TagFrequency {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeListResponse {",
      "src/types/custom-sound-themes.ts:export interface AppliedFilter {",
      "src/types/custom-sound-themes.ts:export interface SortOption {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface Alarm {",
      "src/types/domain.ts:export interface User {",
      "src/types/domain.ts:export interface UserPreferences {",
      "src/types/domain.ts:export interface UserSettings {",
      "src/types/domain.ts:export interface UserStats {",
      "src/types/domain.ts:export interface Subscription {",
      "src/types/domain.ts:export interface SubscriptionPlan {",
      "src/types/domain.ts:export interface PlanLimits {",
      "src/types/domain.ts:export interface PlanPricing {",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface FeatureUsageInfo {",
      "src/types/domain.ts:export interface FeatureUsage {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export interface VoiceMood {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export type SubscriptionStatus = ",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:export type PaymentStatus = ",
      "src/types/domain.ts:export interface PaymentMethod {",
      "src/types/domain.ts:export interface Invoice {",
      "src/types/domain.ts:export interface InvoiceItem {",
      "src/types/domain.ts:export interface Payment {",
      "src/types/domain.ts:export interface Trial {",
      "src/types/domain.ts:export interface Discount {",
      "src/types/domain.ts:export interface UserDiscount {",
      "src/types/domain.ts:export interface Theme {",
      "src/types/domain.ts:export interface ThemeColors {",
      "src/types/domain.ts:export interface PersonalizationSettings {",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/email-campaigns.ts:export type PersonaType =",
      "src/types/email-campaigns.ts:export interface PersonaProfile {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionResult {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionFactor {",
      "src/types/email-campaigns.ts:export interface EmailCampaign {",
      "src/types/email-campaigns.ts:export interface CampaignTrigger {",
      "src/types/email-campaigns.ts:export interface TriggerCondition {",
      "src/types/email-campaigns.ts:export interface EmailSequence {",
      "src/types/email-campaigns.ts:export interface SequenceCondition {",
      "src/types/email-campaigns.ts:export interface EmailTemplate {",
      "src/types/email-campaigns.ts:export interface TemplateVariable {",
      "src/types/email-campaigns.ts:export interface PersonalizationRule {",
      "src/types/email-campaigns.ts:export interface PersonalizedContent {",
      "src/types/email-campaigns.ts:export interface ABTestConfig {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface ABTestResults {",
      "src/types/email-campaigns.ts:export interface VariantResults {",
      "src/types/email-campaigns.ts:export interface CampaignSettings {",
      "src/types/email-campaigns.ts:export interface FrequencyCapping {",
      "src/types/email-campaigns.ts:export interface UnsubscribeSettings {",
      "src/types/email-campaigns.ts:export interface ComplianceSettings {",
      "src/types/email-campaigns.ts:export interface TrackingSettings {",
      "src/types/email-campaigns.ts:export interface CampaignMetrics {",
      "src/types/email-campaigns.ts:export interface EmailEvent {",
      "src/types/email-campaigns.ts:export interface CampaignPerformanceReport {",
      "src/types/email-campaigns.ts:export interface SequencePerformance {",
      "src/types/email-campaigns.ts:export interface CohortData {",
      "src/types/email-campaigns.ts:export interface TopPerformer {",
      "src/types/email-campaigns.ts:export interface PerformanceRecommendation {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/email-campaigns.ts:export interface MetricTrend {",
      "src/types/email-campaigns.ts:export interface EmailPreferences {",
      "src/types/email-campaigns.ts:export interface EmailSubscription {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface EmailCampaignStats {",
      "src/types/email-campaigns.ts:export interface UserWithEmailData",
      "src/types/email-campaigns.ts:export interface UserCampaignHistory {",
      "src/types/email-campaigns.ts:export interface ConversionEvent {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionConfig {",
      "src/types/email-campaigns.ts:export interface PersonaFactor {",
      "src/types/email-campaigns.ts:export interface PersonaCondition {",
      "src/types/email-campaigns.ts:export type EmailPlatform =",
      "src/types/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/types/email-campaigns.ts:export interface PlatformCapabilities {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {",
      "src/types/email-campaigns.ts:export interface EmailDeliverabilitySettings {",
      "src/types/email-campaigns.ts:export interface CampaignAutomationRule {",
      "src/types/email-campaigns.ts:export interface AutomationTrigger {",
      "src/types/email-campaigns.ts:export interface AutomationCondition {",
      "src/types/email-campaigns.ts:export interface AutomationAction {",
      "src/types/email-campaigns.ts:export const DEFAULT_PERSONAS: Record<PersonaType, PersonaProfile> = {",
      "src/types/email.ts:export type PersonaType =",
      "src/types/email.ts:export interface PersonaProfile {",
      "src/types/email.ts:export interface PersonaDetectionResult {",
      "src/types/email.ts:export interface PersonaDetectionFactor {",
      "src/types/email.ts:export interface EmailCampaign {",
      "src/types/email.ts:export interface EmailSequence {",
      "src/types/email.ts:export interface CampaignMetrics {",
      "src/types/email.ts:export interface EmailPreferences {",
      "src/types/emotional.ts:export type EmotionalTone = 'encouraging' | 'playful' | 'firm' | 'roast';",
      "src/types/emotional.ts:export type EscalationLevel =",
      "src/types/emotional.ts:export interface EmotionalContext {",
      "src/types/emotional.ts:export interface EmotionalState {",
      "src/types/emotional.ts:export interface EmotionalMessage {",
      "src/types/emotional.ts:export interface EmotionalResponse {",
      "src/types/emotional.ts:export interface UserEmotionalProfile {",
      "src/types/emotional.ts:export interface EmotionalNotificationPayload {",
      "src/types/emotional.ts:export const VOICE_MOOD_TO_EMOTIONAL_TONE: Record<string, EmotionalTone> = {",
      "src/types/emotional.ts:export type EmotionalNotificationCategory =",
      "src/types/helpers.d.ts:export type AnyFn = (...args: any[]) => any; // auto",
      "src/types/helpers.d.ts:export type Maybe<T> = T | undefined | null;",
      "src/types/helpers.d.ts:export type EventHandler<T = any> = (e: T) => void; // auto",
      "src/types/helpers.d.ts:export type CallbackFunction<T = any> = (value: T) => void; // auto",
      "src/types/helpers.d.ts:export type AsyncCallback<T = any> = (value: T) => Promise<void>; // auto",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/helpers.d.ts:export type GenericObject = Record<string, any>; // auto",
      "src/types/helpers.d.ts:export type SafeAny = any; // auto - temporary fallback for complex inference",
      "src/types/http-client.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpInterceptor {",
      "src/types/http-client.ts:export interface HttpClientConfig {",
      "src/types/http-client.ts:export interface CacheConfig {",
      "src/types/http-client.ts:export interface AuthenticationConfig {",
      "src/types/http-client.ts:export interface EnhancedRequestConfig extends HttpRequestConfig {",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/http-client.ts:export interface RetryConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface RateLimiterConfig {",
      "src/types/http-client.ts:export interface RateLimitStatus {",
      "src/types/http-client.ts:export interface HttpRequestMetrics {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface StripeClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ConvertKitClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface GitHubClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpError extends Error {",
      "src/types/http-client.ts:export interface ErrorHandlerConfig {",
      "src/types/http-client.ts:export interface HttpMockConfig {",
      "src/types/http-client.ts:export interface HttpClientTestUtils {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/http-client.ts:export interface HttpClientPlugin {",
      "src/types/http-client.ts:export interface PluginManager {",
      "src/types/index.ts: * Centralized exports for all API and service interfaces",
      "src/types/index.ts:export * from './api';",
      "src/types/index.ts:export * from './services/stripe-api';",
      "src/types/index.ts:export * from './services/convertkit-api';",
      "src/types/index.ts:export * from './services/webhook-api';",
      "src/types/index.ts:export * from './alarm-scheduling';",
      "src/types/index.ts:export * from './app-state';",
      "src/types/index.ts:export * from './api-responses';",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/index.ts:export * from './app-state';",
      "src/types/index.ts:export * from './api-responses';",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/index.ts:// Re-export commonly used interfaces with descriptive names",
      "src/types/index.ts:export const isApiResponse = <T>(value: unknown): value is ApiResponse<T> => {",
      "src/types/index.ts:export const isApiError = (value: unknown): value is ApiError => {",
      "src/types/index.ts:export const isPaginatedResponse = <T>(",
      "src/types/index.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/index.ts:export type DeepPartial<T> = {",
      "src/types/index.ts:export const DEFAULT_PAGINATION: PaginationParams = {",
      "src/types/index.ts:export interface ApiEnvironmentConfig {",
      "src/types/index.ts:export interface ServiceFactory {",
      "src/types/index.ts:export interface GlobalErrorHandler {",
      "src/types/index.ts:export interface TelemetryData {",
      "src/types/index.ts:export interface MonitoringService {",
      "src/types/index.ts:export interface ServiceHealthCheck {",
      "src/types/index.ts:export interface HealthCheckResponse {",
      "src/types/manual-fixes.d.ts: * This file re-exports all domain interfaces from the centralized domain.ts file",
      "src/types/manual-fixes.d.ts:// Re-export all domain interfaces",
      "src/types/manual-fixes.d.ts:export * from './domain';",
      "src/types/manual-fixes.d.ts:// Legacy compatibility exports (deprecated - use domain.ts imports instead)",
      "src/types/premium.ts:export type SubscriptionStatus =",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:export type PaymentStatus =",
      "src/types/premium.ts:export type RefundStatus = 'pending' | 'succeeded' | 'failed' | 'canceled';",
      "src/types/premium.ts:export interface Subscription {",
      "src/types/premium.ts:export interface SubscriptionPlan {",
      "src/types/premium.ts:export interface PlanPricing {",
      "src/types/premium.ts:export interface PlanLimits {",
      "src/types/premium.ts:export interface PremiumFeature {",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/types/premium.ts:export interface PaymentMethod {",
      "src/types/premium.ts:export interface Invoice {",
      "src/types/premium.ts:export interface InvoiceItem {",
      "src/types/premium.ts:export interface Payment {",
      "src/types/premium.ts:export interface Refund {",
      "src/types/premium.ts:export interface FeatureUsage {",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/premium.ts:export interface Discount {",
      "src/types/premium.ts:export interface UserDiscount {",
      "src/types/premium.ts:export interface Trial {",
      "src/types/premium.ts:export interface FreeCredit {",
      "src/types/premium.ts:export interface ReferralProgram {",
      "src/types/premium.ts:export interface Referral {",
      "src/types/premium.ts:export interface SubscriptionChange {",
      "src/types/premium.ts:export interface CancellationSurvey {",
      "src/types/premium.ts:export interface FeatureAccess {",
      "src/types/premium.ts:export interface FeatureGate {",
      "src/types/premium.ts:export interface CohortData {",
      "src/types/premium.ts:export interface RevenueMetrics {",
      "src/types/premium.ts:export interface SubscriptionError {",
      "src/types/premium.ts:export interface CreateSubscriptionRequest {",
      "src/types/premium.ts:export interface CreateSubscriptionResponse {",
      "src/types/premium.ts:export interface UpdateSubscriptionRequest {",
      "src/types/premium.ts:export interface UpdateSubscriptionResponse {",
      "src/types/premium.ts:export interface CancelSubscriptionRequest {",
      "src/types/premium.ts:export interface CancelSubscriptionResponse {",
      "src/types/premium.ts:export interface StripeWebhookEvent {",
      "src/types/premium.ts:export interface WebhookProcessingResult {",
      "src/types/premium.ts:export interface PremiumUIState {",
      "src/types/premium.ts:export interface SubscriptionDashboardData {",
      "src/types/premium.ts:export interface StripeConfig {",
      "src/types/premium.ts:export interface PayPalConfig {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/premium.ts:export namespace Premium {",
      "src/types/premium.ts:  export type Status = SubscriptionStatus;",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/premium.ts:  export type Payment = PaymentStatus;",
      "src/types/push-notifications.ts:export type NotificationPriority = 'min' | 'low' | 'default' | 'high' | 'max';",
      "src/types/push-notifications.ts:export type NotificationCategory =",
      "src/types/push-notifications.ts:export type NotificationActionType =",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface NotificationAction {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/push-notifications.ts:export interface AlarmNotificationData {",
      "src/types/push-notifications.ts:export interface MotivationNotificationData {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/push-notifications.ts:export interface SystemNotificationData {",
      "src/types/push-notifications.ts:export interface EmergencyNotificationData {",
      "src/types/push-notifications.ts:export interface SocialNotificationData {",
      "src/types/push-notifications.ts:export interface PromotionalNotificationData {",
      "src/types/push-notifications.ts:export type NotificationDataPayload =",
      "src/types/push-notifications.ts:export interface PushSubscriptionData {",
      "src/types/push-notifications.ts:export interface NotificationPreferences {",
      "src/types/push-notifications.ts:export interface PushDeliveryStatus {",
      "src/types/push-notifications.ts:export interface PushAnalytics {",
      "src/types/push-notifications.ts:export interface ServiceWorkerMessage<T = any> {",
      "src/types/push-notifications.ts:export type ServiceWorkerMessageType =",
      "src/types/push-notifications.ts:export interface PushReceivedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClickedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClosedPayload {",
      "src/types/push-notifications.ts:export interface PushTestResults {",
      "src/types/push-notifications.ts:export interface PushNotificationManager {",
      "src/types/push-notifications.ts:export interface PushSubscriptionOptions {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSyncStatusPayload {",
      "src/types/realtime-messages.ts:export interface UserPresenceUpdatePayload {",
      "src/types/realtime-messages.ts:export interface UserActivityPayload {",
      "src/types/realtime-messages.ts:export interface DeviceStatusChangePayload {",
      "src/types/realtime-messages.ts:export interface RecommendationGeneratedPayload {",
      "src/types/realtime-messages.ts:export interface AIAnalysisCompletePayload {",
      "src/types/realtime-messages.ts:export interface VoiceMoodDetectedPayload {",
      "src/types/realtime-messages.ts:export interface SleepPatternUpdatedPayload {",
      "src/types/realtime-messages.ts:export interface SystemNotificationPayload {",
      "src/types/realtime-messages.ts:export interface EmergencyAlertPayload {",
      "src/types/realtime-messages.ts:export interface SyncStatusUpdatePayload {",
      "src/types/realtime-messages.ts:export interface SyncConflictDetectedPayload {",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/realtime-messages.ts:export type UserRealtimeMessage =",
      "src/types/realtime-messages.ts:export type AIRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SystemRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SyncRealtimeMessage =",
      "src/types/realtime-messages.ts:export type RealtimeMessage =",
      "src/types/realtime-messages.ts:export const isAlarmMessage = (",
      "src/types/realtime-messages.ts:export const isUserMessage = (",
      "src/types/realtime-messages.ts:export const isAIMessage = (",
      "src/types/realtime-messages.ts:export const isSystemMessage = (",
      "src/types/realtime-messages.ts:export const isSyncMessage = (",
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {",
      "src/types/realtime-service.ts:export interface RealtimeService {",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface UserRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface AIRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface SystemRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface ConnectionStatus {",
      "src/types/realtime-service.ts:export interface RealtimeServiceMetrics {",
      "src/types/realtime-service.ts:export interface RealtimeDiagnostics {",
      "src/types/realtime-service.ts:export interface RealtimeServiceError {",
      "src/types/realtime-service.ts:export interface RealtimeServiceFactory {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/realtime-service.ts:export interface MockRealtimeService extends RealtimeService {",
      "src/types/realtime-service.ts:export interface RealtimeServiceTestHarness {",
      "src/types/realtime-service.ts:export interface TestScenario {",
      "src/types/realtime-service.ts:export interface TestStep {",
      "src/types/realtime-service.ts:export interface TestResult {",
      "src/types/realtime-service.ts:export interface TestSuite {",
      "src/types/realtime-service.ts:export interface PerformanceTest {",
      "src/types/realtime-service.ts:export interface PerformanceResults {",
      "src/types/realtime/index.ts: * Central export point for all real-time WebSocket, push notification, and Supabase real-time types",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/realtime/index.ts:export type RealtimeEventHandler<T = any> = (payload: T) => void | Promise<void>;",
      "src/types/realtime/index.ts:export type RealtimeSubscriptionCleanup = () => void;",
      "src/types/realtime/index.ts:export interface RealtimeConfigValidation {",
      "src/types/realtime/index.ts:export interface RealtimeFeatureFlags {",
      "src/types/realtime/index.ts:export interface RealtimePerformanceThresholds {",
      "src/types/realtime/index.ts:export interface RealtimeSecurityConfig {",
      "src/types/realtime/index.ts:export const DEFAULT_NOTIFICATION_PREFERENCES: NotificationPreferences = {",
      "src/types/realtime/index.ts:export const DEFAULT_REALTIME_CONFIG: RealtimeServiceConfig = {",
      "src/types/service-architecture.ts:export interface ServiceHealth {",
      "src/types/service-architecture.ts:export interface ServiceDependencyHealth {",
      "src/types/service-architecture.ts:export interface ServiceMetrics {",
      "src/types/service-architecture.ts:export interface ServiceError {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface ServiceConfig {",
      "src/types/service-architecture.ts:export interface CacheConfig {",
      "src/types/service-architecture.ts:export interface ErrorHandlingConfig {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface MonitoringConfig {",
      "src/types/service-architecture.ts:export interface AlertingConfig {",
      "src/types/service-architecture.ts:export interface ServiceDescriptor {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export interface ServiceContainer {",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/service-architecture.ts:export interface CacheEntry<T = any> {",
      "src/types/service-architecture.ts:export interface CacheProvider {",
      "src/types/service-architecture.ts:export interface CacheStats {",
      "src/types/service-architecture.ts:export interface CacheManager {",
      "src/types/service-architecture.ts:export interface ServiceEvent {",
      "src/types/service-architecture.ts:export interface EventBus {",
      "src/types/service-architecture.ts:export interface ServiceLifecycle {",
      "src/types/service-architecture.ts:export interface PerformanceTracker {",
      "src/types/service-architecture.ts:export interface PerformanceMetrics {",
      "src/types/service-architecture.ts:export interface OperationMetrics {",
      "src/types/service-architecture.ts:export interface EventMetrics {",
      "src/types/service-architecture.ts:export interface ServiceRegistry {",
      "src/types/service-architecture.ts:export interface ServiceDiscoveryCriteria {",
      "src/types/service-architecture.ts:export interface ServiceRegistryHealth {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export function isBaseService(obj: any): obj is BaseService {",
      "src/types/service-architecture.ts:export function isServiceConfig(obj: any): obj is ServiceConfig {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface User {",
      "src/types/services/backend-api.ts:export interface UserPreferences {",
      "src/types/services/backend-api.ts:export interface UserSubscription {",
      "src/types/services/backend-api.ts:export interface UserStats {",
      "src/types/services/backend-api.ts:export interface Alarm {",
      "src/types/services/backend-api.ts:export enum DayOfWeek {",
      "src/types/services/backend-api.ts:export interface AlarmSound {",
      "src/types/services/backend-api.ts:export interface SnoozeSettings {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export type ParticipantStatus =",
      "src/types/services/backend-api.ts:export interface ProofSubmission {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface Tournament {",
      "src/types/services/backend-api.ts:export type TournamentFormat =",
      "src/types/services/backend-api.ts:export type TournamentStatus =",
      "src/types/services/backend-api.ts:export interface TournamentSchedule {",
      "src/types/services/backend-api.ts:export interface TournamentParticipant {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface TournamentMatch {",
      "src/types/services/backend-api.ts:export interface TournamentPrizePool {",
      "src/types/services/backend-api.ts:export interface TournamentRules {",
      "src/types/services/backend-api.ts:export interface CreateUserRequest {",
      "src/types/services/backend-api.ts:export interface UpdateUserRequest {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface UserServiceResponses {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/backend-api.ts:export interface TournamentServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSubscriber {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitTag {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitForm {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSequence {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitCustomField {",
      "src/types/services/convertkit-api.ts:export interface AddSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface UpdateSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface TagSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface AddToSequenceRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateTagRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateFormRequest {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscribersListResponse {",
      "src/types/services/convertkit-api.ts:export interface TagsListResponse {",
      "src/types/services/convertkit-api.ts:export interface FormsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SequencesListResponse {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/services/convertkit-api.ts:export interface CustomFieldsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SubscriberStatsResponse {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSubscriberEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookFormEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSequenceEvent {",
      "src/types/services/convertkit-api.ts:export type UserPersona =",
      "src/types/services/convertkit-api.ts:export interface PersonaCampaignConfig {",
      "src/types/services/convertkit-api.ts:export interface PersonaAssignmentRequest {",
      "src/types/services/convertkit-api.ts:export interface EmailCampaignAnalytics {",
      "src/types/services/convertkit-api.ts:export interface SubscriberEngagementMetrics {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscriberServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface CampaignServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface TagServiceResponse {",
      "src/types/services/stripe-api.ts:export interface StripeCustomer {",
      "src/types/services/stripe-api.ts:export interface StripeSubscription {",
      "src/types/services/stripe-api.ts:export interface StripeSubscriptionItem {",
      "src/types/services/stripe-api.ts:export interface StripePrice {",
      "src/types/services/stripe-api.ts:export interface StripePaymentMethod {",
      "src/types/services/stripe-api.ts:export interface StripeInvoice {",
      "src/types/services/stripe-api.ts:export interface StripeAddress {",
      "src/types/services/stripe-api.ts:export interface StripeShipping {",
      "src/types/services/stripe-api.ts:export interface StripeDiscount {",
      "src/types/services/stripe-api.ts:export interface StripeCoupon {",
      "src/types/services/stripe-api.ts:export interface StripeInvoiceLineItem {",
      "src/types/services/stripe-api.ts:export interface CreateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface UpdateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface CreatePaymentIntentRequest {",
      "src/types/services/stripe-api.ts:export interface CreateCustomerRequest {",
      "src/types/services/stripe-api.ts:export interface StripeServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/stripe-api.ts:export interface SubscriptionServiceResponse {",
      "src/types/services/stripe-api.ts:export interface PaymentServiceResponse {",
      "src/types/services/stripe-api.ts:export interface CustomerServiceResponse {",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookVerificationResult {",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type SupabaseWebhookEventType = 'INSERT' | 'UPDATE' | 'DELETE';",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export interface WebhookHandlerResult {",
      "src/types/services/webhook-api.ts:export interface WebhookConfig {",
      "src/types/services/webhook-api.ts:export interface WebhookProcessingStatus {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistryEntry {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistry {",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/types/services/webhook-api.ts:export interface WebhookServiceResponse extends ApiResponse {",
      "src/types/state-updaters.ts:export type StateUpdater<T> = (prev: T) => T;",
      "src/types/state-updaters.ts:export type ArrayStateUpdater<T> = (prev: T[]) => T[];",
      "src/types/state-updaters.ts:export type ObjectStateUpdater<T extends Record<string, any>> = (prev: T) => T;",
      "src/types/state-updaters.ts:export interface PerformanceHistoryEntry {",
      "src/types/state-updaters.ts:export interface PreloadingStatus {",
      "src/types/state-updaters.ts:export interface AudioLoadingError {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface WarmingStatus {",
      "src/types/state-updaters.ts:export interface OptimizationStatus {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface CachePerformanceHistoryEntry {",
      "src/types/struggling-sam.ts:export interface UserStreak {",
      "src/types/struggling-sam.ts:export interface StreakMilestone {",
      "src/types/struggling-sam.ts:export interface StreakReward {",
      "src/types/struggling-sam.ts:export interface SamAchievement {",
      "src/types/struggling-sam.ts:export type SamAchievementType =",
      "src/types/struggling-sam.ts:export interface AchievementProgress {",
      "src/types/struggling-sam.ts:export interface AchievementRequirement {",
      "src/types/struggling-sam.ts:export interface SocialProofData {",
      "src/types/struggling-sam.ts:export type SocialProofType =",
      "src/types/struggling-sam.ts:export interface SocialEngagement {",
      "src/types/struggling-sam.ts:export interface SocialChallenge {",
      "src/types/struggling-sam.ts:export type SocialChallengeType =",
      "src/types/struggling-sam.ts:export interface ChallengeParticipant {",
      "src/types/struggling-sam.ts:export interface SocialChallengeReward {",
      "src/types/struggling-sam.ts:export interface ChallengeLeaderboard {",
      "src/types/struggling-sam.ts:export interface SocialProofMetrics {",
      "src/types/struggling-sam.ts:export interface SmartUpgradePrompt {",
      "src/types/struggling-sam.ts:export type UpgradeTriggerType =",
      "src/types/struggling-sam.ts:export type UpgradePromptType =",
      "src/types/struggling-sam.ts:export interface UpgradeDiscount {",
      "src/types/struggling-sam.ts:export interface UpgradeUrgency {",
      "src/types/struggling-sam.ts:export interface UpgradeContext {",
      "src/types/struggling-sam.ts:export interface ABTestGroup {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface ABTestResults {",
      "src/types/struggling-sam.ts:export interface ABTestMetrics {",
      "src/types/struggling-sam.ts:export interface UserABTest {",
      "src/types/struggling-sam.ts:export interface UserABTestMetrics {",
      "src/types/struggling-sam.ts:export interface HabitCelebration {",
      "src/types/struggling-sam.ts:export type CelebrationType =",
      "src/types/struggling-sam.ts:export interface CelebrationTrigger {",
      "src/types/struggling-sam.ts:export interface CelebrationAnimation {",
      "src/types/struggling-sam.ts:export interface CelebrationReward {",
      "src/types/struggling-sam.ts:export interface CelebrationSocialShare {",
      "src/types/struggling-sam.ts:export interface SuccessStory {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface CommunityStats {",
      "src/types/struggling-sam.ts:export interface RealtimeActivity {",
      "src/types/struggling-sam.ts:export interface ABTestContext {",
      "src/types/subscription.d.ts:export interface SubscriptionPlanDbRow {",
      "src/types/subscription.d.ts:export interface TrialDbRow {",
      "src/types/subscription.d.ts:export interface DiscountDbRow {",
      "src/types/subscription.d.ts:export interface RetentionOffer {",
      "src/types/subscription.d.ts:export interface CreateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface UpdateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface CancelSubscriptionResult {",
      "src/types/subscription.d.ts:export interface DiscountValidationResult {",
      "src/types/subscription.d.ts:export interface TrialStartResult {",
      "src/types/subscription.d.ts:export interface FeatureUsageParams {",
      "src/types/subscription.d.ts:export interface DiscountUsageParams {",
      "src/types/subscription.d.ts:export interface FeatureUsageDbRow {",
      "src/types/subscription.d.ts:export interface UserDiscountDbRow {",
      "src/types/subscription.d.ts:export interface ReferralDbRow {",
      "src/types/subscription.d.ts:export interface FreeTierLimits {",
      "src/types/subscription.d.ts:export interface ReferralStats {",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionTier(tier: string): boolean;",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionStatus(status: string): boolean;",
      "src/types/supabase-api.ts:export interface DatabaseUser {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface DatabaseSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseSignUpRequest {",
      "src/types/supabase-api.ts:export interface SupabaseSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabaseOAuthSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabasePasswordResetRequest {",
      "src/types/supabase-api.ts:export interface SupabaseUpdateUserRequest {",
      "src/types/supabase-api.ts:export type SupabaseFilterOperator =",
      "src/types/supabase-api.ts:export interface SupabaseQueryFilter {",
      "src/types/supabase-api.ts:export interface SupabaseQueryOptions {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface SupabaseSubscriptionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeMessage<T = unknown> {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadRequest {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadResponse {",
      "src/types/supabase-api.ts:export interface SupabaseFileMetadata {",
      "src/types/supabase-api.ts:export interface SupabaseSignedUrlRequest {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-api.ts:export interface UserServiceResponse {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionStats {",
      "src/types/supabase-api.ts:export interface SupabasePerformanceMetrics {",
      "src/types/supabase-realtime.ts:export type DatabaseEventType = 'INSERT' | 'UPDATE' | 'DELETE' | 'TRUNCATE';",
      "src/types/supabase-realtime.ts:export interface DatabaseChangePayload<T = any> {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserSettingsChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserPresenceChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface PushSubscriptionChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface AnalyticsEventChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export type DatabaseChange =",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelConfig {",
      "src/types/supabase-realtime.ts:export interface RealtimeSubscription {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelManager {",
      "src/types/supabase-realtime.ts:export interface PresenceState {",
      "src/types/supabase-realtime.ts:export interface PresenceInfo {",
      "src/types/supabase-realtime.ts:export interface PresenceManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinator {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinationResult {",
      "src/types/supabase-realtime.ts:export interface SyncConflict {",
      "src/types/supabase-realtime.ts:export interface SyncConflictResolution {",
      "src/types/supabase-realtime.ts:export type SyncTriggerReason =",
      "src/types/supabase-realtime.ts:export interface SyncStatus {",
      "src/types/supabase-realtime.ts:export interface ChannelStatus {",
      "src/types/supabase-realtime.ts:export interface RealtimeConnectionMetrics {",
      "src/types/supabase-realtime.ts:export interface RealtimeError {",
      "src/types/supabase-realtime.ts:export interface RealtimeRecoveryStrategy {",
      "src/types/supabase-realtime.ts:export interface RealtimeHealthCheck {",
      "src/types/supabase-realtime.ts:export interface HealthCheckResult {",
      "src/types/supabase-realtime.ts:export type HealthStatus = 'healthy' | 'degraded' | 'unhealthy' | 'unknown';",
      "src/types/tabProtection.ts:export interface TabProtectionSettings {",
      "src/types/tabProtection.ts:export const DEFAULT_TAB_PROTECTION_SETTINGS: TabProtectionSettings = {",
      "src/types/tabProtection.ts:export const formatProtectionMessage = (",
      "src/types/tabProtection.ts:export const getTabProtectionSettings = (): TabProtectionSettings => {",
      "src/types/tabProtection.ts:export const saveTabProtectionSettings = (settings: TabProtectionSettings): void => {",
      "src/types/tabProtection.ts:export const formatTimeframe = (minutes: number): string => {",
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;",
      "src/types/timers.ts:export function safeClearTimeout(handle: MaybeTimeoutHandle): void {",
      "src/types/timers.ts:export function safeSetTimeout(callback: () => void, delay: number): TimeoutHandle {",
      "src/types/user.ts:export interface SubscriptionInfo {",
      "src/types/user.ts:export interface AppUser {",
      "src/types/user.ts:export function hasSubscriptionTier(",
      "src/types/user.ts:export function normalizeUserSubscription(_user: Partial<User | AppUser>): User {",
      "src/types/user.ts:export function isPremiumUser(_user: User | AppUser | null | undefined): boolean {",
      "src/types/user.ts:export function getSubscriptionStatus(",
      "src/types/utility-types.ts:export type Nullable<T> = T | null; // type-safe replacement for any | null",
      "src/types/utility-types.ts:export type Optional<T> = T | undefined; // type-safe replacement for any | undefined",
      "src/types/utility-types.ts:export type Maybe<T> = T | null | undefined; // type-safe replacement for any | null | undefined",
      "src/types/utility-types.ts:export type RecordMap<K extends string | number | symbol, V> = Record<K, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type StringMap<V> = Record<string, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type NumberMap<V> = Record<number, V>; // type-safe replacement for Record<number, any>",
      "src/types/utility-types.ts:export type UnknownObject = Record<string, unknown>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type AnyObject = Record<string, any>; // TODO: type definition needed - temporary bridge type",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/types/utility-types.ts:export type StateUpdaterFunction<T> = (prev: T) => T; // type-safe replacement for (prev: any) => any",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utility-types.ts:export type VoidFunction = () => void; // type-safe replacement for Function | any",
      "src/types/utility-types.ts:export type AsyncVoidFunction = () => Promise<void>; // type-safe replacement for async () => any",
      "src/types/utility-types.ts:export type CallbackFunction<T = unknown> = (arg: T) => void; // type-safe replacement for callback: any",
      "src/types/utility-types.ts:export type AsyncCallbackFunction<T = unknown> = (arg: T) => Promise<void>; // type-safe replacement for async callback: any",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:export type TODO_TypeDefinitionNeeded = any; // TODO: type definition needed - mark for future typing",
      "src/types/utility-types.ts:export type Legacy_Any = any; // TODO: type definition needed - legacy any usage that needs proper typing",
      "src/types/utility-types.ts:export interface RetentionOffer {",
      "src/types/utility-types.ts:export interface AlarmHistoryData {",
      "src/types/utility-types.ts:export interface SleepPatternData {",
      "src/types/utility-types.ts:export interface VoiceSettings {",
      "src/types/utility-types.ts:export interface EscalationStrategy {",
      "src/types/utility-types.ts:export interface MotivationalContent {",
      "src/types/utility-types.ts:export const isNotNull = <T>(value: T | null): value is T => value !== null;",
      "src/types/utility-types.ts:export const isNotUndefined = <T>(value: T | undefined): value is T =>",
      "src/types/utility-types.ts:export const isDefined = <T>(value: T | null | undefined): value is T =>",
      "src/types/utils.ts:export type DeepPartial<T> = {",
      "src/types/utils.ts:export type Exact<T> = T extends infer U",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type NonEmptyArray<T> = [T, ...T[]];",
      "src/types/utils.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type ValueOf<T> = T[keyof T];",
      "src/types/utils.ts:export type Flatten<T> = {",
      "src/types/utils.ts:export type DeepReadonly<T> = {",
      "src/types/utils.ts:export type Mutable<T> = {",
      "src/types/utils.ts:export type DeepMutable<T> = {",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type Writeable<T, K extends keyof T> = Omit<T, K> & {",
      "src/types/utils.ts:export type FactoryOptions<T> = DeepPartial<T> & {",
      "src/types/utils.ts:export type FactoryFunction<T, TOptions = FactoryOptions<T>> = (",
      "src/types/utils.ts:export type EventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type AsyncEventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/utils.ts:export type ValidationRule<T> = (value: T) => Result<T, string>;",
      "src/types/utils.ts:export type ValidationSchema<T> = {",
      "src/types/utils.ts:export type TypeGuard<T> = (value: unknown) => value is T;",
      "src/types/utils.ts:export type AsyncTypeGuard<T> = (value: unknown) => Promise<boolean>;",
      "src/types/utils.ts:export type ConfigValue = string | number | boolean | object | null;",
      "src/types/utils.ts:export type Config = Record<ConfigKey, ConfigValue>;",
      "src/types/utils.ts:export type Discriminated<T, K extends keyof T> =",
      "src/types/utils.ts:export const createBrandedId = <B>(prefix: string) => {",
      "src/types/utils.ts:export const extractIdFromBranded = <B>(brandedId: Branded<string, B>): string =>",
      "src/types/utils.ts:export const success = <T>(data: T): Result<T> => ({ success: true, data });",
      "src/types/utils.ts:export const failure = <E = Error>(_error: E): Result<never, E> => ({",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/types/utils.ts:export interface SecurityAlertDetail {",
      "src/types/utils.ts:export interface SecurityAlertEvent extends CustomEvent {",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/types/utils.ts:export type PersonaProfileDiscriminated =",
      "src/types/utils.ts:export const isResult = <T, E>(value: unknown): value is Result<T, E> =>",
      "src/types/utils.ts:export const isFailure = <T, E>(",
      "src/types/utils.ts:export interface StripeWebhookEvent {",
      "src/types/wake-up-mood.ts:export enum WakeUpMood {",
      "src/types/wake-up-mood.ts:export type Mood = WakeUpMood;",
      "src/types/wake-up-mood.ts:export function isValidWakeUpMood(mood: string): mood is keyof typeof WakeUpMood {",
      "src/types/wake-up-mood.ts:export function normalizeWakeUpMood(mood: string): WakeUpMood {",
      "src/types/websocket.ts:export type WebSocketState = 'CONNECTING' | 'OPEN' | 'CLOSING' | 'CLOSED' | 'ERROR';",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/websocket.ts:export interface WebSocketConfig {",
      "src/types/websocket.ts:export interface WebSocketConnectionInfo {",
      "src/types/websocket.ts:export interface DeviceInfo {",
      "src/types/websocket.ts:export interface WebSocketError {",
      "src/types/websocket.ts:export interface WebSocketEventHandlers {",
      "src/types/websocket.ts:export interface WebSocketMetrics {",
      "src/types/websocket.ts:export interface WebSocketManager {",
      "src/types/websocket.ts:export interface WebSocketAuthPayload {",
      "src/types/websocket.ts:export interface WebSocketAuthResponse {",
      "src/types/websocket.ts:export interface WebSocketSubscription {",
      "src/types/websocket.ts:export interface WebSocketSubscriptionManager {",
      "src/types/websocket.ts:export interface WebSocketRateLimit {",
      "src/types/websocket.ts:export interface WebSocketRateLimitStatus {",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {",
      "src/types/websocket.ts:export interface QueuedMessage {",
      "src/types/websocket.ts:export interface WebSocketPool {",
      "src/utils/accessibility.ts:export interface ColorContrastResult {",
      "src/utils/accessibility.ts:export const getRelativeLuminance = (r: number, g: number, b: number): number => {",
      "src/utils/accessibility.ts:export const getContrastRatio = (color1: string, color2: string): number => {",
      "src/utils/accessibility.ts:export const checkContrastAccessibility = (",
      "src/utils/accessibility.ts:export const getContrastImprovedColors = (",
      "src/utils/accessibility.ts:export const createAriaAnnouncement = (",
      "src/utils/accessibility.ts:export class FocusManager {",
      "src/utils/accessibility.ts:export const isElementVisible = (element: HTMLElement): boolean => {",
      "src/utils/accessibility.ts:export const announcePageChange = (pageName: string): void => {",
      "src/utils/accessibility.ts:export const isHighContrastMode = (): boolean => {",
      "src/utils/accessibility.ts:export const prefersReducedMotion = (): boolean => {",
      "src/utils/accessibility.ts:export const addAccessibleTooltip = (",
      "src/utils/accessibility.ts:export default {",
      "src/utils/advancedTranslationValidator.ts:export interface QualityScore {",
      "src/utils/advancedTranslationValidator.ts:export interface CulturalIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface ConsistencyIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface AdvancedValidationResult {",
      "src/utils/advancedTranslationValidator.ts:export interface PerformanceMetrics {",
      "src/utils/advancedTranslationValidator.ts:export class AdvancedTranslationValidator {",
      "src/utils/advancedTranslationValidator.ts:  public exportResults(): Record<SupportedLanguage, AdvancedValidationResult> {",
      "src/utils/advancedTranslationValidator.ts:export default AdvancedTranslationValidator;",
      "src/utils/alarm-conversion.ts:export class AlarmConversionUtil {",
      "src/utils/alarm-conversion.ts:export default AlarmConversionUtil;",
      "src/utils/analysis-worker.ts:export const getAnalysisWorker = (): SleepAnalysisWorker => {",
      "src/utils/analysis-worker.ts:export const terminateAnalysisWorker = (): void => {",
      "src/utils/analysis-worker.ts:export const useAnalysisWorker = () => {",
      "src/utils/analysis-worker.ts:export default SleepAnalysisWorker;",
      "src/utils/css-optimization.ts:export function batchCSSUpdates(",
      "src/utils/css-optimization.ts:export function createCSSProperty(",
      "src/utils/css-optimization.ts:export function getResponsiveValue(",
      "src/utils/css-optimization.ts:export function getContrastColor(hexColor: string): string {",
      "src/utils/css-optimization.ts:export function generateColorScale(",
      "src/utils/css-optimization.ts:export function stylesToCSSString(styles: Record<string, any>): string {",
      "src/utils/css-optimization.ts:export function createDebouncedStyler(delay: number = 16) {",
      "src/utils/css-optimization.ts:export class CSSCustomPropertiesManager {",
      "src/utils/enhanced-focus.ts:export interface FocusSettings {",
      "src/utils/enhanced-focus.ts:export interface FocusIndicatorOptions {",
      "src/utils/enhanced-focus.ts:export interface FocusState {",
      "src/utils/enhanced-focus.ts:export class EnhancedFocusService {",
      "src/utils/enhanced-focus.ts:export default EnhancedFocusService;",
      "src/utils/fallback-strategies.tsx:export interface FallbackState {",
      "src/utils/fallback-strategies.tsx:export const fallbackManager = new FallbackManager();",
      "src/utils/fallback-strategies.tsx:export function useFallbackState() {",
      "src/utils/fallback-strategies.tsx:export class FallbackErrorBoundary extends React.Component<",
      "src/utils/fallback-strategies.tsx:export default fallbackManager;",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateConfig {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationConfig {",
      "src/utils/frame-rate-manager.tsx:export interface FrameMetrics {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationQuality {",
      "src/utils/frame-rate-manager.tsx:export const frameRateManager = new FrameRateManager();",
      "src/utils/frame-rate-manager.tsx:export function useFrameRate() {",
      "src/utils/frame-rate-manager.tsx:export function useOptimizedAnimation(animationId: string, _config: AnimationConfig) {",
      "src/utils/frame-rate-manager.tsx:export function usePerformanceAwareRender() {",
      "src/utils/frame-rate-manager.tsx:export function withFrameRateOptimization<P extends object>(",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateMonitorProps {",
      "src/utils/frame-rate-manager.tsx:export const FrameRateMonitor: React.FC<FrameRateMonitorProps> = ({",
      "src/utils/frame-rate-manager.tsx:export default frameRateManager;",
      "src/utils/http-client.ts:export class EnhancedHttpClient implements HttpClient {",
      "src/utils/http-client.ts:export function createHttpClient(_config?: HttpClientConfig): HttpClient {",
      "src/utils/http-client.ts:export const httpClient = createHttpClient({",
      "src/utils/http-client.ts:export const createSupabaseClient = (_config: { url: string; key: string }) =>",
      "src/utils/http-client.ts:export const createStripeClient = (_config: { secretKey: string }) =>",
      "src/utils/http-client.ts:export const createConvertKitClient = (_config: { apiKey: string }) =>",
      "src/utils/image-optimization.tsx:export interface ImageOptimizationOptions {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageData {",
      "src/utils/image-optimization.tsx:export const imageOptimizer = new ImageOptimizer();",
      "src/utils/image-optimization.tsx:export function useOptimizedImage(src: string, options: ImageOptimizationOptions = {}) {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {",
      "src/utils/image-optimization.tsx:export const OptimizedImage: React.FC<OptimizedImageProps> = ({",
      "src/utils/image-optimization.tsx:export default imageOptimizer;",
      "src/utils/index.ts:export const formatTime = (time: string): string => {",
      "src/utils/index.ts:export const formatDays = (days: number[]): string => {",
      "src/utils/index.ts:export const getNextAlarmTime = (alarm: Alarm): Date | null => {",
      "src/utils/index.ts:export const generateAlarmId = (): string => {",
      "src/utils/index.ts:export const isAlarmTime = (alarm: Alarm): boolean => {",
      "src/utils/index.ts:export const getTimeUntilNextAlarm = (",
      "src/utils/index.ts:export const playNotificationSound = async (): Promise<void> => {",
      "src/utils/index.ts:export const validateAlarmForm = (data: {",
      "src/utils/keyboard-navigation.ts:export interface KeyboardShortcut {",
      "src/utils/keyboard-navigation.ts:export interface NavigationState {",
      "src/utils/keyboard-navigation.ts:export class KeyboardNavigationService {",
      "src/utils/keyboard-navigation.ts:export default KeyboardNavigationService;",
      "src/utils/lazy-loading.tsx:export const AlarmForm = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AlarmRinging = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SleepTracker = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmSettings = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const VoiceSettings = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const OnboardingFlow = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PerformanceDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SleepAnalytics = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AnalyticsDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PersonaAnalyticsDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PersonaFocusDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const ThemeCreator = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const CustomThemeManager = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PremiumDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AccessibilityDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const ComprehensiveSecurityDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PWAStatusDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const withLazyLoading = <P extends object>(",
      "src/utils/lazy-loading.tsx:export const preloadRoute = (routePath: string) => {",
      "src/utils/lazy-loading.tsx:export const useRoutePreloading = () => {",
      "src/utils/lazy-loading.tsx:export const useInteractionPreloading = () => {",
      "src/utils/lazy-loading.tsx:export const usePerformantRender = <T,>(",
      "src/utils/lazy-loading.tsx:export const useMemoryCleanup = (cleanup: () => void, deps: React.DependencyList) => {",
      "src/utils/lazy-loading.tsx:export default {",
      "src/utils/manual-stubs.ts:// export function generateTimeString(): string {",
      "src/utils/manual-stubs.ts:// export function weightedRandom<T>(items: T[]): T {",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmTime(): string {",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmDays(): string[] {",
      "src/utils/manual-stubs.ts:// export function generateUsername(): string {",
      "src/utils/manual-stubs.ts:// export function generateExperience(): number {",
      "src/utils/manual-stubs.ts:// export function generateRating(): number {",
      "src/utils/manual-stubs.ts:// export function generateHexColor(): string {",
      "src/utils/manual-stubs.ts:// export function randomSubset<T>(items: T[]): T[] {",
      "src/utils/manual-stubs.ts:// export function generateId(prefix?: string): string {",
      "src/utils/manual-stubs.ts:// export function generateTimestamp(): string {",
      "src/utils/mobile-accessibility.ts:export interface TouchGesture {",
      "src/utils/mobile-accessibility.ts:export interface MobileAccessibilityState {",
      "src/utils/mobile-accessibility.ts:export interface MobileDevice {",
      "src/utils/mobile-accessibility.ts:export class MobileAccessibilityService {",
      "src/utils/mobile-accessibility.ts:export default MobileAccessibilityService;",
      "src/utils/network-optimization.tsx:export interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {",
      "src/utils/network-optimization.tsx:export interface CacheEntry<T = any> {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:export function useOptimizedRequest<T = any>() {",
      "src/utils/network-optimization.tsx:export function useNetworkStats() {",
      "src/utils/network-optimization.tsx:export const api = {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {",
      "src/utils/network-optimization.tsx:export const NetworkStatus: React.FC<NetworkStatusProps> = ({",
      "src/utils/network-optimization.tsx:export default networkOptimizer;",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlert {",
      "src/utils/performance-alerts.tsx:export interface AlertRule {",
      "src/utils/performance-alerts.tsx:export interface AlertAction {",
      "src/utils/performance-alerts.tsx:export interface PerformanceTrend {",
      "src/utils/performance-alerts.tsx:export interface OptimizationSuggestion {",
      "src/utils/performance-alerts.tsx:export const performanceAlertManager = new PerformanceAlertManager();",
      "src/utils/performance-alerts.tsx:export function usePerformanceAlerts() {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlertDisplayProps {",
      "src/utils/performance-alerts.tsx:export const PerformanceAlertDisplay: React.FC<PerformanceAlertDisplayProps> = ({",
      "src/utils/performance-alerts.tsx:export default performanceAlertManager;",
      "src/utils/performance-profiler.ts:  exportData(): PerformanceEntry[] {",
      "src/utils/performance-profiler.ts:export const performanceProfiler = new PerformanceProfiler();",
      "src/utils/performance-profiler.ts:export function withPerformanceProfiler<T extends {}>(",
      "src/utils/performance-profiler.ts:export function usePerformanceMonitor(componentName: string) {",
      "src/utils/performance-profiler.ts:export { Profiler } from 'react';",
      "src/utils/premium-testing.ts:export const MOCK_USAGE_DATA: Record<string, PremiumUsage> = {",
      "src/utils/premium-testing.ts:export class PremiumTester {",
      "src/utils/premium-testing.ts:export class PremiumIntegrationExamples {",
      "src/utils/premium-testing.ts:export default PremiumIntegrationExamples;",
      "src/utils/progressive-loading.tsx:export interface LoadingPriority {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export interface LoadingState {",
      "src/utils/progressive-loading.tsx:export const progressiveLoader = new ProgressiveLoadManager();",
      "src/utils/progressive-loading.tsx:export function useProgressiveLoad<T>(",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export const ProgressiveWrapper: React.FC<ProgressiveWrapperProps> = ({",
      "src/utils/progressive-loading.tsx:export interface SkeletonProps {",
      "src/utils/progressive-loading.tsx:export const Skeleton: React.FC<SkeletonProps> = ({",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps",
      "src/utils/progressive-loading.tsx:export const ProgressiveImage: React.FC<ProgressiveImageProps> = ({",
      "src/utils/progressive-loading.tsx:export function inlineCriticalCSS() {",
      "src/utils/progressive-loading.tsx:export default progressiveLoader;",
      "src/utils/pwa.ts:export interface PWAInstallEvent extends Event {",
      "src/utils/pwa.ts:export default PWAUtils;",
      "src/utils/rtl-testing.tsx:export const createMockI18n = (language: SupportedLanguage = 'en') => {",
      "src/utils/rtl-testing.tsx:export const renderWithRTL = (ui: ReactElement, options: RTLRenderOptions = {}) => {",
      "src/utils/rtl-testing.tsx:export const rtlTestScenarios = {",
      "src/utils/rtl-testing.tsx:export const rtlPerformanceHelpers = {",
      "src/utils/rtl-testing.tsx:export default {",
      "src/utils/rtl-utilities.ts:export const isRTL = (language: SupportedLanguage): boolean => {",
      "src/utils/rtl-utilities.ts:export const getTextDirection = (language: SupportedLanguage): 'ltr' | 'rtl' => {",
      "src/utils/rtl-utilities.ts:export const rtlClass = {",
      "src/utils/rtl-utilities.ts:export const logicalProperties = {",
      "src/utils/rtl-utilities.ts:export const getTransform = (",
      "src/utils/rtl-utilities.ts:export const rtlClassNames = {",
      "src/utils/rtl-utilities.ts:export const combineRTLClasses = (",
      "src/utils/rtl-utilities.ts:export const generateRTLUtilities = (theme: any) => {",
      "src/utils/screen-reader.ts:export interface ScreenReaderState {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/screen-reader.ts:export class ScreenReaderService {",
      "src/utils/screen-reader.ts:export class ARIAPatterns {",
      "src/utils/screen-reader.ts:export default ScreenReaderService;",
      "src/utils/service-worker-manager.ts:export class ServiceWorkerManager {",
      "src/utils/service-worker-manager.ts:export const serviceWorkerManager = ServiceWorkerManager.getInstance();",
      "src/utils/translationValidation.ts:export interface TranslationStructure {",
      "src/utils/translationValidation.ts:export interface ValidationResult {",
      "src/utils/translationValidation.ts:export interface ValidationIssue {",
      "src/utils/translationValidation.ts:export class TranslationValidator {",
      "src/utils/translationValidation.ts:export const createValidator = (referenceLanguage: SupportedLanguage = 'en') => {",
      "src/utils/translationValidation.ts:export const validateTranslationFile = async (",
      "src/utils/translationValidation.ts:export default TranslationValidator;",
      "src/utils/validation.ts:export interface ValidationResult {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {",
      "src/utils/validation.ts:export const validateTime = (time: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateLabel = (label: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateDays = (days: number[]): ValidationResult => {",
      "src/utils/validation.ts:export const validateVoiceMood = (voiceMood: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateAlarmData = (alarmData: {",
      "src/utils/validation.ts:export const sanitizeTextInput = (input: string): string => {",
      "src/utils/validation.ts:export const sanitizeHtmlInput = (input: string): string => {",
      "src/utils/validation.ts:export const validatePassword = (password: string) => {",
      "src/utils/validation.ts:export const validateNumber = (",
      "src/utils/validation.ts:export const validateEmail = (email: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateUrl = (url: string): ValidationResult => {",
      "src/utils/voice-accessibility.ts:export interface VoiceCommand {",
      "src/utils/voice-accessibility.ts:export interface VoiceAccessibilityState {",
      "src/utils/voice-accessibility.ts:export class VoiceAccessibilityService {",
      "src/utils/voice-accessibility.ts:export default VoiceAccessibilityService;",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/App.tsx:import { formatProtectionMessage, formatTimeframe } from './types/tabProtection';",
      "src/App.tsx:    if (typeof updater === 'function') {",
      "src/App.tsx:      dispatch({ type: 'APP_UPDATE' as any, payload: newState });",
      "src/App.tsx:      dispatch({ type: 'APP_UPDATE' as any, payload: updater });",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:            // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:      const { type, data } = event.data;",
      "src/App.tsx:              // type-safe replacement",
      "src/App.tsx:                // type-safe replacement",
      "src/App.tsx:            { context: 'service_worker_message', metadata: { type, data } }",
      "src/App.tsx:          const { type, data } = _event.data;",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:      const { action, emotion_type, notification_id, data: actionData } = event.detail;",
      "src/App.tsx:          type: 'alarm-delete',",
      "src/App.tsx:        type: 'alarm-toggle',",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                  // type-safe replacement",
      "src/App.tsx:                  type: battle.type || 'speed',",
      "src/App.tsx:                  // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'auth_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'api_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:    results.push({ type: 'recovery', data: recovery.data });",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof alarm.is_active).toBe('boolean');",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof response.success).toBe('boolean');",
      "src/__tests__/api/enhanced-msw-handlers.ts:import type { DefaultBodyType, HttpResponseResolver, PathParams } from 'msw';",
      "src/__tests__/api/enhanced-msw-handlers.ts:      type: 'weekly_challenge',",
      "src/__tests__/api/enhanced-msw-handlers.ts:        alarm_type: 'standard',",
      "src/__tests__/api/enhanced-msw-handlers.ts:        type: 'elimination',",
      "src/__tests__/api/enhanced-msw-handlers.ts:      token_type: 'bearer',",
      "src/__tests__/config/global-teardown.ts:          if (typeof task === 'function') {",
      "src/__tests__/factories/core-factories-type-safety.test.ts: * without unsafe 'as any' type casts, ensuring type safety compliance.",
      "src/__tests__/factories/core-factories-type-safety.test.ts: * the core-factories type safety improvements.",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed User object without any casts', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.email).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.username).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.status).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.amount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.elevenlabsVoices).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.customVoiceMessages).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.premiumThemes).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.advancedAIInsights).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.nuclearMode).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.prioritySupport).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.theme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.colorPreferences.colorblindFriendly).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.typographyPreferences.preferredFontSize).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.motionPreferences.enableAnimations).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.soundPreferences.enableSounds).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.layoutPreferences.density).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        typeof personalization.accessibilityPreferences.screenReaderOptimized",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return proper Theme type for gameTheme', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof gameTheme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed SmartAlarmSettings', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.weatherEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.locationEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.fitnessEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.smartWakeWindow).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.adaptiveDifficulty).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.contextualTasks).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.environmentalAdjustments).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleParticipantStats', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.tasksCompleted).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.snoozeCount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.score).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof stats.wakeTime).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleSettings', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof settings.duration).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.maxParticipants).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.allowLateJoins).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.speedTarget).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.description).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.completed).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattlePrize', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof battle.prize.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.title).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.badge).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.seasonPoints).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should not contain any as any type casts in generated objects', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      // because the runtime types would not match the expected TypeScript types",
      "src/__tests__/factories/core-factories.ts: * - Battle (with different types and statuses)",
      "src/__tests__/factories/core-factories.ts:    colorblindFriendly: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    highContrastMode: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts:    dyslexiaFriendly: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    enableAnimations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    reduceMotion: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    preferCrossfade: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    enableParallax: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    enableHoverEffects: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    enableFocusAnimations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    enableSounds: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    muteOnFocus: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    spatialAudio: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    showLabels: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    showIcons: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    screenReaderOptimized: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    keyboardNavigationOnly: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    highContrastMode: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts:    largeTargets: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    reducedTransparency: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    boldText: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    underlineLinks: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    flashingElementsReduced: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    colorOnlyIndicators: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  syncAcrossDevices: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:  weatherEnabled: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:  locationEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:  fitnessEnabled: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:  adaptiveDifficulty: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:  contextualTasks: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:  environmentalAdjustments: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    notificationsEnabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    soundEnabled: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    rewardsEnabled: faker.datatype.boolean({ probability: 0.85 }),",
      "src/__tests__/factories/core-factories.ts:    aiInsightsEnabled: premium && faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    personalizedMessagesEnabled: faker.datatype.boolean({ probability: 0.75 }),",
      "src/__tests__/factories/core-factories.ts:    shareAchievements: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    battleNotifications: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    friendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    trashTalkEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    autoJoinBattles: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    smartFeaturesEnabled: premium && faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    fitnessIntegration: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    locationChallenges: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    photoChallenges: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    email: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    sms: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    profileVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    statsVisible: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    allowFriendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    enabled = faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    isActive: enabled && faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    customSoundId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:    snoozeEnabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    lastTriggered: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/core-factories.ts:    weatherEnabled: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:          adaptiveVolume: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:          sleepCycleDetection: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:          contextualMessages: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  actualWakeTime: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/core-factories.ts:  battleId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:  dismissed: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  snoozed: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:  type?: BattleType;",
      "src/__tests__/factories/core-factories.ts:    type = faker.helpers.arrayElement(COMMON_DATA.battleTypes) as BattleType,",
      "src/__tests__/factories/core-factories.ts:    tournamentId: type === 'tournament' ? generateId('tournament') : undefined,",
      "src/__tests__/factories/core-factories.ts:    teamId: type === 'team' ? generateId('team') : undefined,",
      "src/__tests__/factories/core-factories.ts:    seasonId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:    completedAt: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/core-factories.ts:  type: BattleType;",
      "src/__tests__/factories/core-factories.ts:    allowLateJoin: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    publicVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    autoStart: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    requireVerification: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    trashTalkEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    isPremium = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:  reducedTransparency: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts: * const tournamentBattle = createFlexibleBattle({ type: 'tournament' });",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.alarmAccuracy).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.wakeUpSuccess).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.userSatisfaction).toBe('number');",
      "src/__tests__/factories/enhanced-factories.ts:      sendTimeOptimization: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      personalizedSubjectLines: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      dynamicContent: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      abTestEnabled: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:    isActive: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/factories.test.ts: * consistent, properly typed mock data for testing purposes.",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:    it('should respect type parameter', () => {",
      "src/__tests__/factories/factories.test.ts:      const asset = createTestMediaAsset({ type: 'audio' });",
      "src/__tests__/factories/factories.test.ts:      expect(asset.type).toBe('audio');",
      "src/__tests__/factories/factory-utils.ts: * Enables flexible test object creation while maintaining type safety",
      "src/__tests__/factories/gaming-factories.ts:    unlocked = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/gaming-factories.ts:    completed: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/gaming-factories.ts:  const type = faker.helpers.arrayElement(requirementTypes[category]);",
      "src/__tests__/factories/gaming-factories.ts:    optional: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/gaming-factories.ts:  type?: 'single-elimination' | 'round-robin' | 'swiss';",
      "src/__tests__/factories/gaming-factories.ts:    type = faker.helpers.arrayElement(['single-elimination', 'round-robin', 'swiss']),",
      "src/__tests__/factories/gaming-factories.ts:  const rounds = createTestTournamentRounds(type, participantCount, status);",
      "src/__tests__/factories/gaming-factories.ts:    seasonId: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/gaming-factories.ts:  eliminated: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/gaming-factories.ts:  eliminatedRound: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/gaming-factories.ts:  type: 'single-elimination' | 'round-robin' | 'swiss',",
      "src/__tests__/factories/gaming-factories.ts:  if (type === 'single-elimination') {",
      "src/__tests__/factories/gaming-factories.ts:  completedAt: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/gaming-factories.ts:    isPublic = faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/gaming-factories.ts:    currentSeason: faker.datatype.boolean({ probability: 0.8 })",
      "src/__tests__/factories/gaming-factories.ts:      requireApproval: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/gaming-factories.ts:      allowInvites: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/gaming-factories.ts:      publicStats: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/gaming-factories.ts:      notifications: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/gaming-factories.ts:  isActive: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/gaming-factories.ts:      type: faker.helpers.arrayElement(['challenge', 'community', 'special']),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement(['global', 'friends', 'team', 'regional']),",
      "src/__tests__/factories/gaming-factories.ts:  type: overrides.type || faker.helpers.arrayElement(['speed', 'consistency', 'tasks']),",
      "src/__tests__/factories/premium-factories.ts:    trial = status === 'trialing' || faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:      status === 'canceled' || faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:      campaign: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/premium-factories.ts:      referrer: faker.datatype.boolean({ probability: 0.2 })",
      "src/__tests__/factories/premium-factories.ts:    isAddon: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:    addonPrice: faker.datatype.boolean({ probability: 0.2 })",
      "src/__tests__/factories/premium-factories.ts:    comingSoon: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:  emotionalAdaptation: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/premium-factories.ts:  contextAwareness: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/premium-factories.ts:  personalizedMessages: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/premium-factories.ts:  multiLanguage: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/premium-factories.ts:  customizable: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/premium-factories.ts:  backgroundMusic: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/premium-factories.ts:  voiceEffects: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/premium-factories.ts:  realTimeGeneration: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/premium-factories.ts:    isPreloaded: !isCustom && faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/premium-factories.ts:  type: faker.helpers.arrayElement(['sleep', 'wake', 'habit', 'battle', 'voice']),",
      "src/__tests__/factories/premium-factories.ts:  actionable: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/premium-factories.ts:  type: faker.helpers.arrayElement(['wake-time', 'consistency', 'streak', 'battles']),",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoicePersonality = Partial<VoicePersonality> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceSample = Partial<VoiceSample> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceFeatures = Partial<VoiceFeatures>;",
      "src/__tests__/factories/premium-factories.ts:export type SafeSleepInsights = Partial<SleepInsights> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeWakeUpPatterns = Partial<WakeUpPatterns> & { averageWakeTime?: string };",
      "src/__tests__/factories/premium-factories.ts:export type SafePerformanceMetrics = Partial<PerformanceMetrics> & {",
      "src/__tests__/factories/support-factories.ts:  type?: 'alarm' | 'battle' | 'achievement' | 'social' | 'system';",
      "src/__tests__/factories/support-factories.ts:    type = faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:    read = faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:    actionRequired: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:    actionUrl: faker.datatype.boolean({ probability: 0.4 }) ? generateUrl() : undefined,",
      "src/__tests__/factories/support-factories.ts:    expiresAt: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      alarms: faker.datatype.boolean({ probability: 0.95 }),",
      "src/__tests__/factories/support-factories.ts:      battles: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      achievements: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      social: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      marketing: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      digest: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:      important: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      marketing: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:      sound: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      vibration: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      badge: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      batchSimilar: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      animations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      reduceMotion: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      highContrast: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      screenReader: faker.datatype.boolean({ probability: 0.05 }),",
      "src/__tests__/factories/support-factories.ts:      largeText: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/support-factories.ts:      colorBlindSupport: faker.datatype.boolean({ probability: 0.08 }),",
      "src/__tests__/factories/support-factories.ts:      keyboardNavigation: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      profileVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      statsVisible: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      allowFriendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:      showOnlineStatus: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      dataCollection: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      biometricAuth: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:      autoLock: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      requireAuthForSettings: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      cloudSync: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      localBackup: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      autoCleanup: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      betaFeatures: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/support-factories.ts:      aiFeatures: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      analyticsSharing: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:  type?: 'image' | 'audio' | 'video' | 'document';",
      "src/__tests__/factories/support-factories.ts:    type = faker.helpers.arrayElement(['image', 'audio', 'video', 'document']),",
      "src/__tests__/factories/support-factories.ts:    isUserGenerated = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      type === 'image' ? `${generateUrl()}/thumbnails/${fileName}` : undefined,",
      "src/__tests__/factories/support-factories.ts:      type === 'image'",
      "src/__tests__/factories/support-factories.ts:    isPublic: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      variants: type === 'image' ? ['thumbnail', 'medium', 'large'] : ['original'],",
      "src/__tests__/factories/support-factories.ts:    extensions[type as keyof typeof extensions] || ['bin']",
      "src/__tests__/factories/support-factories.ts:  return mimeTypes[type as keyof typeof mimeTypes] || 'application/octet-stream';",
      "src/__tests__/factories/support-factories.ts:    isEnabled: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:    isConnected: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      autoSync: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      notifications: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:        success: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:      stack: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/support-factories.ts:    userId: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:import type { UserEvent } from '@testing-library/user-event';",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:  async typeWithDelay(",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        await this.user.type(element, char);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        await this.user.type(field, value);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:      await this.user.type(field, value);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        if (typeof expectedErrorMessage === 'string') {",
      "src/__tests__/integration/state-interface-validation.test.ts:} from '../../types/app-state';",
      "src/__tests__/integration/state-interface-validation.test.ts:    it('should simulate alarm reducer with typed state', () => {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (data.type === 'authentication_request') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:                  type: 'authentication_response',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (data.type === 'authentication_response' && data.success) {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'authentication_request',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (message.type === 'alarm_triggered') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (message.type === 'alarm_dismissed') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'alarm_dismissed',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'user_presence_update') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:                type: scenario.activity,",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'user_presence_update',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'recommendation_generated') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'alarm_optimization',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'recommendation_generated',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'ai_analysis_complete') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'sleep_pattern',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'ai_analysis_complete',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(analysisResults[0]?.type).toBe('sleep_pattern');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (data.type === 'heartbeat_pong') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            type: 'heartbeat_ping',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'system_notification') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'warning',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            type: 'primary',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'system_notification',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(notifications[0]?.type).toBe('warning');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_1', data: 'test1' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_2', data: 'test2' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_3', data: 'test3' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            type: 'rate_limit_test',",
      "src/__tests__/mobile/mobile-testing-utilities.ts:  private testEvents: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/mobile/mobile-testing-utilities.ts:  private logEvent(type: string, data: any) {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:    this.testEvents.push({ type, data, timestamp: Date.now() });",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: true, type: 'wifi' as const },",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: true, type: 'cellular' as const },",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: false, type: 'none' as const },",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: true, type: 'wifi' as const }, // Reconnection",
      "src/__tests__/mobile/mobile-testing-utilities.ts:    for (const type of hapticTypes) {",
      "src/__tests__/mocks/audio-mock.ts:    if (type.includes('audio/mpeg') || type.includes('audio/mp3')) {",
      "src/__tests__/mocks/audio-mock.ts:    if (type.includes('audio/wav') || type.includes('audio/ogg')) {",
      "src/__tests__/mocks/audio-mock.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/mocks/capacitor.mock.ts:type PermissionState = 'granted' | 'denied' | 'prompt';",
      "src/__tests__/mocks/capacitor.mock.ts:type Platform = 'web' | 'ios' | 'android';",
      "src/__tests__/mocks/capacitor.mock.ts:type NotificationAction = 'tap' | 'dismiss' | 'snooze';",
      "src/__tests__/mocks/capacitor.mock.ts:type HapticType = 'LIGHT' | 'MEDIUM' | 'HEAVY';",
      "src/__tests__/mocks/capacitor.mock.ts:type NotificationType = 'SUCCESS' | 'WARNING' | 'ERROR';",
      "src/__tests__/mocks/capacitor.mock.ts:  registerActionTypes: vi.fn((options: { types: any[] }) => {",
      "src/__tests__/mocks/capacitor.mock.ts:  notification: vi.fn((options?: { type?: NotificationType }) => {",
      "src/__tests__/mocks/capacitor.mock.ts:    return Promise.resolve({ type: 'portrait-primary' });",
      "src/__tests__/mocks/capacitor.mock.ts:    permission: keyof typeof mockState.device.permissions,",
      "src/__tests__/mocks/capacitor.mock.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:} from '../../types/service-architecture';",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:      type: config.type || 'weekly_challenge',",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/msw-handlers.ts:      token_type: 'bearer',",
      "src/__tests__/mocks/msw-handlers.ts:          type: 'card',",
      "src/__tests__/mocks/msw-handlers.ts:      type: 'card',",
      "src/__tests__/mocks/platform-service-mocks.ts:import type { User } from '@supabase/supabase-js';",
      "src/__tests__/mocks/platform-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/platform-service-mocks.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/platform-service-mocks.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/platform-service-mocks.ts:          type: 'weekly_challenge',",
      "src/__tests__/mocks/platform-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/platform-service-mocks.ts:  send(type: string, payload: any) {",
      "src/__tests__/mocks/platform-service-mocks.ts:    MockSupabaseRealtimeChannel.logCall('channel.send', [this.name, type, payload]);",
      "src/__tests__/mocks/posthog.mock.ts:      if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/posthog.mock.ts:        if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/react-router.mock.ts:      } else if (typeof params === 'object') {",
      "src/__tests__/mocks/react-router.mock.ts:      } else if (typeof params === 'string') {",
      "src/__tests__/mocks/react-router.mock.ts:  const href = typeof to === 'string' ? to : to.pathname || '#';",
      "src/__tests__/mocks/react-router.mock.ts:    const linkPath = typeof to === 'string' ? to : to.pathname;",
      "src/__tests__/mocks/react-router.mock.ts:      typeof className === 'function'",
      "src/__tests__/mocks/react-router.mock.ts:  if (typeof pattern === 'string') {",
      "src/__tests__/mocks/react-router.mock.ts:    if (typeof searchParams === 'string') {",
      "src/__tests__/mocks/sentry.mock.ts:      if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:      type: battleData.type || 'weekly_challenge',",
      "src/__tests__/mocks/service-mocks.ts:            type: 'auto_generated',",
      "src/__tests__/mocks/stripe.mock.ts:      create: jest.fn((type: string, options?: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:  createPaymentMethod: jest.fn(({ type, card, billing_details }: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:        type: 'card',",
      "src/__tests__/mocks/stripe.mock.ts:        type: 'payment_intent.succeeded',",
      "src/__tests__/mocks/stripe.mock.ts:                type: 'card',",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'card_error';",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'invalid_request_error';",
      "src/__tests__/mocks/supabase.mock.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/supabase.mock.ts:        const mockBlob = new Blob(['mock file content'], { type: 'text/plain' });",
      "src/__tests__/mocks/supabase.mock.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/websocket-type-mocks.ts:} from '../../types/realtime-messages';",
      "src/__tests__/mocks/websocket-type-mocks.ts:    type: 'mobile' | 'tablet' | 'desktop' | 'smartwatch' | 'smart_speaker' = 'mobile'",
      "src/__tests__/mocks/websocket-type-mocks.ts:        webRTC: type !== 'smartwatch',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          network: { type: 'cellular', effectiveType: '4g', downlink: 25, rtt: 50 },",
      "src/__tests__/mocks/websocket-type-mocks.ts:      details: { errorType: type, timestamp: Date.now() },",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'alarm_updates',",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'math',",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'viewing_alarms',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'alarm_optimization',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'sleep_pattern',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'voice_training',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'bedtime_adjustment',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'primary',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'secondary',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'service_outage',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'incremental_sync',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: type as any,",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.id === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.type === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.timestamp === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.platform === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.notifications === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.serviceWorker === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.webSocket === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.webRTC === 'boolean'",
      "src/__tests__/payments/payment-testing-utilities.ts:      payment_method_types: ['card'],",
      "src/__tests__/payments/payment-testing-utilities.ts:      type: 'card',",
      "src/__tests__/payments/payment-testing-utilities.ts:  static createWebhookEvent(type: string, data: any) {",
      "src/__tests__/payments/payment-testing-utilities.ts:  private events: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/payments/payment-testing-utilities.ts:  private logEvent(type: string, data: any) {",
      "src/__tests__/payments/payment-testing-utilities.ts:    this.events.push({ type, data, timestamp: Date.now() });",
      "src/__tests__/payments/payment-testing-utilities.ts:        type: 'card_error',",
      "src/__tests__/payments/payment-testing-utilities.ts:        'content-type': 'application/json',",
      "src/__tests__/performance/performance-testing-utilities.ts:  private alerts: Array<{ type: string; message: string; timestamp: number }> = [];",
      "src/__tests__/performance/performance-testing-utilities.ts:        type: 'threshold_violation',",
      "src/__tests__/providers/context-providers.tsx:    featureAccess?: keyof typeof featureAccessScenarios;",
      "src/__tests__/providers/context-providers.tsx:    language?: keyof typeof languageScenarios;",
      "src/__tests__/providers/context-providers.tsx:    alarm?: keyof typeof alarmScenarios;",
      "src/__tests__/providers/context-providers.tsx:    theme?: keyof typeof themeScenarios;",
      "src/__tests__/providers/enhanced-service-providers.tsx:import type { BaseService, ServiceConfig } from '../../types/service-architecture';",
      "src/__tests__/providers/index.ts:  type MockFeatureAccessContextValue,",
      "src/__tests__/providers/index.ts:  type MockLanguageContextValue,",
      "src/__tests__/providers/index.ts:  type MockAlarmContextValue,",
      "src/__tests__/providers/index.ts:  type MockThemeContextValue,",
      "src/__tests__/providers/index.ts:  type MockAlarmService,",
      "src/__tests__/providers/index.ts:  type MockAnalyticsService,",
      "src/__tests__/providers/index.ts:  type MockBattleService,",
      "src/__tests__/providers/index.ts:  type MockNotificationService,",
      "src/__tests__/providers/index.ts:  type MockStorageService,",
      "src/__tests__/providers/index.ts:  type IntegrationTestOptions,",
      "src/__tests__/providers/integration-provider.tsx:  scenario: keyof typeof integrationScenarios,",
      "src/__tests__/providers/test-providers.tsx:  services?: Partial<ReturnType<typeof createMockServices>>;",
      "src/__tests__/providers/test-providers.tsx:  services?: Partial<ReturnType<typeof createMockServices>>;",
      "src/__tests__/providers/test-providers.tsx:  scenario: keyof typeof testScenarios,",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      if (typeof data === 'string') {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:            this.triggerMessage({ type: 'pong', timestamp: Date.now() });",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          } else if (parsed.type === 'join_battle') {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:              type: 'battle_joined',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          } else if (parsed.type === 'wake_proof') {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:              type: 'wake_proof_verified',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: 'message',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      data: typeof data === 'string' ? data : JSON.stringify(data),",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'broadcast',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'participant_joined',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'wake_proof_submitted',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'leaderboard_updated',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'battle_phase_changed',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'join_battle',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'wake_proof',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:    ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          type: 'performance_test',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      event => event.socketId === ws.id && _event.type === 'event_message'",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          typeof event.data.data === 'string'",
      "src/__tests__/realtime/websocket-testing.ts:  static events: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/realtime/websocket-testing.ts:    MockWebSocket.events.push({ type: 'send', data, timestamp: Date.now() });",
      "src/__tests__/realtime/websocket-testing.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/realtime/websocket-testing.ts:      type: 'message',",
      "src/__tests__/realtime/websocket-testing.ts:      data: typeof data === 'string' ? data : JSON.stringify(data),",
      "src/__tests__/realtime/websocket-testing.ts:        type: 'wake_proof',",
      "src/__tests__/services/realtime-service.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/services/realtime-service.integration.test.ts:  async requestAnalysis(type: string, data: any): Promise<string> {",
      "src/__tests__/services/realtime-service.integration.test.ts:    this.emit(message.type, message.payload);",
      "src/__tests__/services/realtime-service.integration.test.ts:  simulateServerMessage<T>(type: string, payload: T): void {",
      "src/__tests__/services/realtime-service.integration.test.ts:      const message = WebSocketTypeMocks.createMockWebSocketMessage(type, payload, {",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('user_presence_update');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('ai_analysis_request');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.payload.type).toBe('sleep_pattern');",
      "src/__tests__/services/realtime-service.integration.test.ts:    it('should handle multiple recommendation types', async () => {",
      "src/__tests__/services/realtime-service.integration.test.ts:      for (const type of recommendationTypes) {",
      "src/__tests__/services/realtime-service.integration.test.ts:          recommendationId: `rec-${type}-${Date.now()}`,",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(recommendations.map(r => r.type)).toEqual(recommendationTypes);",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(alerts[0]?.type).toBe('service_outage');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(syncUpdates[0]?.type).toBe('incremental_sync');",
      "src/__tests__/services/realtime-service.integration.test.ts:      // Send different types of messages",
      "src/__tests__/services/websocket-manager.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/services/websocket-manager.integration.test.ts:          type: 'heartbeat_ping',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'test_message',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'test_message',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        return message.type?.startsWith('alarm_');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      wsManager.addMessageFilter(message => message.type?.startsWith('alarm_'));",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_dismissed',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const alarmFilter = (message: any) => message.type?.startsWith('alarm_');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[1]?.type).toBe('user_presence_update');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_updates',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_activity',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub1?.type).toBe('alarm_updates');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub2?.type).toBe('user_activity');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'system_notifications',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:      // Simulate various error types by sending invalid messages",
      "src/__tests__/services/websocket-manager.integration.test.ts:      await wsManager.send({ type: 'test1', data: 'small' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      await wsManager.send({ type: 'test2', data: 'larger message with more content' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      mockConnection?.simulateMessage({ type: 'response1', data: 'response' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const subId1 = wsManager.subscribe({ type: 'alarm_updates', priority: 'high' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const subId2 = wsManager.subscribe({ type: 'user_activity', priority: 'normal' });",
      "src/__tests__/setup/after-env-setup.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/setup/after-env-setup.ts:    addEventListener(type: string, listener: any) {",
      "src/__tests__/setup/after-env-setup.ts:      this[`on${type}` as keyof this] = listener;",
      "src/__tests__/setup/after-env-setup.ts:    addEventListener(type: string, listener: any) {",
      "src/__tests__/setup/after-env-setup.ts:      this[`on${type}` as keyof this] = listener;",
      "src/__tests__/setup/after-env-setup.ts:  if (typeof message === 'string') {",
      "src/__tests__/setup/after-env-setup.ts:if (global && typeof global === 'object') {",
      "src/__tests__/setup/global-setup.ts:    if (typeof message === 'string') {",
      "src/__tests__/theme-integration.test.tsx:import type { AppState, User } from '../types';",
      "src/__tests__/types/websocket-types.unit.test.ts: * Tests type guards, message validation, and type utilities",
      "src/__tests__/types/websocket-types.unit.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/types/websocket-types.unit.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'user_presence_update',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'recommendation_generated',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'alarm_optimization',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'system_notification',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'warning',",
      "src/__tests__/types/websocket-types.unit.test.ts:    it('should handle edge cases in type guards', () => {",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'cellular',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'math',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'viewing_alarms',",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(typeof _error.recoverable).toBe('boolean');",
      "src/__tests__/types/websocket-types.unit.test.ts:        expect(_error.message).toContain(type.toLowerCase().replace('_', ' '));",
      "src/__tests__/utils/accessibility-helpers.ts:  type: '_error' | 'warning';",
      "src/__tests__/utils/animation-helpers.tsx:    Element.prototype.animate = jest.fn(() => mockAnimation);",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.label === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.enabled === 'boolean' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.email === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.name === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.name === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.colors.primary === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.colors.background === 'string';",
      "src/__tests__/utils/async-helpers.ts:          if (typeof scenario.expectedError === 'string') {",
      "src/__tests__/utils/audio-helpers.ts:        eventListeners[event.type].forEach(callback => callback(_event));",
      "src/__tests__/utils/audio-helpers.ts:      (global as any).Audio.prototype.canPlayType = mockCanPlayType;",
      "src/__tests__/utils/data-builders.ts:    type: 'daily' | 'weekly' | 'monthly' = 'daily',",
      "src/__tests__/utils/data-builders.ts:    notifications: faker.datatype.boolean({ probability: 0.85 }),",
      "src/__tests__/utils/data-builders.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/utils/data-builders.ts:    voiceFeatures: isPremium ? faker.datatype.boolean({ probability: 0.8 }) : false,",
      "src/__tests__/utils/data-builders.ts:    advancedAnalytics: isPremium ? faker.datatype.boolean({ probability: 0.6 }) : false,",
      "src/__tests__/utils/data-builders.ts:        type: faker.helpers.arrayElement(challengeTypes),",
      "src/__tests__/utils/data-builders.ts:        completed: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/utils/data-builders.ts:        .enabled(faker.datatype.boolean({ probability: 0.8 }));",
      "src/__tests__/utils/dom-helpers.ts:      if (typeof value === 'string') {",
      "src/__tests__/utils/dom-helpers.ts:        await user.type(field, value);",
      "src/__tests__/utils/dom-helpers.ts:      } else if (typeof value === 'boolean' && field.type === 'checkbox') {",
      "src/__tests__/utils/dom-helpers.ts:    type: async (",
      "src/__tests__/utils/i18n-helpers.ts:        if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:      if (typeof value === 'string') {",
      "src/__tests__/utils/i18n-helpers.ts:          if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:        if (typeof value === 'string') {",
      "src/__tests__/utils/i18n-helpers.ts:          if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:        return typeof value === 'string';",
      "src/__tests__/utils/i18n-helpers.ts:      expect(typeof value).toBe('object');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof value).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof translated).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof formattedNumber).toBe('string');",
      "src/__tests__/utils/index.ts:    type: 'daily' | 'weekly' | 'monthly';",
      "src/__tests__/utils/index.ts:    type: 'math' | 'pattern' | 'memory' | 'reaction';",
      "src/__tests__/utils/mobile-helpers.ts:        type: 'portrait-primary',",
      "src/__tests__/utils/mobile-helpers.ts:        type: 'landscape-primary',",
      "src/__tests__/utils/performance-helpers.ts:          type: resource.initiatorType,",
      "src/__tests__/utils/performance-helpers.ts:    leakTest: Awaited<ReturnType<typeof memoryTesting.testMemoryLeak>>",
      "src/analytics/PersonaAnalytics.tsx:import type { Metadata } from '../types/utility-types';",
      "src/analytics/PersonaAnalytics.tsx:// Define missing types based on what the component needs",
      "src/analytics/PersonaAnalytics.tsx:type UserPersona = {",
      "src/analytics/PersonaAnalytics.tsx:  type: PersonaType;",
      "src/analytics/PersonaAnalytics.tsx:export type PersonaAnalyticsEvent =",
      "src/backend/api.ts:// Import types from the main application",
      "src/backend/api.ts:        const type = url.searchParams.get('type');",
      "src/backend/api.ts:        if (!body.type || !body.creatorId || !body.startTime || !body.endTime) {",
      "src/backend/api.ts:// GET  /api/battles - List battles (with type, status, userId filters)",
      "src/backend/cloudflare-functions.ts:      device_type: alarmData.deviceInfo.type,",
      "src/backend/cloudflare-functions.ts:      network_type: alarmData.deviceInfo.networkType,",
      "src/backend/cloudflare-functions.ts:      (id, alarm_id, fired_at, device_type, network_type, battery_level,",
      "src/backend/cloudflare-functions.ts:      existingData && typeof existingData === 'object'",
      "src/backend/cloudflare-functions.ts:      affirmations[theme as keyof typeof affirmations] || affirmations['morning-energy']",
      "src/backend/cloudflare-functions.ts:      GROUP BY a.alarm_type, a.voice_mood",
      "src/backend/cloudflare-functions.ts:          recommendation_type: 'alarm_optimization',",
      "src/backend/cloudflare-functions.ts:          description: `Your ${asString(bestPerforming.alarm_type)} alarms with ${asString(bestPerforming.voice_mood)} mood are ${Math.round((asNumber(bestPerforming.avg_rating, 0) - asNumber(worstPerforming.avg_rating, 0)) * 20)}% more effective.`,",
      "src/backend/cloudflare-functions.ts:            alarm_type: asString(bestPerforming.alarm_type),",
      "src/backend/cloudflare-functions.ts:          recommendation_type: 'voice_optimization',",
      "src/backend/cloudflare-functions.ts:          recommendation_type: 'timing_optimization',",
      "src/backend/cloudflare-functions.ts:      if (data && typeof data === 'object' && 'events' in data) {",
      "src/backend/cloudflare-functions.ts:        const typedData = data as { events: any[]; totalTriggers: number };",
      "src/backend/cloudflare-functions.ts:        aggregatedData.totalAlarmTriggers += typedData.totalTriggers;",
      "src/backend/cloudflare-functions.ts:        for (const _event of typedData.events) {",
      "src/backend/cloudflare-functions.ts:      type: 'usage_pattern',",
      "src/backend/database-types.ts:// Utility type for generic database operations",
      "src/backend/database-types.ts:  return typeof obj === 'object' && obj !== null && 'id' in obj && 'email' in obj;",
      "src/backend/database-types.ts:    typeof obj === 'object' && obj !== null && 'alarm_id' in obj && 'user_id' in obj",
      "src/backend/database-types.ts:  return typeof value === 'number' && !isNaN(value);",
      "src/backend/database-types.ts:  return typeof value === 'string';",
      "src/backend/database-types.ts:// Safe type casting utilities",
      "src/backend/database-types.ts:  if (typeof value === 'number' && !isNaN(value)) return value;",
      "src/backend/database-types.ts:  if (typeof value === 'string') {",
      "src/backend/database-types.ts:  if (typeof value === 'string') return value;",
      "src/backend/database-types.ts:  if (typeof value === 'object' && value !== null) return value;",
      "src/backend/monitoring-integration.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/monitoring-integration.ts:        type: metric.type || 'gauge',",
      "src/backend/monitoring-integration.ts:        event_type: event.event_name || 'performance_metric',",
      "src/backend/monitoring-integration.ts:         device_type, metadata, timestamp, created_at)",
      "src/backend/performance-monitoring.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/performance-monitoring.ts:           page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:             page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:                connection_type: vitalsData.connection_type,",
      "src/backend/performance-monitoring.ts:         page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:          type: 'performance',",
      "src/backend/performance-monitoring.ts:          description: `LCP is ${Math.round(result.avg_value)}ms on ${result.device_type} devices. Target: <2500ms`,",
      "src/backend/performance-monitoring.ts:          type: 'interactivity',",
      "src/backend/performance-monitoring.ts:          description: `FID is ${Math.round(result.avg_value)}ms on ${result.device_type} devices. Target: <100ms`,",
      "src/backend/performance-monitoring.ts:          type: 'stability',",
      "src/backend/performance-monitoring.ts:          description: `CLS is ${result.avg_value.toFixed(3)} on ${result.device_type} devices. Target: <0.1`,",
      "src/backend/performance-monitoring.ts:        type: 'user_pattern',",
      "src/backend/performance-monitoring.ts:                type: error.error_category,",
      "src/backend/stripe-webhooks.ts:    if (invoice.charge && typeof invoice.charge === 'string') {",
      "src/backend/stripe-webhooks.ts:    if (invoice.charge && typeof invoice.charge === 'string') {",
      "src/backend/stripe-webhooks.ts:      type: paymentMethod.type as any,",
      "src/backend/webhook-config.ts:      type: 'customer.subscription.created',",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:    type: 'difficulty_adjustment',",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:    type: 'difficulty_adjustment',",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:    type: 'habit_building',",
      "src/components/AIAutomation.tsx:      { type: 'sleep_pattern', value: 'night_owl', weight: 0.8 },",
      "src/components/AIAutomation.tsx:      { type: 'motivation_style', value: 'gradual_progress', weight: 0.6 },",
      "src/components/AIAutomation.tsx:    personalizedFor: ['sleep_chronotype', 'performance_history'],",
      "src/components/AIAutomation.tsx:    type: 'alarm_optimization',",
      "src/components/AIAutomation.tsx:        type: 'external_api',",
      "src/components/AIAutomation.tsx:        type: 'adjust_alarm',",
      "src/components/AIAutomation.tsx:        type: 'weather',",
      "src/components/AIAutomation.tsx:    type: 'routine_adjustment',",
      "src/components/AIAutomation.tsx:        type: 'performance',",
      "src/components/AIAutomation.tsx:        type: 'update_settings',",
      "src/components/AIAutomation.tsx:        type: 'performance_threshold',",
      "src/components/AIAutomation.tsx:                        {optimization.type.replace('_', ' ')}",
      "src/components/AIAutomation.tsx:                      {typeof recommendation.action === 'object' &&",
      "src/components/AIAutomation.tsx:                        {challenge.type.replace('_', ' ')} Challenge",
      "src/components/AIAutomation.tsx:                              {factor.type.replace('_', ' ')}",
      "src/components/AccessibilityDashboard.tsx:          type=\"range\"",
      "src/components/AccessibilityTester.tsx:  const handlePreferenceChange = (key: keyof typeof preferences, value: any) => {",
      "src/components/AchievementBadges.tsx:import { SamAchievement, SamAchievementType } from '../types/struggling-sam';",
      "src/components/ActiveAlarm.tsx:import type { Alarm, AlarmDifficulty, AlarmInstance } from '../types/index';",
      "src/components/ActiveAlarm.tsx:// Different challenge types based on difficulty",
      "src/components/ActiveAlarm.tsx:        setCurrentChallenge({ type: 'tasks', tasks });",
      "src/components/ActiveAlarm.tsx:        setCurrentChallenge({ type: 'tasks', tasks: extremeTasks });",
      "src/components/ActiveAlarm.tsx:                {currentChallenge && currentChallenge.type === 'tasks' && (",
      "src/components/AdaptiveAlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AdaptiveButton.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveImage.tsx:      if (typeof window === 'undefined') return false;",
      "src/components/AdaptiveModal.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveSpinner.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveSpinner.tsx:    // Different spinner types based on device capabilities",
      "src/components/AdvancedAlarmScheduling.tsx:    return types[type as keyof typeof types] || type;",
      "src/components/AdvancedAlarmScheduling.tsx:                <Label htmlFor=\"schedule-type\">Schedule Type</Label>",
      "src/components/AdvancedAlarmScheduling.tsx:                          type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                    value={formData.recurrencePattern?.type || 'daily'}",
      "src/components/AdvancedAlarmScheduling.tsx:                          type: value as any,",
      "src/components/AdvancedAlarmScheduling.tsx:                              type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                              type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                      type=\"date\"",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'traffic_conditions',",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'weather_forecast',",
      "src/components/AdvancedAlarmScheduling.tsx:              ].map(({ type, icon: Icon, label, desc }) => (",
      "src/components/AdvancedAlarmScheduling.tsx:                            o => o.type === type && o.isEnabled",
      "src/components/AdvancedAlarmScheduling.tsx:                                type: type as any,",
      "src/components/AdvancedSchedulingDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/AdvancedSchedulingDashboard.tsx:              onClick={() => onScheduleAlarm?.({ type: 'smart', enabled: true })}",
      "src/components/AdvancedSchedulingDashboard.tsx:                  <input type=\"checkbox\" className=\"mr-2\" defaultChecked />",
      "src/components/AlarmForm.tsx:import type { Alarm, VoiceMood, CustomSound, AlarmDifficulty, User } from '../types';",
      "src/components/AlarmForm.tsx:import { validateAlarmData, type AlarmValidationErrors } from '../utils/validation';",
      "src/components/AlarmForm.tsx:                    Select the challenge types you want to face:",
      "src/components/AlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AlarmList.tsx:          type: 'alarm-delete',",
      "src/components/AlarmList.tsx:        type: 'alarm-toggle',",
      "src/components/AlarmManagement.tsx:import type { Alarm, DayOfWeek, AlarmDifficulty, VoiceMood } from '../types/index';",
      "src/components/AlarmManagement.tsx:import { type EnhancedSmartAlarm } from '../services/enhanced-smart-alarm-scheduler';",
      "src/components/AlarmManagement.tsx:        key => dayMap[key as keyof typeof dayMap] === checkDate.getDay()",
      "src/components/AlarmManagement.tsx:      const checkDayNumber = dayMap[checkDay as keyof typeof dayMap];",
      "src/components/AlarmRinging.tsx:import type { Alarm, User } from '../types';",
      "src/components/AlarmRinging.tsx:  type VoiceCommand,",
      "src/components/AlarmRinging.tsx:import type { NuclearModeSession, NuclearModeChallenge as Challenge } from '../types';",
      "src/components/AlarmRinging.tsx:// Web Speech API type declarations",
      "src/components/AlarmThemeBrowser.tsx:type SortMode = 'popularity' | 'recent' | 'alphabetical' | 'rating' | 'category';",
      "src/components/AnalyticsDashboard.tsx:      type: 'application/json',",
      "src/components/AnalyticsProvider.tsx:import type { ReactNode } from 'react';",
      "src/components/AnalyticsProvider.tsx:        action_type: action,",
      "src/components/AuthenticationFlow.tsx:type AuthView = 'login' | 'signup' | 'forgot-password';",
      "src/components/BattleSystem.tsx:    type: 'speed' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'consistency' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'tasks' as BattleType,",
      "src/components/BattleSystem.tsx:      const battleType = BATTLE_TYPES.find(bt => bt.type === selectedBattleType)!;",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:          type: battle.type,",
      "src/components/BattleSystem.tsx:          type: battle.type,",
      "src/components/BattleSystem.tsx:      type: battle.type,",
      "src/components/BattleSystem.tsx:              const battleType = BATTLE_TYPES.find(bt => bt.type === battle.type)!;",
      "src/components/BattleSystem.tsx:                                type: 'battle',",
      "src/components/CommunityChallenge.tsx:} from '../types/struggling-sam';",
      "src/components/CommunityHub.tsx:    type: 'daily',",
      "src/components/CommunityHub.tsx:    type: 'achievement',",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                          variant={quest.type === 'daily' ? 'default' : 'secondary'}",
      "src/components/CompleteThemeSystemDemo.tsx:                        type=\"radio\"",
      "src/components/CompleteThemeSystemDemo.tsx:                        type=\"radio\"",
      "src/components/CompleteThemeSystemDemo.tsx:                  type=\"date\"",
      "src/components/CompleteThemeSystemDemo.tsx:                      {ctx.type}: {ctx.value}",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/ComprehensiveSecurityDashboard.tsx:  type: 'immediate' | 'hourly' | 'daily';",
      "src/components/ConsentBanner.tsx:  const handleConsentChange = (type: keyof ConsentSettings, value: boolean) => {",
      "src/components/ConsentBanner.tsx:      [type]: value,",
      "src/components/CustomSoundThemeCreator.tsx:                  (issue: any) => issue.type === 'warning'",
      "src/components/CustomThemeManager.tsx:type SortOption = 'name' | 'created' | 'updated' | 'rating' | 'downloads';",
      "src/components/CustomThemeManager.tsx:type FilterCategory = 'all' | CustomSoundThemeCategory;",
      "src/components/CustomThemeManager.tsx:        type: 'application/json',",
      "src/components/CustomThemeManager.tsx:        type: 'application/json',",
      "src/components/Dashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EmotionalNudgeModal.tsx:} from '../types/emotional';",
      "src/components/EmotionalNudgeModal.tsx:                  type: 'spring' as const,",
      "src/components/EnhancedBattles.tsx:import type { Tournament, Team, Season, User as UserType } from '../types/index';",
      "src/components/EnhancedBattles.tsx:    type: 'single-elimination',",
      "src/components/EnhancedBattles.tsx:                          type: 'tournament',",
      "src/components/EnhancedBattles.tsx:                    <Label htmlFor=\"tournament-type\">Type</Label>",
      "src/components/EnhancedDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EnhancedDashboard.tsx:                  type: achievement.achievementType,",
      "src/components/EnhancedDashboard.tsx:                  type: achievement.achievementType,",
      "src/components/EnhancedDashboard.tsx:                type: celebration.celebrationType,",
      "src/components/EnhancedMediaContent.tsx:} from '../services/types/media';",
      "src/components/EnhancedMediaContent.tsx:    if (!file.type.startsWith('audio/')) {",
      "src/components/EnhancedSettings.tsx:import type { AppState, User } from '../types';",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type EnhancedSmartAlarm,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type ConditionBasedAdjustment,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type OptimalTimeSlot,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type SmartAlarmMetrics,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type WakeUpFeedback,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type SmartRecommendation,",
      "src/components/EnhancedSmartAlarmSettings.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/EnhancedSmartAlarmSettings.tsx:                        type=\"range\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                        type=\"range\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                              {condition.type.replace('_', ' ')} Adjustment",
      "src/components/ErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/ExtendedScreenReaderTester.tsx:          appSpecificCategoryConfig[key as keyof typeof appSpecificCategoryConfig];",
      "src/components/ExtendedScreenReaderTester.tsx:            key as keyof typeof additionalAppSpecificCategoryConfig",
      "src/components/ForgotPasswordForm.tsx:              type=\"email\"",
      "src/components/FriendsManager.tsx:import type { User as UserType, UserStats, Friendship } from '../types/index';",
      "src/components/FriendsManager.tsx:                            type: 'battle',",
      "src/components/Gamification.tsx:    type: 'streak',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 250, description: '250 XP' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'Early Bird', description: 'Early Bird Badge' },",
      "src/components/Gamification.tsx:        type: 'early_wake',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 1000, description: '1000 XP' },",
      "src/components/Gamification.tsx:      { type: 'theme', value: 'champion', description: 'Champion Theme' },",
      "src/components/Gamification.tsx:    requirements: [{ type: 'battles_won', value: 50, description: 'Win 50 battles' }],",
      "src/components/Gamification.tsx:    type: 'social',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 500, description: '500 XP' },",
      "src/components/Gamification.tsx:        type: 'badge',",
      "src/components/Gamification.tsx:    requirements: [{ type: 'friends_added', value: 20, description: 'Add 20 friends' }],",
      "src/components/Gamification.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'No Snooze Hero', description: 'Daily Badge' },",
      "src/components/Gamification.tsx:    type: 'friend_challenge',",
      "src/components/Gamification.tsx:    rewards: [{ type: 'experience', value: 100, description: '100 XP' }],",
      "src/components/Gamification.tsx:    type: 'wake_early',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/Gamification.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/Gamification.tsx:        type: 'avatar',",
      "src/components/Gamification.tsx:        type: 'achievement',",
      "src/components/Gamification.tsx:                      (reward && typeof reward.value === 'number' ? reward.value : 0)",
      "src/components/GamingHub.tsx:import type { User, Battle, RewardSystem } from '../types';",
      "src/components/HabitCelebration.tsx:} from '../types/struggling-sam';",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'streak_reached' &&",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'achievement_earned' &&",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'challenge_won' && 'Challenge Victory!'}",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'badge' && (",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'streak_freeze' && (",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'social_unlock' && (",
      "src/components/HabitCelebration.tsx:                                {reward.type.replace('_', ' ').toUpperCase()}",
      "src/components/LoginForm.tsx:              type=\"email\"",
      "src/components/LoginForm.tsx:              type={showPassword ? 'text' : 'password'}",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 50, description: '50 XP' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Early Bird', description: 'Morning Selfie Badge' },",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 100, description: '100 XP' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Nutrition Expert', description: 'Healthy Eating Badge' },",
      "src/components/MediaContent.tsx:        xp: challenge.rewards.find(r => r.type === 'experience')?.value,",
      "src/components/MediaContent.tsx:        badge: challenge.rewards.find(r => r.type === 'badge')?.value?.toString(),",
      "src/components/NuclearModeBattle.tsx:import type { Alarm, User, AlarmDifficulty } from '../types';",
      "src/components/NuclearModeBattle.tsx:  type: 'sequence' | 'math' | 'pattern' | 'endurance' | 'precision';",
      "src/components/NuclearModeBattle.tsx:    type: 'math',",
      "src/components/NuclearModeBattle.tsx:    type: 'pattern',",
      "src/components/NuclearModeBattle.tsx:    type: 'endurance',",
      "src/components/NuclearModeChallenge.tsx:      type: 'location',",
      "src/components/NuclearModeChallenge.tsx:      type: 'date_proof',",
      "src/components/NuclearModeChallenge.tsx:              Challenge type not implemented: {currentChallenge.type}",
      "src/components/NuclearModeSelector.tsx:      type: NuclearChallengeType;",
      "src/components/NuclearModeSelector.tsx:        const types = nuclearModeService.getChallengeTypes();",
      "src/components/NuclearModeSelector.tsx:      const challenge = challengeTypes.find((c: any) => c.type === challengeType);",
      "src/components/NuclearModeSelector.tsx:                      <div key={challenge.type} className=\"p-4 border rounded-lg\">",
      "src/components/NuclearModeSelector.tsx:                          handleChallengeToggle(challenge.type, checked as boolean)",
      "src/components/OfflineDiagnostics.tsx:          controller.postMessage({ type: 'GET_STATUS' }, [channel.port2]);",
      "src/components/OnboardingFlow.tsx:import type { AppState } from '../types';",
      "src/components/OnboardingFlow.tsx:type OnboardingStep =",
      "src/components/PWAStatusDashboard.tsx:  type PWACapabilities,",
      "src/components/PWAStatusDashboard.tsx:  type BackgroundSyncStatus,",
      "src/components/PWAStatusDashboard.tsx:import { OfflineManager, type SyncStatus } from '../services/offline-manager';",
      "src/components/PerformanceDashboard.tsx:      type: 'application/json',",
      "src/components/PerformanceProfilerWrapper.tsx:      type: 'application/json',",
      "src/components/PersonalizationSettings.tsx:            type=\"range\"",
      "src/components/PersonalizationSettings.tsx:            type=\"range\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PremiumDashboard.tsx:import type { PremiumFeatureAccess } from '../types';",
      "src/components/PushNotificationSettings.tsx:import type { PushNotificationSettings } from '../services/push-notifications';",
      "src/components/PushNotificationTester.tsx:              Test different types of push notifications",
      "src/components/QuickAlarmSetup.tsx:import type { DayOfWeek } from '../types/index';",
      "src/components/QuickAlarmSetup.tsx:          <Button type=\"submit\" className=\"w-full\" disabled={selectedDays.length === 0}>",
      "src/components/RTLLayout/RTLContainer.tsx:    typeof padding === 'boolean'",
      "src/components/RTLLayout/RTLFlex.tsx:    return directionClasses[direction as keyof typeof directionClasses] || 'flex-row';",
      "src/components/RTLLayout/RTLFlex.tsx:        flex.justifyContent[justify] as keyof typeof justifyClasses",
      "src/components/RTLLayout/RTLFlex.tsx:    ...(gap && { gap: typeof gap === 'number' ? `${gap}px` : gap }),",
      "src/components/RTLLayout/RTLGrid.tsx:      return colsClasses[cols as keyof typeof colsClasses] || 'grid-cols-1';",
      "src/components/RTLLayout/RTLGrid.tsx:      classes.push(colsClasses[cols.sm as keyof typeof colsClasses]);",
      "src/components/RTLLayout/RTLGrid.tsx:        responsiveColsClasses[breakpoint as keyof typeof responsiveColsClasses]",
      "src/components/RTLLayout/RTLGrid.tsx:          responsiveColsClasses[breakpoint as keyof typeof responsiveColsClasses][",
      "src/components/RTLLayout/RTLGrid.tsx:            value as keyof typeof responsiveColsClasses.sm",
      "src/components/RTLLayout/RTLGrid.tsx:    return autoFlowClasses[autoFlow as keyof typeof autoFlowClasses] || 'grid-flow-row';",
      "src/components/RTLLayout/RTLGrid.tsx:    ...(gap && typeof gap === 'object'",
      "src/components/RTLLayout/RTLGrid.tsx:          columnGap: typeof gap.x === 'number' ? `${gap.x}px` : gap.x,",
      "src/components/RTLLayout/RTLGrid.tsx:          rowGap: typeof gap.y === 'number' ? `${gap.y}px` : gap.y,",
      "src/components/RTLLayout/RTLGrid.tsx:          gap: typeof gap === 'number' ? `${gap}px` : gap,",
      "src/components/RTLLayout/RTLText.tsx:    if (typeof truncate === 'number') {",
      "src/components/RealtimeDemo.tsx:} from '../types/realtime';",
      "src/components/RewardsDashboard.tsx:import type { RewardSystem, Reward, AIInsight, UserHabit } from '../types';",
      "src/components/RewardsDashboard.tsx:        type: 'reward',",
      "src/components/RewardsDashboard.tsx:        type: 'xp-gain',",
      "src/components/RewardsDashboard.tsx:          type: 'achievement',",
      "src/components/RewardsDashboard.tsx:                        type: 'reward',",
      "src/components/RewardsDashboard.tsx:                  type: 'reward',",
      "src/components/RootErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/SettingsPage.tsx:import type { AppState, VoiceMood, Theme } from '../types';",
      "src/components/SettingsPage.tsx:        sectionNames[section as keyof typeof sectionNames] || section,",
      "src/components/SettingsPage.tsx:                  type=\"range\"",
      "src/components/SignUpForm.tsx:    typeof SecurityService.checkPasswordStrength",
      "src/components/SignUpForm.tsx:    const errors: typeof validationErrors = {};",
      "src/components/SignUpForm.tsx:  const handleInputChange = (field: keyof typeof formData, value: string) => {",
      "src/components/SignUpForm.tsx:              type=\"email\"",
      "src/components/SignUpForm.tsx:              type={showPassword ? 'text' : 'password'}",
      "src/components/SignUpForm.tsx:              type={showConfirmPassword ? 'text' : 'password'}",
      "src/components/SleepTracker.tsx:  type SleepPattern,",
      "src/components/SleepTracker.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/SleepTracker.tsx:                      type=\"date\"",
      "src/components/SleepTracker.tsx:                      type=\"range\"",
      "src/components/SleepTracker.tsx:                        {sleepPattern.chronotype.replace('_', ' ').toUpperCase()}",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'extreme_early' &&",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'early' &&",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'normal' &&",
      "src/components/SleepTracker.tsx:                        'You have a normal chronotype! Your sleep schedule aligns with typical social hours.'}",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'late' &&",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'extreme_late' &&",
      "src/components/SmartAlarmDashboard.tsx:  type EnhancedSmartAlarm,",
      "src/components/SmartAlarmDashboard.tsx:  type OptimalTimeSlot,",
      "src/components/SmartAlarmDashboard.tsx:  type SmartAlarmStatus,",
      "src/components/SmartAlarmDashboard.tsx:                                    {condition.type.replace('_', ' ')}",
      "src/components/SmartAlarmSettings.tsx:  type SleepGoal,",
      "src/components/SmartAlarmSettings.tsx:  type UserScheduleAnalysis,",
      "src/components/SmartAlarmSettings.tsx:  type ScheduleRecommendation,",
      "src/components/SmartAlarmSettings.tsx:  type SmartAlarm,",
      "src/components/SmartAlarmSettings.tsx:  const getScoreColor = (score: number, type: 'percentage' | 'debt'): string => {",
      "src/components/SmartAlarmSettings.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/SmartAlarmSettings.tsx:                          type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                    type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                      type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                        <span className=\"text-white/70\">Chronotype Match</span>",
      "src/components/SmartAlarmSettings.tsx:                          className={`font-semibold ${getScoreColor(scheduleAnalysis.chronotypeAlignment, 'percentage')}`}",
      "src/components/SmartFeatures.tsx:    type: 'visit_place',",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Coffee Enthusiast', description: 'Coffee Badge' },",
      "src/components/SmartFeatures.tsx:    type: 'stay_duration',",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/SmartFeatures.tsx:    type: 'task_master',",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 100, description: '100 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Step Master', description: 'Daily Steps Badge' },",
      "src/components/SmartFeatures.tsx:      type: 'visit_place',",
      "src/components/SmartUpgradePrompt.tsx:} from '../types/struggling-sam';",
      "src/components/SmartUpgradePrompt.tsx:          transition={{ type: 'spring', damping: 25, stiffness: 300 }}",
      "src/components/SocialProof.tsx:} from '../types/struggling-sam';",
      "src/components/SocialProof.tsx:                          {currentProof.type.replace('_', ' ').toUpperCase()}",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'streak_started' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'achievement_unlocked' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'challenge_joined' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'milestone_reached' && (",
      "src/components/SoundPicker.tsx:    type: 'sine_wave' as const,",
      "src/components/SoundPicker.tsx:      type: 'uploaded',",
      "src/components/SoundPicker.tsx:      type: 'generated',",
      "src/components/SoundPicker.tsx:        type: generatedSoundConfig.type,",
      "src/components/SoundPicker.tsx:                                  type: value,",
      "src/components/SoundPicker.tsx:                              type=\"range\"",
      "src/components/SoundPicker.tsx:                              type=\"range\"",
      "src/components/SpecializedErrorBoundaries.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/Statistics.tsx:                  <span className=\"text-sm\">Favorite battle type</span>",
      "src/components/StreakCounter.tsx:import { UserStreak, StreakMilestone } from '../types/struggling-sam';",
      "src/components/StreakCounter.tsx:              type: 'badge',",
      "src/components/StrugglingSamWrapper.tsx:import type { Alarm } from '../types';",
      "src/components/SubscriptionStatus.tsx:import type { User, SubscriptionStatus as SubscriptionStatusType } from '../types';",
      "src/components/SyncStatus.tsx:  type SyncStatus as SyncStatusType,",
      "src/components/SyncStatus.tsx:  type OfflineCapabilities,",
      "src/components/TabProtectionSettings.tsx:import { formatTimeframe } from '../types/tabProtection';",
      "src/components/TabProtectionSettings.tsx:        const blob = new Blob([data], { type: 'application/json' });",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionWarning.tsx:import type { Alarm } from '../types';",
      "src/components/TabProtectionWarning.tsx:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/components/TabProtectionWarning.tsx:import { formatProtectionMessage, formatTimeframe } from '../types/tabProtection';",
      "src/components/ThemeCreator.tsx:                        { type: 'application/json' }",
      "src/components/ThemeCustomizationStudio.tsx:          if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:          if (typeof value === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:      const blob = new Blob([exportData], { type: 'application/json' });",
      "src/components/ThemeCustomizationStudio.tsx:        if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:        if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:                        {typeof shades === 'object' &&",
      "src/components/ThemeCustomizationStudio.tsx:                        <div key={type} className=\"font-family-control\">",
      "src/components/ThemeCustomizationStudio.tsx:                            {type.charAt(0).toUpperCase() + type.slice(1)} Font",
      "src/components/ThemeCustomizationStudio.tsx:                            type=\"range\"",
      "src/components/ThemeStudio.tsx:type StudioView = 'gallery' | 'creator' | 'editor';",
      "src/components/UpgradePrompt.tsx:    typeof feature === 'string'",
      "src/components/UserProfile.tsx:import type { User as AppUser, VoiceMood } from '../types';",
      "src/components/VisualAlarmDisplay.tsx:        {theme.background.type === 'pattern' && (",
      "src/components/VoiceAnalyticsDashboard.tsx:    const dataBlob = new Blob([dataStr], { type: 'application/json' });",
      "src/components/VoiceCloning.tsx:        const blob = new Blob(chunks, { type: 'audio/wav' });",
      "src/components/VoiceCloning.tsx:        if (file.type.startsWith('audio/')) {",
      "src/components/VoiceSelector.tsx:import type { VoiceMood, VoiceMoodConfig, VoicePersonality, User } from '../types';",
      "src/components/VoiceSettings.tsx:                      type=\"password\"",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/WakeUpFeedbackModal.tsx:import { type WakeUpFeedback } from '../services/enhanced-smart-alarm-scheduler';",
      "src/components/WakeUpFeedbackModal.tsx:                type=\"range\"",
      "src/components/WakeUpFeedbackModal.tsx:              type=\"range\"",
      "src/components/__tests__/AccessibilityIntegration.test.tsx:      await user.type(colorInput1, 'invalid-color');",
      "src/components/__tests__/AccessibilityIntegration.test.tsx:      await user.type(colorInput2, 'also-invalid');",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:            <input type=\"checkbox\" name=\"days\" value={day.toLowerCase()} />",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      <button type=\"submit\" onClick={onSave}>",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      <button type=\"button\" onClick={onCancel}>",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        'input[type=\"checkbox\"]:not([name=\"days\"])', // snooze checkbox",
      "src/components/__tests__/AlarmForm.test.tsx:import type { Alarm, VoiceMood } from '../../types';",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Custom Alarm');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'A');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'A');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Work Alarm');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Updated Label');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, longLabel);",
      "src/components/__tests__/BattleSystem.test.tsx: * different battle types, participant management, and trash talk functionality.",
      "src/components/__tests__/BattleSystem.test.tsx:    it('shows correct battle type information', () => {",
      "src/components/__tests__/BattleSystem.test.tsx:    it('allows selecting battle type', async () => {",
      "src/components/__tests__/BattleSystem.test.tsx:    it('shows battle creation form when type is selected', async () => {",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'My Epic Battle');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, \"You're going down!\");",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, longMessage);",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(searchInput, 'Friend One');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, 'Offline message');",
      "src/components/__tests__/BattleSystem.test.tsx:    it('supports keyboard navigation for battle types', async () => {",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, 'Test message');",
      "src/components/__tests__/Dashboard.test.tsx:      jest.spyOn(Date.prototype, 'getHours').mockReturnValueOnce(7); // Morning",
      "src/components/__tests__/GamingHub.test.tsx:import type { User, Battle, RewardSystem } from '../../types';",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(startTimeInput, tomorrow.toISOString().slice(0, 16));",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Test description');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(messageInput, \"You're going down, Speed Demon!\");",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(messageInput, 'This is inappropriate content!');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Recovery Test');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Testing recovery');",
      "src/components/animations/AnimationLibrary.tsx:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/components/animations/AnimationLibrary.tsx:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/components/animations/AnimationLibrary.tsx:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/components/animations/AnimationLibrary.tsx:                type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:                type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:        transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:                type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:                type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:        transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/AnimationLibrary.tsx:              type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:          type: 'spring' as const,",
      "src/components/animations/AnimationLibrary.tsx:          transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:  type: 'success' | '_error' | 'warning' | 'info';",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/LoadingStates.tsx:          transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/MicroInteractions.tsx:  type?: 'text' | 'email' | 'password' | 'number' | 'tel';",
      "src/components/animations/MicroInteractions.tsx:            type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:            type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:                type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:              type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:          type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:            type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:                    transition={{ type: 'spring' as const, stiffness: 300 }}",
      "src/components/animations/MicroInteractions.tsx:                type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:            scale: { duration: 0.2, type: 'spring' as const, stiffness: 300 },",
      "src/components/animations/MicroInteractions.tsx:                type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:                type: 'spring' as const,",
      "src/components/animations/MicroInteractions.tsx:            type: 'spring' as const,",
      "src/components/premium/BillingHistory.tsx:import type { Invoice, PaymentStatus } from '../../types/premium';",
      "src/components/premium/PaymentFlow.tsx:                              type=\"radio\"",
      "src/components/premium/PaymentFlow.tsx:                    type=\"radio\"",
      "src/components/premium/PaymentFlow.tsx:                type=\"email\"",
      "src/components/premium/PaymentMethodManager.tsx:import type { PaymentMethod, PaymentMethod } from '../../types/premium';",
      "src/components/premium/PaymentMethodManager.tsx:  const getPaymentMethodIcon = (type: PaymentMethod) => {",
      "src/components/premium/PaymentMethodManager.tsx:                        {method.type === 'card' && method.cardData ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'bank_account' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'paypal' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'apple_pay' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'google_pay' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                    {method.type === 'card' && method.cardData && (",
      "src/components/premium/PremiumAlarmFeatures.tsx:import type { Alarm } from '../../types';",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"3\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:            {soundCategories[selectedCategory as keyof typeof soundCategories].map(",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"7\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"100\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  type: battleType,",
      "src/components/premium/PremiumAnalytics.tsx:    type: 'tip' | 'warning' | 'achievement';",
      "src/components/premium/PremiumAnalytics.tsx:        type: 'achievement',",
      "src/components/premium/PremiumAnalytics.tsx:        type: 'warning',",
      "src/components/premium/PremiumFeaturePreview.tsx:import type { VoiceMood, AlarmDifficulty } from '../../types';",
      "src/components/premium/SubscriptionDashboard.tsx:                    featureKey as keyof typeof data.currentPlan.limits",
      "src/components/premium/SubscriptionDashboard.tsx:                          <span>{typeof limit === 'number' ? limit : '\u221e'} limit</span>",
      "src/components/premium/SubscriptionManagement.tsx:                              type=\"radio\"",
      "src/components/premium/SubscriptionManagement.tsx:                              type=\"radio\"",
      "src/components/premium/SubscriptionPage.tsx:import type { SubscriptionPlan, BillingInterval } from '../../types/premium';",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:import type { PaymentMethod, CreateSubscriptionRequest } from '../../../types/premium';",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(cardInput, '1234');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(expiryInput, '13/25'); // Invalid month",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(emailInput, 'invalid-email');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4000000000000002'); // Declined card",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PricingTable.test.tsx:import type { SubscriptionPlan, BillingInterval } from '../../../types/premium';",
      "src/components/premium/__tests__/SubscriptionDashboard.test.tsx:import type { SubscriptionDashboardData } from '../../../types/premium';",
      "src/components/ui/__tests__/input.a11y.test.tsx:    it('should have no axe violations with different input types', async () => {",
      "src/components/ui/__tests__/input.a11y.test.tsx:            <label htmlFor={`${type}-input`}>{type} Input</label>",
      "src/components/ui/__tests__/input.a11y.test.tsx:            <Input id={`${type}-input`} type={type as any} />",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"labeled-input\" type=\"email\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'email');",
      "src/components/ui/__tests__/input.a11y.test.tsx:      await axeRender(<Input aria-label=\"Search products\" type=\"search\" />, {",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input type=\"password\" aria-labelledby=\"password-heading password-help\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      const input = document.querySelector('input[type=\"password\"]')!;",
      "src/components/ui/__tests__/input.a11y.test.tsx:            type=\"email\"",
      "src/components/ui/__tests__/input.a11y.test.tsx:            type=\"password\"",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"good-placeholder\" type=\"email\" placeholder=\"_user@example.com\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"number-input\" type=\"number\" min=\"0\" max=\"120\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      // Test arrow key navigation - clear and type new value",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"password\" type=\"password\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'password');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"email\" type=\"email\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'email');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"search\" type=\"search\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'search');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"file-input\" type=\"file\" accept=\".jpg,.png\" />",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {",
      "src/components/ui/alert.tsx:}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {",
      "src/components/ui/aspect-ratio.tsx:}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Root>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Image>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {",
      "src/components/ui/badge.tsx:  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {",
      "src/components/ui/button.tsx:  VariantProps<typeof buttonVariants> & {",
      "src/components/ui/calendar.tsx:}: React.ComponentProps<typeof DayPicker>) {",
      "src/components/ui/carousel.tsx:import useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';",
      "src/components/ui/carousel.tsx:type CarouselApi = UseEmblaCarouselType[1];",
      "src/components/ui/carousel.tsx:type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;",
      "src/components/ui/carousel.tsx:type CarouselOptions = UseCarouselParameters[0];",
      "src/components/ui/carousel.tsx:type CarouselPlugin = UseCarouselParameters[1];",
      "src/components/ui/carousel.tsx:type CarouselProps = {",
      "src/components/ui/carousel.tsx:type CarouselContextProps = {",
      "src/components/ui/carousel.tsx:  carouselRef: ReturnType<typeof useEmblaCarousel>[0];",
      "src/components/ui/carousel.tsx:  api: ReturnType<typeof useEmblaCarousel>[1];",
      "src/components/ui/carousel.tsx:  type CarouselApi,",
      "src/components/ui/chart.tsx:export type ChartConfig = {",
      "src/components/ui/chart.tsx:type ChartContextProps = { _config: ChartConfig };",
      "src/components/ui/chart.tsx:    typeof RechartsPrimitive.ResponsiveContainer",
      "src/components/ui/chart.tsx:}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &",
      "src/components/ui/chart.tsx:      !labelKey && typeof label === 'string'",
      "src/components/ui/chart.tsx:        ? config[label as keyof typeof config]?.label || label",
      "src/components/ui/chart.tsx:  if (typeof payload !== 'object' || payload === null) {",
      "src/components/ui/chart.tsx:    typeof payload.payload === 'object' &&",
      "src/components/ui/chart.tsx:  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {",
      "src/components/ui/chart.tsx:    configLabelKey = payload[key as keyof typeof payload] as string;",
      "src/components/ui/chart.tsx:    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'",
      "src/components/ui/chart.tsx:    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof Dialog> & {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Input>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.List>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Empty>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Group>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Separator>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Item>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {",
      "src/components/ui/dialog.tsx:function Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Portal>) {",
      "src/components/ui/dialog.tsx:function DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Content> & {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Title>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Description>) {",
      "src/components/ui/drawer.tsx:function Drawer({ ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {",
      "src/components/ui/drawer.tsx:function DrawerClose({ ...props }: React.ComponentProps<typeof DrawerPrimitive.Close>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Content>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Title>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Description>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {",
      "src/components/ui/form.tsx:  type FieldPath,",
      "src/components/ui/form.tsx:  type FieldValues,",
      "src/components/ui/form.tsx:type FormFieldContextValue<",
      "src/components/ui/form.tsx:type FormItemContextValue = {",
      "src/components/ui/form.tsx:}: React.ComponentProps<typeof LabelPrimitive.Root>) {",
      "src/components/ui/hover-card.tsx:function HoverCard({ ...props }: React.ComponentProps<typeof HoverCardPrimitive.Root>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {",
      "src/components/ui/label.tsx:}: React.ComponentProps<typeof LabelPrimitive.Root>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Root>) {",
      "src/components/ui/menubar.tsx:function MenubarMenu({ ...props }: React.ComponentProps<typeof MenubarPrimitive.Menu>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Group>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Content>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Item> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Label> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {",
      "src/components/ui/menubar.tsx:function MenubarSub({ ...props }: React.ComponentProps<typeof MenubarPrimitive.Sub>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {",
      "src/components/ui/pagination.tsx:type PaginationLinkProps = {",
      "src/components/ui/pagination.tsx:}: React.ComponentProps<typeof PaginationLink>) {",
      "src/components/ui/pagination.tsx:}: React.ComponentProps<typeof PaginationLink>) {",
      "src/components/ui/radio-group.tsx:}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {",
      "src/components/ui/radio-group.tsx:}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {",
      "src/components/ui/scroll-area.tsx:}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {",
      "src/components/ui/scroll-area.tsx:}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {",
      "src/components/ui/select.tsx:function SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Label>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Separator>) {",
      "src/components/ui/separator.tsx:}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {",
      "src/components/ui/sheet.tsx:function SheetPortal({ ...props }: React.ComponentProps<typeof SheetPrimitive.Portal>) {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {",
      "src/components/ui/sidebar.tsx:type SidebarContextProps = {",
      "src/components/ui/sidebar.tsx:      const openState = typeof value === 'function' ? value(open) : value;",
      "src/components/ui/sidebar.tsx:}: React.ComponentProps<typeof Separator>) {",
      "src/components/ui/sidebar.tsx:} & VariantProps<typeof sidebarMenuButtonVariants>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Root>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.List>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Content>) {",
      "src/components/ui/toggle-group.tsx:import { type VariantProps } from 'class-variance-authority';",
      "src/components/ui/toggle-group.tsx:const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({",
      "src/components/ui/toggle-group.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/ui/toggle-group.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/ui/toggle.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/user-testing/ABTestWrapper.tsx:import type { Metadata } from '../../types/utility-types';",
      "src/components/user-testing/ABTestWrapper.tsx:          type: 'ab_test_view',",
      "src/components/user-testing/ABTestWrapper.tsx:          type: 'ab_test_event',",
      "src/components/user-testing/BetaTestingProgram.tsx:  type: 'feature' | 'bug' | 'suggestion' | 'general';",
      "src/components/user-testing/BetaTestingProgram.tsx:        type: 'feature',",
      "src/components/user-testing/BetaTestingProgram.tsx:                      <Badge variant=\"outline\">{item.type}</Badge>",
      "src/components/user-testing/BetaTestingProgram.tsx:                  type=\"date\"",
      "src/components/user-testing/BetaTestingProgram.tsx:                  type=\"date\"",
      "src/components/user-testing/FeedbackModal.tsx:        type: activeTab as UserFeedback['type'],",
      "src/components/user-testing/FeedbackWidget.tsx:      setFeedbackType(optionId as typeof feedbackType);",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:    type: initialType as UserFeedback['type'],",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:    if (feedbackData.type === 'bug') points += 15; // Extra for bug reports",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:          description: \"Choose the type of feedback you'd like to share\",",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:        type: feedbackData.type,",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:      type: initialType as UserFeedback['type'],",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:        {types.map(type => {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                setFeedbackData((prev: any) => ({ ...prev, type: type.id as any }))",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                  className={`w-14 h-14 rounded-full bg-gradient-to-br ${type.color} p-3 group-hover:scale-110 transition-transform duration-300`}",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:  const handleQuickFeedback = (type: typeof feedbackType, prefilledText?: string) => {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:      .filter((e: any) => e.type === 'navigation')",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:                        <span>Type: {feedback.type}</span>",
      "src/config/convertkit-config.ts:import { PersonaType } from '../types/email-campaigns';",
      "src/config/convertkit-config.ts:import { ConvertKitAutomationParameters } from '../types/configuration-interfaces';",
      "src/config/convertkit-generated.ts:import { PersonaType } from '../types/email-campaigns';",
      "src/config/environment.ts:export type Environment = 'development' | 'staging' | 'production';",
      "src/config/i18n.ts:export type SupportedLanguage = keyof typeof SUPPORTED_LANGUAGES;",
      "src/config/i18n.ts:    type: 'languageDetector' as const,",
      "src/config/i18n.ts:    if (typeof Intl.ListFormat !== 'undefined') {",
      "src/constants/initialDomainState.ts: * Provides properly typed initial state that matches the AppState interface",
      "src/constants/initialDomainState.ts: * from types/app-state.ts",
      "src/constants/initialDomainState.ts:} from '../types/app-state';",
      "src/constants/initialDomainState.ts:} from '../types/domain';",
      "src/constants/initialState.ts: * @description Centralized type-safe default values for the AppState interface.",
      "src/constants/initialState.ts: * This object ensures TypeScript compilation success by providing type-safe defaults",
      "src/constants/initialState.ts:    typeof obj.isOnboarding === 'boolean' &&",
      "src/constants/initialState.ts:    typeof obj.permissions.notifications === 'object' &&",
      "src/contexts/LanguageContext.tsx:  languageInfo: (typeof SUPPORTED_LANGUAGES)[SupportedLanguage];",
      "src/contexts/StrugglingsamContext.tsx:} from '../types/struggling-sam';",
      "src/contexts/StrugglingsamContext.tsx:type StrugglingSamAction =",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_LOADING'; payload: boolean }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_ERROR'; payload: string | null }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_USER_STREAK'; payload: UserStreak }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_ACHIEVEMENT'; payload: SamAchievement }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_ACHIEVEMENTS'; payload: SamAchievement[] }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_ACTIVE_CHALLENGES'; payload: SocialChallenge[] }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'JOIN_CHALLENGE'; payload: string }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'LEAVE_CHALLENGE'; payload: string }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_UPGRADE_PROMPT'; payload: SmartUpgradePrompt }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'DISMISS_UPGRADE_PROMPT'; payload: string }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_COMMUNITY_STATS'; payload: CommunityStats }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_SOCIAL_PROOF_DATA'; payload: SocialProofData[] }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_CELEBRATION'; payload: HabitCelebration }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'DISMISS_CELEBRATION'; payload: string }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_AB_TEST_GROUP'; payload: ABTestGroup }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_USER_AB_TEST'; payload: UserABTest }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'TRACK_CONVERSION'; payload: { testId: string; userId: string } }",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'SET_LOADING', payload: true });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_USER_STREAK', payload: mockUserStreak });",
      "src/contexts/StrugglingsamContext.tsx:            { type: 'streak_days', value: 5, description: 'Maintain 5-day streak' },",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ACHIEVEMENTS', payload: mockAchievements });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_LOADING', payload: false });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ERROR', payload: 'Failed to load _user data' });",
      "src/contexts/StrugglingsamContext.tsx:            type: 'achievement_unlocked',",
      "src/contexts/StrugglingsamContext.tsx:            type: 'streak_started',",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_COMMUNITY_STATS', payload: mockCommunityStats });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_SOCIAL_PROOF_DATA', payload: mockSocialProofData });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'UPDATE_STREAK', payload: streakData });",
      "src/contexts/StrugglingsamContext.tsx:          type: 'streak_reached',",
      "src/contexts/StrugglingsamContext.tsx:            type: 'badge',",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_ACHIEVEMENT', payload: achievement });",
      "src/contexts/StrugglingsamContext.tsx:        type: 'achievement_earned',",
      "src/contexts/StrugglingsamContext.tsx:          type: 'badge',",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'JOIN_CHALLENGE', payload: challengeId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'LEAVE_CHALLENGE', payload: challengeId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_UPGRADE_PROMPT', payload: prompt });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'DISMISS_UPGRADE_PROMPT', payload: promptId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'DISMISS_CELEBRATION', payload: celebrationId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_CONVERSION', payload: { testId, userId } });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_ENGAGEMENT', payload: { testId, userId, action } });",
      "src/data/emotional-message-templates.ts:import type { EmotionType, EmotionalTone } from '../types/emotional';",
      "src/data/emotional-message-templates.ts:import type { EmotionalMessageVariables } from '../types/configuration-interfaces';",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:        { id: null, type: undefined, last4: 'invalid' }, // Invalid data",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:        { id: 'pm_valid', type: 'card', last4: '4242' }, // Valid data",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:          type: 'card',",
      "src/hooks/__tests__/integration/useAuth.integration.test.tsx:            error_type: 'sign_in_failed',",
      "src/hooks/__tests__/useABTesting.test.tsx:import { ABTestGroup } from '../../types/struggling-sam';",
      "src/hooks/__tests__/useAccessibilityPreferences.test.ts:    expect(typeof mockService.subscribe.mock.calls[0][0]).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmRinging).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmSnoozed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmDismissed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:      { type: 'sound', soundName: 'Birds' },",
      "src/hooks/__tests__/useAuth.test.ts:      expect(typeof rateLimitInfo.remaining).toBe('number');",
      "src/hooks/__tests__/useEnhancedSmartAlarms.test.ts:        { type: 'bedtime_shift', magnitude: 0.5, direction: 'later' },",
      "src/hooks/__tests__/useEnhancedSmartAlarms.test.ts:        { type: 'wake_quality', magnitude: -0.3, direction: 'decline' },",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceError).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceLoading).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceSuccess).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceValidationError).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFormSuccess).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFieldChange).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:      { field: 'password', type: 'password', params: { minLength: 8 } },",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:      { field: 'confirmPassword', type: 'match' },",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:        { field: 'phone', type: 'format' },",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:      type: 'availability',",
      "src/hooks/__tests__/useMobileTouch.test.ts:const createMockTouchEvent = (type: string, touches: any[] = []) => ({",
      "src/hooks/__tests__/useMobileTouch.test.ts:  let mockElement: ReturnType<typeof createMockElement>;",
      "src/hooks/__tests__/useTheme.test.tsx:import type { Theme, PersonalizationSettings } from '../../types';",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof cssVars).toBe('object');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof isAccessible).toBe('boolean');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/useABTesting.tsx:} from '../types/struggling-sam';",
      "src/hooks/useABTesting.tsx:export type FeatureKey = keyof typeof STRUGGLING_SAM_FEATURES.FULL_OPTIMIZATION;",
      "src/hooks/useAccessibility.ts:  type AccessibilityState,",
      "src/hooks/useAccessibilityPreferences.ts:    (color: string, type: 'text' | 'background' = 'text') => {",
      "src/hooks/useAdvancedAlarms.ts:import type { Alarm } from '../types';",
      "src/hooks/useAlarmRingingAnnouncements.ts:import type { Alarm } from '../types/index';",
      "src/hooks/useAnalytics.ts:        alarm_type: alarmType,",
      "src/hooks/useAnimations.ts:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/hooks/useAnimations.ts:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/hooks/useAnimations.ts:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/hooks/useAnimations.ts:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/hooks/useAnimations.ts:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/hooks/useAnimations.ts:        type: 'spring' as const,",
      "src/hooks/useAudioLazyLoading.ts:import type { AudioLoadProgress, AudioCacheEntry } from '../services/audio-manager';",
      "src/hooks/useAudioLazyLoading.ts:import type { CustomSound, Playlist, LoadingState } from '../services/types/media';",
      "src/hooks/useAudioLazyLoading.ts:} from '../types/state-updaters';",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice') => {",
      "src/hooks/useAuthAnnouncements.ts:      const typeNames = {",
      "src/hooks/useAuthAnnouncements.ts:      announce(`Please use the ${typeNames[type]} to authenticate.`, 'polite');",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice') => {",
      "src/hooks/useAuthAnnouncements.ts:      announce(`${type} authentication successful!`, 'polite');",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice', _error: string) => {",
      "src/hooks/useAuthAnnouncements.ts:        `${type} authentication failed: ${_error}. Please try again or use alternative method.`,",
      "src/hooks/useCapacitor.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useCriticalPreloading.ts:import type { Alarm } from '../types';",
      "src/hooks/useCriticalPreloading.ts:import type { PerformanceHistoryEntry } from '../types/state-updaters';",
      "src/hooks/useDynamicFocus.ts:  type: 'added' | 'updated' | 'removed';",
      "src/hooks/useDynamicFocus.ts:      const { type, element, description, shouldFocus } = change;",
      "src/hooks/useEmotionalNotifications.ts:} from '../types/emotional';",
      "src/hooks/useEnhancedCaching.ts:import type { CustomSound } from '../services/types/media';",
      "src/hooks/useEnhancedCaching.ts:import type { PerformanceHistoryEntry } from '../types/state-updaters';",
      "src/hooks/useEnhancedServiceWorker.ts:import type { Alarm } from '../types';",
      "src/hooks/useEnhancedSmartAlarms.ts:  type EnhancedSmartAlarm,",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useFormAnnouncements.ts:          if (typeof value === 'string') {",
      "src/hooks/useGamingAnnouncements.ts:      const { type, action, data, priority = 'polite', customMessage } = announcement;",
      "src/hooks/useGamingAnnouncements.ts:        type: 'battle',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'achievement',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'reward',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'leaderboard',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'tournament',",
      "src/hooks/useGamingAnnouncements.ts:            type: 'battle',",
      "src/hooks/useGamingAnnouncements.ts:          type: 'achievement',",
      "src/hooks/useGamingAnnouncements.ts:  const battleName = data.type ? battleTypeNames[data.type] : 'Battle';",
      "src/hooks/useI18n.ts:  // Enhanced translation function with better type safety and fallbacks",
      "src/hooks/useI18n.ts:        typeof optionsOrDefault === 'string'",
      "src/hooks/useI18n.ts:      return typeof optionsOrDefault === 'string' ? optionsOrDefault : key; // Fallback",
      "src/hooks/useI18n.ts:    return i18n.tc(`gaming:rewards.types.${rewardType}`) || rewardType;",
      "src/hooks/useMediaContentAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useMobilePerformance.ts:    if ('gc' in window && typeof (window as any).gc === 'function') {",
      "src/hooks/useMobileTouch.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'triggered', ...data }]);",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'dismissed', ...data }]);",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'snoozed', ...data }]);",
      "src/hooks/useProfileAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useProfileAnnouncements.ts:      } else if (typeof newValue === 'number') {",
      "src/hooks/useProfileAnnouncements.ts:      } else if (typeof newValue === 'string') {",
      "src/hooks/usePushNotifications.ts:  type PushNotificationSettings,",
      "src/hooks/usePushNotifications.ts:import type { Alarm } from '../types';",
      "src/hooks/useRTL.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/hooks/useRealtime.tsx:} from '../types/realtime';",
      "src/hooks/useRealtime.tsx:  requestAnalysis: (type: string, data: any) => Promise<string>;",
      "src/hooks/useRealtime.tsx:      async (type: string, data: any) => {",
      "src/hooks/useRealtime.tsx:        return await service.ai.requestAnalysis(type, data);",
      "src/hooks/useRealtime.tsx:      if (message.type === messageType) {",
      "src/hooks/useScreenReaderAnnouncements.ts:import ScreenReaderService, { type AlarmAnnouncement } from '../utils/screen-reader';",
      "src/hooks/useScreenReaderAnnouncements.ts:import type { Alarm } from '../types';",
      "src/hooks/useScreenReaderAnnouncements.ts:      const { type, message, data, priority = 'polite', delay = 0 } = announcement;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:    (adjustment: { type: string; message: string; timeChange?: number }) => {",
      "src/hooks/useSmartFeaturesAnnouncements.ts:            challenge.rewards.find(r => r.type === 'experience')?.value || 0;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:        if (challenge.type === 'stay_duration') {",
      "src/hooks/useSmartFeaturesAnnouncements.ts:          challenge.rewards.find(r => r.type === 'experience')?.value || 0;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useSmartFeaturesAnnouncements.ts:      message += `Challenge type: ${challenge.type.replace('_', ' ')}. `;",
      "src/hooks/useSoundEffects.tsx:    async (type: 'default' | 'alarm' | 'beep' = 'default') => {",
      "src/hooks/useTabProtectionAnnouncements.ts:import type { Alarm } from '../types';",
      "src/hooks/useTabProtectionAnnouncements.ts:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/hooks/useTabProtectionAnnouncements.ts:import { formatProtectionMessage, formatTimeframe } from '../types/tabProtection';",
      "src/hooks/useTabProtectionSettings.ts:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/hooks/useTabProtectionSettings.ts:} from '../types/tabProtection';",
      "src/hooks/useTheme.tsx:        typeof value === 'string' && value.includes('rem')",
      "src/hooks/useTheme.tsx:        typeof value === 'string' && value.includes('ms')",
      "src/lib/utils.ts:import { clsx, type ClassValue } from 'clsx';",
      "src/reducers/__tests__/alarmReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { AlarmState, AlarmAction } from '../../types/app-state';",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { Alarm } from '../../types/domain';",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_CREATE_SUCCESS with typed alarm payload', () => {",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_CREATE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_DISMISS with typed alarm id payload', () => {",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_TOGGLE with typed toggle payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/subscriptionReducer.test.ts:import type { SubscriptionState, SubscriptionAction } from '../../types/app-state';",
      "src/reducers/__tests__/subscriptionReducer.test.ts:import type { Subscription, PaymentMethod } from '../../types/domain';",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_LOAD_SUCCESS with typed subscription payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_UPGRADE_SUCCESS with typed upgrade payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle FEATURE_ACCESS_UPDATE with typed feature access payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle FEATURE_USAGE_UPDATE with typed usage payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle PAYMENT_METHOD_ADD with typed payment method payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'card',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle PAYMENT_METHOD_REMOVE with typed payment method id payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'card',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:        type: 'card',",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_UPGRADE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_LOAD_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/userReducer.test.ts:import type { UserState, UserAction } from '../../types/app-state';",
      "src/reducers/__tests__/userReducer.test.ts:import type { User } from '../../types/domain';",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_SUCCESS with typed user payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_PREFERENCES_UPDATE with typed preferences payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_ACHIEVEMENT_UNLOCK with typed achievement payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_STREAK_UPDATE with typed streak payload', () => {",
      "src/reducers/alarmReducer.ts: * Handles all alarm-related state mutations with type safety",
      "src/reducers/alarmReducer.ts:import type { AlarmState, AlarmAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:import type { AppState, AppAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:  action: AppAction | { type: 'APP_UPDATE'; payload: AppState }",
      "src/reducers/subscriptionReducer.ts: * Handles all subscription-related state mutations with type safety",
      "src/reducers/subscriptionReducer.ts:import type { SubscriptionState, SubscriptionAction } from '../types/app-state';",
      "src/reducers/userReducer.ts: * Handles all user-related state mutations with type safety",
      "src/reducers/userReducer.ts:import type { UserState, UserAction } from '../types/app-state';",
      "src/services/CloudSyncService.ts:import type { PersonalizationSettings, Theme, ThemeConfig } from '../types';",
      "src/services/__tests__/alarm.test.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../../types';",
      "src/services/__tests__/alarm.test.ts:// Import mocked modules for type safety",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getHours').mockReturnValue(7);",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getMinutes').mockReturnValue(0);",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getDay').mockReturnValue(1); // Monday",
      "src/services/__tests__/alarm.test.ts:          type: 'alarm-triggered',",
      "src/services/__tests__/alarm.test.ts:          type: 'alarm-security-event',",
      "src/services/__tests__/analytics.test.ts:        expect(typeof duration).toBe('number');",
      "src/services/__tests__/performance-monitor.test.ts:      expect(resources[0].type).toBe('image');",
      "src/services/__tests__/test-setup.ts:          typeof arg === 'object' &&",
      "src/services/__tests__/test-setup.ts:Object.setPrototypeOf(global.Date, OriginalDate);",
      "src/services/__tests__/test-setup.ts:    type: 'wake_up',",
      "src/services/__tests__/theme-accessibility.test.ts:      expect(typeof result.overallScore).toBe('number');",
      "src/services/__tests__/theme-accessibility.test.ts:        expect(typeof value).toBe('boolean');",
      "src/services/__tests__/voice.test.ts:import type { Alarm, VoiceMood } from '../../types';",
      "src/services/accessibility-preferences.ts:      typeof SpeechSynthesisUtterance !== 'undefined'",
      "src/services/advanced-analytics.ts:import type { Alarm, User } from '../types';",
      "src/services/advanced-analytics.ts:  type: 'performance' | 'behavior' | 'optimization' | 'health' | 'prediction';",
      "src/services/advanced-analytics.ts:  pattern_type: 'wake_time' | 'success_rate' | 'sleep_duration';",
      "src/services/advanced-analytics.ts:  type: 'bedtime' | 'duration' | 'consistency' | 'environment';",
      "src/services/advanced-analytics.ts:        type: 'performance',",
      "src/services/advanced-analytics.ts:        type: 'behavior',",
      "src/services/advanced-analytics.ts:        type: 'health',",
      "src/services/advanced-analytics.ts:        type: 'optimization',",
      "src/services/advanced-analytics.ts:        type: 'optimization',",
      "src/services/advanced-analytics.ts:    const data = peerData[metric as keyof typeof peerData] || peerData.success_rate;",
      "src/services/advanced-analytics.ts:        pattern_type: 'success_rate',",
      "src/services/advanced-analytics.ts:        pattern_type: 'wake_time',",
      "src/services/advanced-analytics.ts:          type: 'duration',",
      "src/services/advanced-conditions-helper.ts:  type EnhancedSmartAlarm,",
      "src/services/advanced-conditions-helper.ts:  type ConditionBasedAdjustment,",
      "src/services/advanced-conditions-helper.ts:    type: 'weather',",
      "src/services/advanced-conditions-helper.ts:    type: 'calendar',",
      "src/services/advanced-conditions-helper.ts:      recommendations.push('Consider adding more condition types for better coverage');",
      "src/services/advanced-conditions-helper.ts:      issues.push('Limited condition type variety');",
      "src/services/ai-rewards.ts:      type: 'dismissal_method',",
      "src/services/ai-rewards.ts:        type: 'pattern_recognition',",
      "src/services/ai-rewards.ts:        type: 'habit_analysis',",
      "src/services/ai-rewards.ts:      type: template.type || 'achievement',",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'streak' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'niche_mastery' as const,",
      "src/services/ai-rewards.ts:          type: 'milestone' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/alarm-access-control.ts:import type { Alarm, User } from '../types';",
      "src/services/alarm-access-control.ts:type UserRole = 'user' | 'premium' | 'admin';",
      "src/services/alarm-access-control.ts:type AlarmAction =",
      "src/services/alarm-api-security.ts:type AlarmAPIEndpoint =",
      "src/services/alarm-api-security.ts:            if (!sanitizedData.backupId || typeof sanitizedData.backupId !== 'string') {",
      "src/services/alarm-api-security.ts:    if (!alarm.label || typeof alarm.label !== 'string') {",
      "src/services/alarm-api-security.ts:    if (!alarm.time || typeof alarm.time !== 'string') {",
      "src/services/alarm-api-security.ts:    if (typeof alarm.snoozeEnabled === 'boolean') {",
      "src/services/alarm-api-security.ts:      typeof alarm.snoozeInterval === 'number' &&",
      "src/services/alarm-api-security.ts:            typeof value !== 'string' ||",
      "src/services/alarm-api-security.ts:    if (!request.headers || typeof request.headers !== 'object') {",
      "src/services/alarm-api-security.ts:        request.headers['content-type'] || request.headers['Content-Type'];",
      "src/services/alarm-api-security.ts:    if (typeof data === 'string') {",
      "src/services/alarm-api-security.ts:    if (typeof data === 'object' && data !== null) {",
      "src/services/alarm-api-security.ts:        if (typeof value === 'object') {",
      "src/services/alarm-backup-redundancy.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm-backup-redundancy.ts:  type: 'manual' | 'scheduled' | 'emergency';",
      "src/services/alarm-backup-redundancy.ts:  type: 'local' | 'secure_local' | 'cloud_cache' | 'redundant';",
      "src/services/alarm-backup-redundancy.ts:      type: 'local',",
      "src/services/alarm-backup-redundancy.ts:      type: 'secure_local',",
      "src/services/alarm-backup-redundancy.ts:      type: 'redundant',",
      "src/services/alarm-backup-redundancy.ts:    type: 'manual' | 'scheduled' | 'emergency' = 'manual',",
      "src/services/alarm-backup-redundancy.ts:            source: `${backup.location.type} (${backup.id})`,",
      "src/services/alarm-enhanced.ts:import type { Alarm, VoiceMood, AlarmEvent } from '../types';",
      "src/services/alarm-executor.ts:    const { type, parameters } = optimization;",
      "src/services/alarm-executor.ts:          o.type === type ? optimization : o",
      "src/services/alarm-executor.ts:            return trigger.action.type !== 'disable_alarm';",
      "src/services/alarm-executor.ts:            return trigger.action.type !== 'disable_alarm';",
      "src/services/alarm-executor.ts:      if (rule.action.type === 'disable_alarm' && conditionMet) {",
      "src/services/alarm-executor.ts:      } else if (rule.action.type === 'enable_alarm' && !conditionMet) {",
      "src/services/alarm-integrity-monitor.ts:import type { Alarm } from '../types';",
      "src/services/alarm-integrity-monitor.ts:          type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:          type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:        type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:          type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:          type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:          type: 'timestamp_anomaly',",
      "src/services/alarm-integrity-monitor.ts:          type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:        type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:              type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:            type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:        type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:            type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:            type: 'timestamp_anomaly',",
      "src/services/alarm-integrity-monitor.ts:        type: 'data_corruption',",
      "src/services/alarm-integrity-monitor.ts:      type: 'integrity_violation',",
      "src/services/alarm-integrity-monitor.ts:      type: details.type,",
      "src/services/alarm-integrity-monitor.ts:        type: 'suspicious_activity',",
      "src/services/alarm-parser.ts:import type { Alarm, RecurrencePattern } from '../types/index';",
      "src/services/alarm-rate-limiting.ts:type AlarmOperation =",
      "src/services/alarm-rate-limiting.ts:type UserTier = 'free' | 'premium' | 'admin' | 'system';",
      "src/services/alarm-rate-limiting.ts:type EscalationLevel = 'warning' | 'temporary_limit' | 'strict_limit' | 'account_block';",
      "src/services/alarm-security-integration.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm-security-integration.ts:  type: 'create' | 'read' | 'update' | 'delete' | 'backup' | 'restore';",
      "src/services/alarm-security-integration.ts:      headers: { 'content-type': 'application/json' },",
      "src/services/alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/alarm.ts:      if (!alarm.days.every(day => typeof day === 'number' && day >= 0 && day <= 6)) {",
      "src/services/alarm.ts:      if (typeof alarm.label !== 'string' || alarm.label.length > 100) {",
      "src/services/alarm.ts:        typeof alarm.snoozeInterval === 'number' &&",
      "src/services/analytics.ts:   * Get device type information with enhanced detection",
      "src/services/analytics.ts:      connection_type: (navigator as any).connection?.effectiveType,",
      "src/services/analytics.ts:      deployment_type: version.indexOf('hotfix') !== -1 ? 'hotfix' : 'release',",
      "src/services/animation-manager.ts:      type: 'spring' as const,",
      "src/services/animation-manager.ts:  createSpringConfig(type: 'gentle' | 'bouncy' | 'snappy'): any {",
      "src/services/animation-manager.ts:    return { type: 'spring' as const, ...baseConfig };",
      "src/services/api-service.ts: * Demonstrates improved type safety and standardized error handling",
      "src/services/api-service.ts: * Main API service with comprehensive type safety",
      "src/services/app-analytics.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/app-analytics.ts:   * Map alarm event types to analytics event names",
      "src/services/app-analytics.ts:        type: 'initial_load',",
      "src/services/app-specific-test-scenarios.ts:      'Chronotype Analysis Complete! Based on 30 days of data, you are identified as a \"Bear\" chronotype. Optimal sleep: 11:00 PM to 7:00 AM. Peak productivity: 10:00 AM to 2:00 PM.',",
      "src/services/app-specific-test-scenarios.ts:    tags: ['sleep', 'chronotype', 'analysis', 'optimization'],",
      "src/services/app-specific-test-scenarios.ts:    expectedBehavior: 'Should provide chronotype explanation with actionable insights',",
      "src/services/app-specific-test-scenarios.ts:      'Test chronotype detection, sleep debt tracking, and efficiency analysis',",
      "src/services/audio-manager.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/audio-manager.ts:import type { CustomSound, Playlist, PlaylistSound } from './types/media';",
      "src/services/audio-manager.ts:  type: 'tts' | 'audio_file' | 'web_audio';",
      "src/services/audio-manager.ts:            type: 'audio_file',",
      "src/services/audio-manager.ts:        type: 'audio_file',",
      "src/services/audio-manager.ts:      if (cached && cached.data && typeof cached.data === 'string') {",
      "src/services/audio-manager.ts:      stats.byType[entry.type] = (stats.byType[entry.type] || 0) + 1;",
      "src/services/base/BaseService.ts:} from '../../types/service-architecture';",
      "src/services/base/BaseService.ts:    if (typeof (performance as any)?.memory !== 'undefined') {",
      "src/services/base/BaseService.ts:    if (typeof this._config.enabled !== 'boolean') {",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).serviceEventBus?.publish === 'function') {",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).errorReporter?.report === 'function') {",
      "src/services/base/CacheManager.ts:} from '../../types/service-architecture';",
      "src/services/base/ServiceContainer.ts:} from '../../types/service-architecture';",
      "src/services/base/ServiceContainer.ts:    if (!descriptor.name || typeof descriptor.name !== 'string') {",
      "src/services/base/ServiceContainer.ts:    if (!descriptor.factory || typeof descriptor.factory.create !== 'function') {",
      "src/services/battle.ts:    type?: BattleType;",
      "src/services/capacitor-enhanced.ts:        type: 'alarm',",
      "src/services/capacitor-enhanced.ts:      return pending.notifications.filter((n: any) => n.extra?.type === 'alarm');",
      "src/services/capacitor-enhanced.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.SUCCESS });",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.WARNING });",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.ERROR });",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [4, 6], weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 1, weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [6, 9], weight: 0.8 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'rain', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 0, weight: 1 }, // Sunday",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 6, weight: 1 }, // Saturday",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [23, 4], weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'clear', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [6, 10], weight: 0.8 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'storm', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'calendar-event', operator: 'contains', value: 'workout', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'calendar-event', operator: 'contains', value: 'gym', weight: 1 },",
      "src/services/contextual-themes.ts:        type: 'weather',",
      "src/services/contextual-themes.ts:        type: 'calendar',",
      "src/services/contextual-themes.ts:        if (context.type === 'time' && condition.operator === 'between') {",
      "src/services/contextual-themes.ts:        if (context.type === 'weather' && condition.operator === 'contains') {",
      "src/services/contextual-themes.ts:        if (context.type === 'time' && condition.operator === 'equals') {",
      "src/services/contextual-themes.ts:        if (context.type === 'calendar' && condition.operator === 'contains') {",
      "src/services/contextual-themes.ts:      context: [{ type: 'pattern', value: 'user-history', weight: 1 }],",
      "src/services/convertkit-service.ts:} from '../types/email-campaigns';",
      "src/services/critical-preloader.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/critical-preloader.ts:import type { CustomSound } from './types/media';",
      "src/services/critical-preloader.ts:  type: 'tts' | 'audio_file' | 'fallback_beep';",
      "src/services/critical-preloader.ts:          type: 'audio_file',",
      "src/services/critical-preloader.ts:        type: 'fallback_beep',",
      "src/services/critical-preloader.ts:      type: asset.type,",
      "src/services/custom-sound-manager.ts:import type { CustomSound, SoundCategory } from '../types';",
      "src/services/custom-test-scenarios.ts:    // If no user type specified, include all tests",
      "src/services/device-capabilities.ts:import type { PerformanceConfig } from './types/performance';",
      "src/services/device-capabilities.ts:export type DeviceTier = 'low-end' | 'mid-range' | 'high-end';",
      "src/services/emotional-intelligence.ts:} from '../types/emotional';",
      "src/services/emotional-intelligence.ts:import { VOICE_MOOD_TO_EMOTIONAL_TONE } from '../types/emotional';",
      "src/services/enhanced-alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/enhanced-alarm.ts:} from '../types/service-architecture';",
      "src/services/enhanced-alarm.ts:    if (!data.label || typeof data.label !== 'string' || data.label.length > 100) {",
      "src/services/enhanced-alarm.ts:      !data.days.every((day: any) => typeof day === 'number' && day >= 0 && day <= 6)",
      "src/services/enhanced-alarm.ts:        alarm.days.every(day => typeof day === 'number' && day >= 0 && day <= 6)",
      "src/services/enhanced-analytics.ts:} from '../types/service-architecture';",
      "src/services/enhanced-analytics.ts:      if (typeof window !== 'undefined' && 'performance' in window) {",
      "src/services/enhanced-analytics.ts:    if (typeof window !== 'undefined' && window.performance) {",
      "src/services/enhanced-battle.ts:} from '../types/service-architecture';",
      "src/services/enhanced-battle.ts:  type?: BattleType;",
      "src/services/enhanced-battle.ts:    if (!battleData.type || !battleData.startTime) {",
      "src/services/enhanced-battle.ts:      if (filter.type && battle.type !== filter.type) return false;",
      "src/services/enhanced-battle.ts:      if (filter.type && battle.type !== filter.type) return false;",
      "src/services/enhanced-cache-manager.ts:import type { AudioCacheEntry, AudioMetadata } from './audio-manager';",
      "src/services/enhanced-cache-manager.ts:import type { CustomSound } from './types/media';",
      "src/services/enhanced-cache-manager.ts:        type: 'audio_file',",
      "src/services/enhanced-calendar-service.ts:    type: 'google' | 'outlook' | 'apple' | 'caldav';",
      "src/services/enhanced-calendar-service.ts:  type: 'adjustment' | 'preparation' | 'travel' | 'conflict' | 'optimization';",
      "src/services/enhanced-calendar-service.ts:  type: 'pattern' | 'trend' | 'anomaly' | 'recommendation';",
      "src/services/enhanced-calendar-service.ts:          type: 'adjustment',",
      "src/services/enhanced-calendar-service.ts:        type: 'optimization',",
      "src/services/enhanced-calendar-service.ts:          type: 'travel',",
      "src/services/enhanced-calendar-service.ts:        type: 'preparation',",
      "src/services/enhanced-calendar-service.ts:    type: 'google' | 'outlook' | 'apple' | 'caldav',",
      "src/services/enhanced-calendar-service.ts:    const calendarId = `${type}_${Date.now()}`;",
      "src/services/enhanced-calendar-service.ts:      name: `${type.charAt(0).toUpperCase() + type.slice(1)} Calendar`,",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:    return colors[type as keyof typeof colors] || '#6b7280';",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/enhanced-location-service.ts:  type: 'home' | 'work' | 'gym' | 'shopping' | 'social' | 'other';",
      "src/services/enhanced-location-service.ts:          `You have ${trigger.type === 'enter' ? 'entered' : 'exited'} ${geofence.name}`,",
      "src/services/enhanced-location-service.ts:    // Determine location type based on patterns",
      "src/services/enhanced-location-service.ts:    const type = this.classifyLocationType(timePatterns, dayPatterns, cluster.length);",
      "src/services/enhanced-location-service.ts:      name: this.generateLocationName(type, centerLat, centerLon),",
      "src/services/enhanced-location-service.ts:    type: LocationPattern['type'],",
      "src/services/enhanced-offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-offline-storage.ts:        if (!change.id || !change.type || !change.timestamp) {",
      "src/services/enhanced-offline-storage.ts:          if (change.type === 'update' && change.data) {",
      "src/services/enhanced-offline-storage.ts:          if (change.type === 'update' && mergedData) {",
      "src/services/enhanced-performance-monitor.ts:} from '../types/service-architecture';",
      "src/services/enhanced-performance-monitor.ts:  type: 'console' | 'webhook' | 'analytics' | 'notification';",
      "src/services/enhanced-performance-monitor.ts:  type: 'click' | 'scroll' | 'input' | 'navigation' | 'alarm_action' | 'voice_command';",
      "src/services/enhanced-performance-monitor.ts:          type: 'analytics',",
      "src/services/enhanced-performance-monitor.ts:    type: UserInteraction['type'],",
      "src/services/enhanced-performance-monitor.ts:            type: entry.initiatorType || 'unknown',",
      "src/services/enhanced-performance-monitor.ts:          tags: { budget: budget.name, type: 'budget_violation' },",
      "src/services/enhanced-performance-monitor.ts:        tags: { ...metric.tags, type: 'threshold_violation' },",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SmartAlarm,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SleepGoal,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type UserScheduleAnalysis,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SleepPattern,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SmartAlarmRecommendation,",
      "src/services/enhanced-smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type: 'time_adjustment' | 'condition_change' | 'sleep_goal_update';",
      "src/services/enhanced-smart-alarm-scheduler.ts:          appliedAdjustments.push(`${conditionAdj.type}: ${adjustment}min`);",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'weather',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'calendar',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'time_adjustment',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        action: { type: 'adjust_wake_window', value: alarm.wakeWindow + 10 },",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'sleep_goal_update',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        action: { type: 'adjust_bedtime', value: -30 },",
      "src/services/enhanced-subscription.ts:} from '../types/service-architecture';",
      "src/services/enhanced-voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/enhanced-voice.ts:} from '../types/service-architecture';",
      "src/services/error-handler.ts:type ErrorCategory =",
      "src/services/error-handler.ts:        type: e._error.constructor.name,",
      "src/services/error-handler.ts:export type { ErrorEntry, ErrorContext, ErrorCategory, ErrorAnalytics };",
      "src/services/feature-gate-service.ts:import type { FeatureAccess, FeatureGate, PremiumFeature } from '../types/premium';",
      "src/services/health-tracker-integration.ts:  type: 'sleep_pattern' | 'recovery' | 'optimization' | 'alert' | 'trend';",
      "src/services/health-tracker-integration.ts:  chronotype: 'morning' | 'evening' | 'intermediate';",
      "src/services/health-tracker-integration.ts:          `Deviates from your natural chronotype by ${Math.round(deviation)} minutes`",
      "src/services/health-tracker-integration.ts:    let chronotype: 'morning' | 'evening' | 'intermediate' = 'intermediate';",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:          if (value && typeof value === 'object' && value.__type === 'Date') {",
      "src/services/lazy-audio-loader.ts:import type { AudioLoadProgress, AudioCacheEntry } from './audio-manager';",
      "src/services/lazy-audio-loader.ts:import type { CustomSound, Playlist, AudioLoadOptions } from './types/media';",
      "src/services/ml-alarm-optimizer.ts:  type: 'sleep_cycle' | 'weather' | 'calendar' | 'historical' | 'location' | 'health';",
      "src/services/ml-alarm-optimizer.ts:        if (typeof value === 'number') {",
      "src/services/ml-alarm-optimizer.ts:      type: 'historical',",
      "src/services/ml-alarm-optimizer.ts:        type: 'weather',",
      "src/services/ml-alarm-optimizer.ts:        type: 'weather',",
      "src/services/ml-alarm-optimizer.ts:        type: 'calendar',",
      "src/services/ml-alarm-optimizer.ts:        type: 'calendar',",
      "src/services/ml-alarm-optimizer.ts:        type: 'location',",
      "src/services/ml-alarm-optimizer.ts:        type: 'location',",
      "src/services/ml-alarm-optimizer.ts:      type: 'health',",
      "src/services/ml-alarm-optimizer.ts:          type: 'wake_time',",
      "src/services/mobile-performance.ts:    if ('gc' in window && typeof (window as any).gc === 'function') {",
      "src/services/mobile-performance.ts:export type { PerformanceConfig, PerformanceMetrics };",
      "src/services/mobile-touch.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.SUCCESS });",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.WARNING });",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.ERROR });",
      "src/services/notification.ts:import type { Alarm } from '../types';",
      "src/services/notification.ts:  type: 'alarm' | 'reminder' | 'snooze';",
      "src/services/notification.ts:        type: 'alarm',",
      "src/services/notification.ts:            type: 'alarm',",
      "src/services/notification.ts:      // Cancel all notification types for this alarm",
      "src/services/notification.ts:        const { type, data } = _event.data;",
      "src/services/nuclear-mode.ts:      type: 'multi_step_math',",
      "src/services/nuclear-mode.ts:      type: 'physical_movement',",
      "src/services/nuclear-mode.ts:      type: 'barcode_scan',",
      "src/services/nuclear-mode.ts:      type: 'typing_challenge',",
      "src/services/nuclear-mode.ts:          id: `${alarmId}_${type}_${Date.now()}`,",
      "src/services/nuclear-mode.ts:   * Get available challenge types and their descriptions",
      "src/services/nuclear-mode.ts:    type: NuclearChallengeType;",
      "src/services/nuclear-mode.ts:      type: template.type,",
      "src/services/offline-analytics.ts:    type: AnalyticsEvent['type'],",
      "src/services/offline-analytics.ts:        console.log('[OfflineAnalytics] Tracked _event:', type, action, properties);",
      "src/services/offline-analytics.ts:    type: PerformanceMetric['type'],",
      "src/services/offline-gaming.ts:  type: 'create' | 'join' | 'leave' | 'update' | 'complete' | 'message';",
      "src/services/offline-gaming.ts:  type: 'experience' | 'achievement' | 'level_up' | 'streak' | 'battle_win';",
      "src/services/offline-gaming.ts:        type: battleData.type || 'speed',",
      "src/services/offline-gaming.ts:        type: 'create',",
      "src/services/offline-gaming.ts:          type: isWinner ? 'battle_win' : 'experience',",
      "src/services/offline-gaming.ts:            ? `Won ${battle.type} battle`",
      "src/services/offline-gaming.ts:            : `Participated in ${battle.type} battle`,",
      "src/services/offline-gaming.ts:    type: OfflineReward['type'];",
      "src/services/offline-gaming.ts:        type: reward.type,",
      "src/services/offline-gaming.ts:    console.log('[OfflineGaming] Syncing battle action:', action.type, action.battleId);",
      "src/services/offline-gaming.ts:    console.log('[OfflineGaming] Syncing offline reward:', reward.type, reward.amount);",
      "src/services/offline-manager.ts:import type { Alarm } from '../types';",
      "src/services/offline-manager.ts:      type: 'alarm' | 'sleep' | 'voice';",
      "src/services/offline-manager.ts:    type: 'alarm' | 'sleep' | 'voice',",
      "src/services/offline-manager.ts:    if (typeof window !== 'undefined' && window.postMessage) {",
      "src/services/offline-sleep-tracker.ts:  type: 'awake' | 'light' | 'deep' | 'rem';",
      "src/services/offline-sleep-tracker.ts:  type: 'noise' | 'movement' | 'light' | 'temperature' | 'other';",
      "src/services/offline-sleep-tracker.ts:  type: 'pattern' | 'recommendation' | 'achievement' | 'warning';",
      "src/services/offline-sleep-tracker.ts:          type: 'sleep_duration',",
      "src/services/offline-sleep-tracker.ts:          type: 'sleep_quality',",
      "src/services/offline-sleep-tracker.ts:      type: 'awake',",
      "src/services/offline-sleep-tracker.ts:    if (sessionMinutes > 15 && currentStage.type === 'awake') {",
      "src/services/offline-sleep-tracker.ts:    // Add new stage if type changed",
      "src/services/offline-sleep-tracker.ts:    if (nextStageType !== currentStage.type && currentStage.duration >= 5) {",
      "src/services/offline-sleep-tracker.ts:        type: nextStageType,",
      "src/services/offline-sleep-tracker.ts:          type: 'recommendation',",
      "src/services/offline-sleep-tracker.ts:          type: 'warning',",
      "src/services/offline-sleep-tracker.ts:          type: 'achievement',",
      "src/services/offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/offline-storage.ts:  type: 'create' | 'update' | 'delete';",
      "src/services/offline-storage.ts:          type: 'update',",
      "src/services/offline-storage.ts:          type: 'create',",
      "src/services/performance-analytics.ts:          type: this.getResourceType(resource.name),",
      "src/services/performance-analytics.ts:      if (typeof PerformanceObserver !== 'undefined') {",
      "src/services/performance-analytics.ts:      console.warn(`Failed to observe ${type} performance entries:`, _error);",
      "src/services/performance-budget-manager.ts:} from './types/performance';",
      "src/services/performance-budget-manager.ts:      // Observe different types of performance entries",
      "src/services/performance-budget-manager.ts:          detail: { type: 'fps', action: 'reduce-complexity' },",
      "src/services/performance-monitor.ts:  type: 'click' | 'scroll' | 'input' | 'navigation' | 'alarm_action';",
      "src/services/performance-monitor.ts:                type: resourceEntry.initiatorType,",
      "src/services/performance-monitor.ts:                type: resourceEntry.initiatorType,",
      "src/services/performance-monitor.ts:    type: UserInteraction['type'],",
      "src/services/performance-monitor.ts:    this.trackCustomMetric(`interaction_${type}`, 1, { target, ...metadata });",
      "src/services/performance-monitor.ts:        const key = `${interaction.type}:${interaction.target}`;",
      "src/services/performance-monitor.ts:        const [type, target] = key.split(':');",
      "src/services/performance-monitor.ts:        return { type: `${type} - ${target}`, count };",
      "src/services/performance-monitor.ts:PerformanceMonitor.prototype.getPerformanceTrends = function (): PerformanceTrends {",
      "src/services/performance-monitor.ts:export type { PerformanceTrends };",
      "src/services/predictive-analytics-service.ts:  type: PatternType;",
      "src/services/predictive-analytics-service.ts:type PatternType =",
      "src/services/predictive-analytics-service.ts:  type: 'optimization' | 'warning' | 'trend' | 'recommendation' | 'anomaly';",
      "src/services/predictive-analytics-service.ts:        type: 'wake_consistency',",
      "src/services/predictive-analytics-service.ts:      type: 'snooze_behavior',",
      "src/services/predictive-analytics-service.ts:        type: 'seasonal_adjustment',",
      "src/services/predictive-analytics-service.ts:              type: 'location_influence',",
      "src/services/predictive-analytics-service.ts:          type: 'weather_sensitivity',",
      "src/services/predictive-analytics-service.ts:            type: 'warning',",
      "src/services/predictive-analytics-service.ts:            type: 'optimization',",
      "src/services/predictive-analytics-service.ts:            type: 'recommendation',",
      "src/services/predictive-analytics-service.ts:        type: 'optimization',",
      "src/services/predictive-analytics-service.ts:    return `pattern_${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "src/services/premium-theme-animations.ts:  type: 'fade' | 'slide' | 'scale' | 'flip' | 'wave' | 'particle' | 'morphing' | 'glow';",
      "src/services/premium-theme-animations.ts:  private createParticleSystem(type: 'stars' | 'leaves'): void {",
      "src/services/premium-theme-animations.ts:    const particleCount = type === 'stars' ? 50 : 30;",
      "src/services/premium-theme-animations.ts:    const particleClass = type === 'stars' ? 'star-particle' : 'leaf-particle';",
      "src/services/premium-theme-animations.ts:    if (type === 'stars') {",
      "src/services/premium-theme-animations.ts:    this.animationElements.set(`particles-${type}`, particleContainer);",
      "src/services/privacy-compliance.ts:  type: 'export' | 'delete' | 'rectify' | 'portability';",
      "src/services/privacy-compliance.ts:    Object.entries(consents).forEach(([type, granted]) => {",
      "src/services/privacy-compliance.ts:        this.setConsent(type as keyof ConsentSettings, granted, source, userId);",
      "src/services/push-notifications.ts:import type { Alarm } from '../types';",
      "src/services/push-notifications.ts:          type: 'alarm',",
      "src/services/push-notifications.ts:          type: 'motivation',",
      "src/services/push-notifications.ts:        console.log('Unknown secure push notification type:', notification.data?.type);",
      "src/services/push-notifications.ts:          type: notification.data?.type,",
      "src/services/push-notifications.ts:      return !!(data.alarmId && data.type === 'alarm');",
      "src/services/pwa-manager.ts:      const { type, data } = _event.data;",
      "src/services/pwa-manager.ts:          console.log('[PWA] Unknown SW message:', type, data);",
      "src/services/pwa-service.ts:    const { type, data } = event.data;",
      "src/services/pwa-service.ts:  sendMessageToServiceWorker(type: string, data: any): void {",
      "src/services/pwa-service.ts:    this.serviceWorkerRegistration.active.postMessage({ type, data });",
      "src/services/real-time-smart-adapter.ts:  type EnhancedSmartAlarm,",
      "src/services/real-time-smart-adapter.ts:          type: 'sleep_pattern_change',",
      "src/services/real-time-smart-adapter.ts:            type: 'external_condition',",
      "src/services/real-time-smart-adapter.ts:            reason: `${conditionAdj.type} condition met: ${conditionAdj.adjustment.reason}`,",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/realtime-service.ts:import type { Alarm, User } from '../types';",
      "src/services/realtime-service.ts:          console.warn('Unknown WebSocket message type:', data.type);",
      "src/services/realtime-service.ts:        type: data.type,",
      "src/services/realtime-service.ts:        type: this.getUpdateType(table, payload.eventType),",
      "src/services/realtime-service.ts:  sendMessage(type: string, payload: any): void {",
      "src/services/revenue-analytics.ts:} from '../types/analytics';",
      "src/services/secure-alarm-storage.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/secure-alarm-storage.ts:  private handleTamperDetection(type: string, details: any): void {",
      "src/services/secure-alarm-storage.ts:        typeof alarm.snoozeInterval === 'number' ? alarm.snoozeInterval : 5,",
      "src/services/secure-alarm-storage.ts:      snoozeCount: typeof alarm.snoozeCount === 'number' ? alarm.snoozeCount : 0,",
      "src/services/secure-alarm-storage.ts:      .filter(alarm => alarm && typeof alarm === 'object')",
      "src/services/secure-push-notification.ts:import type { Alarm } from '../types';",
      "src/services/secure-push-notification.ts:    // Handle different notification types with enhanced security",
      "src/services/secure-push-notification.ts:        console.log('Unknown secure push notification type:', data.type);",
      "src/services/secure-push-notification.ts:          type: 'alarm',",
      "src/services/security-monitoring-forensics.ts:  type: 'immediate' | 'hourly' | 'daily';",
      "src/services/security-monitoring-forensics.ts:        fingerprint: this.generateEventFingerprint(type, source, details),",
      "src/services/security-monitoring-forensics.ts:      type: 'threat_detected',",
      "src/services/security-monitoring-forensics.ts:    type: 'immediate' | 'hourly' | 'daily',",
      "src/services/security-monitoring-forensics.ts:          event.type === 'suspicious_activity' ||",
      "src/services/security-monitoring-forensics.ts:          _event.type === 'threat_detected'",
      "src/services/security-monitoring-forensics.ts:        e => e.type === 'threat_detected'",
      "src/services/security-monitoring-forensics.ts:      return event.type === signature.pattern;",
      "src/services/security-monitoring-forensics.ts:    if (event.type === 'tampering_detected' || _event.type === 'threat_detected') {",
      "src/services/security-monitoring-forensics.ts:    const fingerprintData = { type, source, details: JSON.stringify(details) };",
      "src/services/security-monitoring-forensics.ts:      .filter(e => e.type === 'threat_detected')",
      "src/services/security-monitoring-forensics.ts:      totalThreats: events.filter(e => e.type === 'threat_detected').length,",
      "src/services/security-monitoring-forensics.ts:    const tamperingEvents = events.filter(e => e.type === 'tampering_detected').length;",
      "src/services/security-monitoring-forensics.ts:      e => e.type === 'alarm_access_denied'",
      "src/services/security.ts:    if (!password || typeof password !== 'string') {",
      "src/services/service-worker-manager.ts:    const { type, data } = event.data;",
      "src/services/service-worker-manager.ts:    console.log('\ud83d\udcac Message from SW:', type, data);",
      "src/services/service-worker-manager.ts:    const { action, emotion_type, notification_id } = data;",
      "src/services/service-worker-manager.ts:        detail: { action, emotion_type, notification_id, data },",
      "src/services/sleep-analysis.ts:import type { Alarm } from '../types';",
      "src/services/sleep-analysis.ts:  chronotype: 'extreme_early' | 'early' | 'normal' | 'late' | 'extreme_late';",
      "src/services/smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/smart-alarm-scheduler.ts:  chronotypeAlignment: number; // how well aligned current schedule is",
      "src/services/smart-alarm-scheduler.ts:        chronotypeAlignment: this.calculateChronotypeAlignment(pattern, alarms),",
      "src/services/smart-alarm-scheduler.ts:    const idealBedtime = this.getIdealBedtimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:    const idealWakeTime = this.getIdealWakeTimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:    return idealTimes[chronotype as keyof typeof idealTimes] || idealTimes.normal;",
      "src/services/smart-alarm-scheduler.ts:    return idealTimes[chronotype as keyof typeof idealTimes] || idealTimes.normal;",
      "src/services/smart-alarm-scheduler.ts:        type: 'bedtime_earlier',",
      "src/services/smart-alarm-scheduler.ts:        type: 'wake_consistent',",
      "src/services/smart-alarm-scheduler.ts:    // Chronotype alignment",
      "src/services/smart-alarm-scheduler.ts:    const alignment = this.calculateChronotypeAlignment(pattern, alarms);",
      "src/services/smart-alarm-scheduler.ts:      const idealBedtime = this.getIdealBedtimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:        type: adjustment > 0 ? 'bedtime_later' : 'bedtime_earlier',",
      "src/services/smart-alarm-scheduler.ts:        optimization_type: optimization.optimizationType,",
      "src/services/smart-notification-service.ts:  type: 'alarm' | 'reminder' | 'optimization' | 'insight' | 'emergency';",
      "src/services/smart-notification-service.ts:    type: 'alarm' | 'reminder' | 'optimization' | 'insight' = 'alarm'",
      "src/services/smart-notification-service.ts:      priority: type === 'alarm' ? 'urgent' : 'normal',",
      "src/services/smart-notification-service.ts:      maxEscalations: type === 'alarm' ? 5 : 2,",
      "src/services/smart-notification-service.ts:      if (notification.type !== 'alarm') {",
      "src/services/smart-notification-service.ts:    if (location.isMoving && type !== 'alarm') {",
      "src/services/smart-notification-service.ts:    if (location.isWork && type === 'optimization') {",
      "src/services/smart-notification-service.ts:    const patternKey = `${notification.type}_${notification.context.timeOfDay}`;",
      "src/services/smart-notification-service.ts:            notification.type === 'alarm'",
      "src/services/smart-notification-service.ts:            type: notification.type,",
      "src/services/smart-notification-service.ts:    const patternKey = `${notification.type}_${notification.context.timeOfDay}`;",
      "src/services/smart-notification-service.ts:      responseRates[key as keyof typeof responseRates] =",
      "src/services/smart-notification-service.ts:          ? (responseRates[key as keyof typeof responseRates] / totalResponses) * 100",
      "src/services/smart-notification-service.ts:    if (type === 'alarm' && 'label' in alarm) {",
      "src/services/smart-notification-service.ts:    return titles[type] || '\ud83d\udd14 Notification';",
      "src/services/smart-notification-service.ts:    if (type === 'alarm' && 'label' in alarm) {",
      "src/services/smart-notification-service.ts:    return bodies[type] || 'You have a new notification.';",
      "src/services/smart-notification-service.ts:        priority as keyof typeof this._config.vibrationPatterns",
      "src/services/smart-notification-service.ts:    return escalation[currentPriority as keyof typeof escalation] as any;",
      "src/services/smart-notification-service.ts:    const delays = baseDelays[type] || baseDelays.reminder;",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/sound-effects.ts:    const sounds = categoryMap[category as keyof typeof categoryMap];",
      "src/services/sound-effects.ts:          type: 'warning',",
      "src/services/sound-effects.ts:        sound => !notificationSounds[sound as keyof typeof notificationSounds]",
      "src/services/sound-effects.ts:          type: 'warning',",
      "src/services/sound-effects.ts:        sound => !alarmSounds[sound as keyof typeof alarmSounds]",
      "src/services/sound-effects.ts:    console.warn(`Unknown alarm sound type: ${alarmSoundType}`);",
      "src/services/stripe-service.ts:      type: stripePaymentMethod.type,",
      "src/services/stripe-service.ts:      type: data.type,",
      "src/services/struggling-sam-api.ts:} from '../types/struggling-sam';",
      "src/services/subscription-service.ts:      type: data.type,",
      "src/services/supabase.ts:import type { User } from '@supabase/supabase-js';",
      "src/services/supabase.ts:import type { Alarm, AlarmEvent, User as AppUser } from '../types';",
      "src/services/theme-accessibility.ts:    if (typeof window !== 'undefined' && window.matchMedia) {",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/theme-combinations.ts:export type TimeOfDay =",
      "src/services/theme-combinations.ts:export type WeatherCondition =",
      "src/services/theme-performance.ts:    if (typeof window === 'undefined' || !('MutationObserver' in window)) {",
      "src/services/theme-performance.ts:          mutation.type === 'attributes' &&",
      "src/services/theme-performance.ts:    if (typeof performance !== 'undefined' && performance.mark) {",
      "src/services/theme-performance.ts:    options: Parameters<typeof this.applyTheme>[2] = {}",
      "src/services/theme-persistence.ts:        data && typeof data === 'object' && data.version && data.theme && data.timestamp",
      "src/services/typed-realtime-service.ts:import type { SupabaseClient } from '@supabase/supabase-js';",
      "src/services/typed-realtime-service.ts:} from '../types/realtime';",
      "src/services/typed-realtime-service.ts:        type: 'configuration',",
      "src/services/typed-realtime-service.ts:        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js',",
      "src/services/typed-realtime-service.ts:          typeof navigator !== 'undefined' ? navigator.platform : process.platform,",
      "src/services/typed-realtime-service.ts:        onlineStatus: typeof navigator !== 'undefined' ? navigator.onLine : true,",
      "src/services/typed-realtime-service.ts:        serviceWorker: typeof navigator !== 'undefined' && 'serviceWorker' in navigator,",
      "src/services/typed-realtime-service.ts:        pushNotifications: typeof navigator !== 'undefined' && 'PushManager' in window,",
      "src/services/typed-realtime-service.ts:          typeof navigator !== 'undefined' && 'serviceWorker' in navigator,",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_triggered') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_dismissed') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_snoozed') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'user_presence_update') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'recommendation_generated') {",
      "src/services/typed-realtime-service.ts:  async requestAnalysis(type: string, data: any): Promise<string> {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'sleep_pattern_updated') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'system_notification') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'emergency_alert') {",
      "src/services/types/media.ts:// Media types for the audio system",
      "src/services/types/media.ts:export type SoundCategory =",
      "src/services/types/media.ts:export type QuoteCategory =",
      "src/services/types/media.ts:// Enhanced alarm type with media support",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/services/types/performance.ts:// Utility types for specific optimizations",
      "src/services/types/performance.ts:export type OptimizationStrategy = 'none' | 'conservative' | 'balanced' | 'aggressive';",
      "src/services/user-testing.ts:  type: 'rating' | 'text' | 'bug' | 'suggestion' | 'complaint';",
      "src/services/user-testing.ts:  type: 'conversion' | 'engagement' | 'retention' | 'custom';",
      "src/services/user-testing.ts:      type: 'navigation',",
      "src/services/user-testing.ts:      type: 'performance',",
      "src/services/user-testing.ts:        type: feedback.type || 'text',",
      "src/services/user-testing.ts:        type: 'ab_test_conversion',",
      "src/services/user-testing.ts:    if (feedback.type === 'bug' && feedback.rating && feedback.rating <= 2)",
      "src/services/user-testing.ts:    if (feedback.type === 'complaint') return 'high';",
      "src/services/user-testing.ts:        { name: 'alarm_created', type: 'conversion', target: 0.8 },",
      "src/services/user-testing.ts:        { name: 'button_clicks', type: 'engagement', target: 5 },",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:        type: 'gradient',",
      "src/services/visual-alarm-themes.ts:        type: 'animated',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:        type: 'animated',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:        type: 'particles',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:          background.type === 'gradient'",
      "src/services/voice-ai-enhanced.ts:import type { Alarm, VoiceMood, User } from '../types';",
      "src/services/voice-biometrics.ts:            const blob = new Blob(chunks, { type: 'audio/webm' });",
      "src/services/voice-enhanced.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-pro.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-pro.ts:  type: 'web-speech' | 'elevenlabs' | 'google-cloud' | 'azure' | 'amazon-polly';",
      "src/services/voice-pro.ts:      type: 'elevenlabs',",
      "src/services/voice-recognition-enhanced.ts:        type: 'clap',",
      "src/services/voice-smart-integration.ts:import type { User, Alarm } from '../types';",
      "src/services/voice-smart-integration.ts:    lights: { id: string; name: string; type: string; controllable: boolean }[];",
      "src/services/voice-smart-integration.ts:  type: 'alarm' | 'smart_home' | 'navigation' | 'settings' | 'calendar' | 'custom';",
      "src/services/voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/stories/Button.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Button.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/Header.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Header.stories.ts:} satisfies Meta<typeof Header>;",
      "src/stories/Header.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/Page.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Page.stories.ts:} satisfies Meta<typeof Page>;",
      "src/stories/Page.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/components/AlarmForm.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/components/AlarmForm.stories.tsx:import type { Alarm, VoiceMood, AlarmDifficulty, User } from '../../types';",
      "src/stories/components/AlarmForm.stories.tsx:const meta: Meta<typeof AlarmForm> = {",
      "src/stories/components/AlarmForm.stories.tsx:        type: { summary: 'string' },",
      "src/stories/components/AlarmForm.stories.tsx:        type: { summary: '() => void' },",
      "src/stories/components/AlarmForm.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/components/Dashboard.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/components/Dashboard.stories.tsx:const meta: Meta<typeof Dashboard> = {",
      "src/stories/components/Dashboard.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/ui/Button.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'boolean' },",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'boolean' },",
      "src/stories/ui/Button.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/ui/Card.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/ui/Card.stories.tsx:const meta: Meta<typeof Card> = {",
      "src/stories/ui/Card.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/templates/email-templates.ts:import { PersonaType, DEFAULT_PERSONAS } from '../types/email-campaigns';",
      "src/test-setup.ts:if (typeof global !== 'undefined') {",
      "src/test-setup.ts:// Mock HTMLCanvasElement.prototype.getContext for color contrast checking",
      "src/test-setup.ts:if (typeof HTMLCanvasElement !== 'undefined') {",
      "src/test-setup.ts:  HTMLCanvasElement.prototype.getContext = vi.fn().mockImplementation(function (",
      "src/test-setup.ts:    ] as import('./types').DayOfWeek[],",
      "src/test-setup.ts:if (typeof global !== 'undefined') {",
      "src/test-setup.ts:  console.log('document.createElement type:', typeof document?.createElement);",
      "src/tests/alarm-themes-integration.test.ts:        expect(typeof combo.popularity).toBe('number');",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/types/alarm-scheduling.ts:  type: 'daily' | 'weekly' | 'monthly' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'weather' | 'location' | 'calendar' | 'sleep' | 'health' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'adjust_time' | 'disable' | 'change_sound' | 'add_notification' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'enable' | 'disable' | 'adjust_time' | 'notification';",
      "src/types/alarm-scheduling.ts:    type: 'time_before' | 'time_after' | 'disable' | 'custom_time';",
      "src/types/alarm-scheduling.ts:  return value && typeof value.type === 'string' && typeof value.interval === 'number';",
      "src/types/alarm.d.ts:// Additional type definitions for Advanced Alarm Scheduler",
      "src/types/alarm.d.ts:// Helper types for geolocation",
      "src/types/alarm.d.ts:// Location action type for location triggers",
      "src/types/alarm.d.ts:  type?: 'alert' | 'banner' | 'sound'; // for notification actions",
      "src/types/alarm.d.ts:// Additional utility types for the advanced scheduler",
      "src/types/alarm.d.ts:// Global type augmentations for browser APIs",
      "src/types/analytics.d.ts: * Comprehensive types for revenue analytics, user journey tracking, and feature adoption metrics",
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/analytics.d.ts:export type SubscriptionStatus = 'active' | 'canceled' | 'unpaid' | 'trialing';",
      "src/types/analytics.d.ts:  type: 'percentage' | 'fixed_amount';",
      "src/types/analytics.d.ts:export type TimeRange = '7d' | '30d' | '90d' | '1y';",
      "src/types/analytics.d.ts:export type ReportFormat = 'json' | 'csv';",
      "src/types/analytics.d.ts:export type MetricsCache = Map<string, CacheEntry<any>>;",
      "src/types/api-responses.ts:    type: 'free' | 'creator' | 'creator_pro' | 'enterprise';",
      "src/types/api-responses.ts:  type?: 'alarm' | 'reminder' | 'achievement' | 'social';",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts: * Provides type safety for all API interactions",
      "src/types/api.ts:  type: 'challenge' | 'tournament' | 'friendly';",
      "src/types/api.ts:    type: 'photo' | 'location' | 'challenge';",
      "src/types/api.ts:  type: 'javascript' | 'network' | 'resource' | 'security';",
      "src/types/api.ts:  type: 'User' | 'Organization';",
      "src/types/api.ts:    type: 'image' | 'video' | 'gif';",
      "src/types/api.ts:  type: 'alarm.triggered' | 'alarm.snoozed' | 'alarm.dismissed';",
      "src/types/api.ts:  type: 'system.maintenance' | 'system.update' | 'system.announcement';",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/api.ts:    type: 'bearer' | 'basic' | 'api-key';",
      "src/types/app-state.ts:   * @type {Alarm[]}",
      "src/types/app-state.ts:   * @type {Alarm[]}",
      "src/types/app-state.ts:   * @type {AlarmInstance[]}",
      "src/types/app-state.ts:   * @type {boolean}",
      "src/types/app-state.ts:   * @type {boolean}",
      "src/types/app-state.ts:   * @type {Date | null}",
      "src/types/app-state.ts:   * @type {Record<string, { snoozeCount: number; snoozeUntil: Date }>}",
      "src/types/app-state.ts:     * @type {boolean}",
      "src/types/app-state.ts:     * @type {boolean}",
      "src/types/app-state.ts:     * @type {Partial<Alarm> | null}",
      "src/types/app-state.ts:   * @type {SmartOptimization[]}",
      "src/types/app-state.ts:   * @example [{ type: 'sleep_cycle', isEnabled: true, parameters: { sensitivity: 0.8 } }]",
      "src/types/app-state.ts:   * @type {LocationTrigger[]}",
      "src/types/app-state.ts:   * @type {ConditionalRule[]}",
      "src/types/app-state.ts:  type: 'individual' | 'group' | 'global';",
      "src/types/app-state.ts:  type: 'upgrade' | 'downgrade' | 'cancel' | 'reactivate';",
      "src/types/app-state.ts:export type AlarmAction =",
      "src/types/app-state.ts:  | { type: 'ALARMS_LOAD_SUCCESS'; payload: Alarm[] }",
      "src/types/app-state.ts:  | { type: 'ALARMS_LOAD_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'ALARM_CREATE_SUCCESS'; payload: Alarm }",
      "src/types/app-state.ts:  | { type: 'ALARM_CREATE_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_START'; payload: string }",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_SUCCESS'; payload: Alarm }",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_ERROR'; payload: { id: string; _error: string } }",
      "src/types/app-state.ts:  | { type: 'ALARM_DELETE'; payload: string }",
      "src/types/app-state.ts:  | { type: 'ALARM_TOGGLE'; payload: { id: string; enabled: boolean } }",
      "src/types/app-state.ts:  | { type: 'ALARM_TRIGGER'; payload: string }",
      "src/types/app-state.ts:  | { type: 'ALARM_SNOOZE'; payload: { id: string; snoozeUntil: Date } }",
      "src/types/app-state.ts:  | { type: 'ALARM_DISMISS'; payload: string }",
      "src/types/app-state.ts:  | { type: 'UPDATE_DRAFT_ALARM'; payload: Partial<Alarm> }",
      "src/types/app-state.ts:  | { type: 'SET_ALARM_VALIDATION_ERRORS'; payload: Record<string, string> }",
      "src/types/app-state.ts:  | { type: 'USER_LOGIN_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'USER_PROFILE_LOAD_SUCCESS'; payload: UserProfile }",
      "src/types/app-state.ts:  | { type: 'USER_PROFILE_LOAD_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'USER_PREFERENCES_UPDATE'; payload: Partial<UserState['preferences']> }",
      "src/types/app-state.ts:  | { type: 'USER_ACHIEVEMENT_UNLOCK'; payload: Achievement }",
      "src/types/app-state.ts:  | { type: 'USER_STREAK_UPDATE'; payload: { current: number; longest: number } }",
      "src/types/app-state.ts:  | { type: 'USER_FRIEND_REQUEST'; payload: UserFriend }",
      "src/types/app-state.ts:  | { type: 'USER_FRIEND_ACCEPT'; payload: string }",
      "src/types/app-state.ts:  | { type: 'USER_CHALLENGE_JOIN'; payload: SocialChallenge };",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_LOAD_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_LOAD_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_UPGRADE_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_UPGRADE_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_CANCEL_SUCCESS'; payload: Subscription }",
      "src/types/app-state.ts:  | { type: 'SUBSCRIPTION_CANCEL_ERROR'; payload: string }",
      "src/types/app-state.ts:  | { type: 'FEATURE_ACCESS_UPDATE'; payload: FeatureAccess }",
      "src/types/app-state.ts:  | { type: 'FEATURE_USAGE_UPDATE'; payload: { feature: string; usage: FeatureUsage } }",
      "src/types/app-state.ts:  | { type: 'PAYMENT_METHOD_ADD'; payload: PaymentMethod }",
      "src/types/app-state.ts:  | { type: 'PAYMENT_METHOD_REMOVE'; payload: string }",
      "src/types/app-state.ts:  | { type: 'INVOICE_RECEIVED'; payload: Invoice }",
      "src/types/app-state.ts:  | { type: 'UPGRADE_PROMPT_SHOW'; payload: UpgradePrompt }",
      "src/types/app-state.ts:  | { type: 'UPGRADE_PROMPT_DISMISS'; payload: string };",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:    typeof state.isLoading === 'boolean' &&",
      "src/types/app-state.ts:    typeof state.editing === 'object'",
      "src/types/app-state.ts:    typeof state.auth === 'object' &&",
      "src/types/app-state.ts:    typeof state.auth.isAuthenticated === 'boolean'",
      "src/types/app-state.ts:    typeof state.status === 'object' &&",
      "src/types/app-state.ts:    typeof state.status.isActive === 'boolean'",
      "src/types/browser-apis.d.ts:// Comprehensive type definitions for Browser APIs used in the application",
      "src/types/browser-apis.d.ts:type PushEncryptionKeyName = 'p256dh' | 'auth';",
      "src/types/browser-apis.d.ts:  addEventListener(type: 'release', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  removeEventListener(type: 'release', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  request(type: 'screen'): Promise<WakeLockSentinel>;",
      "src/types/browser-apis.d.ts:type PermissionName =",
      "src/types/browser-apis.d.ts:  addEventListener(type: 'change', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  removeEventListener(type: 'change', listener: () => void): void;",
      "src/types/browser-apis.d.ts:    BroadcastChannel: typeof BroadcastChannel;",
      "src/types/browser-apis.d.ts:    prototype: BroadcastChannel;",
      "src/types/cloudflare-runtime.d.ts:    get(key: string, type?: 'text' | 'json' | 'arrayBuffer' | 'stream'): Promise<any>;",
      "src/types/configuration-interfaces.ts:  condition_type?: 'has_tag' | 'field_equals' | 'date_based' | 'engagement_based';",
      "src/types/configuration-interfaces.ts:      type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect';",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:      if (['string', 'number', 'boolean'].includes(typeof value)) {",
      "src/types/custom-sound-themes.ts: * Defines types for creating, managing, and using custom sound themes",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:export type SoundCategory =",
      "src/types/custom-sound-themes.ts:  type: GeneratedSoundType;",
      "src/types/custom-sound-themes.ts:export type GeneratedSoundType =",
      "src/types/custom-sound-themes.ts:  type: 'lfo' | 'envelope' | 'random';",
      "src/types/custom-sound-themes.ts:  type: 'lowpass' | 'highpass' | 'bandpass' | 'notch';",
      "src/types/custom-sound-themes.ts:  type: 'reverb' | 'delay' | 'chorus' | 'distortion' | 'compression';",
      "src/types/custom-sound-themes.ts:export type Platform = 'web' | 'ios' | 'android' | 'desktop';",
      "src/types/custom-sound-themes.ts:export type CreationStep =",
      "src/types/custom-sound-themes.ts:  type: '_error' | 'warning' | 'info';",
      "src/types/custom-sound-themes.ts:  type: 'quality' | 'completeness' | 'optimization' | 'accessibility';",
      "src/types/custom-sound-themes.ts:  type: 'upload' | 'generation' | 'validation' | 'save' | 'network';",
      "src/types/custom-sound-themes.ts:  type: 'quality' | 'compatibility' | 'performance' | 'legal';",
      "src/types/custom-sound-themes.ts:export type RecommendationSource =",
      "src/types/custom-sound-themes.ts:  type: 'validation' | 'format' | 'size' | 'corruption' | 'permission';",
      "src/types/custom-sound-themes.ts:// Event types for the creation process",
      "src/types/domain.ts:export type SubscriptionStatus = ",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:export type PaymentStatus = ",
      "src/types/domain.ts:  type: 'card' | 'bank_account' | 'paypal';",
      "src/types/domain.ts:  type: 'percentage' | 'fixed';",
      "src/types/domain.ts:  type: 'math' | 'memory' | 'puzzle' | 'qr_code' | 'photo' | 'walking';",
      "src/types/domain.ts:  type: Battle['type'];",
      "src/types/email-campaigns.ts:export type PersonaType =",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'subscription_status' | 'engagement_level';",
      "src/types/email-campaigns.ts:  type: 'text' | 'number' | 'date' | 'boolean' | 'url';",
      "src/types/email-campaigns.ts:  type: 'subject_line' | 'content' | 'cta_button' | 'send_time' | 'sender_name';",
      "src/types/email-campaigns.ts:  type: 'sequence' | 'subject_line' | 'cta' | 'send_time';",
      "src/types/email-campaigns.ts:  type: 'optimization' | 'warning' | 'opportunity';",
      "src/types/email-campaigns.ts:  type: 'behavioral' | 'demographic' | 'engagement' | 'subscription';",
      "src/types/email-campaigns.ts:export type EmailPlatform =",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'data_change' | 'external_event';",
      "src/types/email.ts:export type PersonaType =",
      "src/types/emotional.ts:export type EmotionalTone = 'encouraging' | 'playful' | 'firm' | 'roast';",
      "src/types/emotional.ts:export type EscalationLevel =",
      "src/types/emotional.ts:export type EmotionalNotificationCategory =",
      "src/types/global.d.ts:// Global utility types for better type safety in backend utilities",
      "src/types/global.d.ts:type JsonArray = JsonObject[];",
      "src/types/global.d.ts:type Result<T, E = Error> = { success: true; data: T } | { success: false; _error: E };",
      "src/types/helpers.d.ts: * Utility types for Phase 2B TypeScript implicit any parameter fixes",
      "src/types/helpers.d.ts: * These types provide safe fallbacks for common patterns where exact types are unknown",
      "src/types/helpers.d.ts:export type AnyFn = (...args: any[]) => any; // auto",
      "src/types/helpers.d.ts:export type Maybe<T> = T | undefined | null;",
      "src/types/helpers.d.ts:export type EventHandler<T = any> = (e: T) => void; // auto",
      "src/types/helpers.d.ts:export type CallbackFunction<T = any> = (value: T) => void; // auto",
      "src/types/helpers.d.ts:export type AsyncCallback<T = any> = (value: T) => Promise<void>; // auto",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/helpers.d.ts:export type GenericObject = Record<string, any>; // auto",
      "src/types/helpers.d.ts:export type SafeAny = any; // auto - temporary fallback for complex inference",
      "src/types/http-client.ts:  type: 'bearer' | 'basic' | 'api-key' | 'custom';",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/index.ts:// Common type guards for runtime type checking",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as ApiResponse).success === 'boolean' &&",
      "src/types/index.ts:    typeof (value as ApiResponse).timestamp === 'string'",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as ApiError).code === 'string' &&",
      "src/types/index.ts:    typeof (value as ApiError).message === 'string'",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as PaginatedResponse<T>).meta === 'object'",
      "src/types/index.ts:// Helper types for common patterns",
      "src/types/index.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/index.ts:export type DeepPartial<T> = {",
      "src/types/manual-fixes.d.ts: * to maintain backward compatibility while providing proper type safety.",
      "src/types/premium.ts:export type SubscriptionStatus =",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:export type PaymentStatus =",
      "src/types/premium.ts:export type RefundStatus = 'pending' | 'succeeded' | 'failed' | 'canceled';",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/types/premium.ts:  type: 'card' | 'bank_account' | 'paypal' | 'apple_pay' | 'google_pay';",
      "src/types/premium.ts:  type: 'percentage' | 'fixed' | 'trial_extension';",
      "src/types/premium.ts:    type: 'credit' | 'discount' | 'free_months' | 'trial_extension';",
      "src/types/premium.ts:// Export all types as a namespace for easy importing",
      "src/types/premium.ts:  export type Status = SubscriptionStatus;",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/premium.ts:  export type Payment = PaymentStatus;",
      "src/types/push-notifications.ts:export type NotificationPriority = 'min' | 'low' | 'default' | 'high' | 'max';",
      "src/types/push-notifications.ts:export type NotificationCategory =",
      "src/types/push-notifications.ts:export type NotificationActionType =",
      "src/types/push-notifications.ts:  type: 'alarm';",
      "src/types/push-notifications.ts:  type: 'motivation';",
      "src/types/push-notifications.ts:  type: 'social';",
      "src/types/push-notifications.ts:  type: 'promotional';",
      "src/types/push-notifications.ts:export type NotificationDataPayload =",
      "src/types/push-notifications.ts:    type: 'mobile' | 'desktop' | 'tablet';",
      "src/types/push-notifications.ts:  type: ServiceWorkerMessageType;",
      "src/types/push-notifications.ts:export type ServiceWorkerMessageType =",
      "src/types/realtime-messages.ts: * Specific message types and payloads for alarm and user activity real-time communication",
      "src/types/realtime-messages.ts:import type { Alarm, VoiceMood, User, Battle } from './index';",
      "src/types/realtime-messages.ts:import type { WebSocketMessage } from './websocket';",
      "src/types/realtime-messages.ts:    type: 'time_conflict' | 'data_conflict' | 'permission_conflict';",
      "src/types/realtime-messages.ts:    type: 'viewing_alarms' | 'setting_alarm' | 'in_meeting' | 'sleeping' | 'commuting';",
      "src/types/realtime-messages.ts:    type: 'wifi' | 'cellular' | 'ethernet' | 'offline';",
      "src/types/realtime-messages.ts:  type: 'alarm_optimization' | 'sleep_schedule' | 'voice_mood' | 'challenge_difficulty';",
      "src/types/realtime-messages.ts:    type: 'voice_training' | 'mood_improvement' | 'schedule_adjustment';",
      "src/types/realtime-messages.ts:    type: 'bedtime_adjustment' | 'wake_time_adjustment' | 'environment_change';",
      "src/types/realtime-messages.ts:  type: 'info' | 'warning' | '_error' | 'success' | 'maintenance';",
      "src/types/realtime-messages.ts:    type: 'primary' | 'secondary' | 'danger';",
      "src/types/realtime-messages.ts:  type: 'security_breach' | 'service_outage' | 'data_loss' | 'critical_bug';",
      "src/types/realtime-messages.ts:  type: 'full_sync' | 'incremental_sync' | 'conflict_resolution';",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/realtime-messages.ts:export type UserRealtimeMessage =",
      "src/types/realtime-messages.ts:export type AIRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SystemRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SyncRealtimeMessage =",
      "src/types/realtime-messages.ts:export type RealtimeMessage =",
      "src/types/realtime-service.ts:  requestAnalysis(type: string, data: any): Promise<string>;",
      "src/types/realtime/index.ts:// Message type guards",
      "src/types/realtime/index.ts: * Extract payload type from a WebSocket message",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts: * Create a typed WebSocket message",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/realtime/index.ts:export type RealtimeEventHandler<T = any> = (payload: T) => void | Promise<void>;",
      "src/types/realtime/index.ts:export type RealtimeSubscriptionCleanup = () => void;",
      "src/types/realtime/index.ts: * Real-time message type constants",
      "src/types/realtime/index.ts: * Notification action type constants",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/service-architecture.ts:    typeof obj.name === 'string' &&",
      "src/types/service-architecture.ts:    typeof obj.initialize === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.cleanup === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.isReady === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.getHealth === 'function'",
      "src/types/service-architecture.ts:    typeof obj.enabled === 'boolean' &&",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:  type: AlarmEventType;",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:export type ParticipantStatus =",
      "src/types/services/backend-api.ts:  type: BattleChallengeType;",
      "src/types/services/backend-api.ts:  type: 'points' | 'badges' | 'premium_days' | 'custom';",
      "src/types/services/backend-api.ts:export type TournamentFormat =",
      "src/types/services/backend-api.ts:export type TournamentStatus =",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:    type: BattleChallengeType;",
      "src/types/services/convertkit-api.ts:  type: 'embed' | 'hosted' | 'modal' | 'slide_in';",
      "src/types/services/convertkit-api.ts: * User persona types for targeted campaigns",
      "src/types/services/convertkit-api.ts:export type UserPersona =",
      "src/types/services/convertkit-api.ts:    content_type: 'educational' | 'motivational' | 'promotional' | 'mixed';",
      "src/types/services/convertkit-api.ts:  campaign_type: 'broadcast' | 'sequence' | 'form';",
      "src/types/services/stripe-api.ts:  type: 'card' | 'us_bank_account' | 'sepa_debit';",
      "src/types/services/webhook-api.ts:export type SupabaseWebhookEventType = 'INSERT' | 'UPDATE' | 'DELETE';",
      "src/types/services/webhook-api.ts:  type: SupabaseWebhookEventType;",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/types/state-updaters.ts: * Utility types for type-safe state updaters",
      "src/types/state-updaters.ts: * These types help ensure proper typing for React useState setters",
      "src/types/state-updaters.ts:export type StateUpdater<T> = (prev: T) => T;",
      "src/types/state-updaters.ts:export type ArrayStateUpdater<T> = (prev: T[]) => T[];",
      "src/types/state-updaters.ts:export type ObjectStateUpdater<T extends Record<string, any>> = (prev: T) => T;",
      "src/types/state-updaters.ts: * Performance history entry type for preloading hooks",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'feature_unlock' | 'discount' | 'social_share';",
      "src/types/struggling-sam.ts:export type SamAchievementType =",
      "src/types/struggling-sam.ts:  type: SocialProofType;",
      "src/types/struggling-sam.ts:export type SocialProofType =",
      "src/types/struggling-sam.ts:export type SocialChallengeType =",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'streak_freeze' | 'premium_trial' | 'discount';",
      "src/types/struggling-sam.ts:export type UpgradeTriggerType =",
      "src/types/struggling-sam.ts:export type UpgradePromptType =",
      "src/types/struggling-sam.ts:export type CelebrationType =",
      "src/types/struggling-sam.ts:  type: 'streak_reached' | 'achievement_earned' | 'challenge_won' | 'milestone_hit';",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'streak_freeze' | 'discount' | 'social_unlock';",
      "src/types/subscription.d.ts:// Database row types for mapping functions",
      "src/types/subscription.d.ts:// Retention offer type to replace 'any'",
      "src/types/subscription.d.ts:  type: 'discount' | 'free_months' | 'upgrade' | 'feature_unlock';",
      "src/types/subscription.d.ts:// Extended interfaces for better type safety",
      "src/types/supabase-api.ts:  type: 'challenge' | 'tournament' | 'friendly';",
      "src/types/supabase-api.ts:    type: 'photo' | 'location' | 'challenge';",
      "src/types/supabase-api.ts:export type SupabaseFilterOperator =",
      "src/types/supabase-realtime.ts:export type DatabaseEventType = 'INSERT' | 'UPDATE' | 'DELETE' | 'TRUNCATE';",
      "src/types/supabase-realtime.ts:// Union type for all database changes",
      "src/types/supabase-realtime.ts:export type DatabaseChange =",
      "src/types/supabase-realtime.ts:  type: BroadcastMessageType;",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/supabase-realtime.ts:export type SyncTriggerReason =",
      "src/types/supabase-realtime.ts:  type: 'full' | 'incremental' | 'conflict_resolution';",
      "src/types/supabase-realtime.ts:export type HealthStatus = 'healthy' | 'degraded' | 'unhealthy' | 'unknown';",
      "src/types/timers.ts: * This file provides cross-platform timer types that work consistently",
      "src/types/timers.ts:// Normalize timeout handle type across environments",
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:// Helper type for optional timeout handles",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;",
      "src/types/utility-types.ts: * These utility types help reduce 'any' usage across the codebase",
      "src/types/utility-types.ts: * by providing common type patterns and safer alternatives.",
      "src/types/utility-types.ts:export type Nullable<T> = T | null; // type-safe replacement for any | null",
      "src/types/utility-types.ts:export type Optional<T> = T | undefined; // type-safe replacement for any | undefined",
      "src/types/utility-types.ts:export type Maybe<T> = T | null | undefined; // type-safe replacement for any | null | undefined",
      "src/types/utility-types.ts:export type RecordMap<K extends string | number | symbol, V> = Record<K, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type StringMap<V> = Record<string, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type NumberMap<V> = Record<number, V>; // type-safe replacement for Record<number, any>",
      "src/types/utility-types.ts:export type UnknownObject = Record<string, unknown>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type AnyObject = Record<string, any>; // TODO: type definition needed - temporary bridge type",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/types/utility-types.ts:export type StateUpdaterFunction<T> = (prev: T) => T; // type-safe replacement for (prev: any) => any",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utility-types.ts:export type VoidFunction = () => void; // type-safe replacement for Function | any",
      "src/types/utility-types.ts:export type AsyncVoidFunction = () => Promise<void>; // type-safe replacement for async () => any",
      "src/types/utility-types.ts:export type CallbackFunction<T = unknown> = (arg: T) => void; // type-safe replacement for callback: any",
      "src/types/utility-types.ts:export type AsyncCallbackFunction<T = unknown> = (arg: T) => Promise<void>; // type-safe replacement for async callback: any",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:// Temporal types for migration",
      "src/types/utility-types.ts:export type TODO_TypeDefinitionNeeded = any; // TODO: type definition needed - mark for future typing",
      "src/types/utility-types.ts:export type Legacy_Any = any; // TODO: type definition needed - legacy any usage that needs proper typing",
      "src/types/utils.ts:// Provides sophisticated type utilities for complex type scenarios",
      "src/types/utils.ts:export type DeepPartial<T> = {",
      "src/types/utils.ts:export type Exact<T> = T extends infer U",
      "src/types/utils.ts: * Branded types for type-safe identifiers",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type NonEmptyArray<T> = [T, ...T[]];",
      "src/types/utils.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type ValueOf<T> = T[keyof T];",
      "src/types/utils.ts:export type Flatten<T> = {",
      "src/types/utils.ts:export type DeepReadonly<T> = {",
      "src/types/utils.ts:export type Mutable<T> = {",
      "src/types/utils.ts:export type DeepMutable<T> = {",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type Writeable<T, K extends keyof T> = Omit<T, K> & {",
      "src/types/utils.ts:export type FactoryOptions<T> = DeepPartial<T> & {",
      "src/types/utils.ts:export type FactoryFunction<T, TOptions = FactoryOptions<T>> = (",
      "src/types/utils.ts:export type EventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type AsyncEventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/utils.ts:export type ValidationRule<T> = (value: T) => Result<T, string>;",
      "src/types/utils.ts:export type ValidationSchema<T> = {",
      "src/types/utils.ts:export type TypeGuard<T> = (value: unknown) => value is T;",
      "src/types/utils.ts:export type AsyncTypeGuard<T> = (value: unknown) => Promise<boolean>;",
      "src/types/utils.ts:export type ConfigValue = string | number | boolean | object | null;",
      "src/types/utils.ts:export type Config = Record<ConfigKey, ConfigValue>;",
      "src/types/utils.ts:export type Discriminated<T, K extends keyof T> =",
      "src/types/utils.ts:// Discriminated union types for Personas",
      "src/types/utils.ts:export type PersonaProfileDiscriminated =",
      "src/types/utils.ts:  typeof value === 'object' &&",
      "src/types/utils.ts:  typeof value.success === 'boolean';",
      "src/types/wake-up-mood.ts:export type Mood = WakeUpMood;",
      "src/types/wake-up-mood.ts:export function isValidWakeUpMood(mood: string): mood is keyof typeof WakeUpMood {",
      "src/types/wake-up-mood.ts:    return WakeUpMood[mood as keyof typeof WakeUpMood];",
      "src/types/websocket.ts: * Comprehensive type definitions for WebSocket connections and messaging",
      "src/types/websocket.ts:export type WebSocketState = 'CONNECTING' | 'OPEN' | 'CLOSING' | 'CLOSED' | 'ERROR';",
      "src/types/websocket.ts:  type: WebSocketMessageType;",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/websocket.ts:  type: 'mobile' | 'tablet' | 'desktop' | 'smartwatch' | 'smart_speaker';",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:            type: 'cultural_assumption',",
      "src/utils/advancedTranslationValidator.ts:              type: 'formality_mismatch',",
      "src/utils/advancedTranslationValidator.ts:            type: 'time_format',",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:          type: 'terminology_variation',",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'string') allTexts.push(value);",
      "src/utils/advancedTranslationValidator.ts:      if (typeof refValue !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:      if (typeof transValue !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'string') texts.push(value);",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {",
      "src/utils/alarm-conversion.ts:            `Smart optimization \"${optimization.type}\" has invalid max adjustment`",
      "src/utils/analysis-worker.ts:          chronotype: 'normal',",
      "src/utils/analysis-worker.ts:        if (avgBedtimeHour < 21) results.chronotype = 'early';",
      "src/utils/analysis-worker.ts:        else if (avgBedtimeHour > 24) results.chronotype = 'late';",
      "src/utils/analysis-worker.ts:        else results.chronotype = 'normal';",
      "src/utils/analysis-worker.ts:        const { type, data, jobId } = e.data;",
      "src/utils/analysis-worker.ts:    const blob = new Blob([workerScript], { type: 'application/javascript' });",
      "src/utils/analysis-worker.ts:        type: 'analyzeSleep',",
      "src/utils/analysis-worker.ts:        type: 'predictWakeTime',",
      "src/utils/analysis-worker.ts:        type: 'analyzeVoice',",
      "src/utils/analysis-worker.ts:      chronotype: 'normal',",
      "src/utils/frame-rate-manager.tsx:    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {",
      "src/utils/image-optimization.tsx:    if (typeof window === 'undefined') return false;",
      "src/utils/index.ts:import type { VoiceMood, VoiceMoodConfig, Alarm } from '../types';",
      "src/utils/keyboard-navigation.ts:    const type = (element as HTMLInputElement).type?.toLowerCase();",
      "src/utils/keyboard-navigation.ts:   * Get element type for screen reader announcement",
      "src/utils/keyboard-navigation.ts:    const type = (element as HTMLInputElement).type?.toLowerCase();",
      "src/utils/lazy-loading.tsx:import type { ComponentType, LazyExoticComponent } from 'react';",
      "src/utils/mobile-accessibility.ts:      .mobile-accessible input[type=\"radio\"],",
      "src/utils/network-optimization.tsx:    if (typeof navigator === 'undefined') return;",
      "src/utils/performance-alerts.tsx:  type: 'warning' | 'error' | 'critical' | 'info';",
      "src/utils/performance-alerts.tsx:  type: 'notification' | 'console' | 'storage' | 'callback' | 'optimization';",
      "src/utils/performance-alerts.tsx:            type: 'notification',",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:            type: 'notification',",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'Layout Stability Issue' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'High Memory Usage' } },",
      "src/utils/performance-alerts.tsx:          { type: 'optimization', _config: { type: 'memory_cleanup' } },",
      "src/utils/performance-alerts.tsx:            type: 'notification',",
      "src/utils/performance-alerts.tsx:            type: 'notification',",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },",
      "src/utils/performance-alerts.tsx:        console._error(`[PerformanceAlert] Action ${action.type} failed:`, _error);",
      "src/utils/performance-alerts.tsx:    if (typeof performance !== 'undefined' && 'memory' in performance) {",
      "src/utils/performance-alerts.tsx:      type: 'warning',",
      "src/utils/performance-alerts.tsx:                  alert.type === 'critical'",
      "src/utils/performance-alerts.tsx:                      : alert.type === 'warning'",
      "src/utils/performance-profiler.ts:    if (typeof PerformanceObserver === 'undefined') return;",
      "src/utils/premium-testing.ts:import type { Subscription, PremiumFeatureAccess, PremiumUsage } from '../types';",
      "src/utils/rtl-testing.tsx:import { type SupportedLanguage } from '../config/i18n';",
      "src/utils/rtl-testing.tsx:    type: 'margin' | 'padding',",
      "src/utils/rtl-utilities.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/utils/screen-reader.ts:      if (typeof newState === 'boolean') {",
      "src/utils/screen-reader.ts:      } else if (typeof newState === 'string') {",
      "src/utils/screen-reader.ts:      } else if (typeof newState === 'number') {",
      "src/utils/service-worker-manager.ts:import type { Alarm } from '../types';",
      "src/utils/service-worker-manager.ts:  private async sendMessage(type: string, data?: any): Promise<any> {",
      "src/utils/service-worker-manager.ts:      this.registration.active.postMessage({ type, data }, [messageChannel.port2]);",
      "src/utils/service-worker-manager.ts:      const { type, data } = _event.data;",
      "src/utils/translationValidation.ts:      if (typeof value === 'string' && value.trim() === '') {",
      "src/utils/translationValidation.ts:          type: 'empty_value',",
      "src/utils/translationValidation.ts:      return value && typeof value === 'string' && value.trim() !== '';",
      "src/utils/translationValidation.ts:            type: 'invalid_interpolation',",
      "src/utils/translationValidation.ts:            type: 'invalid_interpolation',",
      "src/utils/translationValidation.ts:          type: 'suspicious_translation',",
      "src/utils/translationValidation.ts:          type: 'suspicious_translation',",
      "src/utils/translationValidation.ts:      if (typeof refValue === 'string' && typeof translatedValue === 'string') {",
      "src/utils/translationValidation.ts:      } else if (typeof refValue === 'object' && typeof translatedValue === 'object') {",
      "src/utils/translationValidation.ts:      if (typeof value === 'string') {",
      "src/utils/translationValidation.ts:      } else if (typeof value === 'object' && value !== null) {",
      "src/utils/translationValidation.ts:          report += `  ${icon} **${issue.type}** (${issue.key}): ${issue.message}\\n`;",
      "src/utils/validation.ts:  if (!label || typeof label !== 'string') {",
      "src/utils/validation.ts:    day => typeof day === 'number' && Number.isInteger(day) && day >= 0 && day <= 6",
      "src/utils/validation.ts:  sanitizedData?: typeof alarmData;",
      "src/utils/validation.ts:  if (!email || typeof email !== 'string') {",
      "src/vite-env.d.ts:/// <reference types=\"@testing-library/jest-dom\" />",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      // Verify basic User interface compliance",
      "src/__tests__/factories/core-factories.ts:export interface CreateUserOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaProfileOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaDetectionResultOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailCampaignOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailSequenceOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateCampaignMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePerformanceMetricsOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateAchievementOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTournamentOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTeamOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateSeasonOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateSubscriptionOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateVoiceOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateCustomSoundOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateAnalyticsOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateEmotionalStateOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateNotificationOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateMediaAssetOptions {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenario {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenarioResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestOrchestrationConfig {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockAlarmNotification {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockBatteryInfo {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockNetworkStatus {",
      "src/__tests__/mocks/enhanced-service-mocks.ts: * Implements the enhanced service interfaces with dependency injection patterns",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface ApiPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface RealTimePerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface MobilePerformanceProfile {",
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockLanguageContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface EnhancedServiceContainer {",
      "src/__tests__/providers/integration-provider.tsx:export interface IntegrationTestOptions {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAnalyticsService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockNotificationService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockStorageService {",
      "src/__tests__/providers/test-providers.tsx:interface FeatureAccessContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface LanguageContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface AuthContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface ThemeContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface AlarmContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface SubscriptionContextValue {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface AccessibilityViolation {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface ColorContrastResult {",
      "src/__tests__/utils/animation-helpers.tsx:interface AnimationConfig {",
      "src/__tests__/utils/animation-helpers.tsx:interface TransitionConfig {",
      "src/__tests__/utils/animation-helpers.tsx:interface MockAnimationFrame {",
      "src/__tests__/utils/assertion-helpers.ts:    interface Matchers<R> {",
      "src/__tests__/utils/hook-testing-utils.tsx:interface MockThemeContextValue {",
      "src/__tests__/utils/i18n-helpers.ts:interface LocaleConfig {",
      "src/__tests__/utils/i18n-helpers.ts:interface TranslationData {",
      "src/__tests__/utils/i18n-helpers.ts:interface I18nContextValue {",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceMark {",
      "src/__tests__/utils/performance-helpers.ts:export interface RenderPerformanceResult {",
      "src/__tests__/utils/performance-helpers.ts:export interface MemorySnapshot {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/render-helpers.ts:interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {",
      "src/__tests__/utils/storage-helpers.ts:interface MockStorageInterface {",
      "src/__tests__/utils/storage-helpers.ts:interface MockIndexedDBDatabase {",
      "src/__tests__/utils/storage-helpers.ts:interface MockCacheStorage {",
      "src/__tests__/utils/storage-helpers.ts:interface AlarmStorageData {",
      "src/analytics/PersonaAnalytics.tsx:interface PersonaDetectionData extends PersonaDetectionResult {",
      "src/analytics/PersonaAnalytics.tsx:export interface PersonaAnalyticsData {",
      "src/analytics/PersonaAnalytics.tsx:export interface CampaignPerformanceData {",
      "src/backend/api.ts:interface Alarm {",
      "src/backend/api.ts:interface Battle {",
      "src/backend/api.ts:interface BattleParticipant {",
      "src/backend/api.ts:interface BattleSettings {",
      "src/backend/api.ts:interface Tournament {",
      "src/backend/api.ts:// Environment bindings interface for enhanced monitoring",
      "src/backend/database-types.ts:// Comprehensive TypeScript interfaces for all database query results",
      "src/backend/database-types.ts:export interface DatabaseUser {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export interface DatabaseAnalyticsEvent {",
      "src/backend/database-types.ts:export interface DatabaseUserStats {",
      "src/backend/database-types.ts:export interface DatabaseEmotionalProfile {",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/backend/database-types.ts:export interface DatabasePerformanceMetric {",
      "src/backend/database-types.ts:export interface DatabaseDeploymentData {",
      "src/backend/database-types.ts:export interface DatabaseHealthData {",
      "src/backend/database-types.ts:export interface DatabaseAIResponse {",
      "src/backend/database-types.ts:export interface DatabaseRecommendation {",
      "src/backend/database-types.ts:export interface DatabaseVoiceAnalysis {",
      "src/backend/database-types.ts:export interface DatabaseQueryResult<T = any> {",
      "src/backend/performance-monitoring.ts:interface PerformanceMetric {",
      "src/backend/performance-monitoring.ts:interface WebVitalsData {",
      "src/backend/performance-monitoring.ts:interface AnalyticsEvent {",
      "src/components/AIAutomation.tsx:interface AIAutomationProps {",
      "src/components/AccessibilityDashboard.tsx:interface AccessibilityDashboardProps {",
      "src/components/AccessibilityDashboard.tsx:          Optimize interface for screen readers with enhanced descriptions",
      "src/components/AchievementBadges.tsx:interface AchievementBadgesProps {",
      "src/components/ActiveAlarm.tsx:interface ActiveAlarmProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AlarmItemProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListWrapperProps extends AdaptiveAlarmListProps {",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveImage.tsx:interface AdaptiveImageProps {",
      "src/components/AdaptiveImage.tsx:interface ImageVariant {",
      "src/components/AdaptiveModal.tsx:export interface AdaptiveModalProps {",
      "src/components/AdaptiveModal.tsx:export interface ConfirmationModalProps extends Omit<AdaptiveModalProps, 'children'> {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSpinnerProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingOverlayProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSkeletonProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdvancedAlarmScheduling.tsx:interface AdvancedAlarmSchedulingProps {",
      "src/components/AdvancedAnalytics.tsx:interface AdvancedAnalyticsProps {",
      "src/components/AdvancedSchedulingDashboard.tsx:interface AdvancedSchedulingDashboardProps {",
      "src/components/AlarmForm.tsx:interface AlarmFormProps {",
      "src/components/AlarmList.tsx:interface AlarmListProps {",
      "src/components/AlarmManagement.tsx:interface AlarmManagementProps {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionAlternative {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognition extends EventTarget {",
      "src/components/AlarmRinging.tsx:interface AlarmRingingProps {",
      "src/components/AlarmTester.tsx:interface AlarmTesterProps {",
      "src/components/AlarmThemeBrowser.tsx: * Advanced theme selection interface with collections, filtering, and preview",
      "src/components/AlarmThemeBrowser.tsx:interface AlarmThemeBrowserProps {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeCardProps {",
      "src/components/AlarmThemeSelector.tsx:interface ThemeCombination {",
      "src/components/AlarmThemeSelector.tsx:interface AlarmThemeSelectorProps {",
      "src/components/AnalyticsDashboard.tsx:interface AnalyticsMetric {",
      "src/components/AnalyticsDashboard.tsx:interface UsageData {",
      "src/components/AnalyticsProvider.tsx:interface AnalyticsContextType {",
      "src/components/AnalyticsProvider.tsx:interface AnalyticsProviderProps {",
      "src/components/AuthenticationFlow.tsx:interface AuthenticationFlowProps {",
      "src/components/BattleSystem.tsx:interface BattleSystemProps {",
      "src/components/CommunityChallenge.tsx:interface CommunityChallengeProps {",
      "src/components/ComprehensiveSecurityDashboard.tsx:// Provides a unified interface for monitoring all alarm security features",
      "src/components/ComprehensiveSecurityDashboard.tsx:interface SecurityStatus {",
      "src/components/ConsentBanner.tsx:interface ConsentBannerProps {",
      "src/components/CustomSoundThemeCreator.tsx:interface CustomSoundThemeCreatorProps {",
      "src/components/CustomThemeManager.tsx:interface CustomThemeManagerProps {",
      "src/components/Dashboard.tsx:interface DashboardProps {",
      "src/components/EmotionalNudgeModal.tsx:interface EmotionalNudgeModalProps {",
      "src/components/EnhancedBattles.tsx:interface EnhancedBattlesProps {",
      "src/components/EnhancedDashboard.tsx:interface EnhancedDashboardProps {",
      "src/components/EnhancedMediaContent.tsx:interface EnhancedMediaContentProps {",
      "src/components/EnhancedMediaContent.tsx:interface AudioPlayerState {",
      "src/components/EnhancedSettings.tsx:interface EnhancedSettingsProps {",
      "src/components/EnhancedSmartAlarmSettings.tsx:interface EnhancedSmartAlarmSettingsProps {",
      "src/components/ErrorBoundary.tsx:interface State {",
      "src/components/ErrorBoundaryTest.tsx:interface ErrorBoundaryTestProps {",
      "src/components/ExtendedScreenReaderTester.tsx:interface ExtendedScreenReaderTesterProps {",
      "src/components/FeatureLockOverlay.tsx:interface FeatureLockOverlayProps {",
      "src/components/ForgotPasswordForm.tsx:interface ForgotPasswordFormProps {",
      "src/components/FriendsManager.tsx:interface FriendsManagerProps {",
      "src/components/Gamification.tsx:interface GamificationProps {",
      "src/components/GamingHub.tsx:interface GamingHubProps {",
      "src/components/HabitCelebration.tsx:interface HabitCelebrationProps {",
      "src/components/LanguageSelector.tsx:interface LanguageSelectorProps {",
      "src/components/MediaContent.tsx:interface MediaContentProps {",
      "src/components/MobileAccessibilityProvider.tsx:interface MobileAccessibilityContextValue {",
      "src/components/MobileAlarmCard.tsx:interface Alarm {",
      "src/components/MobileAlarmCard.tsx:interface MobileAlarmCardProps {",
      "src/components/MobileNavigation.tsx:interface NavigationItem {",
      "src/components/MobileNavigation.tsx:interface MobileNavigationProps {",
      "src/components/MobileNavigation.tsx:interface NavigationButtonProps {",
      "src/components/MobileNavigation.tsx:interface ExtendedNavigationPanelProps {",
      "src/components/NuclearModeBattle.tsx:interface NuclearModeBattleProps {",
      "src/components/NuclearModeBattle.tsx:interface NuclearChallenge {",
      "src/components/NuclearModeChallenge.tsx:interface NuclearModeChallengeProps {",
      "src/components/NuclearModeResults.tsx:interface NuclearModeResultsProps {",
      "src/components/NuclearModeResults.tsx:interface PerformanceMetric {",
      "src/components/NuclearModeSelector.tsx:interface NuclearModeSelectorProps {",
      "src/components/OfflineDiagnostics.tsx:interface DiagnosticCheck {",
      "src/components/OfflineDiagnostics.tsx:interface OfflineDiagnosticsProps {",
      "src/components/OfflineIndicator.tsx:interface CacheStats {",
      "src/components/OfflineIndicator.tsx:interface ServiceWorkerStatus {",
      "src/components/OfflineIndicator.tsx:interface OfflineIndicatorProps {",
      "src/components/OnboardingFlow.tsx:interface OnboardingFlowProps {",
      "src/components/PWAInstallPrompt.tsx:interface BeforeInstallPromptEvent extends Event {",
      "src/components/PWAInstallPrompt.tsx:  interface WindowEventMap {",
      "src/components/PWAInstallPrompt.tsx:  interface Navigator {",
      "src/components/PWAInstallPrompt.tsx:interface PWAInstallPromptProps {",
      "src/components/PWAStatusDashboard.tsx:interface PWAStatusDashboardProps {",
      "src/components/PerformanceDashboard.tsx:interface WebVitalMetric {",
      "src/components/PerformanceDashboard.tsx:interface DashboardState {",
      "src/components/PerformanceProfilerWrapper.tsx:interface PerformanceProfilerWrapperProps {",
      "src/components/PerformanceProfilerWrapper.tsx:interface PerformanceDashboardProps {",
      "src/components/PersonaAnalyticsDashboard.tsx:interface AnalyticsDashboardProps {",
      "src/components/PersonaAnalyticsDashboard.tsx:interface PersonaMetrics {",
      "src/components/PersonaAnalyticsDashboard.tsx:interface CampaignMetrics {",
      "src/components/PersonaDrivenUI.tsx:// Adapts interface based on user persona and subscription tier",
      "src/components/PersonaDrivenUI.tsx:interface PersonaUIProps {",
      "src/components/PersonaFocusDashboard.tsx:interface PersonaMetrics {",
      "src/components/PersonaFocusDashboard.tsx:interface PersonaDashboardProps {",
      "src/components/PersonalizationSettings.tsx:interface PersonalizationSettingsProps {",
      "src/components/PersonalizationSettings.tsx:      description: 'Adjust interface density and layout preferences',",
      "src/components/PremiumDashboard.tsx:interface PremiumDashboardProps {",
      "src/components/PremiumDashboard.tsx:interface DashboardState {",
      "src/components/PremiumDashboard.tsx:interface FeatureCardProps {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeature {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeatureCardProps {",
      "src/components/PremiumFeatureTest.tsx:interface PremiumFeatureTestProps {",
      "src/components/PremiumGate.tsx:interface PremiumGateProps {",
      "src/components/PremiumThemeSettings.tsx:interface ThemeState {",
      "src/components/PremiumThemeShowcase.tsx:interface ThemeCardProps {",
      "src/components/PremiumUsageTracker.tsx:interface UsageTrackerProps {",
      "src/components/PremiumUsageTracker.tsx:interface UsageData {",
      "src/components/PricingPage.tsx:interface PricingPageProps {",
      "src/components/PushNotificationSettings.tsx:interface PushNotificationSettingsProps {",
      "src/components/QuickAlarmSetup.tsx:interface QuickAlarmSetupProps {",
      "src/components/RTLLayout/RTLContainer.tsx:interface RTLContainerProps {",
      "src/components/RewardsDashboard.tsx:interface RewardsDashboardProps {",
      "src/components/RootErrorBoundary.tsx:interface State {",
      "src/components/ScreenReaderProvider.tsx:interface ScreenReaderProviderProps {",
      "src/components/SettingsPage.tsx:interface SettingsPageProps {",
      "src/components/SleepTracker.tsx:interface SleepTrackerProps {",
      "src/components/SmartAlarmDashboard.tsx:interface SmartAlarmDashboardProps {",
      "src/components/SmartAlarmSettings.tsx:interface SmartAlarmSettingsProps {",
      "src/components/SmartFeatures.tsx:interface SmartFeaturesProps {",
      "src/components/SmartUpgradePrompt.tsx:interface SmartUpgradePromptProps {",
      "src/components/SocialProof.tsx:interface SocialProofProps {",
      "src/components/SoundPreviewSystem.tsx:interface PlaybackState {",
      "src/components/SoundPreviewSystem.tsx:    description: 'Primary interface interaction',",
      "src/components/SoundThemeDemo.tsx:interface ThemeCategory {",
      "src/components/SoundUploader.tsx:interface SoundUploaderProps {",
      "src/components/SoundUploader.tsx:interface UploadItem extends UploadedFile {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryProps {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryState {",
      "src/components/Statistics.tsx:interface StatisticsProps {",
      "src/components/StreakCounter.tsx:interface StreakCounterProps {",
      "src/components/StrugglingSamWrapper.tsx:interface StrugglingSamWrapperProps {",
      "src/components/SubscriptionModal.tsx:interface SubscriptionModalProps {",
      "src/components/SubscriptionStatus.tsx:interface SubscriptionStatusProps {",
      "src/components/SyncStatus.tsx:interface SyncStatusProps {",
      "src/components/TabProtectionSettings.tsx:interface TabProtectionSettingsProps {",
      "src/components/TabProtectionWarning.tsx:interface TabProtectionWarningProps {",
      "src/components/ThemeCreator.tsx:interface ThemeCreatorProps {",
      "src/components/ThemeCreator.tsx:interface ColorPaletteState {",
      "src/components/ThemeCustomizationStudio.tsx:interface AnimationControlProps {",
      "src/components/ThemeGallery.tsx:interface ThemeGalleryProps {",
      "src/components/ThemeGallery.tsx:interface ThemeCard {",
      "src/components/ThemeGallery.tsx:      description: 'Clean and bright interface perfect for daytime use',",
      "src/components/ThemeManager.tsx:interface ThemeManagerProps {",
      "src/components/TranslationDashboard.tsx:interface QualityScore {",
      "src/components/TranslationDashboard.tsx:interface LanguageData {",
      "src/components/TranslationDashboard.tsx:interface DashboardStats {",
      "src/components/UpgradePrompt.tsx:interface UpgradePromptProps {",
      "src/components/VirtualScroll.tsx:interface VirtualScrollProps<T> {",
      "src/components/VirtualScroll.tsx:interface AlarmHistoryItem {",
      "src/components/VisualAlarmDisplay.tsx:interface VisualAlarmDisplayProps {",
      "src/components/VisualAlarmDisplay.tsx:interface ParticleEffect {",
      "src/components/VoiceAnalyticsDashboard.tsx:interface VoiceAnalytics {",
      "src/components/VoiceCloning.tsx:interface AudioSample {",
      "src/components/VoicePersonalitySelector.tsx:interface VoicePersonalitySelectorProps {",
      "src/components/VoiceSelector.tsx:interface VoiceCardProps {",
      "src/components/VoiceSettings.tsx:interface VoiceConfiguration {",
      "src/components/WakeUpFeedbackModal.tsx:interface WakeUpFeedbackModalProps {",
      "src/components/__tests__/AccessibilityDashboard.test.tsx: * Tests comprehensive accessibility settings interface including visual settings,",
      "src/components/__tests__/AccessibilityIntegration.test.tsx:    it('should adapt interface for mobile accessibility', async () => {",
      "src/components/__tests__/AccessibilityTester.test.tsx: * Tests accessibility testing interface including contrast checking,",
      "src/components/__tests__/BattleSystem.test.tsx:    it('provides screen reader friendly trash talk interface', async () => {",
      "src/components/__tests__/BattleSystem.test.tsx:    it('uses mobile-optimized trash talk interface', async () => {",
      "src/components/__tests__/GamingHub.test.tsx: * Tests the main gaming interface including rewards, community, and battles tabs,",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface LoadingSpinnerProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedCardProps {",
      "src/components/animations/AnimationLibrary.tsx:interface ScrollRevealProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedToggleProps {",
      "src/components/animations/AnimationLibrary.tsx:interface FloatingActionButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface NotificationProps {",
      "src/components/animations/AnimationLibrary.tsx:interface StaggerContainerProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedInputProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedSelectProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedButtonProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedCheckboxProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedProgressProps {",
      "src/components/premium/EnhancedUpgradePrompt.tsx:interface EnhancedUpgradePromptProps {",
      "src/components/premium/FeatureGate.tsx:interface FeatureGateProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureBadgeProps {",
      "src/components/premium/FeatureUtils.tsx:interface TierComparisonProps {",
      "src/components/premium/FeatureUtils.tsx:interface UsageProgressProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureHighlightProps {",
      "src/components/premium/FeatureUtils.tsx:interface TeamFeatureIndicatorProps {",
      "src/components/premium/PaymentFlow.tsx:interface PaymentFlowProps {",
      "src/components/premium/PaymentFlow.tsx:interface PaymentFormData {",
      "src/components/premium/PaymentMethodManager.tsx:interface PaymentMethodManagerProps {",
      "src/components/premium/PremiumAlarmFeatures.tsx:interface PremiumAlarmFeaturesProps {",
      "src/components/premium/PremiumAnalytics.tsx:interface AnalyticsData {",
      "src/components/premium/PremiumAnalytics.tsx:interface PremiumAnalyticsProps {",
      "src/components/premium/PremiumFeaturePreview.tsx:interface PremiumFeaturePreviewProps {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface TeamMember {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface Team {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface PremiumTeamFeaturesProps {",
      "src/components/premium/PremiumVoiceFeatures.tsx:interface PremiumVoiceFeaturesProps {",
      "src/components/premium/PricingTable.tsx:interface PricingTableProps {",
      "src/components/premium/SubscriptionDashboard.tsx:interface SubscriptionDashboardProps {",
      "src/components/premium/SubscriptionManagement.tsx:interface SubscriptionManagementProps {",
      "src/components/premium/SubscriptionManagement.tsx:interface CancellationData {",
      "src/components/premium/SubscriptionPage.tsx:interface SubscriptionPageProps {",
      "src/components/premium/__tests__/SubscriptionDashboard.test.tsx: * Tests the main subscription management interface that displays subscription status,",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestWrapperProps {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaProgram {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaTester {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaFeedback {",
      "src/components/user-testing/BugReportModal.tsx:interface BugReportModalProps {",
      "src/components/user-testing/FeedbackModal.tsx:interface FeedbackModalProps {",
      "src/components/user-testing/FeedbackWidget.tsx:interface FeedbackWidgetProps {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:interface RedesignedFeedbackModalProps {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:interface FeedbackStep {",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:interface RedesignedFeedbackWidgetProps {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface AnalyticsData {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface EventAnalytics {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface FeedbackAnalytics {",
      "src/config/convertkit-config.ts:export interface PersonaConvertKitConfig {",
      "src/config/convertkit-config.ts:export interface PersonaAutomationRule {",
      "src/config/convertkit-config.ts:export interface ConvertKitFormTemplate {",
      "src/config/convertkit-config.ts:export interface ConvertKitSequenceTemplate {",
      "src/config/convertkit-config.ts:export interface SequenceEmailTemplate {",
      "src/config/convertkit-generated.ts:export interface GeneratedConvertKitConfig {",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/constants/initialState.ts: * Includes theme preferences, accessibility settings, and user interface customizations.",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessProviderProps {",
      "src/contexts/FeatureAccessContext.tsx:interface ConditionalFeatureProps {",
      "src/contexts/LanguageContext.tsx:interface LanguageContextType {",
      "src/contexts/LanguageContext.tsx:interface LanguageProviderProps {",
      "src/contexts/StrugglingsamContext.tsx:interface StrugglingSamState {",
      "src/contexts/StrugglingsamContext.tsx:interface StrugglingSamContextType extends StrugglingSamState, ABTestContext {",
      "src/data/emotional-message-templates.ts:export interface MessageTemplate {",
      "src/hooks/__tests__/integration/cross-hook.integration.test.tsx:interface FullTestWrapperProps {",
      "src/hooks/__tests__/integration/useAuth.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/__tests__/integration/useFeatureGate.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/__tests__/integration/usePWA.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/useABTesting.tsx:interface ABTestingState {",
      "src/hooks/useAnalytics.ts:interface UseAnalyticsReturn {",
      "src/hooks/useAudioLazyLoading.ts:export interface AudioLoadingState {",
      "src/hooks/useAuth.ts:interface AuthState {",
      "src/hooks/useAuth.ts:interface AuthHook extends AuthState {",
      "src/hooks/useCriticalPreloading.ts:export interface CriticalPreloadingState {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeOptions {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeReturn {",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:interface CulturalThemeProviderProps {",
      "src/hooks/useDeviceCapabilities.tsx:export interface DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:interface DeviceCapabilityContextType {",
      "src/hooks/useDynamicFocus.ts:interface DynamicFocusOptions {",
      "src/hooks/useDynamicFocus.ts:interface ContentChange {",
      "src/hooks/useEmotionalNotifications.ts:interface UseEmotionalNotificationsProps {",
      "src/hooks/useEmotionalNotifications.ts:interface EmotionalNotificationState {",
      "src/hooks/useEmotionalNotifications.ts:interface EmotionalNotificationActions {",
      "src/hooks/useEnhancedCaching.ts:export interface CacheState {",
      "src/hooks/useEnhancedServiceWorker.ts:export interface ServiceWorkerState {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateConfig {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateResult {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateActions {",
      "src/hooks/useFeatureGate.ts:interface UseFeatureGateOptions {",
      "src/hooks/useFocusRestoration.ts:interface FocusRestorationOptions {",
      "src/hooks/useFocusTrap.ts:interface FocusTrapOptions {",
      "src/hooks/useFocusTrap.ts:interface FocusableElement {",
      "src/hooks/useFormAnnouncements.ts:export interface FormFieldChange {",
      "src/hooks/useGamingAnnouncements.ts:interface GamingAnnouncement {",
      "src/hooks/useKeyboardNavigation.ts:interface KeyboardNavigationHookReturn {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceMetrics {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceOptimizations {",
      "src/hooks/usePushNotifications.ts:export interface PushNotificationStatus {",
      "src/hooks/usePushNotifications.ts:export interface UsePushNotificationsReturn {",
      "src/hooks/useRealtime.tsx:interface RealtimeContextValue {",
      "src/hooks/useRealtime.tsx:interface RealtimeProviderProps {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeOptions {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseUserRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAIRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UsePushNotificationReturn {",
      "src/hooks/useScreenReaderAnnouncements.ts:interface UseScreenReaderOptions {",
      "src/hooks/useScreenReaderAnnouncements.ts:interface StateChangeAnnouncement {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectHandlers {",
      "src/hooks/useSubscription.ts:interface SubscriptionHookState {",
      "src/hooks/useTabProtectionAnnouncements.ts:interface UseTabProtectionAnnouncementsProps {",
      "src/hooks/useTabProtectionSettings.ts:interface UseTabProtectionSettingsReturn {",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:  // Memoized public interface for theme classes",
      "src/services/CloudSyncService.ts:export interface CloudSyncStatus {",
      "src/services/__tests__/test-setup.ts:    interface Matchers<R> {",
      "src/services/accessibility-preferences.ts:export interface AccessibilityState extends AccessibilityPreferences {",
      "src/services/advanced-analytics.ts:export interface AnalyticsInsight {",
      "src/services/advanced-analytics.ts:export interface UserAnalytics {",
      "src/services/advanced-analytics.ts:export interface TrendData {",
      "src/services/advanced-analytics.ts:export interface PeerComparison {",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/advanced-analytics.ts:export interface SeasonalPattern {",
      "src/services/advanced-analytics.ts:export interface OptimalWakeTime {",
      "src/services/advanced-analytics.ts:export interface EffectivenessForecast {",
      "src/services/advanced-analytics.ts:export interface SleepRecommendation {",
      "src/services/advanced-conditions-helper.ts:export interface ConfigurationValidation {",
      "src/services/advanced-conditions-helper.ts:export interface PerformanceAnalysis {",
      "src/services/ai-rewards.ts:interface BehaviorPattern {",
      "src/services/ai-rewards.ts:interface PersonalityProfile {",
      "src/services/alarm-api-security.ts:interface SecurityHeaders {",
      "src/services/alarm-api-security.ts:interface ValidationResult {",
      "src/services/alarm-backup-redundancy.ts:interface BackupMetadata {",
      "src/services/alarm-backup-redundancy.ts:interface BackupData {",
      "src/services/alarm-backup-redundancy.ts:interface BackupLocation {",
      "src/services/alarm-integrity-monitor.ts:interface TamperDetectionEvent {",
      "src/services/alarm-rate-limiting.ts:interface RateLimit {",
      "src/services/alarm-rate-limiting.ts:interface UserRateLimits {",
      "src/services/alarm-rate-limiting.ts:interface RateLimitEntry {",
      "src/services/alarm-rate-limiting.ts:interface RateLimitResult {",
      "src/services/alarm-rate-limiting.ts:interface AdaptiveLimitAdjustment {",
      "src/services/alarm-security-integration.ts:interface SecurityStatus {",
      "src/services/alarm-security-integration.ts:interface SecurityOperation {",
      "src/services/analytics-config.ts:export interface AnalyticsEnvironmentConfig {",
      "src/services/analytics-config.ts:export interface InitializationStatus {",
      "src/services/analytics.ts:export interface AnalyticsConfig {",
      "src/services/animation-manager.ts:export interface AnimationPreferences {",
      "src/services/animation-manager.ts:export interface AnimationMetrics {",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/audio-manager.ts:export interface AudioCacheEntry {",
      "src/services/audio-manager.ts:export interface AudioMetadata {",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/audio-manager.ts:export interface AudioPreloadConfig {",
      "src/services/capacitor-enhanced.ts:export interface AlarmNotification {",
      "src/services/capacitor-enhanced.ts:export interface DeviceFeatures {",
      "src/services/capacitor.ts:export interface CapacitorInitResult {",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/convertkit-service.ts:export interface ConvertKitTag {",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/services/critical-preloader.ts:export interface CriticalAsset {",
      "src/services/critical-preloader.ts:export interface PreloadStrategy {",
      "src/services/critical-preloader.ts:export interface PreloadStats {",
      "src/services/critical-preloader.ts:    // This would typically interface with your alarm storage service",
      "src/services/custom-sound-manager.ts:export interface SoundUploadResult {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundValidationResult {",
      "src/services/custom-test-scenarios.ts:export interface TestScenario {",
      "src/services/custom-test-scenarios.ts:export interface TestCategory {",
      "src/services/custom-test-scenarios.ts:export interface CustomCategoryConfig {",
      "src/services/device-capabilities.ts:export interface DeviceCapabilities {",
      "src/services/device-capabilities.ts:export interface DevicePerformanceMetrics {",
      "src/services/device-capabilities.ts:export interface AdaptiveConfig {",
      "src/services/device-capabilities.ts:export interface PerformanceConfig {",
      "src/services/email-campaign.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/services/emotional-intelligence.ts:interface UserStats {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceConfig extends ServiceConfig {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsEvent {",
      "src/services/enhanced-analytics.ts:export interface PerformanceMetrics {",
      "src/services/enhanced-analytics.ts:export interface WebVitals {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-cache-manager.ts:export interface CacheEntry extends AudioCacheEntry {",
      "src/services/enhanced-cache-manager.ts:export interface CachePolicy {",
      "src/services/enhanced-cache-manager.ts:export interface CacheStats {",
      "src/services/enhanced-cache-manager.ts:export interface CacheWarmingConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/enhanced-location-service.ts:interface LocationConfig {",
      "src/services/enhanced-location-service.ts:interface LocationHistoryPoint {",
      "src/services/enhanced-location-service.ts:interface LocationPattern {",
      "src/services/enhanced-offline-storage.ts:interface EnhancedStorageMetadata {",
      "src/services/enhanced-offline-storage.ts:interface DataIntegrityCheck {",
      "src/services/enhanced-offline-storage.ts:interface BackupMetadata {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorConfig extends ServiceConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface AlertChannel {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorDependencies {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface WebVitalsMetrics {",
      "src/services/enhanced-performance-monitor.ts:export interface UserInteraction {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceReport {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceAlert {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface WakeUpFeedback {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface OptimalTimeSlot {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface AdaptationRecord {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartRecommendation {",
      "src/services/error-handler.ts:interface ErrorAnalytics {",
      "src/services/feature-gate-service.ts:interface FeatureDefinition {",
      "src/services/feature-gate-service.ts:interface FeatureAccessResult {",
      "src/services/feature-gate-service.ts:interface FeatureRestriction {",
      "src/services/health-tracker-integration.ts:export interface SleepData {",
      "src/services/health-tracker-integration.ts:export interface ActivityData {",
      "src/services/health-tracker-integration.ts:export interface HealthInsight {",
      "src/services/health-tracker-integration.ts:export interface CircadianProfile {",
      "src/services/health-tracker-integration.ts:export interface HealthConfig {",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadQueueItem {",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadStats {",
      "src/services/ml-alarm-optimizer.ts:interface UserBehaviorPattern {",
      "src/services/ml-alarm-optimizer.ts:interface PredictionFactor {",
      "src/services/mobile-performance.ts:export interface PerformanceConfig {",
      "src/services/mobile-performance.ts:export interface PerformanceMetrics {",
      "src/services/notification.ts:export interface NotificationOptions {",
      "src/services/notification.ts:export interface NotificationAction {",
      "src/services/notification.ts:export interface ScheduledNotification {",
      "src/services/offline-analytics.ts:interface AnalyticsEvent {",
      "src/services/offline-analytics.ts:interface SessionData {",
      "src/services/offline-analytics.ts:interface AnalyticsConfig {",
      "src/services/offline-analytics.ts:interface PerformanceMetric {",
      "src/services/offline-gaming.ts:interface OfflineGamingData {",
      "src/services/offline-gaming.ts:interface BattleAction {",
      "src/services/offline-gaming.ts:interface OfflineReward {",
      "src/services/offline-manager.ts:interface OfflineDB extends DBSchema {",
      "src/services/offline-manager.ts:export interface SyncStatus {",
      "src/services/offline-manager.ts:export interface OfflineCapabilities {",
      "src/services/offline-sleep-tracker.ts:interface SleepStage {",
      "src/services/offline-sleep-tracker.ts:interface SleepGoal {",
      "src/services/offline-sleep-tracker.ts:interface SleepAnalytics {",
      "src/services/offline-storage.ts:interface StorageMetadata {",
      "src/services/offline-storage.ts:interface PendingChange {",
      "src/services/performance-analytics.ts:export interface PerformanceMetric {",
      "src/services/performance-analytics.ts:export interface PerformanceThresholds {",
      "src/services/performance-analytics.ts:export interface WebVitalsMetrics {",
      "src/services/performance-monitor.ts:interface PerformanceMetric {",
      "src/services/performance-monitor.ts:interface WebVitalsMetrics {",
      "src/services/performance-monitor.ts:interface UserInteraction {",
      "src/services/performance-monitor.ts:interface PerformanceReport {",
      "src/services/performance-monitor.ts:interface PerformanceTrends {",
      "src/services/predictive-analytics-service.ts:interface AnalyticsConfig {",
      "src/services/predictive-analytics-service.ts:interface DetectedPattern {",
      "src/services/predictive-analytics-service.ts:interface PatternContext {",
      "src/services/predictive-analytics-service.ts:interface TrendAnalysis {",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/premium-theme-animations.ts:export interface PremiumAnimationEffects {",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/services/premium.ts:export interface SubscriptionPlan {",
      "src/services/privacy-compliance.ts:export interface PrivacySettings {",
      "src/services/privacy-compliance.ts:export interface UserDataRequest {",
      "src/services/push-notifications.ts:export interface PushNotificationPayload {",
      "src/services/push-notifications.ts:export interface PushNotificationSettings {",
      "src/services/pwa-manager.ts:interface BeforeInstallPromptEvent extends Event {",
      "src/services/pwa-manager.ts:interface PWAInstallationState {",
      "src/services/pwa-manager.ts:interface PWACapabilities {",
      "src/services/pwa-service.ts:export interface PWACapabilities {",
      "src/services/pwa-service.ts:export interface PWAInstallPrompt {",
      "src/services/pwa-service.ts:export interface BackgroundSyncStatus {",
      "src/services/real-time-smart-adapter.ts:export interface RealTimeAdaptationConfig {",
      "src/services/real-time-smart-adapter.ts:export interface AdaptationTrigger {",
      "src/services/real-time-smart-adapter.ts:export interface SmartAlarmStatus {",
      "src/services/realtime-service.ts:export interface RealtimeConfig {",
      "src/services/realtime-service.ts:export interface PresenceData {",
      "src/services/realtime-service.ts:export interface LiveUpdate {",
      "src/services/realtime-service.ts:export interface PushNotificationPayload {",
      "src/services/revenue-analytics.ts:export interface CohortData {",
      "src/services/revenue-analytics.ts:export interface FeatureAdoptionMetrics {",
      "src/services/secure-alarm-storage.ts:interface SecureAlarmData {",
      "src/services/secure-alarm-storage.ts:interface AlarmBackupData {",
      "src/services/secure-push-notification.ts:export interface SecurePushNotificationPayload {",
      "src/services/secure-push-notification.ts:export interface PushNotificationSettings {",
      "src/services/security-monitoring-forensics.ts:interface ThreatSignature {",
      "src/services/security.ts:export interface PasswordStrength {",
      "src/services/service-worker-manager.ts:interface EmotionalEvent {",
      "src/services/service-worker-manager.ts:interface ServiceWorkerMessage {",
      "src/services/sleep-analysis.ts:export interface SleepStage {",
      "src/services/sleep-analysis.ts:export interface EnvironmentData {",
      "src/services/sleep-analysis.ts:export interface WearableData {",
      "src/services/sleep-analysis.ts:export interface SleepPattern {",
      "src/services/sleep-analysis.ts:export interface DayPattern {",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/sleep-analysis.ts:export interface OptimalWakeWindow {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartSchedule {",
      "src/services/smart-alarm-scheduler.ts:export interface AlarmOptimization {",
      "src/services/smart-alarm-scheduler.ts:export interface SleepGoal {",
      "src/services/smart-alarm-scheduler.ts:export interface UserScheduleAnalysis {",
      "src/services/smart-alarm-scheduler.ts:export interface ScheduleRecommendation {",
      "src/services/smart-notification-service.ts:export interface NotificationContext {",
      "src/services/smart-notification-service.ts:export interface SmartNotificationConfig {",
      "src/services/smart-notification-service.ts:export interface AdaptiveNotification {",
      "src/services/sound-effects.ts: * notification sounds, and provides an easy-to-use interface for playing sounds",
      "src/services/supabase.ts:interface CacheConfig {",
      "src/services/theme-accessibility.ts:interface ContrastRatio {",
      "src/services/theme-accessibility.ts:interface ColorBlindnessSimulation {",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-performance.ts:interface CSSVariableCache {",
      "src/services/theme-performance.ts:interface ThemeTransition {",
      "src/services/theme-persistence.ts:interface ThemeStorageData {",
      "src/services/theme-persistence.ts:interface StorageMetadata {",
      "src/services/types/media.ts:export interface Playlist {",
      "src/services/types/media.ts:export interface PlaylistSound {",
      "src/services/types/media.ts:export interface MotivationalQuote {",
      "src/services/types/media.ts:export interface AudioLoadOptions {",
      "src/services/types/media.ts:export interface AudioPlaybackOptions {",
      "src/services/types/media.ts:export interface MediaLibrary {",
      "src/services/types/media.ts:export interface StorageInfo {",
      "src/services/types/media.ts:export interface CacheSettings {",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/types/media.ts:export interface AudioFormat {",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/services/types/media.ts:export interface AudioAnalysis {",
      "src/services/types/media.ts:export interface ModerationResult {",
      "src/services/types/media.ts:export interface ContentModerationSettings {",
      "src/services/types/performance.ts:export interface PerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/types/performance.ts:export interface PerformanceThresholds {",
      "src/services/types/performance.ts:export interface RenderingOptimizations {",
      "src/services/types/performance.ts:export interface MemoryOptimizations {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface AdaptivePerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceMetric {",
      "src/services/types/performance.ts:export interface FrameRateMetrics {",
      "src/services/types/performance.ts:export interface PerformanceSnapshot {",
      "src/services/types/performance.ts:export interface PerformanceAlert {",
      "src/services/types/performance.ts:export interface DeviceAdaptation {",
      "src/services/types/performance.ts:export interface ComponentOptimization {",
      "src/services/types/performance.ts:export interface AssetOptimization {",
      "src/services/types/performance.ts:export interface CacheOptimization {",
      "src/services/user-testing.ts:export interface UserFeedback {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface UsabilityEvent {",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/voice-ai-enhanced.ts:export interface VoicePersonality {",
      "src/services/voice-ai-enhanced.ts:export interface ContextualResponse {",
      "src/services/voice-ai-enhanced.ts:export interface VoiceLearningData {",
      "src/services/voice-biometrics.ts:export interface VoiceTrainingSession {",
      "src/services/voice-biometrics.ts:export interface VoiceAuthentication {",
      "src/services/voice-biometrics.ts:export interface VoiceMoodAnalysis {",
      "src/services/voice-pro.ts:export interface CachedVoiceMessage {",
      "src/services/voice-recognition-enhanced.ts:export interface EnhancedVoiceCommand {",
      "src/services/voice-recognition-enhanced.ts:export interface MultiLanguageConfig {",
      "src/services/voice-recognition-enhanced.ts:export interface AdvancedRecognitionConfig {",
      "src/services/voice-recognition.ts:export interface VoiceCommand {",
      "src/services/voice-smart-integration.ts:export interface SmartHomeIntegration {",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/services/voice-smart-integration.ts:export interface VoiceIntegrationConfig {",
      "src/stories/Header.tsx:export interface HeaderProps {",
      "src/templates/email-templates.ts:export interface EmailTemplateConfig {",
      "src/templates/email-templates.ts:export interface TemplateVariable {",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/types/alarm-scheduling.ts: * Comprehensive interfaces for complex alarm scheduling features",
      "src/types/alarm-scheduling.ts:export interface RecurrencePattern {",
      "src/types/alarm-scheduling.ts:export interface ConditionalRule {",
      "src/types/alarm-scheduling.ts:export interface LocationTrigger {",
      "src/types/alarm-scheduling.ts:export interface SmartOptimization {",
      "src/types/alarm-scheduling.ts:export interface SeasonalAdjustment {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:interface CalendarProvider {",
      "src/types/alarm-scheduling.ts:interface CalendarRule {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm.d.ts:interface GeolocationPosition {",
      "src/types/alarm.d.ts:export interface LocationActionParameters {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/alarm.d.ts:// Enhanced AlarmService interface with advanced scheduling methods",
      "src/types/alarm.d.ts:  interface GeolocationPosition {",
      "src/types/analytics.d.ts:export interface DailyMetric {",
      "src/types/analytics.d.ts:export interface MonthlySummary {",
      "src/types/analytics.d.ts:export interface FeatureAdoptionMetrics {",
      "src/types/analytics.d.ts:export interface TierCorrelation {",
      "src/types/analytics.d.ts:export interface ChartDataPoint {",
      "src/types/analytics.d.ts:export interface RevenueChartData {",
      "src/types/analytics.d.ts:export interface CohortData {",
      "src/types/analytics.d.ts:export interface CohortAnalysis {",
      "src/types/analytics.d.ts:export interface AnalyticsEventProperties {",
      "src/types/analytics.d.ts:export interface FeatureUsageRecord {",
      "src/types/analytics.d.ts:export interface CacheEntry<T> {",
      "src/types/api-responses.ts: * Comprehensive interfaces for all API responses to replace Promise<any>",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ContactListSubscription {",
      "src/types/api-responses.ts:export interface SubscribeContactResponse {",
      "src/types/api-responses.ts:export interface ContactAutomation {",
      "src/types/api-responses.ts:export interface AddContactToAutomationResponse {",
      "src/types/api-responses.ts:export interface ContactTag {",
      "src/types/api-responses.ts:export interface AddTagToContactResponse {",
      "src/types/api-responses.ts:export interface CampaignStats {",
      "src/types/api-responses.ts:export interface AutomationStats {",
      "src/types/api-responses.ts:export interface BroadcastStats {",
      "src/types/api-responses.ts:export interface GrowthStats {",
      "src/types/api-responses.ts:export interface UserFeatures {",
      "src/types/api-responses.ts:export interface EngagementMetrics {",
      "src/types/api-responses.ts:export interface MailchimpMergeFields {",
      "src/types/api-responses.ts:export interface TestServiceResponse<T = any> {",
      "src/types/api-responses.ts:export interface NotificationExtras {",
      "src/types/api-responses.ts:export interface CacheGetResponse<T = any> {",
      "src/types/api-responses.ts:export interface CacheSetResponse {",
      "src/types/api-responses.ts:export interface PerformanceMetadata {",
      "src/types/api-responses.ts:export interface AnalyticsMetadata {",
      "src/types/api-responses.ts:export interface FeatureContext {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api.ts:export interface PaginationParams {",
      "src/types/api.ts:export interface PaginationMeta {",
      "src/types/api.ts:export interface PaginatedResponse<T> {",
      "src/types/api.ts:export interface HealthCheckResponse {",
      "src/types/api.ts:export interface CreateUserRequest {",
      "src/types/api.ts:export interface UpdateUserRequest {",
      "src/types/api.ts:export interface UserStatsResponse {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/api.ts:export interface PerformanceMetric {",
      "src/types/api.ts:export interface WebVitalsData {",
      "src/types/api.ts:export interface ErrorReportData {",
      "src/types/api.ts:export interface PerformanceDashboardResponse {",
      "src/types/api.ts:export interface SupabaseAuthResponse {",
      "src/types/api.ts:export interface StripePaymentIntentResponse {",
      "src/types/api.ts:export interface SocialMediaPostResponse {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface ApiConfiguration {",
      "src/types/app-state.ts: * Central state management interfaces for the Relife alarm application",
      "src/types/app-state.ts: * Comprehensive state interface for alarm management in the Relife application.",
      "src/types/app-state.ts: * This interface manages all aspects of alarm functionality including:",
      "src/types/app-state.ts: * @interface AlarmState",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:// Helper interfaces for AlarmState",
      "src/types/app-state.ts:interface BattleResult {",
      "src/types/app-state.ts:interface BattleStats {",
      "src/types/app-state.ts:interface WeeklyAlarmPattern {",
      "src/types/app-state.ts:export interface UserState {",
      "src/types/app-state.ts:// Helper interfaces for UserState",
      "src/types/app-state.ts:interface Badge {",
      "src/types/app-state.ts:interface SocialChallenge {",
      "src/types/app-state.ts:interface SharePermissions {",
      "src/types/app-state.ts:export interface SubscriptionState {",
      "src/types/app-state.ts:// Helper interfaces for SubscriptionState",
      "src/types/app-state.ts:interface SubscriptionChange {",
      "src/types/app-state.ts:interface UpgradePrompt {",
      "src/types/app-state.ts:interface OverageFee {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/browser-apis.d.ts:interface ServiceWorkerEventMap {",
      "src/types/browser-apis.d.ts:interface EnhancedServiceWorkerRegistration extends ServiceWorkerRegistration {",
      "src/types/browser-apis.d.ts:interface NotificationOptions {",
      "src/types/browser-apis.d.ts:interface NotificationAction {",
      "src/types/browser-apis.d.ts:interface StorageEstimate {",
      "src/types/browser-apis.d.ts:interface StorageManager {",
      "src/types/browser-apis.d.ts:interface SyncManager {",
      "src/types/browser-apis.d.ts:interface SyncEvent extends ExtendableEvent {",
      "src/types/browser-apis.d.ts:interface PeriodicSyncManager {",
      "src/types/browser-apis.d.ts:interface ShareData {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface WakeLockSentinel {",
      "src/types/browser-apis.d.ts:interface WakeLock {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface PermissionStatus extends EventTarget {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface IDBDatabase {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:interface ScreenWakeLock {",
      "src/types/browser-apis.d.ts:interface Navigator {",
      "src/types/browser-apis.d.ts:  interface Navigator {",
      "src/types/browser-apis.d.ts:  interface ServiceWorkerContainer {",
      "src/types/cloudflare-runtime.d.ts:  interface D1Database {",
      "src/types/cloudflare-runtime.d.ts:  interface KVNamespace {",
      "src/types/cloudflare-runtime.d.ts:  interface DurableObjectNamespace {",
      "src/types/configuration-interfaces.ts: * Specific interfaces to replace Record<string, any> objects",
      "src/types/configuration-interfaces.ts:export interface ConvertKitAutomationParameters {",
      "src/types/configuration-interfaces.ts:export interface EmotionalMessageVariables {",
      "src/types/configuration-interfaces.ts:export interface PerformanceEventMetadata {",
      "src/types/configuration-interfaces.ts:export interface AnalyticsEventProperties {",
      "src/types/configuration-interfaces.ts:export interface FormFieldData {",
      "src/types/configuration-interfaces.ts:export interface FeatureTrackingContext {",
      "src/types/configuration-interfaces.ts:export interface NotificationExtrasData {",
      "src/types/configuration-interfaces.ts:export interface CacheConfiguration {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface AudioAnalysis {",
      "src/types/custom-sound-themes.ts:export interface AudioCharacteristics {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundConfig {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundParameters {",
      "src/types/custom-sound-themes.ts:export interface ModulationConfig {",
      "src/types/custom-sound-themes.ts:export interface HarmonicConfig {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface AudioQualityInfo {",
      "src/types/custom-sound-themes.ts:export interface CompatibilityInfo {",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/custom-sound-themes.ts:export interface OptionalField {",
      "src/types/custom-sound-themes.ts:export interface UploadedFile {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSound {",
      "src/types/custom-sound-themes.ts:export interface SoundCustomization {",
      "src/types/custom-sound-themes.ts:export interface ValidationResult {",
      "src/types/custom-sound-themes.ts:export interface ValidationIssue {",
      "src/types/custom-sound-themes.ts:export interface ValidationSuggestion {",
      "src/types/custom-sound-themes.ts:export interface CreationError {",
      "src/types/custom-sound-themes.ts:export interface CreationWarning {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export interface LibrarySettings {",
      "src/types/custom-sound-themes.ts:export interface ExportMetadata {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface UsageContext {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface SoundPopularity {",
      "src/types/custom-sound-themes.ts:export interface UsagePattern {",
      "src/types/custom-sound-themes.ts:export interface TimePattern {",
      "src/types/custom-sound-themes.ts:export interface ContextPattern {",
      "src/types/custom-sound-themes.ts:export interface PerformanceMetrics {",
      "src/types/custom-sound-themes.ts:export interface LatencyMetrics {",
      "src/types/custom-sound-themes.ts:export interface FeedbackSummary {",
      "src/types/custom-sound-themes.ts:export interface TagFrequency {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface Alarm {",
      "src/types/domain.ts:export interface UserStats {",
      "src/types/domain.ts:export interface SubscriptionPlan {",
      "src/types/domain.ts:export interface PlanLimits {",
      "src/types/domain.ts:export interface PlanPricing {",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface FeatureUsageInfo {",
      "src/types/domain.ts:export interface FeatureUsage {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export interface PaymentMethod {",
      "src/types/domain.ts:export interface Payment {",
      "src/types/domain.ts:export interface Trial {",
      "src/types/domain.ts:export interface PersonalizationSettings {",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/email-campaigns.ts:export interface PersonaProfile {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionResult {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionFactor {",
      "src/types/email-campaigns.ts:export interface EmailCampaign {",
      "src/types/email-campaigns.ts:export interface CampaignTrigger {",
      "src/types/email-campaigns.ts:export interface EmailSequence {",
      "src/types/email-campaigns.ts:export interface EmailTemplate {",
      "src/types/email-campaigns.ts:export interface TemplateVariable {",
      "src/types/email-campaigns.ts:export interface PersonalizationRule {",
      "src/types/email-campaigns.ts:export interface PersonalizedContent {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface VariantResults {",
      "src/types/email-campaigns.ts:export interface CampaignSettings {",
      "src/types/email-campaigns.ts:export interface FrequencyCapping {",
      "src/types/email-campaigns.ts:export interface ComplianceSettings {",
      "src/types/email-campaigns.ts:export interface TrackingSettings {",
      "src/types/email-campaigns.ts:export interface CampaignMetrics {",
      "src/types/email-campaigns.ts:export interface EmailEvent {",
      "src/types/email-campaigns.ts:export interface CampaignPerformanceReport {",
      "src/types/email-campaigns.ts:export interface SequencePerformance {",
      "src/types/email-campaigns.ts:export interface CohortData {",
      "src/types/email-campaigns.ts:export interface PerformanceRecommendation {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/email-campaigns.ts:export interface EmailPreferences {",
      "src/types/email-campaigns.ts:export interface EmailSubscription {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface EmailCampaignStats {",
      "src/types/email-campaigns.ts:export interface UserWithEmailData",
      "src/types/email-campaigns.ts:export interface UserCampaignHistory {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionConfig {",
      "src/types/email-campaigns.ts:export interface PersonaFactor {",
      "src/types/email-campaigns.ts:export interface PersonaCondition {",
      "src/types/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/types/email-campaigns.ts:export interface PlatformCapabilities {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {",
      "src/types/email-campaigns.ts:export interface EmailDeliverabilitySettings {",
      "src/types/email-campaigns.ts:export interface CampaignAutomationRule {",
      "src/types/email-campaigns.ts:export interface AutomationTrigger {",
      "src/types/email-campaigns.ts:export interface AutomationCondition {",
      "src/types/email-campaigns.ts:export interface AutomationAction {",
      "src/types/email.ts:export interface PersonaProfile {",
      "src/types/email.ts:export interface PersonaDetectionResult {",
      "src/types/email.ts:export interface PersonaDetectionFactor {",
      "src/types/email.ts:export interface EmailCampaign {",
      "src/types/email.ts:export interface EmailSequence {",
      "src/types/email.ts:export interface CampaignMetrics {",
      "src/types/email.ts:export interface EmailPreferences {",
      "src/types/emotional.ts:export interface EmotionalContext {",
      "src/types/emotional.ts:export interface EmotionalState {",
      "src/types/emotional.ts:export interface EmotionalMessage {",
      "src/types/emotional.ts:export interface EmotionalResponse {",
      "src/types/emotional.ts:export interface UserEmotionalProfile {",
      "src/types/emotional.ts:export interface EmotionalNotificationPayload {",
      "src/types/global.d.ts:interface ServiceWorkerMessageData {",
      "src/types/global.d.ts:interface TranslationData {",
      "src/types/global.d.ts:interface ComponentState {",
      "src/types/global.d.ts:interface VoiceCommand {",
      "src/types/global.d.ts:interface AnalysisResult {",
      "src/types/global.d.ts:interface UsageLimitsResult {",
      "src/types/global.d.ts:interface VoiceGenerationResult {",
      "src/types/global.d.ts:interface UpgradeRecommendation {",
      "src/types/http-client.ts: * Standardized interfaces for all HTTP operations",
      "src/types/http-client.ts: * HTTP client interface with standardized methods",
      "src/types/http-client.ts:export interface CacheConfig {",
      "src/types/http-client.ts:export interface AuthenticationConfig {",
      "src/types/http-client.ts:export interface EnhancedRequestConfig extends HttpRequestConfig {",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface RateLimiterConfig {",
      "src/types/http-client.ts:export interface RateLimitStatus {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ErrorHandlerConfig {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface PluginManager {",
      "src/types/index.ts:// Re-export commonly used interfaces with descriptive names",
      "src/types/index.ts:export interface ServiceFactory {",
      "src/types/index.ts:export interface GlobalErrorHandler {",
      "src/types/index.ts:export interface TelemetryData {",
      "src/types/index.ts:export interface ServiceHealthCheck {",
      "src/types/index.ts:export interface HealthCheckResponse {",
      "src/types/manual-fixes.d.ts: * This file re-exports all domain interfaces from the centralized domain.ts file",
      "src/types/premium.ts:export interface SubscriptionPlan {",
      "src/types/premium.ts:export interface PlanPricing {",
      "src/types/premium.ts:export interface PlanLimits {",
      "src/types/premium.ts:export interface PremiumFeature {",
      "src/types/premium.ts:export interface PaymentMethod {",
      "src/types/premium.ts:export interface Payment {",
      "src/types/premium.ts:export interface FeatureUsage {",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/premium.ts:export interface Trial {",
      "src/types/premium.ts:export interface ReferralProgram {",
      "src/types/premium.ts:export interface Referral {",
      "src/types/premium.ts:export interface SubscriptionChange {",
      "src/types/premium.ts:export interface CancellationSurvey {",
      "src/types/premium.ts:export interface FeatureAccess {",
      "src/types/premium.ts:export interface FeatureGate {",
      "src/types/premium.ts:export interface CohortData {",
      "src/types/premium.ts:export interface CreateSubscriptionRequest {",
      "src/types/premium.ts:export interface CreateSubscriptionResponse {",
      "src/types/premium.ts:export interface UpdateSubscriptionRequest {",
      "src/types/premium.ts:export interface UpdateSubscriptionResponse {",
      "src/types/premium.ts:export interface CancelSubscriptionRequest {",
      "src/types/premium.ts:export interface CancelSubscriptionResponse {",
      "src/types/premium.ts:export interface PremiumUIState {",
      "src/types/premium.ts:export interface SubscriptionDashboardData {",
      "src/types/premium.ts:export interface PayPalConfig {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface NotificationAction {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/push-notifications.ts:export interface AlarmNotificationData {",
      "src/types/push-notifications.ts:export interface MotivationNotificationData {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/push-notifications.ts:export interface SystemNotificationData {",
      "src/types/push-notifications.ts:export interface EmergencyNotificationData {",
      "src/types/push-notifications.ts:export interface SocialNotificationData {",
      "src/types/push-notifications.ts:export interface PromotionalNotificationData {",
      "src/types/push-notifications.ts:export interface PushSubscriptionData {",
      "src/types/push-notifications.ts:export interface NotificationPreferences {",
      "src/types/push-notifications.ts:export interface PushDeliveryStatus {",
      "src/types/push-notifications.ts:export interface PushAnalytics {",
      "src/types/push-notifications.ts:export interface ServiceWorkerMessage<T = any> {",
      "src/types/push-notifications.ts:export interface PushReceivedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClickedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClosedPayload {",
      "src/types/push-notifications.ts:export interface PushNotificationManager {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSyncStatusPayload {",
      "src/types/realtime-messages.ts:export interface UserPresenceUpdatePayload {",
      "src/types/realtime-messages.ts:export interface UserActivityPayload {",
      "src/types/realtime-messages.ts:export interface DeviceStatusChangePayload {",
      "src/types/realtime-messages.ts:export interface RecommendationGeneratedPayload {",
      "src/types/realtime-messages.ts:export interface AIAnalysisCompletePayload {",
      "src/types/realtime-messages.ts:export interface VoiceMoodDetectedPayload {",
      "src/types/realtime-messages.ts:export interface SleepPatternUpdatedPayload {",
      "src/types/realtime-messages.ts:export interface SystemNotificationPayload {",
      "src/types/realtime-messages.ts:export interface EmergencyAlertPayload {",
      "src/types/realtime-messages.ts:export interface SyncStatusUpdatePayload {",
      "src/types/realtime-messages.ts:export interface SyncConflictDetectedPayload {",
      "src/types/realtime-service.ts: * Complete interface for real-time functionality combining WebSockets, push notifications, and Supabase real-time",
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {",
      "src/types/realtime-service.ts:export interface RealtimeService {",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface UserRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface AIRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface SystemRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface ConnectionStatus {",
      "src/types/realtime-service.ts:export interface RealtimeServiceMetrics {",
      "src/types/realtime-service.ts:export interface RealtimeDiagnostics {",
      "src/types/realtime-service.ts:export interface RealtimeServiceError {",
      "src/types/realtime-service.ts:export interface RealtimeServiceFactory {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/realtime-service.ts:export interface MockRealtimeService extends RealtimeService {",
      "src/types/realtime-service.ts:export interface RealtimeServiceTestHarness {",
      "src/types/realtime-service.ts:export interface TestScenario {",
      "src/types/realtime-service.ts:export interface PerformanceTest {",
      "src/types/realtime-service.ts:export interface PerformanceResults {",
      "src/types/realtime/index.ts:export interface RealtimeConfigValidation {",
      "src/types/realtime/index.ts:export interface RealtimeFeatureFlags {",
      "src/types/realtime/index.ts:export interface RealtimePerformanceThresholds {",
      "src/types/realtime/index.ts:export interface RealtimeSecurityConfig {",
      "src/types/service-architecture.ts:export interface ServiceHealth {",
      "src/types/service-architecture.ts:export interface ServiceDependencyHealth {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface CacheConfig {",
      "src/types/service-architecture.ts:export interface ErrorHandlingConfig {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export interface ServiceContainer {",
      "src/types/service-architecture.ts:export interface CacheEntry<T = any> {",
      "src/types/service-architecture.ts:export interface CacheProvider {",
      "src/types/service-architecture.ts:export interface CacheStats {",
      "src/types/service-architecture.ts:export interface CacheManager {",
      "src/types/service-architecture.ts:export interface PerformanceTracker {",
      "src/types/service-architecture.ts:export interface PerformanceMetrics {",
      "src/types/service-architecture.ts:export interface OperationMetrics {",
      "src/types/service-architecture.ts:export interface ServiceDiscoveryCriteria {",
      "src/types/service-architecture.ts:export interface ServiceRegistryHealth {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface UserStats {",
      "src/types/services/backend-api.ts:export interface Alarm {",
      "src/types/services/backend-api.ts:export interface AlarmSound {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface Tournament {",
      "src/types/services/backend-api.ts:export interface TournamentSchedule {",
      "src/types/services/backend-api.ts:export interface TournamentParticipant {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface TournamentMatch {",
      "src/types/services/backend-api.ts:export interface TournamentPrizePool {",
      "src/types/services/backend-api.ts:export interface TournamentRules {",
      "src/types/services/backend-api.ts:export interface CreateUserRequest {",
      "src/types/services/backend-api.ts:export interface UpdateUserRequest {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/backend-api.ts:export interface TournamentServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitTag {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface UpdateSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface TagSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateTagRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateFormRequest {",
      "src/types/services/convertkit-api.ts:export interface TagsListResponse {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SubscriberStatsResponse {",
      "src/types/services/convertkit-api.ts:export interface PersonaCampaignConfig {",
      "src/types/services/convertkit-api.ts:export interface PersonaAssignmentRequest {",
      "src/types/services/convertkit-api.ts:export interface EmailCampaignAnalytics {",
      "src/types/services/convertkit-api.ts:export interface SubscriberEngagementMetrics {",
      "src/types/services/convertkit-api.ts:export interface CampaignServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface TagServiceResponse {",
      "src/types/services/stripe-api.ts:export interface StripePaymentMethod {",
      "src/types/services/stripe-api.ts:export interface CreateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface UpdateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface CreatePaymentIntentRequest {",
      "src/types/services/stripe-api.ts:export interface CreateCustomerRequest {",
      "src/types/services/stripe-api.ts:export interface PaymentServiceResponse {",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookVerificationResult {",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookHandlerResult {",
      "src/types/services/webhook-api.ts:export interface WebhookProcessingStatus {",
      "src/types/state-updaters.ts:export interface PerformanceHistoryEntry {",
      "src/types/state-updaters.ts:export interface PreloadingStatus {",
      "src/types/state-updaters.ts:export interface AudioLoadingError {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface WarmingStatus {",
      "src/types/state-updaters.ts:export interface OptimizationStatus {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface CachePerformanceHistoryEntry {",
      "src/types/struggling-sam.ts:export interface UserStreak {",
      "src/types/struggling-sam.ts:export interface StreakMilestone {",
      "src/types/struggling-sam.ts:export interface StreakReward {",
      "src/types/struggling-sam.ts:export interface SamAchievement {",
      "src/types/struggling-sam.ts:export interface SocialProofData {",
      "src/types/struggling-sam.ts:export interface SocialEngagement {",
      "src/types/struggling-sam.ts:export interface SocialChallenge {",
      "src/types/struggling-sam.ts:export interface ChallengeParticipant {",
      "src/types/struggling-sam.ts:export interface SocialChallengeReward {",
      "src/types/struggling-sam.ts:export interface ChallengeLeaderboard {",
      "src/types/struggling-sam.ts:export interface SocialProofMetrics {",
      "src/types/struggling-sam.ts:export interface SmartUpgradePrompt {",
      "src/types/struggling-sam.ts:export interface UpgradeDiscount {",
      "src/types/struggling-sam.ts:export interface UpgradeUrgency {",
      "src/types/struggling-sam.ts:export interface UpgradeContext {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface HabitCelebration {",
      "src/types/struggling-sam.ts:export interface CelebrationTrigger {",
      "src/types/struggling-sam.ts:export interface CelebrationAnimation {",
      "src/types/struggling-sam.ts:export interface CelebrationReward {",
      "src/types/struggling-sam.ts:export interface CelebrationSocialShare {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface CommunityStats {",
      "src/types/struggling-sam.ts:export interface RealtimeActivity {",
      "src/types/subscription.d.ts:export interface SubscriptionPlanDbRow {",
      "src/types/subscription.d.ts:export interface TrialDbRow {",
      "src/types/subscription.d.ts:export interface CreateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface UpdateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface CancelSubscriptionResult {",
      "src/types/subscription.d.ts:export interface DiscountValidationResult {",
      "src/types/subscription.d.ts:export interface TrialStartResult {",
      "src/types/subscription.d.ts:export interface FeatureUsageParams {",
      "src/types/subscription.d.ts:export interface DiscountUsageParams {",
      "src/types/subscription.d.ts:export interface FeatureUsageDbRow {",
      "src/types/subscription.d.ts:export interface ReferralDbRow {",
      "src/types/subscription.d.ts:export interface ReferralStats {",
      "src/types/subscription.d.ts:// Extended interfaces for better type safety",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/supabase-api.ts:export interface DatabaseUser {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface DatabaseSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseSignUpRequest {",
      "src/types/supabase-api.ts:export interface SupabaseSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabaseOAuthSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabasePasswordResetRequest {",
      "src/types/supabase-api.ts:export interface SupabaseUpdateUserRequest {",
      "src/types/supabase-api.ts:export interface SupabaseQueryFilter {",
      "src/types/supabase-api.ts:export interface SupabaseQueryOptions {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface SupabaseSubscriptionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeMessage<T = unknown> {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadRequest {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadResponse {",
      "src/types/supabase-api.ts:export interface SupabaseFileMetadata {",
      "src/types/supabase-api.ts:export interface SupabaseSignedUrlRequest {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionStats {",
      "src/types/supabase-api.ts:export interface SupabasePerformanceMetrics {",
      "src/types/supabase-realtime.ts:export interface DatabaseChangePayload<T = any> {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserSettingsChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserPresenceChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface PushSubscriptionChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface AnalyticsEventChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelConfig {",
      "src/types/supabase-realtime.ts:export interface RealtimeSubscription {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelManager {",
      "src/types/supabase-realtime.ts:export interface PresenceState {",
      "src/types/supabase-realtime.ts:export interface PresenceManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinator {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinationResult {",
      "src/types/supabase-realtime.ts:export interface SyncStatus {",
      "src/types/supabase-realtime.ts:export interface ChannelStatus {",
      "src/types/supabase-realtime.ts:export interface RealtimeConnectionMetrics {",
      "src/types/supabase-realtime.ts:export interface RealtimeError {",
      "src/types/supabase-realtime.ts:export interface RealtimeRecoveryStrategy {",
      "src/types/supabase-realtime.ts:export interface RealtimeHealthCheck {",
      "src/types/supabase-realtime.ts:export interface HealthCheckResult {",
      "src/types/tabProtection.ts:export interface TabProtectionSettings {",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:export interface AlarmHistoryData {",
      "src/types/utility-types.ts:export interface SleepPatternData {",
      "src/types/utility-types.ts:export interface EscalationStrategy {",
      "src/types/utility-types.ts:export interface MotivationalContent {",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/types/utils.ts:export interface SecurityAlertDetail {",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export interface WebSocketEventHandlers {",
      "src/types/websocket.ts:export interface WebSocketManager {",
      "src/types/websocket.ts:export interface WebSocketAuthPayload {",
      "src/types/websocket.ts:export interface WebSocketSubscriptionManager {",
      "src/types/websocket.ts:export interface WebSocketRateLimit {",
      "src/types/websocket.ts:export interface WebSocketRateLimitStatus {",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {",
      "src/types/websocket.ts:export interface QueuedMessage {",
      "src/utils/accessibility.ts:export interface ColorContrastResult {",
      "src/utils/advancedTranslationValidator.ts:export interface QualityScore {",
      "src/utils/advancedTranslationValidator.ts:export interface CulturalIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface AdvancedValidationResult {",
      "src/utils/advancedTranslationValidator.ts:export interface PerformanceMetrics {",
      "src/utils/enhanced-focus.ts:export interface FocusIndicatorOptions {",
      "src/utils/enhanced-focus.ts:export interface FocusState {",
      "src/utils/fallback-strategies.tsx:export interface FallbackState {",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateConfig {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationConfig {",
      "src/utils/frame-rate-manager.tsx:export interface FrameMetrics {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationQuality {",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateMonitorProps {",
      "src/utils/image-optimization.tsx:export interface ImageOptimizationOptions {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageData {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {",
      "src/utils/keyboard-navigation.ts:export interface KeyboardShortcut {",
      "src/utils/keyboard-navigation.ts:export interface NavigationState {",
      "src/utils/mobile-accessibility.ts:export interface MobileAccessibilityState {",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {",
      "src/utils/network-optimization.tsx:export interface CacheEntry<T = any> {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlert {",
      "src/utils/performance-alerts.tsx:export interface PerformanceTrend {",
      "src/utils/performance-alerts.tsx:export interface OptimizationSuggestion {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlertDisplayProps {",
      "src/utils/performance-profiler.ts:interface PerformanceEntry {",
      "src/utils/progressive-loading.tsx:export interface LoadingPriority {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export interface LoadingState {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps",
      "src/utils/pwa.ts:// Extend Navigator interface for additional properties",
      "src/utils/pwa.ts:  interface Navigator {",
      "src/utils/pwa.ts:  interface ServiceWorkerRegistration {",
      "src/utils/pwa.ts:export interface PWAInstallEvent extends Event {",
      "src/utils/pwa.ts:interface WakeLockSentinel {",
      "src/utils/rtl-testing.tsx:interface RTLRenderOptions extends Omit<RenderOptions, 'wrapper'> {",
      "src/utils/screen-reader.ts:export interface ScreenReaderState {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/translationValidation.ts:export interface TranslationStructure {",
      "src/utils/translationValidation.ts:export interface ValidationResult {",
      "src/utils/translationValidation.ts:export interface ValidationIssue {",
      "src/utils/validation.ts:export interface ValidationResult {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {",
      "src/utils/voice-accessibility.ts:export interface VoiceCommand {",
      "src/utils/voice-accessibility.ts:export interface VoiceAccessibilityState {",
      "src/vite-env.d.ts:  interface ServiceWorkerGlobalScope {",
      "src/vite-env.d.ts:  interface ImportMeta {",
      "src/vite-env.d.ts:  interface Component<P = {}, S = {}, SS = any> {"
    ],
    "alarms": [
      "src/components/AdvancedAlarmScheduling.tsx:                Import from other apps or export your alarms for backup",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    it.todo('should export alarms successfully');",
      "src/hooks/useAudioLazyLoading.ts:export function useAlarmSoundPreloading(alarms: any[]) {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalPreloading(alarms: Alarm[]): CriticalPreloadingState {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'viewing_alarms',",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'viewing_alarms',",
      "src/backend/cloudflare-functions.ts:          description: `Your ${asString(bestPerforming.alarm_type)} alarms with ${asString(bestPerforming.voice_mood)} mood are ${Math.round((asNumber(bestPerforming.avg_rating, 0) - asNumber(worstPerforming.avg_rating, 0)) * 20)}% more effective.`,",
      "src/services/smart-alarm-scheduler.ts:        chronotypeAlignment: this.calculateChronotypeAlignment(pattern, alarms),",
      "src/services/smart-alarm-scheduler.ts:    const alignment = this.calculateChronotypeAlignment(pattern, alarms);",
      "src/types/realtime-messages.ts:    type: 'viewing_alarms' | 'setting_alarm' | 'in_meeting' | 'sleeping' | 'commuting';"
    ],
    "analytics": [
      "src/services/enhanced-analytics.ts:export const analyticsService = createAnalyticsService();",
      "src/services/app-analytics.ts:   * Map alarm event types to analytics event names",
      "src/services/enhanced-performance-monitor.ts:  type: 'console' | 'webhook' | 'analytics' | 'notification';",
      "src/services/enhanced-performance-monitor.ts:          type: 'analytics',",
      "src/services/revenue-analytics.ts:} from '../types/analytics';",
      "src/types/analytics.d.ts: * Comprehensive types for revenue analytics, user journey tracking, and feature adoption metrics"
    ],
    "config": [
      "src/config/environment.ts:export const config = createEnvironmentConfig();",
      "src/config/environment.ts:export default config;",
      "src/hooks/useAnimations.ts:export const useHoverAnimation = (_config: {",
      "src/types/alarm-scheduling.ts:export const validateSchedulingConfig = (_config: SchedulingConfig): boolean => {",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/utils/frame-rate-manager.tsx:export function useOptimizedAnimation(animationId: string, _config: AnimationConfig) {",
      "src/utils/http-client.ts:export function createHttpClient(_config?: HttpClientConfig): HttpClient {",
      "src/utils/http-client.ts:export const createSupabaseClient = (_config: { url: string; key: string }) =>",
      "src/utils/http-client.ts:export const createStripeClient = (_config: { secretKey: string }) =>",
      "src/utils/http-client.ts:export const createConvertKitClient = (_config: { apiKey: string }) =>",
      "src/__tests__/mocks/enhanced-service-mocks.ts:      type: config.type || 'weekly_challenge',",
      "src/components/ui/chart.tsx:type ChartContextProps = { _config: ChartConfig };",
      "src/components/ui/chart.tsx:        ? config[label as keyof typeof config]?.label || label",
      "src/components/ui/chart.tsx:    : config[key as keyof typeof config];",
      "src/config/convertkit-config.ts:import { ConvertKitAutomationParameters } from '../types/configuration-interfaces';",
      "src/data/emotional-message-templates.ts:import type { EmotionalMessageVariables } from '../types/configuration-interfaces';",
      "src/hooks/useRTL.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/services/base/BaseService.ts:    if (typeof this._config.enabled !== 'boolean') {",
      "src/services/smart-notification-service.ts:        priority as keyof typeof this._config.vibrationPatterns",
      "src/services/smart-notification-service.ts:      this.config.soundProfiles[timeOfDay as keyof typeof this._config.soundProfiles] ||",
      "src/services/typed-realtime-service.ts:        type: 'configuration',",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'Layout Stability Issue' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'High Memory Usage' } },",
      "src/utils/performance-alerts.tsx:          { type: 'optimization', _config: { type: 'memory_cleanup' } },",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },",
      "src/utils/rtl-testing.tsx:import { type SupportedLanguage } from '../config/i18n';",
      "src/utils/rtl-utilities.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any"
    ],
    "e": [
      "src/App.tsx:export default App;",
      "src/__tests__/api/api-testing-utilities.ts:export const testServer = setupServer(...allHandlers);",
      "src/__tests__/api/api-testing-utilities.ts:export interface ApiTestConfig {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiAssertions {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiTestClient {",
      "src/__tests__/api/api-testing-utilities.ts:export class ApiInterceptors {",
      "src/__tests__/api/api-testing-utilities.ts:export class ScenarioTester {",
      "src/__tests__/api/api-testing-utilities.ts:export class AsyncTestUtils {",
      "src/__tests__/api/api-testing-utilities.ts:export { testServer, MockDataFactory, allHandlers, scenarioHandlers };",
      "src/__tests__/api/api-testing-utilities.ts:export const setupApiTesting = () => {",
      "src/__tests__/api/api-testing-utilities.ts:export default {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export class RequestInterceptor {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const enhancedHandlers = [",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const wsHandlers = [",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const allHandlers = [...enhancedHandlers, ...wsHandlers];",
      "src/__tests__/api/enhanced-msw-handlers.ts:export const scenarioHandlers = {",
      "src/__tests__/api/enhanced-msw-handlers.ts:export default allHandlers;",
      "src/__tests__/config/global-setup.ts:export default async function globalSetup() {",
      "src/__tests__/config/global-teardown.ts:export default async function globalTeardown() {",
      "src/__tests__/factories/core-factories.ts:export interface CreateUserOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestUser = <T extends CreateUserOptions = CreateUserOptions>(",
      "src/__tests__/factories/core-factories.ts:export const _createTestUserStats = (): UserStats => ({",
      "src/__tests__/factories/core-factories.ts:export const _createTestUserPreferences = (",
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarm = <T extends CreateAlarmOptions = CreateAlarmOptions>(",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmInstance = (alarmId: string): AlarmInstance => ({",
      "src/__tests__/factories/core-factories.ts:export const _createTestAlarmEvent = (alarmId: string): AlarmEvent => ({",
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattle = (options: CreateBattleOptions = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export const _createTestBattleParticipant = (userId?: string): BattleParticipant => {",
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/factories/core-factories.ts:export const _createTestTheme = (options: CreateThemeOptions = {}): ThemeConfig => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleUser = (overrides: Partial<User> = {}): User => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleAlarm = (overrides: Partial<Alarm> = {}): Alarm => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleBattle = (overrides: Partial<Battle> = {}): Battle => {",
      "src/__tests__/factories/core-factories.ts:export const _createFlexibleTheme = (",
      "src/__tests__/factories/core-factories.ts:export function _createBatch<T>(",
      "src/__tests__/factories/core-factories.ts:// Convenience exports for common test scenarios",
      "src/__tests__/factories/core-factories.ts:export const _createMinimalUser = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createPremiumUser = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createActiveAlarm = () =>",
      "src/__tests__/factories/core-factories.ts:export const _createCompletedBattle = () =>",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaProfileOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPersonaProfile = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaDetectionResultOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPersonaDetectionResult = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailCampaignOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestEmailCampaign = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailSequenceOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestEmailSequence = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateCampaignMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestCampaignMetrics = (",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePerformanceMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createTestPerformanceMetrics = (",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPersonaProfile = _createTestPersonaProfile;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPersonaDetectionResult = _createTestPersonaDetectionResult;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestEmailCampaign = _createTestEmailCampaign;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestEmailSequence = _createTestEmailSequence;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestCampaignMetrics = _createTestCampaignMetrics;",
      "src/__tests__/factories/enhanced-factories.ts:export const createTestPerformanceMetrics = _createTestPerformanceMetrics;",
      "src/__tests__/factories/enhanced-factories.ts:export const _enhancedFactories = {",
      "src/__tests__/factories/enhanced-factories.ts:export const _createFlexiblePersonaDetectionResult = (",
      "src/__tests__/factories/enhanced-factories.ts:export const _createFlexibleEmailCampaign = (",
      "src/__tests__/factories/factory-utils.ts:export const _seedFaker = (seed?: number) => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateId = (prefix = '') => {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options: {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options?: {",
      "src/__tests__/factories/factory-utils.ts:export function _generateTimestamp(options?: {",
      "src/__tests__/factories/factory-utils.ts:export const _generateTimeString = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _randomSubset = <T>(array: readonly T[], min = 1, max?: number): T[] => {",
      "src/__tests__/factories/factory-utils.ts:export const _weightedRandom = <T>(items: Array<{ item: T; weight: number }>): T => {",
      "src/__tests__/factories/factory-utils.ts:export const _generatePhoneNumber = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateUrl = (domain = 'relife.app') => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateHexColor = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generatePriceCents = (min = 99, max = 9999) => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateUsername = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateExperience = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRating = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmTime = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateRealisticAlarmDays = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _generateBattleDuration = () => {",
      "src/__tests__/factories/factory-utils.ts:export const _resetFaker = () => {",
      "src/__tests__/factories/factory-utils.ts:export function _withDefaults<T>(factory: () => T, overrides: Partial<T>): T {",
      "src/__tests__/factories/factory-utils.ts:export function _createFlexibleFactory<T, O = Record<string, unknown>>(",
      "src/__tests__/factories/factory-utils.ts:export const generateId = _generateId;",
      "src/__tests__/factories/factory-utils.ts:export const generateTimestamp = _generateTimestamp;",
      "src/__tests__/factories/factory-utils.ts:export const generateTimeString = _generateTimeString;",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmTime = _generateRealisticAlarmTime;",
      "src/__tests__/factories/factory-utils.ts:export const generateRealisticAlarmDays = _generateRealisticAlarmDays;",
      "src/__tests__/factories/factory-utils.ts:export const generateUsername = _generateUsername;",
      "src/__tests__/factories/factory-utils.ts:export const generateExperience = _generateExperience;",
      "src/__tests__/factories/factory-utils.ts:export const generateRating = _generateRating;",
      "src/__tests__/factories/factory-utils.ts:export const generateHexColor = _generateHexColor;",
      "src/__tests__/factories/factory-utils.ts:export const weightedRandom = _weightedRandom;",
      "src/__tests__/factories/factory-utils.ts:export const randomSubset = _randomSubset;",
      "src/__tests__/factories/factory-utils.ts:export const withDefaults = _withDefaults;",
      "src/__tests__/factories/factory-utils.ts:export const createFlexibleFactory = _createFlexibleFactory;",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateAchievementOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievement = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementProgress = (): AchievementProgress => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementReward = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestAchievementRequirement = (",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTournamentOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournament = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentParticipant = (): TournamentParticipant => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentRounds = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentMatch = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTournamentPrize = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTeamOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeam = (options: CreateTeamOptions = {}): Team => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeamMember = (userId?: string): TeamMember => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeamStats = () => ({",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateSeasonOptions {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestSeason = (options: CreateSeasonOptions = {}): Season => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestLeaderboard = (entryCount = 100): Leaderboard => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestLeaderboardEntry = (rank: number): LeaderboardEntry =>",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattle = (overrides: Partial<Battle> = {}): Battle => ({",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipant = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleParticipantStats = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattleSettings = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestBattlePrize = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTrashTalkMessage = (",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestRewardSystem = (",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievement = _createTestAchievement;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementProgress = _createTestAchievementProgress;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementReward = _createTestAchievementReward;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestAchievementRequirement = _createTestAchievementRequirement;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournament = _createTestTournament;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentParticipant = _createTestTournamentParticipant;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentRounds = _createTestTournamentRounds;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentMatch = _createTestTournamentMatch;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTournamentPrize = _createTestTournamentPrize;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeam = _createTestTeam;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeamMember = _createTestTeamMember;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTeamStats = _createTestTeamStats;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestSeason = _createTestSeason;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestLeaderboard = _createTestLeaderboard;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestLeaderboardEntry = _createTestLeaderboardEntry;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattle = _createTestBattle;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipant = _createTestBattleParticipant;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleParticipantStats = _createTestBattleParticipantStats;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattleSettings = _createTestBattleSettings;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestBattlePrize = _createTestBattlePrize;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestTrashTalkMessage = _createTestTrashTalkMessage;",
      "src/__tests__/factories/gaming-factories.ts:export const createTestRewardSystem = _createTestRewardSystem;",
      "src/__tests__/factories/index.ts:export * from './core-factories';",
      "src/__tests__/factories/index.ts:export * from './premium-factories';",
      "src/__tests__/factories/index.ts:export * from './gaming-factories';",
      "src/__tests__/factories/index.ts:export * from './support-factories';",
      "src/__tests__/factories/index.ts:// Re-export commonly used factories with convenient names",
      "src/__tests__/factories/premium-factories.ts:export interface CreateSubscriptionOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestSubscription = (",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPremiumFeature = (",
      "src/__tests__/factories/premium-factories.ts:export interface CreateVoiceOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestVoice = (options: CreateVoiceOptions = {}): PremiumVoice => {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateCustomSoundOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestCustomSound = (",
      "src/__tests__/factories/premium-factories.ts:export interface CreateAnalyticsOptions {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestAnalytics = (",
      "src/__tests__/factories/premium-factories.ts:    exportOptions: premium ? createTestAnalyticsExportOptions() : [],",
      "src/__tests__/factories/premium-factories.ts:export const createTestSubscription = _createTestSubscription;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPremiumFeature = _createTestPremiumFeature;",
      "src/__tests__/factories/premium-factories.ts:export const createTestVoice = _createTestVoice;",
      "src/__tests__/factories/premium-factories.ts:export const createTestCustomSound = _createTestCustomSound;",
      "src/__tests__/factories/premium-factories.ts:export const createTestAnalytics = _createTestAnalytics;",
      "src/__tests__/factories/premium-factories.ts:// Placeholder exports to satisfy imports - please refine",
      "src/__tests__/factories/premium-factories.ts:export const _createTestSubscriptionPlan = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPaymentMethod = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const _createTestPricing = (options: any = {}) => {",
      "src/__tests__/factories/premium-factories.ts:export const createTestSubscriptionPlan = _createTestSubscriptionPlan;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPaymentMethod = _createTestPaymentMethod;",
      "src/__tests__/factories/premium-factories.ts:export const createTestPricing = _createTestPricing;",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoicePersonality = Partial<VoicePersonality> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceSample = Partial<VoiceSample> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceFeatures = Partial<VoiceFeatures>;",
      "src/__tests__/factories/premium-factories.ts:export type SafeSleepInsights = Partial<SleepInsights> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeWakeUpPatterns = Partial<WakeUpPatterns> & { averageWakeTime?: string };",
      "src/__tests__/factories/premium-factories.ts:export type SafePerformanceMetrics = Partial<PerformanceMetrics> & {",
      "src/__tests__/factories/support-factories.ts:export interface CreateEmotionalStateOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestEmotionalState = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestUserEmotionalProfile = (",
      "src/__tests__/factories/support-factories.ts:export interface CreateNotificationOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestNotification = (options: CreateNotificationOptions = {}) => {",
      "src/__tests__/factories/support-factories.ts:export const _createTestNotificationSettings = (): NotificationSettings =>",
      "src/__tests__/factories/support-factories.ts:export const _createTestAppSettings = (userId?: string): AppSettings =>",
      "src/__tests__/factories/support-factories.ts:export interface CreateMediaAssetOptions {",
      "src/__tests__/factories/support-factories.ts:export const _createTestMediaAsset = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestExternalIntegration = (",
      "src/__tests__/factories/support-factories.ts:export const _createTestUserActivity = (userId?: string): UserActivity => {",
      "src/__tests__/factories/support-factories.ts:export const _createTestSystemEvent = (): SystemEvent =>",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export interface TestAssertionOptions {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestStateManager {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestHelpers {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export const testHelpers = new TestHelpers();",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class TestAssertions {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export class RelifeTestUtils {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export { TestStateManager, TestHelpers, TestAssertions, RelifeTestUtils };",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export const relifeTestUtils = new RelifeTestUtils();",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export default {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestConfig {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestContext {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2EFlowResult {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export class E2ETestingUtils {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export class E2ETestSuite {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export { E2ETestingUtils, E2ETestSuite };",
      "src/__tests__/integration/e2e-testing-utilities.ts:export const e2eTestSuite = new E2ETestSuite();",
      "src/__tests__/integration/e2e-testing-utilities.ts:export default {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenario {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenarioResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestStepResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestSuite {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestOrchestrationConfig {",
      "src/__tests__/integration/test-orchestration.ts:export class TestOrchestrator {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestReport {",
      "src/__tests__/integration/test-orchestration.ts:export class RelifeIntegrationScenarios {",
      "src/__tests__/integration/test-orchestration.ts:export class RelifeIntegrationTestSuite {",
      "src/__tests__/integration/test-orchestration.ts:export { TestOrchestrator, RelifeIntegrationScenarios, RelifeIntegrationTestSuite };",
      "src/__tests__/integration/test-orchestration.ts:export const relifeIntegrationSuite = new RelifeIntegrationTestSuite();",
      "src/__tests__/integration/test-orchestration.ts:export default {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobilePlatformTester {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobilePerformanceTester {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export class MobileDeviceSimulator {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export const setupMobileTesting = () => {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export { MobilePlatformTester, MobilePerformanceTester, MobileDeviceSimulator };",
      "src/__tests__/mobile/mobile-testing-utilities.ts:export default {",
      "src/__tests__/mocks/audio-mock.ts:export default audioMock;",
      "src/__tests__/mocks/capacitor.mock.ts:export const Device = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Geolocation = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Preferences = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const SplashScreen = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Network = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Badge = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const BackgroundMode = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const KeepAwake = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Camera = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Filesystem = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Keyboard = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const ScreenOrientation = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Browser = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const Share = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _mockCapacitorSetup = {",
      "src/__tests__/mocks/capacitor.mock.ts:// Default export for jest.mock() usage",
      "src/__tests__/mocks/capacitor.mock.ts:export default CapacitorMock;",
      "src/__tests__/mocks/capacitor.mock.ts:// Legacy exports for existing tests",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Device = Device;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Geolocation = Geolocation;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Preferences = Preferences;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _SplashScreen = SplashScreen;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Network = Network;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Badge = Badge;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _BackgroundMode = BackgroundMode;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _KeepAwake = KeepAwake;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Camera = Camera;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Filesystem = Filesystem;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Keyboard = Keyboard;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _ScreenOrientation = ScreenOrientation;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Browser = Browser;",
      "src/__tests__/mocks/capacitor.mock.ts:export const _Share = Share;",
      "src/__tests__/mocks/capacitor.mock.ts:export const AudioManager = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _AudioManager = AudioManager;",
      "src/__tests__/mocks/capacitor.mock.ts:export const WebAudioAPI = {",
      "src/__tests__/mocks/capacitor.mock.ts:export const _WebAudioAPI = WebAudioAPI;",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export abstract class MockBaseService implements BaseService {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockCacheProvider implements CacheProvider {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAlarmService extends MockBaseService implements AlarmServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockAnalyticsService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockSubscriptionService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockBattleService",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export class MockVoiceService extends MockBaseService implements VoiceServiceInterface {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const createMockServiceContainer = (): Map<string, BaseService> => {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const resetAllMockServices = async (",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const initializeAllMockServices = async (",
      "src/__tests__/mocks/enhanced-service-mocks.ts:// Default export for easy usage",
      "src/__tests__/mocks/enhanced-service-mocks.ts:export default {",
      "src/__tests__/mocks/file-mock.ts:export default fileMock;",
      "src/__tests__/mocks/msw-handlers.ts:export const handlers = [",
      "src/__tests__/mocks/msw-handlers.ts:export const errorHandlers = [",
      "src/__tests__/mocks/msw-handlers.ts:export const slowHandlers = [",
      "src/__tests__/mocks/msw-setup.ts:export const server = setupServer(...handlers);",
      "src/__tests__/mocks/msw-setup.ts:export const mockApiDelay = (endpoint: string, delay: number = 1000) => {",
      "src/__tests__/mocks/msw-setup.ts:export const mockApiSuccess = (endpoint: string, data: any) => {",
      "src/__tests__/mocks/msw-setup.ts:export { server as mswServer };",
      "src/__tests__/mocks/platform-service-mocks.ts:export class MockSupabaseClient {",
      "src/__tests__/mocks/platform-service-mocks.ts:export const createMockSupabaseClient = () => MockSupabaseClient.getInstance();",
      "src/__tests__/mocks/platform-service-mocks.ts:export { MockSupabaseClient, MockSupabaseQueryBuilder, MockSupabaseRealtimeChannel };",
      "src/__tests__/mocks/platform-service-mocks.ts:export default {",
      "src/__tests__/mocks/posthog.mock.ts:export const _createMockPostHog = () => ({",
      "src/__tests__/mocks/posthog.mock.ts:export default mockPostHog;",
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigate = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useLocation = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useSearchParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useRoutes = vi.fn((routes: any[], locationArg?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _BrowserRouter = vi.fn(({ children, basename }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Router = vi.fn(({ children, location, navigator }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Routes = vi.fn(({ children, location }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Route = vi.fn(({ path, element, _index, children }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _NavLink = vi.fn(({ to, children, className, style, ...props }) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const NavLink = jest.fn(",
      "src/__tests__/mocks/react-router.mock.ts:export const _Navigate = vi.fn(({ to, replace, state }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Outlet = vi.fn(({ context }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useOutletContext = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigationType = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useResolvedPath = vi.fn((to: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _matchPath = vi.fn((pattern: any, pathname: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _generatePath = vi.fn((path: string, params?: Record<string, string>) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _createBrowserRouter = vi.fn((routes: any[], options?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _RouterProvider = vi.fn(({ router, fallbackElement }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _mockRouterSetup = {",
      "src/__tests__/mocks/react-router.mock.ts:// Default export for jest.mock",
      "src/__tests__/mocks/react-router.mock.ts:export default {",
      "src/__tests__/mocks/sentry.mock.ts:export const _createMockSentry = () => ({",
      "src/__tests__/mocks/sentry.mock.ts:export default mockSentry;",
      "src/__tests__/mocks/service-mocks.ts:export class MockServiceUtils {",
      "src/__tests__/mocks/service-mocks.ts:export class MockAlarmService {",
      "src/__tests__/mocks/service-mocks.ts:export class MockSubscriptionService {",
      "src/__tests__/mocks/service-mocks.ts:        exportData: true,",
      "src/__tests__/mocks/service-mocks.ts:      exportData: false,",
      "src/__tests__/mocks/service-mocks.ts:export class MockAnalyticsService {",
      "src/__tests__/mocks/service-mocks.ts:export class MockBattleService {",
      "src/__tests__/mocks/service-mocks.ts:export const MockServices = {",
      "src/__tests__/mocks/service-mocks.ts:export const resetAllMockServices = (): void => {",
      "src/__tests__/mocks/service-mocks.ts:export default MockServices;",
      "src/__tests__/mocks/stripe.mock.ts:export const _loadStripe = vi.fn((publishableKey: string, options?: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:export const _Stripe = mockStripe;",
      "src/__tests__/mocks/stripe.mock.ts:export default mockStripe;",
      "src/__tests__/mocks/supabase.mock.ts:export const _createMockSupabase = (url: string, anonKey: string) => {",
      "src/__tests__/mocks/supabase.mock.ts:export default createMockSupabase;",
      "src/__tests__/mocks/websocket-type-mocks.ts:export class WebSocketTypeMocks {",
      "src/__tests__/mocks/websocket-type-mocks.ts:export default WebSocketTypeMocks;",
      "src/__tests__/payments/payment-testing-utilities.ts:export class MockStripeObjects {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class PaymentFlowTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class WebhookTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export class SubscriptionTester {",
      "src/__tests__/payments/payment-testing-utilities.ts:export const setupPaymentTesting = () => {",
      "src/__tests__/payments/payment-testing-utilities.ts:export { MockStripeObjects, PaymentFlowTester, WebhookTester, SubscriptionTester };",
      "src/__tests__/payments/payment-testing-utilities.ts:export default {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface ApiPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface RealTimePerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface MobilePerformanceProfile {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class MockPerformanceMonitor {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class AlarmPerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class ApiPerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class RealTimePerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class MobilePerformanceTester {",
      "src/__tests__/performance/performance-testing-utilities.ts:export class PerformanceTestSuite {",
      "src/__tests__/performance/performance-testing-utilities.ts:export const performanceMonitor = MockPerformanceMonitor.getInstance();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const alarmPerformanceTester = new AlarmPerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const apiPerformanceTester = new ApiPerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const realTimePerformanceTester = new RealTimePerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const mobilePerformanceTester = new MobilePerformanceTester();",
      "src/__tests__/performance/performance-testing-utilities.ts:export const performanceTestSuite = new PerformanceTestSuite();",
      "src/__tests__/performance/performance-testing-utilities.ts:export default {",
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const FeatureAccessTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _featureAccessScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockLanguageContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const LanguageTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useLanguageTest = () => useContext(LanguageTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _languageScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/context-providers.tsx:export const AlarmTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useAlarmTest = () => useContext(AlarmTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _alarmScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/context-providers.tsx:  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;",
      "src/__tests__/providers/context-providers.tsx:  exportTheme: jest.fn(),",
      "src/__tests__/providers/context-providers.tsx:export const ThemeTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _useThemeTest = () => useContext(ThemeTestContext);",
      "src/__tests__/providers/context-providers.tsx:export const _themeScenarios = {",
      "src/__tests__/providers/context-providers.tsx:export interface ContextTestOptions {",
      "src/__tests__/providers/context-providers.tsx:export const ContextTestProvider: React.FC<{",
      "src/__tests__/providers/context-providers.tsx:export const _renderWithContexts = (",
      "src/__tests__/providers/context-providers.tsx:export const _renderWithScenario = (",
      "src/__tests__/providers/context-providers.tsx:// Alias exports without underscores",
      "src/__tests__/providers/context-providers.tsx:export const featureAccessScenarios = _featureAccessScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const languageScenarios = _languageScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const alarmScenarios = _alarmScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const themeScenarios = _themeScenarios;",
      "src/__tests__/providers/context-providers.tsx:export const renderWithContexts = _renderWithContexts;",
      "src/__tests__/providers/context-providers.tsx:export const renderWithScenario = _renderWithScenario;",
      "src/__tests__/providers/context-providers.tsx:export default {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface EnhancedServiceContainer {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface ServiceProviderProps {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const EnhancedServiceProvider: React.FC<ServiceProviderProps> = ({",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useServiceContainer = () => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedAlarmService = (): MockAlarmService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedAnalyticsService = (): MockAnalyticsService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedSubscriptionService = (): MockSubscriptionService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedBattleService = (): MockBattleService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const useEnhancedVoiceService = (): MockVoiceService => {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const createTestServiceContainer = (",
      "src/__tests__/providers/enhanced-service-providers.tsx:export const withEnhancedServices = <P extends object>(",
      "src/__tests__/providers/enhanced-service-providers.tsx:export default {",
      "src/__tests__/providers/index.ts: * Central export point for all test providers, utilities, and scenarios.",
      "src/__tests__/providers/index.ts:export const _createTestSuite = (name: string, tests: () => void) => {",
      "src/__tests__/providers/index.ts:export const _createAsyncTestSuite = (name: string, tests: () => void) => {",
      "src/__tests__/providers/index.ts:export const _testUtils = {",
      "src/__tests__/providers/index.ts:export const _performanceUtils = {",
      "src/__tests__/providers/index.ts:export const _mobileUtils = {",
      "src/__tests__/providers/index.ts:export default {",
      "src/__tests__/providers/integration-provider.tsx:export interface IntegrationTestOptions {",
      "src/__tests__/providers/integration-provider.tsx:export const IntegrationTestProvider: React.FC<{",
      "src/__tests__/providers/integration-provider.tsx:export const _integrationScenarios = {",
      "src/__tests__/providers/integration-provider.tsx:export const _renderWithIntegration = (",
      "src/__tests__/providers/integration-provider.tsx:export const _renderWithIntegrationScenario = (",
      "src/__tests__/providers/integration-provider.tsx:export default {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.MockedFunction<() => Promise<string>>;",
      "src/__tests__/providers/service-providers.tsx:export interface MockAnalyticsService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSubscriptionService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockVoiceService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockNotificationService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAudioService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockStorageService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSecurityService {",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),",
      "src/__tests__/providers/service-providers.tsx:export const ServiceTestProviders: React.FC<{",
      "src/__tests__/providers/service-providers.tsx:export const _useAlarmServiceTest = () => useContext(AlarmServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useBattleServiceTest = () => useContext(BattleServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useVoiceServiceTest = () => useContext(VoiceServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useNotificationServiceTest = () => useContext(NotificationServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useAudioServiceTest = () => useContext(AudioServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useStorageServiceTest = () => useContext(StorageServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _useSecurityServiceTest = () => useContext(SecurityServiceContext);",
      "src/__tests__/providers/service-providers.tsx:export const _serviceScenarios = {",
      "src/__tests__/providers/service-providers.tsx:export default {",
      "src/__tests__/providers/test-providers.tsx:export const _createMockFeatureAccessContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockLanguageContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockAuthContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockThemeContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockAlarmContext = (",
      "src/__tests__/providers/test-providers.tsx:export const _createMockSubscriptionContext = (",
      "src/__tests__/providers/test-providers.tsx:export const MockFeatureAccessProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockLanguageProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAuthProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockThemeProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockAlarmProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const MockSubscriptionProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export const _createMockServices = () => ({",
      "src/__tests__/providers/test-providers.tsx:    exportTheme: jest.fn(),",
      "src/__tests__/providers/test-providers.tsx:export const MockServiceProvider: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export interface TestProvidersOptions {",
      "src/__tests__/providers/test-providers.tsx:export const TestProviders: React.FC<{",
      "src/__tests__/providers/test-providers.tsx:export interface TestRenderOptions extends RenderOptions {",
      "src/__tests__/providers/test-providers.tsx:export const _renderWithProviders = (",
      "src/__tests__/providers/test-providers.tsx:export const _useTestContext = () => {",
      "src/__tests__/providers/test-providers.tsx:export const _testScenarios = {",
      "src/__tests__/providers/test-providers.tsx:export const _renderWithScenario = (",
      "src/__tests__/providers/test-providers.tsx:// Alias exports without underscores",
      "src/__tests__/providers/test-providers.tsx:export const renderWithProviders = _renderWithProviders;",
      "src/__tests__/providers/test-providers.tsx:export const renderWithScenario = _renderWithScenario;",
      "src/__tests__/providers/test-providers.tsx:export const testScenarios = _testScenarios;",
      "src/__tests__/providers/test-providers.tsx:export const useTestContext = _useTestContext;",
      "src/__tests__/providers/test-providers.tsx:export const createMockServices = _createMockServices;",
      "src/__tests__/providers/test-providers.tsx:export default {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export class MockWebSocket {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export class RealTimeTestUtils {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export const webSocketMatchers = {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export const setupRealTimeTesting = () => {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export { MockWebSocket, MockSupabaseRealtimeChannel };",
      "src/__tests__/realtime/realtime-testing-utilities.ts:export default {",
      "src/__tests__/realtime/websocket-testing.ts:export class MockWebSocket {",
      "src/__tests__/realtime/websocket-testing.ts:export class BattleRealTimeTester {",
      "src/__tests__/realtime/websocket-testing.ts:export const setupWebSocketTesting = () => {",
      "src/__tests__/realtime/websocket-testing.ts:export default { MockWebSocket, BattleRealTimeTester, setupWebSocketTesting };",
      "src/__tests__/setup/after-env-setup.ts:        exportKey: jest.fn(() => Promise.resolve(new ArrayBuffer(32))),",
      "src/__tests__/setup/global-setup.ts:export default function globalSetup() {",
      "src/__tests__/theme-integration.test.tsx:        <button data-testid=\"export-btn\">Export Themes</button>",
      "src/__tests__/theme-integration.test.tsx:      expect(screen.getByTestId('export-btn')).toBeInTheDocument();",
      "src/__tests__/utils/accessibility-helpers.ts:export interface AccessibilityViolation {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface ColorContrastResult {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityCore = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _keyboardNavigation = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _screenReader = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityTestSuite = {",
      "src/__tests__/utils/accessibility-helpers.ts:export const _accessibilityHelpers = {",
      "src/__tests__/utils/accessibility-helpers.ts:export default accessibilityHelpers;",
      "src/__tests__/utils/animation-helpers.tsx:export const _reactAnimationHelpers = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationPerformanceUtils = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _animationCleanup = {",
      "src/__tests__/utils/animation-helpers.tsx:export const _createAnimationTestSuite = () => ({",
      "src/__tests__/utils/animation-helpers.tsx:// Alias exports without underscores",
      "src/__tests__/utils/animation-helpers.tsx:export default {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidAlarm = (alarm: any): alarm is TestAlarm => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidUser = (_user: any): user is TestUser => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidTheme = (theme: any): theme is TestTheme => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertAccessible = (element: HTMLElement) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertResponsive = (element: HTMLElement) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertNoErrors = async (fn: () => Promise<any> | any) => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertFastLoad = async (",
      "src/__tests__/utils/async-helpers.ts:export const _loadingStates = {",
      "src/__tests__/utils/async-helpers.ts:export const _promiseUtils = {",
      "src/__tests__/utils/async-helpers.ts:export const _timerUtils = {",
      "src/__tests__/utils/async-helpers.ts:export const _reactAsync = {",
      "src/__tests__/utils/async-helpers.ts:export const _asyncHelpers = {",
      "src/__tests__/utils/async-helpers.ts:// Alias exports without underscores",
      "src/__tests__/utils/async-helpers.ts:export const loadingStates = _loadingStates;",
      "src/__tests__/utils/async-helpers.ts:export const promiseUtils = _promiseUtils;",
      "src/__tests__/utils/async-helpers.ts:export const timerUtils = _timerUtils;",
      "src/__tests__/utils/async-helpers.ts:export const reactAsync = _reactAsync;",
      "src/__tests__/utils/async-helpers.ts:export default asyncHelpers;",
      "src/__tests__/utils/audio-helpers.ts:export const _webAudioMocks = {",
      "src/__tests__/utils/audio-helpers.ts:export const _volumeUtils = {",
      "src/__tests__/utils/audio-helpers.ts:export const _codecUtils = {",
      "src/__tests__/utils/audio-helpers.ts:export const _audioHelpers = {",
      "src/__tests__/utils/audio-helpers.ts:// Alias exports without underscores",
      "src/__tests__/utils/audio-helpers.ts:export const webAudioMocks = _webAudioMocks;",
      "src/__tests__/utils/audio-helpers.ts:export const volumeUtils = _volumeUtils;",
      "src/__tests__/utils/audio-helpers.ts:export const codecUtils = _codecUtils;",
      "src/__tests__/utils/audio-helpers.ts:export const audioHelpers = _audioHelpers;",
      "src/__tests__/utils/audio-helpers.ts:export default {",
      "src/__tests__/utils/data-builders.ts:export class TestUserBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestAlarmBuilder {",
      "src/__tests__/utils/data-builders.ts:export class TestBattleBuilder {",
      "src/__tests__/utils/data-builders.ts:export const _generateRealisticTestData = {",
      "src/__tests__/utils/data-builders.ts:export const _generateTestDataSets = {",
      "src/__tests__/utils/data-builders.ts:export const _createUser = (overrides?: Partial<TestUser>) =>",
      "src/__tests__/utils/data-builders.ts:export const _createAlarm = (overrides?: Partial<TestAlarm>) =>",
      "src/__tests__/utils/data-builders.ts:export const _createBattle = (overrides?: Partial<TestBattle>) =>",
      "src/__tests__/utils/data-builders.ts:export { TestUserBuilder, TestAlarmBuilder, TestBattleBuilder };",
      "src/__tests__/utils/data-builders.ts:export const _defaultTestData = {",
      "src/__tests__/utils/data-builders.ts:export const _validateTestData = {",
      "src/__tests__/utils/dom-helpers.ts:export const _domQuery = {",
      "src/__tests__/utils/dom-helpers.ts:export const _viewport = {",
      "src/__tests__/utils/dom-helpers.ts:export const _events = {",
      "src/__tests__/utils/dom-helpers.ts:export const _textContent = {",
      "src/__tests__/utils/dom-helpers.ts:export const _domHelpers = {",
      "src/__tests__/utils/dom-helpers.ts:export default domHelpers;",
      "src/__tests__/utils/hook-testing-utils.tsx:export const AllTheProviders: React.FC<AllTheProvidersProps> = ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export interface CustomRenderHookOptions<TProps>",
      "src/__tests__/utils/hook-testing-utils.tsx:export function renderHookWithProviders<TResult, TProps>(",
      "src/__tests__/utils/hook-testing-utils.tsx:export const waitForHook = async (callback: () => void, _timeout: number = 1000) => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockLocalStorage = (() => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockSessionStorage = (() => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const mockGeolocation = {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const setupGlobalMocks = () => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const clearAllMocks = () => {",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockUser = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockAlarm = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export const createMockSubscription = (overrides: Record<string, any> = {}) => ({",
      "src/__tests__/utils/hook-testing-utils.tsx:export { MockThemeContext, MockLanguageContext, MockAuthContext };",
      "src/__tests__/utils/hook-testing-utils.tsx:export default renderHookWithProviders;",
      "src/__tests__/utils/i18n-helpers.ts:export const _i18nRenderHelpers = {",
      "src/__tests__/utils/i18n-helpers.ts:export const _createI18nTestSuite = () => ({",
      "src/__tests__/utils/i18n-helpers.ts:export const _i18nCleanup = {",
      "src/__tests__/utils/i18n-helpers.ts:// Alias exports without underscores",
      "src/__tests__/utils/i18n-helpers.ts:export const i18nRenderHelpers = _i18nRenderHelpers;",
      "src/__tests__/utils/i18n-helpers.ts:export const createI18nTestSuite = _createI18nTestSuite;",
      "src/__tests__/utils/i18n-helpers.ts:export const i18nCleanup = _i18nCleanup;",
      "src/__tests__/utils/i18n-helpers.ts:export const localeConfigs = _localeConfigs;",
      "src/__tests__/utils/i18n-helpers.ts:export default {",
      "src/__tests__/utils/index.ts:export * from './render-helpers';",
      "src/__tests__/utils/index.ts:export * from './assertion-helpers';",
      "src/__tests__/utils/index.ts:export * from './mock-helpers';",
      "src/__tests__/utils/index.ts:export * from './data-builders';",
      "src/__tests__/utils/index.ts:export * from './dom-helpers';",
      "src/__tests__/utils/index.ts:export * from './async-helpers';",
      "src/__tests__/utils/index.ts:export * from './performance-helpers';",
      "src/__tests__/utils/index.ts:export * from './accessibility-helpers';",
      "src/__tests__/utils/index.ts:export * from './mobile-helpers';",
      "src/__tests__/utils/index.ts:export * from './audio-helpers';",
      "src/__tests__/utils/index.ts:export * from './storage-helpers';",
      "src/__tests__/utils/index.ts:export * from './animation-helpers';",
      "src/__tests__/utils/index.ts:export * from './i18n-helpers';",
      "src/__tests__/utils/index.ts:// Re-export commonly used testing library functions for convenience",
      "src/__tests__/utils/index.ts:export { default as userEvent } from '@testing-library/user-event';",
      "src/__tests__/utils/index.ts:export interface TestUser {",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/__tests__/utils/index.ts:export interface TestTheme {",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/index.ts:export interface TestVoiceClip {",
      "src/__tests__/utils/index.ts:export const _testEnv = {",
      "src/__tests__/utils/index.ts:export const _testConsole = {",
      "src/__tests__/utils/index.ts:export const _testLifecycle = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _orientation = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _gestures = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _deviceAPIs = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _network = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _viewport = {",
      "src/__tests__/utils/mobile-helpers.ts:export const _mobileHelpers = {",
      "src/__tests__/utils/mobile-helpers.ts:export default {",
      "src/__tests__/utils/mock-helpers.ts:export const _resetAllMocks = () => {",
      "src/__tests__/utils/mock-helpers.ts:export const _mockLocalStorage = (data: Record<string, string> = {}) => {",
      "src/__tests__/utils/mock-helpers.ts:export const _mockTimers = () => {",
      "src/__tests__/utils/mock-helpers.ts:export const _mockFetch = (",
      "src/__tests__/utils/mock-helpers.ts:export const _mockConsole = () => {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceMark {",
      "src/__tests__/utils/performance-helpers.ts:export interface RenderPerformanceResult {",
      "src/__tests__/utils/performance-helpers.ts:export interface MemorySnapshot {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceCore = {",
      "src/__tests__/utils/performance-helpers.ts:export const _reactPerformance = {",
      "src/__tests__/utils/performance-helpers.ts:export const _memoryTesting = {",
      "src/__tests__/utils/performance-helpers.ts:export const _bundlePerformance = {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceAssertions = {",
      "src/__tests__/utils/performance-helpers.ts:export const _performanceHelpers = {",
      "src/__tests__/utils/performance-helpers.ts:// Alias exports without underscores",
      "src/__tests__/utils/performance-helpers.ts:export const performanceCore = _performanceCore;",
      "src/__tests__/utils/performance-helpers.ts:export const reactPerformance = _reactPerformance;",
      "src/__tests__/utils/performance-helpers.ts:export const memoryTesting = _memoryTesting;",
      "src/__tests__/utils/performance-helpers.ts:export const bundlePerformance = _bundlePerformance;",
      "src/__tests__/utils/performance-helpers.ts:export const performanceAssertions = _performanceAssertions;",
      "src/__tests__/utils/performance-helpers.ts:export default performanceHelpers;",
      "src/__tests__/utils/render-helpers.ts:    exportThemes: jest.fn(() => Promise.resolve(JSON.stringify({ themes }))),",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithProviders = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsGuest = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsUser = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsPremiumUser = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderAsUltimateUser = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderMobile = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderTablet = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderDesktop = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderOffline = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderRTL = (ui: ReactElement, options: CustomRenderOptions = {}) => {",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithFeatureAccess = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithScreenReader = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithEnhancedTheme = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithPersonaAnalytics = (",
      "src/__tests__/utils/render-helpers.ts:export const _renderWithAllEnhancements = (",
      "src/__tests__/utils/render-helpers.ts:// Re-export the default render for convenience",
      "src/__tests__/utils/render-helpers.ts:export { render };",
      "src/__tests__/utils/render-helpers.ts:// Alias export without underscore",
      "src/__tests__/utils/render-helpers.ts:export const renderWithProviders = _renderWithProviders;",
      "src/__tests__/utils/render-helpers.ts:export default renderWithProviders;",
      "src/__tests__/utils/storage-helpers.ts:export const _storageMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const _indexedDBMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const _cacheMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageUtils = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageCleanup = {",
      "src/__tests__/utils/storage-helpers.ts:export const _storageDataFactory = {",
      "src/__tests__/utils/storage-helpers.ts:export const _createStorageTestSuite = () => ({",
      "src/__tests__/utils/storage-helpers.ts:// Alias exports without underscores",
      "src/__tests__/utils/storage-helpers.ts:export const storageMocks = _storageMocks;",
      "src/__tests__/utils/storage-helpers.ts:export const indexedDBMocks = _indexedDBMocks;",
      "src/__tests__/utils/storage-helpers.ts:export const cacheMocks = _cacheMocks;",
      "src/__tests__/utils/storage-helpers.ts:export const storageUtils = _storageUtils;",
      "src/__tests__/utils/storage-helpers.ts:export const storageCleanup = _storageCleanup;",
      "src/__tests__/utils/storage-helpers.ts:export const storageDataFactory = _storageDataFactory;",
      "src/__tests__/utils/storage-helpers.ts:export const createStorageTestSuite = _createStorageTestSuite;",
      "src/__tests__/utils/storage-helpers.ts:export default {",
      "src/analytics/PersonaAnalytics.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/analytics/PersonaAnalytics.tsx:export type PersonaAnalyticsEvent =",
      "src/analytics/PersonaAnalytics.tsx:export interface PersonaAnalyticsData {",
      "src/analytics/PersonaAnalytics.tsx:export interface CampaignPerformanceData {",
      "src/analytics/PersonaAnalytics.tsx:export const usePersonaAnalytics = () => {",
      "src/analytics/PersonaAnalytics.tsx:export const PersonaAnalyticsProvider: React.FC<{",
      "src/analytics/PersonaAnalytics.tsx:export default PersonaAnalyticsTracker;",
      "src/backend/api.ts:export default {",
      "src/backend/cloudflare-functions.ts:export class AlarmTriggerProcessor {",
      "src/backend/cloudflare-functions.ts:export class SmartRecommendationsProcessor {",
      "src/backend/cloudflare-functions.ts:export class AnalyticsAggregator {",
      "src/backend/cloudflare-functions.ts:export default {",
      "src/backend/database-types.ts:export interface DatabaseUser {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export interface DatabaseAnalyticsEvent {",
      "src/backend/database-types.ts:export interface DatabaseUserStats {",
      "src/backend/database-types.ts:export interface DatabaseEmotionalProfile {",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/backend/database-types.ts:export interface DatabasePerformanceMetric {",
      "src/backend/database-types.ts:export interface DatabaseDeploymentData {",
      "src/backend/database-types.ts:export interface DatabaseHealthData {",
      "src/backend/database-types.ts:export interface DatabaseAIResponse {",
      "src/backend/database-types.ts:export interface DatabaseRecommendation {",
      "src/backend/database-types.ts:export interface DatabaseVoiceAnalysis {",
      "src/backend/database-types.ts:export interface DatabaseQueryResult<T = any> {",
      "src/backend/database-types.ts:export function isDatabaseUser(obj: unknown): obj is DatabaseUser {",
      "src/backend/database-types.ts:export function isDatabaseAlarm(obj: unknown): obj is DatabaseAlarm {",
      "src/backend/database-types.ts:export function isDatabaseAlarmEvent(obj: unknown): obj is DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export function isNumeric(value: unknown): value is number {",
      "src/backend/database-types.ts:export function isStringValue(value: unknown): value is string {",
      "src/backend/database-types.ts:export function asNumber(value: unknown, fallback: number = 0): number {",
      "src/backend/database-types.ts:export function asString(value: unknown, fallback: string = ''): string {",
      "src/backend/database-types.ts:export function asObject(value: unknown, fallback: any = {}): any {",
      "src/backend/monitoring-integration.ts:export class MonitoringIntegrationService {",
      "src/backend/monitoring-integration.ts:// Main worker export for monitoring integration",
      "src/backend/monitoring-integration.ts:export default {",
      "src/backend/performance-monitoring.ts:export class PerformanceMonitoringAPI {",
      "src/backend/performance-monitoring.ts:export default {",
      "src/backend/stripe-webhooks.ts:export class StripeWebhookHandler {",
      "src/backend/stripe-webhooks.ts:export default StripeWebhookHandler;",
      "src/backend/subscription-api.ts:export class SubscriptionAPIHandler {",
      "src/backend/subscription-api.ts:export default SubscriptionAPIHandler;",
      "src/backend/webhook-config.ts:export type WebhookEventType = (typeof WEBHOOK_EVENTS)[number];",
      "src/backend/webhook-config.ts:export interface WebhookEnvironmentConfig {",
      "src/backend/webhook-config.ts:export function getWebhookEnvironmentConfig(): WebhookEnvironmentConfig {",
      "src/backend/webhook-config.ts:export function validateWebhookConfig(",
      "src/backend/webhook-config.ts:export default {",
      "src/backend/webhook-endpoint.ts:export interface WebhookRequest {",
      "src/backend/webhook-endpoint.ts:export interface WebhookResponse {",
      "src/backend/webhook-endpoint.ts:export async function handleStripeWebhook(",
      "src/backend/webhook-endpoint.ts:export function createExpressWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export function createServerlessWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export function createNextJSWebhookHandler() {",
      "src/backend/webhook-endpoint.ts:export async function handleHealthCheck(): Promise<WebhookResponse> {",
      "src/backend/webhook-endpoint.ts:export default {",
      "src/components/AIAutomation.tsx:export default AIAutomation;",
      "src/components/AccessibilityDashboard.tsx:export default AccessibilityDashboard;",
      "src/components/AccessibilityTester.tsx:export default AccessibilityTester;",
      "src/components/AchievementBadges.tsx:export const AchievementBadges: React.FC<AchievementBadgesProps> = ({",
      "src/components/AchievementBadges.tsx:export default AchievementBadges;",
      "src/components/ActiveAlarm.tsx:export function ActiveAlarm({",
      "src/components/ActiveAlarm.tsx:export default ActiveAlarm;",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmList: React.FC<AdaptiveAlarmListProps> = ({",
      "src/components/AdaptiveAlarmList.tsx:export const AdaptiveAlarmListWithErrorBoundary: React.FC<",
      "src/components/AdaptiveAlarmList.tsx:export default AdaptiveAlarmList;",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveButton.tsx:export const AdaptiveButton = memo<AdaptiveButtonProps>(",
      "src/components/AdaptiveButton.tsx:export default AdaptiveButton;",
      "src/components/AdaptiveImage.tsx:export const AdaptiveImage = memo<AdaptiveImageProps>(",
      "src/components/AdaptiveImage.tsx:export default AdaptiveImage;",
      "src/components/AdaptiveModal.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/AdaptiveModal.tsx:export interface AdaptiveModalProps {",
      "src/components/AdaptiveModal.tsx:export const AdaptiveModal = memo<AdaptiveModalProps>(",
      "src/components/AdaptiveModal.tsx:export function useAdaptiveModal(initialOpen = false) {",
      "src/components/AdaptiveModal.tsx:export interface ConfirmationModalProps extends Omit<AdaptiveModalProps, 'children'> {",
      "src/components/AdaptiveModal.tsx:export const AdaptiveConfirmationModal = memo<ConfirmationModalProps>(",
      "src/components/AdaptiveModal.tsx:export default AdaptiveModal;",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSpinnerProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveSpinner = memo<AdaptiveSpinnerProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingOverlayProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingOverlay = memo<AdaptiveLoadingOverlayProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSkeletonProps {",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveSkeleton = memo<AdaptiveSkeletonProps>(",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdaptiveSpinner.tsx:export const AdaptiveLoadingButton = memo<AdaptiveLoadingButtonProps>(",
      "src/components/AdaptiveSpinner.tsx:export default AdaptiveSpinner;",
      "src/components/AdvancedAlarmScheduling.tsx:export default AdvancedAlarmScheduling;",
      "src/components/AdvancedAnalytics.tsx:export function AdvancedAnalytics({",
      "src/components/AdvancedAnalytics.tsx:export default AdvancedAnalytics;",
      "src/components/AdvancedSchedulingDashboard.tsx:export default AdvancedSchedulingDashboard;",
      "src/components/AlarmForm.tsx:export default AlarmForm;",
      "src/components/AlarmList.tsx:export default AlarmList;",
      "src/components/AlarmManagement.tsx:export function AlarmManagement({",
      "src/components/AlarmManagement.tsx:export default AlarmManagement;",
      "src/components/AlarmRinging.tsx:export default AlarmRinging;",
      "src/components/AlarmTester.tsx:export function AlarmTester({ onClose, userId = 'demo-_user' }: AlarmTesterProps) {",
      "src/components/AlarmTester.tsx:export default AlarmTester;",
      "src/components/AlarmThemeBrowser.tsx:export const AlarmThemeBrowser: React.FC<AlarmThemeBrowserProps> = ({",
      "src/components/AlarmThemeBrowser.tsx:export default AlarmThemeBrowser;",
      "src/components/AlarmThemeSelector.tsx:export const AlarmThemeSelector: React.FC<AlarmThemeSelectorProps> = ({",
      "src/components/AlarmThemeSelector.tsx:export default AlarmThemeSelector;",
      "src/components/AnalyticsDashboard.tsx:    track('analytics_data_exported', {",
      "src/components/AnalyticsDashboard.tsx:export default AnalyticsDashboard;",
      "src/components/AnalyticsProvider.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/AnalyticsProvider.tsx:export const AnalyticsProvider: React.FC<AnalyticsProviderProps> = ({ children }) => {",
      "src/components/AnalyticsProvider.tsx:export const useAnalyticsContext = (): AnalyticsContextType => {",
      "src/components/AnalyticsProvider.tsx:export const withAnalytics = <P extends object>(",
      "src/components/AnalyticsProvider.tsx:export const useComponentAnalytics = (componentName: string) => {",
      "src/components/AnalyticsProvider.tsx:export default AnalyticsProvider;",
      "src/components/AuthenticationFlow.tsx:export default function AuthenticationFlow({",
      "src/components/BattleSystem.tsx:export function BattleSystem({",
      "src/components/BattleSystem.tsx:export default BattleSystem;",
      "src/components/CSRFProtection.tsx:export const withCSRFProtection = <P extends object>(",
      "src/components/CSRFProtection.tsx:export const useCSRFProtection = () => {",
      "src/components/CSRFProtection.tsx:export default CSRFProtection;",
      "src/components/CloudSyncControls.tsx:export function CloudSyncControls({ className = '' }: CloudSyncControlsProps) {",
      "src/components/CloudSyncControls.tsx:export default CloudSyncControls;",
      "src/components/CommunityChallenge.tsx:export const CommunityChallenge: React.FC<CommunityChallengeProps> = ({",
      "src/components/CommunityChallenge.tsx:export default CommunityChallenge;",
      "src/components/CommunityHub.tsx:export default CommunityHub;",
      "src/components/CompleteThemeSystemDemo.tsx:export const CustomThemeCreator: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const SmartThemesDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const AlarmFormIntegration: React.FC<{",
      "src/components/CompleteThemeSystemDemo.tsx:export const AudioSetupDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export const CompleteThemeSystemDemo: React.FC = () => {",
      "src/components/CompleteThemeSystemDemo.tsx:export default CompleteThemeSystemDemo;",
      "src/components/ComprehensiveSecurityDashboard.tsx:export default ComprehensiveSecurityDashboard;",
      "src/components/ConsentBanner.tsx:export default function ConsentBanner({",
      "src/components/ConsentBanner.tsx:                  the right to export or delete your data.",
      "src/components/CustomSoundThemeCreator.tsx:export const CustomSoundThemeCreator: React.FC<CustomSoundThemeCreatorProps> = ({",
      "src/components/CustomSoundThemeCreator.tsx:export default CustomSoundThemeCreator;",
      "src/components/CustomThemeManager.tsx:export const CustomThemeManager: React.FC<CustomThemeManagerProps> = ({",
      "src/components/CustomThemeManager.tsx:        exportedAt: new Date().toISOString(),",
      "src/components/CustomThemeManager.tsx:      console.log(`Theme \"${theme.name}\" exported successfully`);",
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting theme:', _error);",
      "src/components/CustomThemeManager.tsx:        exportedAt: new Date().toISOString(),",
      "src/components/CustomThemeManager.tsx:      console.log(`${themesToExport.length} themes exported successfully`);",
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting themes:', _error);",
      "src/components/CustomThemeManager.tsx:export default CustomThemeManager;",
      "src/components/Dashboard.tsx:export default Dashboard;",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNudgeModal: React.FC<EmotionalNudgeModalProps> = ({",
      "src/components/EmotionalNudgeModal.tsx:export const EmotionalNotificationSettings: React.FC<{",
      "src/components/EmotionalNudgeModal.tsx:export default EmotionalNudgeModal;",
      "src/components/EnhancedBattles.tsx:export function EnhancedBattles({",
      "src/components/EnhancedBattles.tsx:export default EnhancedBattles;",
      "src/components/EnhancedDashboard.tsx:export default EnhancedDashboard;",
      "src/components/EnhancedMediaContent.tsx:export function EnhancedMediaContent({",
      "src/components/EnhancedMediaContent.tsx:export default EnhancedMediaContent;",
      "src/components/EnhancedSettings.tsx:export default EnhancedSettings;",
      "src/components/EnhancedSmartAlarmSettings.tsx:export default EnhancedSmartAlarmSettings;",
      "src/components/ErrorBoundary.tsx:export default ErrorBoundary;",
      "src/components/ErrorBoundaryTest.tsx:export default ErrorBoundaryTest;",
      "src/components/ExtendedScreenReaderTester.tsx:export default ExtendedScreenReaderTester;",
      "src/components/FeatureLockOverlay.tsx:export default FeatureLockOverlay;",
      "src/components/ForgotPasswordForm.tsx:export default function ForgotPasswordForm({",
      "src/components/FriendsManager.tsx:export function FriendsManager({",
      "src/components/FriendsManager.tsx:export default FriendsManager;",
      "src/components/Gamification.tsx:export default Gamification;",
      "src/components/GamingHub.tsx:export default GamingHub;",
      "src/components/HabitCelebration.tsx:export const HabitCelebration: React.FC<HabitCelebrationProps> = ({",
      "src/components/HabitCelebration.tsx:export default HabitCelebration;",
      "src/components/LanguageSelector.tsx:export default LanguageSelector;",
      "src/components/LoginForm.tsx:export default function LoginForm({",
      "src/components/MediaContent.tsx:export function MediaContent({",
      "src/components/MediaContent.tsx:export default MediaContent;",
      "src/components/MobileAccessibilityProvider.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/MobileAccessibilityProvider.tsx:export const useMobileAccessibilityContext = () => {",
      "src/components/MobileAccessibilityProvider.tsx:export const MobileAccessibilityProvider: React.FC<",
      "src/components/MobileAccessibilityProvider.tsx:export default MobileAccessibilityProvider;",
      "src/components/MobileAlarmCard.tsx:export const MobileAlarmList: React.FC = () => {",
      "src/components/MobileAlarmCard.tsx:export default MobileAlarmCard;",
      "src/components/MobileNavigation.tsx:export const defaultNavigationItems: NavigationItem[] = [",
      "src/components/MobileNavigation.tsx:export default MobileNavigation;",
      "src/components/MobileTester.tsx:// export default MobileTester;",
      "src/components/NuclearModeBattle.tsx:export const NuclearModeBattle: React.FC<NuclearModeBattleProps> = ({",
      "src/components/NuclearModeBattle.tsx:export default NuclearModeBattle;",
      "src/components/NuclearModeChallenge.tsx:export const NuclearModeChallenge: React.FC<NuclearModeChallengeProps> = ({",
      "src/components/NuclearModeChallenge.tsx:export default NuclearModeChallenge;",
      "src/components/NuclearModeResults.tsx:export const NuclearModeResults: React.FC<NuclearModeResultsProps> = ({",
      "src/components/NuclearModeResults.tsx:export default NuclearModeResults;",
      "src/components/NuclearModeSelector.tsx:export const NuclearModeSelector: React.FC<NuclearModeSelectorProps> = ({",
      "src/components/NuclearModeSelector.tsx:export default NuclearModeSelector;",
      "src/components/OfflineDiagnostics.tsx:export default OfflineDiagnostics;",
      "src/components/OfflineIndicator.tsx:export default OfflineIndicator;",
      "src/components/OnboardingFlow.tsx:export default OnboardingFlow;",
      "src/components/PWAInstallPrompt.tsx:export default PWAInstallPrompt;",
      "src/components/PWAStatusDashboard.tsx:export default PWAStatusDashboard;",
      "src/components/PerformanceDashboard.tsx:      exportTime: new Date().toISOString(),",
      "src/components/PerformanceDashboard.tsx:export default PerformanceDashboard;",
      "src/components/PerformanceProfilerWrapper.tsx:export const PerformanceProfilerWrapper: React.FC<PerformanceProfilerWrapperProps> = ({",
      "src/components/PerformanceProfilerWrapper.tsx:export default PerformanceProfilerWrapper;",
      "src/components/PersonaAnalyticsDashboard.tsx:export const PersonaAnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({",
      "src/components/PersonaAnalyticsDashboard.tsx:export default PersonaAnalyticsDashboard;",
      "src/components/PersonaDrivenUI.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/PersonaDrivenUI.tsx:export function usePersonaDetection(userId: string, userBehavior: any) {",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenPricingCard({",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenOnboarding({",
      "src/components/PersonaDrivenUI.tsx:export function PersonaFeatureHighlights({ userPersona }: { userPersona: string }) {",
      "src/components/PersonaDrivenUI.tsx:export function PersonaDrivenUI({",
      "src/components/PersonaDrivenUI.tsx:export default PersonaDrivenUI;",
      "src/components/PersonaFocusDashboard.tsx:export default PersonaFocusDashboard;",
      "src/components/PersonalizationSettings.tsx:export default PersonalizationSettings;",
      "src/components/PremiumDashboard.tsx:export const PremiumDashboard: React.FC<PremiumDashboardProps> = ({",
      "src/components/PremiumDashboard.tsx:export default PremiumDashboard;",
      "src/components/PremiumFeatureCard.tsx:export default PremiumFeatureCard;",
      "src/components/PremiumFeatureTest.tsx:export default PremiumFeatureTest;",
      "src/components/PremiumGate.tsx:export default PremiumGate;",
      "src/components/PremiumThemeSettings.tsx:export const PremiumThemeSettings: React.FC<PremiumThemeSettingsProps> = ({",
      "src/components/PremiumThemeSettings.tsx:export default PremiumThemeSettings;",
      "src/components/PremiumThemeShowcase.tsx:export default PremiumThemeShowcase;",
      "src/components/PremiumUsageTracker.tsx:export const PremiumUsageTracker: React.FC<UsageTrackerProps> = ({",
      "src/components/PremiumUsageTracker.tsx:export default PremiumUsageTracker;",
      "src/components/PricingPage.tsx:export default PricingPage;",
      "src/components/PushNotificationSettings.tsx:export const PushNotificationSettingsComponent: React.FC<",
      "src/components/PushNotificationSettings.tsx:export default PushNotificationSettingsComponent;",
      "src/components/PushNotificationTester.tsx:export const PushNotificationTester: React.FC = () => {",
      "src/components/PushNotificationTester.tsx:export default PushNotificationTester;",
      "src/components/QuickAlarmSetup.tsx:export function QuickAlarmSetup({ onAlarmSet, userId }: QuickAlarmSetupProps) {",
      "src/components/QuickAlarmSetup.tsx:export default QuickAlarmSetup;",
      "src/components/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLForm.tsx:export default RTLForm;",
      "src/components/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/RTLContainer.tsx:export default RTLContainer;",
      "src/components/RTLLayout/RTLFlex.tsx:export default RTLFlex;",
      "src/components/RTLLayout/RTLForm.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLForm: React.FC<RTLFormProps> = ({",
      "src/components/RTLLayout/RTLForm.tsx:export const useRTLFormContext = () => {",
      "src/components/RTLLayout/RTLForm.tsx:export const RTLFormField: React.FC<RTLFormFieldProps> = ({",
      "src/components/RTLLayout/RTLGrid.tsx:export default RTLGrid;",
      "src/components/RTLLayout/RTLText.tsx:export default RTLText;",
      "src/components/RTLLayout/index.ts:export { RTLContainer } from './RTLContainer';",
      "src/components/RTLLayout/index.ts:export { RTLFlex } from './RTLFlex';",
      "src/components/RTLLayout/index.ts:export { RTLText } from './RTLText';",
      "src/components/RTLLayout/index.ts:export { RTLForm, RTLFormField, useRTLFormContext } from './RTLForm';",
      "src/components/RTLLayout/index.ts:// Re-export hooks for convenience",
      "src/components/RTLLayout/index.ts:// Re-export utilities",
      "src/components/RTLText.tsx:export default RTLText;",
      "src/components/RealtimeDemo.tsx:export default RealtimeDemo;",
      "src/components/RewardsDashboard.tsx:export default RewardsDashboard;",
      "src/components/RootErrorBoundary.tsx:export class RootErrorBoundary extends Component<Props, State> {",
      "src/components/RootErrorBoundary.tsx:export default RootErrorBoundary;",
      "src/components/ScreenReaderProvider.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/ScreenReaderProvider.tsx:export function ScreenReaderProvider({",
      "src/components/ScreenReaderProvider.tsx:export function useScreenReaderLifecycle(componentName: string) {",
      "src/components/ScreenReaderProvider.tsx:export function ScreenReaderTester() {",
      "src/components/ScreenReaderProvider.tsx:export default ScreenReaderProvider;",
      "src/components/ServiceWorkerStatus.tsx:export const ServiceWorkerStatus: React.FC = () => {",
      "src/components/ServiceWorkerStatus.tsx:export default ServiceWorkerStatus;",
      "src/components/SettingsPage.tsx:export default SettingsPage;",
      "src/components/SignUpForm.tsx:export default function SignUpForm({",
      "src/components/SleepTracker.tsx:export default SleepTracker;",
      "src/components/SmartAlarmDashboard.tsx:export default SmartAlarmDashboard;",
      "src/components/SmartAlarmSettings.tsx:export default SmartAlarmSettings;",
      "src/components/SmartFeatures.tsx:export function SmartFeatures({",
      "src/components/SmartFeatures.tsx:export default SmartFeatures;",
      "src/components/SmartUpgradePrompt.tsx:export const SmartUpgradePrompt: React.FC<SmartUpgradePromptProps> = ({",
      "src/components/SmartUpgradePrompt.tsx:export default SmartUpgradePrompt;",
      "src/components/SocialProof.tsx:export const SocialProof: React.FC<SocialProofProps> = ({",
      "src/components/SocialProof.tsx:export default SocialProof;",
      "src/components/SoundPicker.tsx:export const SoundPicker: React.FC<SoundPickerProps> = ({",
      "src/components/SoundPicker.tsx:export default SoundPicker;",
      "src/components/SoundPreviewSystem.tsx:export const SoundPreviewSystem: React.FC<SoundPreviewSystemProps> = ({",
      "src/components/SoundPreviewSystem.tsx:export default SoundPreviewSystem;",
      "src/components/SoundSettings.tsx:export default SoundSettings;",
      "src/components/SoundThemeDemo.tsx:export default SoundThemeDemo;",
      "src/components/SoundUploader.tsx:export const SoundUploader: React.FC<SoundUploaderProps> = ({",
      "src/components/SoundUploader.tsx:export default SoundUploader;",
      "src/components/SpecializedErrorBoundaries.tsx:export class AnalyticsErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class MediaErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class AIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class APIErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class DataErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/SpecializedErrorBoundaries.tsx:export class FormErrorBoundary extends BaseSpecializedErrorBoundary {",
      "src/components/Statistics.tsx:export function Statistics({ userId }: StatisticsProps) {",
      "src/components/Statistics.tsx:export default Statistics;",
      "src/components/StreakCounter.tsx:export const StreakCounter: React.FC<StreakCounterProps> = ({",
      "src/components/StreakCounter.tsx:export default StreakCounter;",
      "src/components/StrugglingSamWrapper.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/StrugglingSamWrapper.tsx:export const StrugglingSamWrapper: React.FC<StrugglingSamWrapperProps> = ({",
      "src/components/StrugglingSamWrapper.tsx:export const usePersonaBasedFeatures = (_user?: any) => {",
      "src/components/StrugglingSamWrapper.tsx:export default StrugglingSamWrapper;",
      "src/components/SubscriptionModal.tsx:export default SubscriptionModal;",
      "src/components/SubscriptionStatus.tsx:export default SubscriptionStatus;",
      "src/components/SyncStatus.tsx:export default SyncStatus;",
      "src/components/TabProtectionSettings.tsx:export const TabProtectionSettings: React.FC<TabProtectionSettingsProps> = ({",
      "src/components/TabProtectionSettings.tsx:    exportSettings,",
      "src/components/TabProtectionSettings.tsx:    const data = exportSettings();",
      "src/components/TabProtectionSettings.tsx:                placeholder=\"Paste your exported settings JSON here...\"",
      "src/components/TabProtectionSettings.tsx:export default TabProtectionSettings;",
      "src/components/TabProtectionWarning.tsx:export const TabProtectionWarning: React.FC<TabProtectionWarningProps> = ({",
      "src/components/TabProtectionWarning.tsx:export default TabProtectionWarning;",
      "src/components/ThemeCreator.tsx:                      const exported = JSON.stringify(",
      "src/components/ThemeCreator.tsx:                      navigator.clipboard.writeText(exported);",
      "src/components/ThemeCreator.tsx:export default ThemeCreator;",
      "src/components/ThemeCustomizationStudio.tsx:  const [exportFormat, setExportFormat] = useState<'json' | 'css' | 'scss'>('json');",
      "src/components/ThemeCustomizationStudio.tsx:  const exportTheme = useCallback(async () => {",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = generateSCSS(customTheme);",
      "src/components/ThemeCustomizationStudio.tsx:          exportData = JSON.stringify(customTheme, null, 2);",
      "src/components/ThemeCustomizationStudio.tsx:      const blob = new Blob([exportData], { type: 'application/json' });",
      "src/components/ThemeCustomizationStudio.tsx:      console._error('Failed to export theme:', _error);",
      "src/components/ThemeCustomizationStudio.tsx:              className=\"export-format-select\"",
      "src/components/ThemeCustomizationStudio.tsx:              onClick={exportTheme}",
      "src/components/ThemeCustomizationStudio.tsx:        .export-format-select,",
      "src/components/ThemeCustomizationStudio.tsx:        .export-button:disabled {",
      "src/components/ThemeCustomizationStudio.tsx:export default ThemeCustomizationStudio;",
      "src/components/ThemeDemo.tsx:export default ThemeDemo;",
      "src/components/ThemeGallery.tsx:export default ThemeGallery;",
      "src/components/ThemeManager.tsx:  const exportThemes = () => {",
      "src/components/ThemeManager.tsx:      exportDate: new Date().toISOString(),",
      "src/components/ThemeManager.tsx:    const exportFileDefaultName = 'relife-themes.json';",
      "src/components/ThemeManager.tsx:    linkElement.setAttribute('download', exportFileDefaultName);",
      "src/components/ThemeManager.tsx:              onClick={exportThemes}",
      "src/components/ThemeManager.tsx:              onClick={exportThemes}",
      "src/components/ThemeManager.tsx:export default ThemeManager;",
      "src/components/ThemeSelector.tsx:export const ThemeSelector: React.FC = () => {",
      "src/components/ThemeSelector.tsx:export default ThemeSelector;",
      "src/components/ThemeStudio.tsx:export default ThemeStudio;",
      "src/components/TranslationDashboard.tsx:export const TranslationDashboard: React.FC = () => {",
      "src/components/TranslationDashboard.tsx:export default TranslationDashboard;",
      "src/components/UpgradePrompt.tsx:export default UpgradePrompt;",
      "src/components/UserProfile.tsx:export default function UserProfile({",
      "src/components/VirtualScroll.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/VirtualScroll.tsx:export const VirtualAlarmHistory: React.FC<{",
      "src/components/VirtualScroll.tsx:export const VirtualSleepHistory: React.FC<{",
      "src/components/VirtualScroll.tsx:export const useInfiniteScroll = <T,>(",
      "src/components/VirtualScroll.tsx:export default VirtualScroll;",
      "src/components/VisualAlarmDisplay.tsx:export const VisualAlarmDisplay: React.FC<VisualAlarmDisplayProps> = ({",
      "src/components/VisualAlarmDisplay.tsx:export default VisualAlarmDisplay;",
      "src/components/VoiceAnalyticsDashboard.tsx:export default VoiceAnalyticsDashboard;",
      "src/components/VoiceCloning.tsx:export default VoiceCloning;",
      "src/components/VoicePersonalitySelector.tsx:export const VoicePersonalitySelector: React.FC<VoicePersonalitySelectorProps> = ({",
      "src/components/VoicePersonalitySelector.tsx:export default VoicePersonalitySelector;",
      "src/components/VoiceSelector.tsx:export default VoiceSelector;",
      "src/components/VoiceSettings.tsx:export default VoiceSettings;",
      "src/components/WakeUpFeedbackModal.tsx:export default WakeUpFeedbackModal;",
      "src/components/animations/AnimationLibrary.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/animations/AnimationLibrary.tsx:export const easingCurves = {",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const PulseLoader: React.FC<{ size?: string; className?: string }> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const SkeletonLoader: React.FC<{",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedCard: React.FC<AnimatedCardProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const ScrollReveal: React.FC<ScrollRevealProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedToggle: React.FC<AnimatedToggleProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const FloatingActionButton: React.FC<FloatingActionButtonProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const AnimatedNotification: React.FC<NotificationProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerContainer: React.FC<StaggerContainerProps> = ({",
      "src/components/animations/AnimationLibrary.tsx:export const StaggerItem: React.FC<{",
      "src/components/animations/AnimationLibrary.tsx:export default {",
      "src/components/animations/LoadingStates.tsx:export const AlarmCardSkeleton: React.FC<{ count?: number }> = ({ count = 3 }) => {",
      "src/components/animations/LoadingStates.tsx:export const AlarmRingingLoader: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const VoiceListeningIndicator: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const VoiceProcessingLoader: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const DashboardSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const SettingsFormSkeleton: React.FC = () => {",
      "src/components/animations/LoadingStates.tsx:export const AnalyticsChartSkeleton: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export const PageLoader: React.FC<{",
      "src/components/animations/LoadingStates.tsx:export default {",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedInput: React.FC<AnimatedInputProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedSelect: React.FC<AnimatedSelectProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedButton: React.FC<AnimatedButtonProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedCheckbox: React.FC<AnimatedCheckboxProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export const AnimatedProgress: React.FC<AnimatedProgressProps> = ({",
      "src/components/animations/MicroInteractions.tsx:export default {",
      "src/components/premium/BillingHistory.tsx:export default BillingHistory;",
      "src/components/premium/EnhancedUpgradePrompt.tsx:export default EnhancedUpgradePrompt;",
      "src/components/premium/FeatureGate.tsx:export default FeatureGate;",
      "src/components/premium/FeatureUtils.tsx:export function FeatureBadge({",
      "src/components/premium/FeatureUtils.tsx:export function TierComparison({",
      "src/components/premium/FeatureUtils.tsx:export function UsageProgress({",
      "src/components/premium/FeatureUtils.tsx:export function FeatureHighlight({",
      "src/components/premium/FeatureUtils.tsx:export function TeamFeatureIndicator({",
      "src/components/premium/FeatureUtils.tsx:export default {",
      "src/components/premium/PaymentFlow.tsx:export function PaymentFlow({",
      "src/components/premium/PaymentFlow.tsx:export default PaymentFlow;",
      "src/components/premium/PaymentMethodManager.tsx:export function PaymentMethodManager({",
      "src/components/premium/PaymentMethodManager.tsx:export default PaymentMethodManager;",
      "src/components/premium/PremiumAlarmFeatures.tsx:export function PremiumAlarmFeatures({",
      "src/components/premium/PremiumAlarmFeatures.tsx:export default PremiumAlarmFeatures;",
      "src/components/premium/PremiumAnalytics.tsx:  const [exportFormat, setExportFormat] = useState('pdf');",
      "src/components/premium/PremiumAnalytics.tsx:            <Select value={exportFormat} onValueChange={setExportFormat}>",
      "src/components/premium/PremiumAnalytics.tsx:export function PremiumAnalytics({ className = '' }: PremiumAnalyticsProps) {",
      "src/components/premium/PremiumAnalytics.tsx:export default PremiumAnalytics;",
      "src/components/premium/PremiumFeaturePreview.tsx:export default PremiumFeaturePreview;",
      "src/components/premium/PremiumTeamFeatures.tsx:export function PremiumTeamFeatures({ className = '' }: PremiumTeamFeaturesProps) {",
      "src/components/premium/PremiumTeamFeatures.tsx:export default PremiumTeamFeatures;",
      "src/components/premium/PremiumVoiceFeatures.tsx:export function PremiumVoiceFeatures({ className = '' }: PremiumVoiceFeaturesProps) {",
      "src/components/premium/PremiumVoiceFeatures.tsx:export default PremiumVoiceFeatures;",
      "src/components/premium/PricingTable.tsx:export function PricingTable({",
      "src/components/premium/PricingTable.tsx:export default PricingTable;",
      "src/components/premium/PsychologyDrivenCTA.tsx:export default PsychologyDrivenCTA;",
      "src/components/premium/SubscriptionDashboard.tsx:export default SubscriptionDashboard;",
      "src/components/premium/SubscriptionManagement.tsx:export function SubscriptionManagement({",
      "src/components/premium/SubscriptionManagement.tsx:export default SubscriptionManagement;",
      "src/components/premium/SubscriptionPage.tsx:export function SubscriptionPage({",
      "src/components/premium/SubscriptionPage.tsx:export default SubscriptionPage;",
      "src/components/premium/enhanced-index.ts:export { default as EnhancedUpgradePrompt } from './EnhancedUpgradePrompt';",
      "src/components/premium/enhanced-index.ts:export { default as PremiumFeaturePreview } from './PremiumFeaturePreview';",
      "src/components/premium/enhanced-index.ts:export { default as PsychologyDrivenCTA } from './PsychologyDrivenCTA';",
      "src/components/premium/enhanced-index.ts:// Re-export existing components for convenience",
      "src/components/premium/enhanced-index.ts:export { default as PricingTable } from './PricingTable';",
      "src/components/premium/enhanced-index.ts:export { default as FeatureGate } from './FeatureGate';",
      "src/components/premium/enhanced-index.ts:export { default as SubscriptionDashboard } from './SubscriptionDashboard';",
      "src/components/premium/enhanced-index.ts:export { default as PaymentFlow } from './PaymentFlow';",
      "src/components/premium/index.ts:// Centralized exports for all premium subscription components",
      "src/components/premium/index.ts:export { default as FeatureGate } from './FeatureGate';",
      "src/components/premium/index.ts:export { default as FeatureUtils } from './FeatureUtils';",
      "src/components/premium/index.ts:export { default as PricingTable } from './PricingTable';",
      "src/components/premium/index.ts:export { default as PaymentMethodManager } from './PaymentMethodManager';",
      "src/components/premium/index.ts:export { default as SubscriptionDashboard } from './SubscriptionDashboard';",
      "src/components/premium/index.ts:export { default as BillingHistory } from './BillingHistory';",
      "src/components/premium/index.ts:export { default as PaymentFlow } from './PaymentFlow';",
      "src/components/premium/index.ts:export { default as SubscriptionManagement } from './SubscriptionManagement';",
      "src/components/premium/index.ts:export { default as SubscriptionPage } from './SubscriptionPage';",
      "src/components/premium/index.ts:// Re-export types for convenience",
      "src/components/premium/index.ts:export type {",
      "src/components/ui/accordion.tsx:export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };",
      "src/components/ui/alert.tsx:export { Alert, AlertTitle, AlertDescription };",
      "src/components/ui/aspect-ratio.tsx:export { AspectRatio };",
      "src/components/ui/avatar.tsx:export { Avatar, AvatarImage, AvatarFallback };",
      "src/components/ui/badge.tsx:export { Badge, badgeVariants };",
      "src/components/ui/calendar.tsx:export { Calendar };",
      "src/components/ui/chart.tsx:export type ChartConfig = {",
      "src/components/ui/checkbox.tsx:export { Checkbox };",
      "src/components/ui/collapsible.tsx:export { Collapsible, CollapsibleTrigger, CollapsibleContent };",
      "src/components/ui/hover-card.tsx:export { HoverCard, HoverCardTrigger, HoverCardContent };",
      "src/components/ui/input-otp.tsx:export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };",
      "src/components/ui/label.tsx:export { Label };",
      "src/components/ui/popover.tsx:export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor };",
      "src/components/ui/progress.tsx:export { Progress };",
      "src/components/ui/radio-group.tsx:export { RadioGroup, RadioGroupItem };",
      "src/components/ui/resizable.tsx:export { ResizablePanelGroup, ResizablePanel, ResizableHandle };",
      "src/components/ui/scroll-area.tsx:export { ScrollArea, ScrollBar };",
      "src/components/ui/separator.tsx:export { Separator };",
      "src/components/ui/skeleton.tsx:export { Skeleton };",
      "src/components/ui/slider.tsx:export { Slider };",
      "src/components/ui/sonner.tsx:export { Toaster };",
      "src/components/ui/tabs.tsx:export { Tabs, TabsList, TabsTrigger, TabsContent };",
      "src/components/ui/textarea.tsx:export { Textarea };",
      "src/components/ui/toggle-group.tsx:export { ToggleGroup, ToggleGroupItem };",
      "src/components/ui/toggle.tsx:export { Toggle, toggleVariants };",
      "src/components/ui/tooltip.tsx:export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };",
      "src/components/user-testing/ABTestWrapper.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/components/user-testing/ABTestWrapper.tsx:export const ABTestContext = React.createContext<ABTestContextType>({",
      "src/components/user-testing/ABTestWrapper.tsx:export function ABTestWrapper({",
      "src/components/user-testing/ABTestWrapper.tsx:export function useABTest() {",
      "src/components/user-testing/ABTestWrapper.tsx:export function withABTest<P extends object>(",
      "src/components/user-testing/ABTestWrapper.tsx:export function ABTestProps<T>({",
      "src/components/user-testing/ABTestWrapper.tsx:export default ABTestWrapper;",
      "src/components/user-testing/BetaTestingProgram.tsx:export function BetaTestingProgram() {",
      "src/components/user-testing/BetaTestingProgram.tsx:export default BetaTestingProgram;",
      "src/components/user-testing/BugReportModal.tsx:export function BugReportModal({",
      "src/components/user-testing/BugReportModal.tsx:export default BugReportModal;",
      "src/components/user-testing/FeedbackModal.tsx:export function FeedbackModal({",
      "src/components/user-testing/FeedbackModal.tsx:export default FeedbackModal;",
      "src/components/user-testing/FeedbackWidget.tsx:export function FeedbackWidget({",
      "src/components/user-testing/FeedbackWidget.tsx:export default FeedbackWidget;",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export function RedesignedFeedbackModal({",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:export default RedesignedFeedbackModal;",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:export function RedesignedFeedbackWidget({",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:export default RedesignedFeedbackWidget;",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:export default UsabilityAnalyticsDashboard;",
      "src/components/user-testing/index.ts:export { default as FeedbackModal } from './FeedbackModal';",
      "src/components/user-testing/index.ts:export { default as BugReportModal } from './BugReportModal';",
      "src/components/user-testing/index.ts:export { default as FeedbackWidget } from './FeedbackWidget';",
      "src/components/user-testing/index.ts:export { default as UsabilityAnalyticsDashboard } from './UsabilityAnalyticsDashboard';",
      "src/components/user-testing/index.ts:// Re-export types from the service",
      "src/components/user-testing/index.ts:export type {",
      "src/components/user-testing/index.ts:// Re-export the service",
      "src/components/user-testing/index.ts:export { default as UserTestingService } from '../../services/user-testing';",
      "src/config/convertkit-config.ts:export interface PersonaConvertKitConfig {",
      "src/config/convertkit-config.ts:export interface PersonaAutomationRule {",
      "src/config/convertkit-config.ts:export interface ConvertKitFormTemplate {",
      "src/config/convertkit-config.ts:export interface ConvertKitSequenceTemplate {",
      "src/config/convertkit-config.ts:export interface SequenceEmailTemplate {",
      "src/config/convertkit-config.ts:export const PERSONA_CONVERTKIT_CONFIG: Record<PersonaType, PersonaConvertKitConfig> = {",
      "src/config/convertkit-config.ts:export const CONVERTKIT_FORM_TEMPLATES: Record<PersonaType, ConvertKitFormTemplate> = {",
      "src/config/convertkit-config.ts:export const CONVERTKIT_SEQUENCE_TEMPLATES: Record<",
      "src/config/convertkit-config.ts:export default {",
      "src/config/convertkit-generated.ts:export interface GeneratedConvertKitConfig {",
      "src/config/convertkit-generated.ts:export const CONVERTKIT_IDS: GeneratedConvertKitConfig = {",
      "src/config/convertkit-generated.ts:export default CONVERTKIT_IDS;",
      "src/config/environment.ts:export type Environment = 'development' | 'staging' | 'production';",
      "src/config/environment.ts:export interface EnvironmentConfig {",
      "src/config/environment.ts:export function getEnvironment(): Environment {",
      "src/config/environment.ts:export function createEnvironmentConfig(): EnvironmentConfig {",
      "src/config/environment.ts:export const config = createEnvironmentConfig();",
      "src/config/environment.ts:export const isEnvironment = {",
      "src/config/environment.ts:export function logEnvironmentInfo(): void {",
      "src/config/environment.ts:export function validateEnvironmentConfig(): {",
      "src/config/environment.ts:export function getPerformanceThresholds() {",
      "src/config/environment.ts:export function isFeatureEnabled(",
      "src/config/environment.ts:export function getApiUrl(path: string): string {",
      "src/config/environment.ts:export function getCdnUrl(asset: string): string {",
      "src/config/environment.ts:export default config;",
      "src/config/i18n.ts:export type SupportedLanguage = keyof typeof SUPPORTED_LANGUAGES;",
      "src/config/i18n.ts:export const getCurrentLanguage = (): SupportedLanguage => {",
      "src/config/i18n.ts:export const getLanguageInfo = (lang?: SupportedLanguage) => {",
      "src/config/i18n.ts:export const isRTL = (lang?: SupportedLanguage): boolean => {",
      "src/config/i18n.ts:export const changeLanguage = async (lang: SupportedLanguage): Promise<void> => {",
      "src/config/i18n.ts:export const formatMessage = (",
      "src/config/i18n.ts:export const formatRelativeTime = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatTime = (time: string, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatDate = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatShortDate = (date: Date, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatCurrency = (amount: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatNumber = (num: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatPercentage = (value: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatList = (items: string[], lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const formatDuration = (seconds: number, lang?: SupportedLanguage): string => {",
      "src/config/i18n.ts:export const validateTranslationKey = (key: string, namespace?: string): boolean => {",
      "src/config/i18n.ts:export const getMissingTranslationKeys = (): string[] => {",
      "src/config/i18n.ts:export const getPluralizationRules = (lang?: SupportedLanguage): Intl.PluralRules => {",
      "src/config/i18n.ts:export default initI18n;",
      "src/config/initializeApp.ts:export const initializeApp = async (): Promise<void> => {",
      "src/config/stripe.ts:export interface StripeConfig {",
      "src/config/stripe.ts:export const stripeConfig: StripeConfig = {",
      "src/config/stripe.ts:export function getStripePublishableKey(): string {",
      "src/config/stripe.ts:export function isStripeEnabled(): boolean {",
      "src/config/stripe.ts:export function getPlanByTier(tier: string) {",
      "src/config/stripe.ts:export function getAllPlans() {",
      "src/config/stripe.ts:export function validateStripeConfig(): { isValid: boolean; errors: string[] } {",
      "src/config/stripe.ts:export function logStripeConfig(): void {",
      "src/config/stripe.ts:export default stripeConfig;",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/config/themes.ts:export const REGIONAL_THEMES: Record<string, CulturalTheme> = {",
      "src/config/themes.ts:export const getRegionalTheme = (language: SupportedLanguage): CulturalTheme => {",
      "src/config/themes.ts:export const getAllThemes = (): CulturalTheme[] => {",
      "src/config/themes.ts:export const applyTheme = (theme: CulturalTheme): void => {",
      "src/config/themes.ts:export const getThemeCSS = (theme: CulturalTheme): string => {",
      "src/constants/initialDomainState.ts:export const INITIAL_DOMAIN_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export const DEFAULT_THEME_CONFIG: ThemeConfig = {",
      "src/constants/initialState.ts:export const DEFAULT_PERSONALIZATION: PersonalizationSettings = {",
      "src/constants/initialState.ts:export const DEFAULT_AVAILABLE_THEMES: ThemePreset[] = [",
      "src/constants/initialState.ts:export const INITIAL_APP_STATE: AppState = {",
      "src/constants/initialState.ts:export function isValidAppState(obj: any): obj is AppState {",
      "src/constants/initialState.ts:export function createFreshAppState(): AppState {",
      "src/contexts/FeatureAccessContext.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/contexts/FeatureAccessContext.tsx:export function FeatureAccessProvider({",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccessContext(): FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:export function withFeatureAccess<P extends object>(",
      "src/contexts/FeatureAccessContext.tsx:export function ConditionalFeature({",
      "src/contexts/FeatureAccessContext.tsx:export function useFeatureAccess(feature: string) {",
      "src/contexts/FeatureAccessContext.tsx:export default FeatureAccessContext;",
      "src/contexts/LanguageContext.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/contexts/LanguageContext.tsx:export const useLanguage = (): LanguageContextType => {",
      "src/contexts/LanguageContext.tsx:export const LanguageProvider: React.FC<LanguageProviderProps> = ({",
      "src/contexts/LanguageContext.tsx:export const useTranslationNamespace = (namespace: string) => {",
      "src/contexts/LanguageContext.tsx:export const useLanguageAwareNavigation = () => {",
      "src/contexts/LanguageContext.tsx:export { LanguageContext };",
      "src/contexts/LanguageContext.tsx:export default LanguageProvider;",
      "src/contexts/StrugglingsamContext.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/contexts/StrugglingsamContext.tsx:export const StrugglingSamProvider: React.FC<{",
      "src/contexts/StrugglingsamContext.tsx:export const useStrugglingSam = () => {",
      "src/contexts/StrugglingsamContext.tsx:export default StrugglingSamContext;",
      "src/data/emotional-message-templates.ts:export const EMOTIONAL_MESSAGE_TEMPLATES: Record<",
      "src/data/emotional-message-templates.ts:export interface MessageTemplate {",
      "src/data/emotional-message-templates.ts:export function getEmotionalMessageTemplate(",
      "src/data/emotional-message-templates.ts:export function personalizeMessage(",
      "src/hooks/__tests__/edge-cases/useAdvancedAlarms.edge.test.ts:    // TODO: Implement import/export tests",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    // TODO: Implement import/export tests",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    it.todo('should export alarms successfully');",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    it.todo('should handle export errors');",
      "src/hooks/__tests__/useTheme.test.tsx:      exportThemes: jest.fn().mockResolvedValue('{}'),",
      "src/hooks/__tests__/useTheme.test.tsx:    it('should export themes', async () => {",
      "src/hooks/__tests__/useTheme.test.tsx:        exportData = await result.current.exportThemes();",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/use-mobile.ts:export function useIsMobile() {",
      "src/hooks/useABTesting.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/hooks/useABTesting.tsx:export type FeatureKey = keyof typeof STRUGGLING_SAM_FEATURES.FULL_OPTIMIZATION;",
      "src/hooks/useABTesting.tsx:export const useABTesting = (userId?: string) => {",
      "src/hooks/useABTesting.tsx:export const withABTest = <T extends object>(",
      "src/hooks/useABTesting.tsx:export const useABTestComponent = (featureKey: FeatureKey, userId?: string) => {",
      "src/hooks/useABTesting.tsx:export default useABTesting;",
      "src/hooks/useAccessibility.ts:export const useAccessibility = () => {",
      "src/hooks/useAccessibility.ts:export const useScreenReader = () => {",
      "src/hooks/useAccessibility.ts:export const useFocusManagement = () => {",
      "src/hooks/useAccessibility.ts:export const useAccessibleTooltip = () => {",
      "src/hooks/useAccessibility.ts:export const useMobileAccessibility = () => {",
      "src/hooks/useAccessibility.ts:export const useHighContrast = () => {",
      "src/hooks/useAccessibility.ts:export const useReducedMotion = () => {",
      "src/hooks/useAccessibility.ts:export const useColorBlindFriendly = () => {",
      "src/hooks/useAccessibility.ts:export const useKeyboardNavigation = () => {",
      "src/hooks/useAccessibility.ts:export default {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibilityPreferences() {",
      "src/hooks/useAccessibilityPreferences.ts:export function useReducedMotion(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useHighContrast(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useDarkMode(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useScreenReader(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useTouchDevice(): boolean {",
      "src/hooks/useAccessibilityPreferences.ts:export function useFontScale(): number {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibleAnimation() {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibleTouch() {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibleFocus() {",
      "src/hooks/useAccessibilityPreferences.ts:export function useAccessibleColors() {",
      "src/hooks/useAccessibilityPreferences.ts:export default useAccessibilityPreferences;",
      "src/hooks/useAdvancedAlarms.ts:export function useAdvancedAlarms() {",
      "src/hooks/useAlarmRingingAnnouncements.ts:export function useAlarmRingingAnnouncements() {",
      "src/hooks/useAnalytics.ts:export const useAnalytics = (): UseAnalyticsReturn => {",
      "src/hooks/useAnalytics.ts:export const useAlarmAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const useEngagementAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const usePerformanceAnalytics = () => {",
      "src/hooks/useAnalytics.ts:export const usePageTracking = (pageName: string) => {",
      "src/hooks/useAnimations.ts:export const animationPresets = {",
      "src/hooks/useAnimations.ts:export const useEntranceAnimation = (",
      "src/hooks/useAnimations.ts:export const useHoverAnimation = (_config: {",
      "src/hooks/useAnimations.ts:export const useStaggerChildren = (delayBetweenChildren: number = 0.1) => {",
      "src/hooks/useAnimations.ts:export const useScrollAnimation = (",
      "src/hooks/useAnimations.ts:export const useParallaxScroll = (offset: number = 50) => {",
      "src/hooks/useAnimations.ts:export const useMouseTracking = (strength: number = 1, damping: number = 0.1) => {",
      "src/hooks/useAnimations.ts:export const useTypingAnimation = (",
      "src/hooks/useAnimations.ts:export const useCounterAnimation = (",
      "src/hooks/useAnimations.ts:export const useGestureAnimation = () => {",
      "src/hooks/useAnimations.ts:export const useNotificationAnimation = () => {",
      "src/hooks/useAnimations.ts:export const useLoadingAnimation = (isLoading: boolean) => {",
      "src/hooks/useAnimations.ts:export const useAnimationSequence = (",
      "src/hooks/useAnimations.ts:export default {",
      "src/hooks/useAudioLazyLoading.ts:export interface AudioLoadingState {",
      "src/hooks/useAudioLazyLoading.ts:export function useAudioLazyLoading(",
      "src/hooks/useAudioLazyLoading.ts:export function usePlaylistLazyLoading(",
      "src/hooks/useAudioLazyLoading.ts:export function useAlarmSoundPreloading(alarms: any[]) {",
      "src/hooks/useAudioLazyLoading.ts:export function useLazyLoadingStats() {",
      "src/hooks/useAudioLazyLoading.ts:export function useLazyLoadingControl() {",
      "src/hooks/useAudioLazyLoading.ts:export function useSmartPreloading(",
      "src/hooks/useAuth.ts:export default useAuth;",
      "src/hooks/useAuthAnnouncements.ts:export function useAuthAnnouncements() {",
      "src/hooks/useCapacitor.ts:export function useCapacitor() {",
      "src/hooks/useCapacitor.ts:export function useAlarmNotifications() {",
      "src/hooks/useCapacitor.ts:export function useHapticFeedback() {",
      "src/hooks/useCapacitor.ts:export function useAppState() {",
      "src/hooks/useCapacitor.ts:export function useNetworkStatus() {",
      "src/hooks/useCapacitor.ts:export function useWakeLock() {",
      "src/hooks/useCapacitor.ts:export function useNotificationEvents() {",
      "src/hooks/useCapacitor.ts:export function useBackButton() {",
      "src/hooks/useCapacitor.ts:export function useAppUrlOpen() {",
      "src/hooks/useCapacitor.ts:export function useCapacitorAlarmApp() {",
      "src/hooks/useCriticalPreloading.ts:export interface CriticalPreloadingState {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalPreloading(alarms: Alarm[]): CriticalPreloadingState {",
      "src/hooks/useCriticalPreloading.ts:export function useAlarmReadiness(alarmId: string, enabled: boolean = true) {",
      "src/hooks/useCriticalPreloading.ts:export function useEmergencyPreloading() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadStrategy() {",
      "src/hooks/useCriticalPreloading.ts:export function useCriticalAssetStatus() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadPerformance() {",
      "src/hooks/useCriticalPreloading.ts:export function usePreloadDebugging() {",
      "src/hooks/useCulturalTheme.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/hooks/useCulturalTheme.tsx:export const useCulturalTheme = (",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:export const CulturalThemeProvider: React.FC<CulturalThemeProviderProps> = ({",
      "src/hooks/useCulturalTheme.tsx:export const useThemeContext = (): CulturalThemeContextValue => {",
      "src/hooks/useCulturalTheme.tsx:export const withCulturalTheme = <P extends object>(",
      "src/hooks/useCulturalTheme.tsx:export const useThemeStyles = () => {",
      "src/hooks/useDeviceCapabilities.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/hooks/useDeviceCapabilities.tsx:export interface DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function useDeviceCapabilities(): DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function usePerformanceOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useMemoryOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useNetworkOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function useAnimationOptimizations() {",
      "src/hooks/useDeviceCapabilities.tsx:export function DeviceCapabilityProvider({ children }: { children: ReactNode }) {",
      "src/hooks/useDeviceCapabilities.tsx:export function useDeviceCapabilityContext(): DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:export function usePerformanceMonitoring() {",
      "src/hooks/useDynamicFocus.ts:export function useDynamicFocus(options: DynamicFocusOptions = {}) {",
      "src/hooks/useDynamicFocus.ts:export default useDynamicFocus;",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotifications({",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotificationResponse(",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotificationSettings(userId: string) {",
      "src/hooks/useEnhancedCaching.ts:export interface CacheState {",
      "src/hooks/useEnhancedCaching.ts:export function useEnhancedCaching(): {",
      "src/hooks/useEnhancedCaching.ts:export function useCachePerformance() {",
      "src/hooks/useEnhancedCaching.ts:export function useCacheWarming() {",
      "src/hooks/useEnhancedCaching.ts:export function useCachePolicy() {",
      "src/hooks/useEnhancedCaching.ts:export function useAutoOptimization(enabled: boolean = true) {",
      "src/hooks/useEnhancedCaching.ts:export function useCacheDebugging() {",
      "src/hooks/useEnhancedServiceWorker.ts:export interface ServiceWorkerState {",
      "src/hooks/useEnhancedServiceWorker.ts:export function useEnhancedServiceWorker() {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useEnhancedSmartAlarms.ts:export const useEnhancedSmartAlarms = (): UseEnhancedSmartAlarmsResult => {",
      "src/hooks/useEnhancedSmartAlarms.ts:export default useEnhancedSmartAlarms;",
      "src/hooks/useErrorLoadingAnnouncements.ts:export function useErrorLoadingAnnouncements() {",
      "src/hooks/useFeatureGate.ts:export default useFeatureGate;",
      "src/hooks/useFocusRestoration.ts:export function useFocusRestoration(options: FocusRestorationOptions = {}) {",
      "src/hooks/useFocusRestoration.ts:export default useFocusRestoration;",
      "src/hooks/useFocusTrap.ts:export function useFocusTrap({",
      "src/hooks/useFocusTrap.ts:export default useFocusTrap;",
      "src/hooks/useFormAnnouncements.ts:export interface FormFieldChange {",
      "src/hooks/useFormAnnouncements.ts:export function useFormAnnouncements() {",
      "src/hooks/useFormAnnouncements.ts:export default useFormAnnouncements;",
      "src/hooks/useGamingAnnouncements.ts:export function useGamingAnnouncements(enabled = true) {",
      "src/hooks/useGamingAnnouncements.ts:export default useGamingAnnouncements;",
      "src/hooks/useI18n.ts:export const useI18n = (namespace?: string) => {",
      "src/hooks/useI18n.ts:export const useAlarmI18n = () => {",
      "src/hooks/useI18n.ts:export const useAuthI18n = () => {",
      "src/hooks/useI18n.ts:export const useGamingI18n = () => {",
      "src/hooks/useI18n.ts:export const useSettingsI18n = () => {",
      "src/hooks/useI18n.ts:export default useI18n;",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardNavigation(): KeyboardNavigationHookReturn {",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardNavigationEvents() {",
      "src/hooks/useKeyboardNavigation.ts:export function useKeyboardFocusTrap(",
      "src/hooks/useKeyboardNavigation.ts:export function useRovingFocus(",
      "src/hooks/useKeyboardNavigation.ts:export default useKeyboardNavigation;",
      "src/hooks/useMediaContentAnnouncements.ts:export function useMediaContentAnnouncements() {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceMetrics {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceOptimizations {",
      "src/hooks/useMobilePerformance.ts:export const useMobilePerformance = () => {",
      "src/hooks/useMobilePerformance.ts:export const useLazyLoading = () => {",
      "src/hooks/useMobilePerformance.ts:export const useMemoryMonitoring = () => {",
      "src/hooks/useMobilePerformance.ts:export const useBatteryOptimization = () => {",
      "src/hooks/useMobilePerformance.ts:export const useNetworkAwareLoading = () => {",
      "src/hooks/useMobilePerformance.ts:export const usePerformanceAwareAnimations = () => {",
      "src/hooks/useMobileTouch.ts:export function useTouchGestures(options: Omit<TouchGestureOptions, 'element'>) {",
      "src/hooks/useMobileTouch.ts:export function useEnhancedButton(hapticType: 'light' | 'medium' | 'heavy' = 'light') {",
      "src/hooks/useMobileTouch.ts:export function useHaptic() {",
      "src/hooks/useMobileTouch.ts:export function usePullToRefresh(onRefresh: () => Promise<void>, enabled = true) {",
      "src/hooks/useMobileTouch.ts:export function useSwipeNavigation(",
      "src/hooks/useMobileTouch.ts:export function useMobileBehavior() {",
      "src/hooks/useMobileTouch.ts:export function useSwipeToDismiss(onDismiss: () => void, threshold = 100) {",
      "src/hooks/useMobileTouch.ts:export function useLongPress(onLongPress: () => void, delay = 500) {",
      "src/hooks/useNavigationAnnouncements.ts:export function useNavigationAnnouncements() {",
      "src/hooks/usePWA.ts:export function usePWA() {",
      "src/hooks/usePWA.ts:export function useInstallPrompt() {",
      "src/hooks/usePWA.ts:export function useServiceWorkerUpdate() {",
      "src/hooks/usePWA.ts:export function usePushNotifications() {",
      "src/hooks/usePWA.ts:export function useOffline() {",
      "src/hooks/usePWA.ts:export function usePWAUI() {",
      "src/hooks/usePWA.ts:export function useBackgroundSync() {",
      "src/hooks/usePWA.ts:export function useAlarmPWA() {",
      "src/hooks/useProfileAnnouncements.ts:export function useProfileAnnouncements() {",
      "src/hooks/useProfileAnnouncements.ts:export default useProfileAnnouncements;",
      "src/hooks/usePushNotifications.ts:export interface PushNotificationStatus {",
      "src/hooks/usePushNotifications.ts:export interface UsePushNotificationsReturn {",
      "src/hooks/usePushNotifications.ts:export const usePushNotifications = (): UsePushNotificationsReturn => {",
      "src/hooks/usePushNotifications.ts:export default usePushNotifications;",
      "src/hooks/useRTL.ts:export const useRTL = () => {",
      "src/hooks/useRTL.ts:export const useRTLSpacing = () => {",
      "src/hooks/useRTL.ts:export const useRTLPosition = () => {",
      "src/hooks/useRTL.ts:export const useRTLFlex = () => {",
      "src/hooks/useRTL.ts:export const useRTLText = () => {",
      "src/hooks/useRTL.ts:export const useRTLAnimation = () => {",
      "src/hooks/useRTL.ts:export const useRTLForm = () => {",
      "src/hooks/useRealtime.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/hooks/useRealtime.tsx:export const RealtimeProvider: React.FC<RealtimeProviderProps> = ({",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeOptions {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export const useRealtime = (options: UseRealtimeOptions = {}): UseRealtimeReturn => {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseUserRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAIRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UsePushNotificationReturn {",
      "src/hooks/useRealtime.tsx:export const useRealtimeMessage = <T = any,>(",
      "src/hooks/useRealtime.tsx:export const useConnectionQuality = (): {",
      "src/hooks/useRealtime.tsx:export const useRealtimeMetrics = (",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useScreenReaderAnnouncements(options: UseScreenReaderOptions = {}) {",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useFocusAnnouncements(componentName: string, enabled = true) {",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useStateChangeAnnouncements<T>(",
      "src/hooks/useScreenReaderAnnouncements.ts:export default useScreenReaderAnnouncements;",
      "src/hooks/useSettingsAnnouncements.ts:export interface SettingsAnnouncement {",
      "src/hooks/useSettingsAnnouncements.ts:export function useSettingsAnnouncements() {",
      "src/hooks/useSettingsAnnouncements.ts:export default useSettingsAnnouncements;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:export function useSmartFeaturesAnnouncements() {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectHandlers {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectControls {",
      "src/hooks/useSoundEffects.tsx:export function useSoundEffects(): SoundEffectControls & SoundEffectHandlers {",
      "src/hooks/useSoundEffects.tsx:export function useUISound() {",
      "src/hooks/useSoundEffects.tsx:export function useNotificationSounds() {",
      "src/hooks/useSoundEffects.tsx:export function useAlarmSounds() {",
      "src/hooks/useSoundEffects.tsx:export function withSoundEffects<T extends object>(",
      "src/hooks/useSoundEffects.tsx:export default useSoundEffects;",
      "src/hooks/useSubscription.ts:export default useSubscription;",
      "src/hooks/useTabProtectionAnnouncements.ts:export const useTabProtectionAnnouncements = ({",
      "src/hooks/useTabProtectionAnnouncements.ts:export default useTabProtectionAnnouncements;",
      "src/hooks/useTabProtectionSettings.ts:  exportSettings: () => string;",
      "src/hooks/useTabProtectionSettings.ts:export const useTabProtectionSettings = (): UseTabProtectionSettingsReturn => {",
      "src/hooks/useTabProtectionSettings.ts:  const exportSettings = useCallback(() => {",
      "src/hooks/useTabProtectionSettings.ts:    exportSettings,",
      "src/hooks/useTabProtectionSettings.ts:export default useTabProtectionSettings;",
      "src/hooks/useTheme.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:  exportThemes: () => Promise<string>;",
      "src/hooks/useTheme.tsx:export function useTheme(): ThemeContextValue {",
      "src/hooks/useTheme.tsx:export function ThemeProvider({",
      "src/hooks/useTheme.tsx:  const exportThemes = useCallback(async (): Promise<string> => {",
      "src/hooks/useTheme.tsx:      return await persistenceServiceRef.current.exportThemes();",
      "src/hooks/useTheme.tsx:      exportedAt: new Date().toISOString(),",
      "src/hooks/useTheme.tsx:    exportThemes,",
      "src/hooks/useTheme.tsx:export default useTheme;",
      "src/lib/utils.ts:export function cn(...inputs: ClassValue[]) {",
      "src/reducers/alarmReducer.ts:export const alarmReducer = (",
      "src/reducers/rootReducer.ts:export const rootReducer = (",
      "src/reducers/rootReducer.ts:export default rootReducer;",
      "src/reducers/subscriptionReducer.ts:export const subscriptionReducer = (",
      "src/reducers/userReducer.ts:export const userReducer = (",
      "src/services/CloudSyncService.ts:export interface CloudSyncPreferences {",
      "src/services/CloudSyncService.ts:export interface CloudSyncOptions {",
      "src/services/CloudSyncService.ts:export interface CloudSyncStatus {",
      "src/services/CloudSyncService.ts:export default CloudSyncService;",
      "src/services/__tests__/error-handler.test.ts:  describe('_error export and debugging', () => {",
      "src/services/__tests__/error-handler.test.ts:    test('exports _error data for debugging', () => {",
      "src/services/__tests__/error-handler.test.ts:      const exportData = ErrorHandler.exportErrorData();",
      "src/services/__tests__/error-handler.test.ts:      const exportData = ErrorHandler.exportErrorData();",
      "src/services/__tests__/performance-monitor.test.ts:    test('exports performance data for analysis', () => {",
      "src/services/__tests__/performance-monitor.test.ts:      const exportData = monitor.exportPerformanceData();",
      "src/services/__tests__/performance-monitor.test.ts:      expect(exportData).toMatch(/^data:application\\/json;charset=utf-8,/);",
      "src/services/__tests__/theme-persistence.test.ts:    it('should export theme data as JSON string', async () => {",
      "src/services/__tests__/theme-persistence.test.ts:      const exported = await persistenceService.exportThemes();",
      "src/services/__tests__/theme-persistence.test.ts:      expect(typeof exported).toBe('string');",
      "src/services/__tests__/theme-persistence.test.ts:      const parsedExport = JSON.parse(exported);",
      "src/services/__tests__/theme-persistence.test.ts:      expect(parsedExport).toHaveProperty('exportedAt');",
      "src/services/__tests__/theme-persistence.test.ts:      expect(parsedExport).toHaveProperty('exportVersion');",
      "src/services/accessibility-preferences.ts:export interface AccessibilityPreferences {",
      "src/services/accessibility-preferences.ts:export interface AccessibilityState extends AccessibilityPreferences {",
      "src/services/accessibility-preferences.ts:export default AccessibilityPreferencesService;",
      "src/services/additional-app-specific-test-scenarios.ts:export const onboardingFlowTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const emotionalIntelligenceTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const privacySecurityTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:    id: 'privacy-data-export-request',",
      "src/services/additional-app-specific-test-scenarios.ts:      'You can export all your Relife data at any time. This includes alarm history, sleep patterns, voice command logs, and preferences. Would you like to download your data now?',",
      "src/services/additional-app-specific-test-scenarios.ts:    tags: ['privacy', 'data-export', 'user-rights'],",
      "src/services/additional-app-specific-test-scenarios.ts:export const feedbackTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const pwaTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const tabProtectionTests: TestScenario[] = [",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificTestCategories: Record<string, TestCategory> = {",
      "src/services/additional-app-specific-test-scenarios.ts:export const additionalAppSpecificCategoryConfig = {",
      "src/services/additional-app-specific-test-scenarios.ts:export default {",
      "src/services/advanced-alarm-scheduler.ts:export class AdvancedAlarmScheduler {",
      "src/services/advanced-alarm-scheduler.ts:  static async exportSchedule(): Promise<ScheduleExport> {",
      "src/services/advanced-alarm-scheduler.ts:    return SchedulerCore.exportSchedule();",
      "src/services/advanced-analytics.ts:export interface AnalyticsInsight {",
      "src/services/advanced-analytics.ts:export interface UserAnalytics {",
      "src/services/advanced-analytics.ts:export interface TrendData {",
      "src/services/advanced-analytics.ts:export interface PeerComparison {",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/advanced-analytics.ts:export interface SeasonalPattern {",
      "src/services/advanced-analytics.ts:export interface OptimalWakeTime {",
      "src/services/advanced-analytics.ts:export interface EffectivenessForecast {",
      "src/services/advanced-analytics.ts:export interface SleepRecommendation {",
      "src/services/advanced-analytics.ts:export default AdvancedAnalyticsService;",
      "src/services/advanced-conditions-helper.ts:export const CUSTOM_CONDITION_TEMPLATES: Record<string, ConditionBasedAdjustment> = {",
      "src/services/advanced-conditions-helper.ts:export interface ConfigurationValidation {",
      "src/services/advanced-conditions-helper.ts:export interface PerformanceAnalysis {",
      "src/services/advanced-conditions-helper.ts:export class AdvancedConditionsHelper {",
      "src/services/advanced-conditions-helper.ts:export class QuickSetupScripts {",
      "src/services/ai-rewards.ts:export class AIRewardsService {",
      "src/services/ai-rewards.ts:export default AIRewardsService;",
      "src/services/alarm-access-control.ts:export class AlarmAccessControl {",
      "src/services/alarm-access-control.ts:export default AlarmAccessControl.getInstance();",
      "src/services/alarm-api-security.ts:export class AlarmAPISecurityService {",
      "src/services/alarm-api-security.ts:        exportedAt: data.metadata.exportedAt",
      "src/services/alarm-api-security.ts:          ? new Date(data.metadata.exportedAt).toISOString()",
      "src/services/alarm-api-security.ts:      'GET /alarms/export': 'alarm_export',",
      "src/services/alarm-api-security.ts:export default AlarmAPISecurityService.getInstance();",
      "src/services/alarm-backup-redundancy.ts:export class AlarmBackupRedundancyService {",
      "src/services/alarm-backup-redundancy.ts:export default AlarmBackupRedundancyService.getInstance();",
      "src/services/alarm-battle-integration.ts:export class AlarmBattleIntegrationService {",
      "src/services/alarm-battle-integration.ts:export const alarmBattleIntegration = AlarmBattleIntegrationService.getInstance();",
      "src/services/alarm-enhanced.ts:export class EnhancedAlarmService {",
      "src/services/alarm-executor.ts:export class AlarmExecutor {",
      "src/services/alarm-integrity-monitor.ts:export class AlarmIntegrityMonitor {",
      "src/services/alarm-integrity-monitor.ts:export default AlarmIntegrityMonitor.getInstance();",
      "src/services/alarm-parser.ts:export class AlarmParser {",
      "src/services/alarm-rate-limiting.ts:export class AlarmRateLimitingService {",
      "src/services/alarm-rate-limiting.ts:export default AlarmRateLimitingService.getInstance();",
      "src/services/alarm-security-integration.ts:export class AlarmSecurityIntegrationService {",
      "src/services/alarm-security-integration.ts:export default AlarmSecurityIntegrationService.getInstance();",
      "src/services/alarm-stub.ts:export const AlarmService = {",
      "src/services/alarm.ts:export class AlarmService {",
      "src/services/alarm.ts:export const enhancedAlarmTracking = {",
      "src/services/analytics-config.ts:export interface AnalyticsEnvironmentConfig {",
      "src/services/analytics-config.ts:export interface InitializationStatus {",
      "src/services/analytics-config.ts:export default AnalyticsConfigService;",
      "src/services/analytics.ts:export interface AnalyticsConfig {",
      "src/services/analytics.ts:export interface UserProperties {",
      "src/services/analytics.ts:export interface EventProperties {",
      "src/services/analytics.ts:      exportTime: new Date().toISOString(),",
      "src/services/analytics.ts:export function initializeAnalytics(",
      "src/services/analytics.ts:export function createAnalyticsConfig(environment?: string): AnalyticsConfig {",
      "src/services/analytics.ts:export const defaultAnalyticsConfigs = {",
      "src/services/analytics.ts:export default AnalyticsService;",
      "src/services/animation-manager.ts:export interface AnimationPreferences {",
      "src/services/animation-manager.ts:export interface AnimationMetrics {",
      "src/services/animation-manager.ts:export default AnimationManagerService;",
      "src/services/api-service.ts:export class ApiService {",
      "src/services/api-service.ts:export const apiService = new ApiService();",
      "src/services/api-service.ts:export default apiService;",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/app-analytics.ts:export default AppAnalyticsService;",
      "src/services/app-specific-test-scenarios.ts:export const nuclearModeTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const battleSystemTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const themeSystemTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:      'Custom theme \"Ocean Sunset\" created successfully! Features deep blue backgrounds with orange accent colors. Theme exported to library and ready for use.',",
      "src/services/app-specific-test-scenarios.ts:export const voiceAnalyticsTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const gamificationTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const sleepAnalyticsTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const offlineSyncTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const subscriptionTests: TestScenario[] = [",
      "src/services/app-specific-test-scenarios.ts:export const appSpecificTestCategories: Record<string, TestCategory> = {",
      "src/services/app-specific-test-scenarios.ts:export const appSpecificCategoryConfig = {",
      "src/services/app-specific-test-scenarios.ts:export default {",
      "src/services/audio-manager.ts:export interface AudioCacheEntry {",
      "src/services/audio-manager.ts:export interface AudioMetadata {",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/audio-manager.ts:export interface AudioPreloadConfig {",
      "src/services/audio-manager.ts:export class AudioManager {",
      "src/services/audio-manager.ts:export const audioManager = AudioManager.getInstance();",
      "src/services/base/BaseService.ts:export abstract class BaseService implements IBaseService {",
      "src/services/base/BaseService.ts:export function createServiceBuilder<T extends BaseService>(): ServiceBuilderImpl<T> {",
      "src/services/base/CacheManager.ts:export class MemoryCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class LocalStorageCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class IndexedDBCacheProvider implements CacheProvider {",
      "src/services/base/CacheManager.ts:export class CacheManager implements ICacheManager {",
      "src/services/base/CacheManager.ts:export function getCacheManager(): CacheManager {",
      "src/services/base/ServiceContainer.ts:export class ServiceContainer implements IServiceContainer {",
      "src/services/base/ServiceContainer.ts:export function getServiceContainer(): ServiceContainer {",
      "src/services/base/ServiceContainer.ts:export function registerService<T extends BaseService>(",
      "src/services/base/ServiceContainer.ts:export function getService<T extends BaseService>(name: string): T {",
      "src/services/base/ServiceContainer.ts:export function resolveService<T extends BaseService>(name: string): Promise<T> {",
      "src/services/battle.ts:export class BattleService {",
      "src/services/battle.ts:export const battleService = BattleService.getInstance();",
      "src/services/capacitor-enhanced.ts:export interface AlarmNotification {",
      "src/services/capacitor-enhanced.ts:export interface DeviceFeatures {",
      "src/services/capacitor-enhanced.ts:export class CapacitorEnhancedService {",
      "src/services/capacitor-enhanced.ts:export const capacitorEnhanced = CapacitorEnhancedService.getInstance();",
      "src/services/capacitor.ts:export interface CapacitorInitResult {",
      "src/services/capacitor.ts:export const initializeCapacitor = async (): Promise<CapacitorInitResult> => {",
      "src/services/capacitor.ts:export const requestNotificationPermissions = async (): Promise<boolean> => {",
      "src/services/capacitor.ts:export const requestPushPermissions = async (): Promise<boolean> => {",
      "src/services/capacitor.ts:export const scheduleLocalNotification = async ({",
      "src/services/capacitor.ts:export const cancelLocalNotification = async (id: number): Promise<void> => {",
      "src/services/capacitor.ts:export const setupNotificationListeners = (): void => {",
      "src/services/capacitor.ts:export const vibrate = async (duration: number = 500): Promise<void> => {",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface ThemeContext {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/contextual-themes.ts:export interface ThemeCondition {",
      "src/services/contextual-themes.ts:export const contextualThemes = ContextualThemesService.getInstance();",
      "src/services/contextual-themes.ts:export default ContextualThemesService;",
      "src/services/convertkit-service.ts:export interface ConvertKitConfig {",
      "src/services/convertkit-service.ts:export interface ConvertKitSubscriber {",
      "src/services/convertkit-service.ts:export interface ConvertKitTag {",
      "src/services/convertkit-service.ts:export interface ConvertKitForm {",
      "src/services/convertkit-service.ts:export interface ConvertKitSequence {",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/services/convertkit-service.ts:export class ConvertKitService {",
      "src/services/convertkit-service.ts:export default ConvertKitService;",
      "src/services/critical-preloader.ts:export interface CriticalAsset {",
      "src/services/critical-preloader.ts:export interface PreloadStrategy {",
      "src/services/critical-preloader.ts:export interface PreloadStats {",
      "src/services/critical-preloader.ts:export class CriticalAssetPreloader {",
      "src/services/critical-preloader.ts:export const criticalPreloader = CriticalAssetPreloader.getInstance();",
      "src/services/custom-sound-manager.ts:export interface SoundUploadResult {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundValidationResult {",
      "src/services/custom-sound-manager.ts:export class CustomSoundManager {",
      "src/services/custom-test-scenarios.ts:export interface TestScenario {",
      "src/services/custom-test-scenarios.ts:export interface TestCategory {",
      "src/services/custom-test-scenarios.ts:export interface CustomCategoryConfig {",
      "src/services/custom-test-scenarios.ts:export const customCategoryConfig: CustomCategoryConfig = {",
      "src/services/custom-test-scenarios.ts:export const voiceFeaturesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const gamingBattlesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const smartSchedulingTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const premiumFeaturesTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const sleepTrackingTests: TestScenario[] = [",
      "src/services/custom-test-scenarios.ts:export const customTestCategories: Record<string, TestCategory> = {",
      "src/services/custom-test-scenarios.ts:export interface UserContext {",
      "src/services/custom-test-scenarios.ts:export function generateDynamicTestData(context: UserContext): TestScenario[] {",
      "src/services/custom-test-scenarios.ts:export function getEnabledCustomCategories(): Record<string, TestCategory> {",
      "src/services/custom-test-scenarios.ts:export function filterTestsByFeatureAccess(",
      "src/services/custom-test-scenarios.ts:export function getAllCustomTests(isPremium: boolean = false): TestScenario[] {",
      "src/services/custom-test-scenarios.ts:export function validateTestScenario(test: TestScenario): boolean {",
      "src/services/custom-test-scenarios.ts:export function getCategoryStats(): Record<",
      "src/services/custom-test-scenarios.ts:export default {",
      "src/services/device-capabilities.ts:export interface DeviceCapabilities {",
      "src/services/device-capabilities.ts:export interface DevicePerformanceMetrics {",
      "src/services/device-capabilities.ts:export type DeviceTier = 'low-end' | 'mid-range' | 'high-end';",
      "src/services/device-capabilities.ts:export interface AdaptiveConfig {",
      "src/services/device-capabilities.ts:export class DeviceCapabilityDetector {",
      "src/services/device-capabilities.ts:export const deviceCapabilities = DeviceCapabilityDetector.getInstance();",
      "src/services/device-capabilities.ts:export interface PerformanceConfig {",
      "src/services/device-capabilities.ts:export const getDeviceTier = (): DeviceTier | null => {",
      "src/services/device-capabilities.ts:export const isLowEndDevice = (): boolean => {",
      "src/services/device-capabilities.ts:export const getAdaptiveConfig = (): AdaptiveConfig | null => {",
      "src/services/device-capabilities.ts:export const shouldReduceAnimations = (): boolean => {",
      "src/services/email-campaign.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaign.ts:export class EmailCampaignService {",
      "src/services/email-campaign.ts:export default EmailCampaignService;",
      "src/services/email-campaign.ts:export const emailCampaignService = EmailCampaignService.getInstance();",
      "src/services/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/services/email-campaigns.ts:export class EmailCampaignService {",
      "src/services/email-campaigns.ts:export default EmailCampaignService;",
      "src/services/emotional-intelligence.ts:export class EmotionalIntelligenceService {",
      "src/services/emotional-intelligence.ts:export const emotionalIntelligenceService = EmotionalIntelligenceService.getInstance();",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-alarm.ts:export class EnhancedAlarmService extends BaseService implements AlarmServiceInterface {",
      "src/services/enhanced-alarm.ts:export const createAlarmService = (",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceConfig extends ServiceConfig {",
      "src/services/enhanced-analytics.ts:export interface UserProperties {",
      "src/services/enhanced-analytics.ts:export interface EventProperties {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsEvent {",
      "src/services/enhanced-analytics.ts:export interface PerformanceMetrics {",
      "src/services/enhanced-analytics.ts:export interface WebVitals {",
      "src/services/enhanced-analytics.ts:export interface UserJourneyStep {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceDependencies {",
      "src/services/enhanced-analytics.ts:export class EnhancedAnalyticsService",
      "src/services/enhanced-analytics.ts:export const createAnalyticsService = (",
      "src/services/enhanced-analytics.ts:export const analyticsService = createAnalyticsService();",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-battle.ts:export class EnhancedBattleService",
      "src/services/enhanced-battle.ts:export const createBattleService = (",
      "src/services/enhanced-battle.ts:export const battleService = createBattleService();",
      "src/services/enhanced-cache-manager.ts:export interface CacheEntry extends AudioCacheEntry {",
      "src/services/enhanced-cache-manager.ts:export interface CachePolicy {",
      "src/services/enhanced-cache-manager.ts:export interface CacheStats {",
      "src/services/enhanced-cache-manager.ts:export interface CacheWarmingConfig {",
      "src/services/enhanced-cache-manager.ts:export class EnhancedCacheManager {",
      "src/services/enhanced-cache-manager.ts:export const enhancedCacheManager = EnhancedCacheManager.getInstance();",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/enhanced-calendar-service.ts:export default EnhancedCalendarService;",
      "src/services/enhanced-location-service.ts:export class EnhancedLocationService {",
      "src/services/enhanced-location-service.ts:export default EnhancedLocationService;",
      "src/services/enhanced-offline-storage.ts:export class EnhancedOfflineStorage extends OfflineStorage {",
      "src/services/enhanced-offline-storage.ts:export default EnhancedOfflineStorage.getInstance();",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorConfig extends ServiceConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface ThresholdConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface AlertChannel {",
      "src/services/enhanced-performance-monitor.ts:export interface SeverityLevel {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorDependencies {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface WebVitalsMetrics {",
      "src/services/enhanced-performance-monitor.ts:export interface UserInteraction {",
      "src/services/enhanced-performance-monitor.ts:export interface ResourceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface MemoryMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface NetworkMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceReport {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceAlert {",
      "src/services/enhanced-performance-monitor.ts:export interface DeviceInfo {",
      "src/services/enhanced-performance-monitor.ts:export interface AppInfo {",
      "src/services/enhanced-performance-monitor.ts:export class EnhancedPerformanceMonitor",
      "src/services/enhanced-performance-monitor.ts:export const createPerformanceMonitor = (",
      "src/services/enhanced-performance-monitor.ts:export const performanceMonitor = createPerformanceMonitor();",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface WakeUpFeedback {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface OptimalTimeSlot {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface AdaptationRecord {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartRecommendation {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export class EnhancedSmartAlarmScheduler extends SmartAlarmScheduler {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export default EnhancedSmartAlarmScheduler;",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceConfig extends ServiceConfig {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceDependencies {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionCheckResult {",
      "src/services/enhanced-subscription.ts:export class EnhancedSubscriptionService",
      "src/services/enhanced-subscription.ts:export const createSubscriptionService = (",
      "src/services/enhanced-voice.ts:export interface VoiceServiceConfig extends ServiceConfig {",
      "src/services/enhanced-voice.ts:export interface VoiceServiceDependencies {",
      "src/services/enhanced-voice.ts:export interface VoiceSettings {",
      "src/services/enhanced-voice.ts:export interface AudioClip {",
      "src/services/enhanced-voice.ts:export class EnhancedVoiceService extends BaseService implements VoiceServiceInterface {",
      "src/services/enhanced-voice.ts:export const createVoiceService = (",
      "src/services/enhanced-voice.ts:export const voiceService = createVoiceService();",
      "src/services/error-handler.ts:export interface ErrorContext {",
      "src/services/error-handler.ts:export interface ErrorMetrics {",
      "src/services/error-handler.ts:export const ErrorHandler = new ErrorHandlerService();",
      "src/services/error-handler.ts:export type { ErrorEntry, ErrorContext, ErrorCategory, ErrorAnalytics };",
      "src/services/feature-gate-service.ts:export default FeatureGateService;",
      "src/services/health-tracker-integration.ts:export interface SleepData {",
      "src/services/health-tracker-integration.ts:export interface ActivityData {",
      "src/services/health-tracker-integration.ts:export interface HealthInsight {",
      "src/services/health-tracker-integration.ts:export interface CircadianProfile {",
      "src/services/health-tracker-integration.ts:export interface HealthConfig {",
      "src/services/health-tracker-integration.ts:export default HealthTrackerIntegration;",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadQueueItem {",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadStats {",
      "src/services/lazy-audio-loader.ts:export class LazyAudioLoader {",
      "src/services/lazy-audio-loader.ts:export const lazyAudioLoader = LazyAudioLoader.getInstance();",
      "src/services/ml-alarm-optimizer.ts:export class MLAlarmOptimizer {",
      "src/services/ml-alarm-optimizer.ts:export default MLAlarmOptimizer;",
      "src/services/mobile-performance.ts:export interface PerformanceConfig {",
      "src/services/mobile-performance.ts:export interface PerformanceMetrics {",
      "src/services/mobile-performance.ts:export class MobilePerformanceService {",
      "src/services/mobile-performance.ts:export const mobilePerformance = MobilePerformanceService.getInstance();",
      "src/services/mobile-performance.ts:export type { PerformanceConfig, PerformanceMetrics };",
      "src/services/mobile-touch.ts:export interface TouchGestureOptions {",
      "src/services/mobile-touch.ts:export interface TouchPoint {",
      "src/services/mobile-touch.ts:export class MobileTouchService {",
      "src/services/mobile-touch.ts:export const mobileTouchService = MobileTouchService.getInstance();",
      "src/services/notification.ts:export interface NotificationOptions {",
      "src/services/notification.ts:export interface NotificationAction {",
      "src/services/notification.ts:export interface ScheduledNotification {",
      "src/services/notification.ts:export class NotificationService {",
      "src/services/nuclear-mode.ts:export class NuclearModeService {",
      "src/services/nuclear-mode.ts:export const nuclearModeService = NuclearModeService.getInstance();",
      "src/services/offline-analytics.ts:export class OfflineAnalyticsService {",
      "src/services/offline-analytics.ts:export default OfflineAnalyticsService;",
      "src/services/offline-gaming.ts:export class OfflineGamingService {",
      "src/services/offline-gaming.ts:export default OfflineGamingService;",
      "src/services/offline-manager.ts:export interface SyncStatus {",
      "src/services/offline-manager.ts:export interface OfflineCapabilities {",
      "src/services/offline-manager.ts:export class OfflineManager {",
      "src/services/offline-manager.ts:  static async exportData(): Promise<{",
      "src/services/offline-manager.ts:export default OfflineManager;",
      "src/services/offline-sleep-tracker.ts:export class OfflineSleepTracker {",
      "src/services/offline-sleep-tracker.ts:export default OfflineSleepTracker;",
      "src/services/offline-storage.ts:export class OfflineStorage {",
      "src/services/offline-storage.ts:  async exportData(): Promise<string> {",
      "src/services/offline-storage.ts:        exportTimestamp: new Date().toISOString(),",
      "src/services/offline-storage.ts:export default OfflineStorage.getInstance();",
      "src/services/performance-analytics.ts:export interface PerformanceMetric {",
      "src/services/performance-analytics.ts:export interface PerformanceThresholds {",
      "src/services/performance-analytics.ts:export interface WebVitalsMetrics {",
      "src/services/performance-analytics.ts:export default PerformanceAnalyticsService;",
      "src/services/performance-budget-manager.ts:export class PerformanceBudgetManager {",
      "src/services/performance-budget-manager.ts:export const performanceBudgetManager = PerformanceBudgetManager.getInstance();",
      "src/services/performance-monitor.ts:export class PerformanceMonitor {",
      "src/services/performance-monitor.ts:export default PerformanceMonitor.getInstance();",
      "src/services/performance-monitor.ts:export type { PerformanceTrends };",
      "src/services/predictive-analytics-service.ts:export class PredictiveAnalyticsService {",
      "src/services/predictive-analytics-service.ts:export default PredictiveAnalyticsService;",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/premium-theme-animations.ts:export interface PremiumAnimationEffects {",
      "src/services/premium-theme-animations.ts:export default PremiumThemeAnimationService;",
      "src/services/premium-voice.ts:export class PremiumVoiceService {",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/services/premium.ts:export interface SubscriptionPlan {",
      "src/services/premium.ts:export class PremiumService {",
      "src/services/premium.ts:export const premiumService = PremiumService.getInstance();",
      "src/services/privacy-compliance.ts:export interface ConsentSettings {",
      "src/services/privacy-compliance.ts:export interface PrivacySettings {",
      "src/services/privacy-compliance.ts:export interface UserDataRequest {",
      "src/services/privacy-compliance.ts:  type: 'export' | 'delete' | 'rectify' | 'portability';",
      "src/services/privacy-compliance.ts:export interface ConsentEvent {",
      "src/services/privacy-compliance.ts:    const requestId = `export_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;",
      "src/services/privacy-compliance.ts:      // Simulate data export process",
      "src/services/privacy-compliance.ts:        exportedAt: new Date().toISOString(),",
      "src/services/privacy-compliance.ts:      console.info('User data export created:', {",
      "src/services/privacy-compliance.ts:        dataSize: JSON.stringify(exportData).length,",
      "src/services/privacy-compliance.ts:      console.error('Failed to create data export:', _error);",
      "src/services/privacy-compliance.ts:   * Get analytics data for export (mock implementation)",
      "src/services/privacy-compliance.ts:   * Get error data for export (mock implementation)",
      "src/services/privacy-compliance.ts:   * Get performance data for export (mock implementation)",
      "src/services/privacy-compliance.ts:export default PrivacyComplianceService;",
      "src/services/push-notifications.ts:export interface PushNotificationPayload {",
      "src/services/push-notifications.ts:export interface PushNotificationSettings {",
      "src/services/push-notifications.ts:export interface PushSubscription {",
      "src/services/push-notifications.ts:export class PushNotificationService {",
      "src/services/pwa-manager.ts:export class PWAManager {",
      "src/services/pwa-manager.ts:export const pwaManager = PWAManager.getInstance();",
      "src/services/pwa-service.ts:export interface PWACapabilities {",
      "src/services/pwa-service.ts:export interface PWAInstallPrompt {",
      "src/services/pwa-service.ts:export interface BackgroundSyncStatus {",
      "src/services/pwa-service.ts:export interface PushSubscriptionInfo {",
      "src/services/pwa-service.ts:export class PWAService {",
      "src/services/pwa-service.ts:export default PWAService;",
      "src/services/real-time-smart-adapter.ts:export interface RealTimeAdaptationConfig {",
      "src/services/real-time-smart-adapter.ts:export interface AdaptationTrigger {",
      "src/services/real-time-smart-adapter.ts:export interface SmartAlarmStatus {",
      "src/services/real-time-smart-adapter.ts:export class RealTimeSmartAdapter {",
      "src/services/real-time-smart-adapter.ts:export default RealTimeSmartAdapter;",
      "src/services/realtime-service.ts:export interface RealtimeConfig {",
      "src/services/realtime-service.ts:export interface PresenceData {",
      "src/services/realtime-service.ts:export interface LiveUpdate {",
      "src/services/realtime-service.ts:export interface PushNotificationPayload {",
      "src/services/realtime-service.ts:export default RealtimeService;",
      "src/services/revenue-analytics.ts:export interface RevenueMetrics {",
      "src/services/revenue-analytics.ts:export interface CohortData {",
      "src/services/revenue-analytics.ts:export interface UserJourney {",
      "src/services/revenue-analytics.ts:export interface FeatureAdoptionMetrics {",
      "src/services/revenue-analytics.ts:export class RevenueAnalyticsService {",
      "src/services/revenue-analytics.ts:export default RevenueAnalyticsService.getInstance();",
      "src/services/scheduler-core.ts:export class SchedulerCore {",
      "src/services/scheduler-core.ts:  static async exportSchedule(): Promise<ScheduleExport> {",
      "src/services/scheduler-core.ts:      exportDate: new Date().toISOString(),",
      "src/services/secure-alarm-storage.ts:export class SecureAlarmStorageService {",
      "src/services/secure-alarm-storage.ts:export default SecureAlarmStorageService.getInstance();",
      "src/services/secure-push-notification.ts:export interface SecurePushNotificationPayload {",
      "src/services/secure-push-notification.ts:export interface PushNotificationSettings {",
      "src/services/secure-push-notification.ts:export interface SecurePushSubscription {",
      "src/services/secure-push-notification.ts:export class SecurePushNotificationService {",
      "src/services/secure-push-notification.ts:export default SecurePushNotificationService.getInstance();",
      "src/services/security-monitoring-forensics.ts:export class SecurityMonitoringForensicsService {",
      "src/services/security-monitoring-forensics.ts:export default SecurityMonitoringForensicsService.getInstance();",
      "src/services/security.ts:export interface PasswordStrength {",
      "src/services/security.ts:export default SecurityService.getInstance();",
      "src/services/sentry.ts:export interface SentryConfig {",
      "src/services/sentry.ts:export interface UserContext {",
      "src/services/sentry.ts:export interface ErrorContext {",
      "src/services/sentry.ts:export const defaultSentryConfigs = {",
      "src/services/sentry.ts:export default SentryService;",
      "src/services/service-worker-manager.ts:export { ServiceWorkerManager };",
      "src/services/service-worker-manager.ts:// Initialize and export default instance",
      "src/services/service-worker-manager.ts:export default swManager;",
      "src/services/sleep-analysis.ts:export interface SleepSession {",
      "src/services/sleep-analysis.ts:export interface SleepStage {",
      "src/services/sleep-analysis.ts:export interface EnvironmentData {",
      "src/services/sleep-analysis.ts:export interface WearableData {",
      "src/services/sleep-analysis.ts:export interface SleepPattern {",
      "src/services/sleep-analysis.ts:export interface DayPattern {",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/sleep-analysis.ts:export interface OptimalWakeWindow {",
      "src/services/sleep-analysis.ts:export class SleepAnalysisService {",
      "src/services/sleep-analysis.ts:export default SleepAnalysisService;",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartSchedule {",
      "src/services/smart-alarm-scheduler.ts:export interface AlarmOptimization {",
      "src/services/smart-alarm-scheduler.ts:export interface SleepGoal {",
      "src/services/smart-alarm-scheduler.ts:export interface UserScheduleAnalysis {",
      "src/services/smart-alarm-scheduler.ts:export interface ScheduleRecommendation {",
      "src/services/smart-alarm-scheduler.ts:export class SmartAlarmScheduler {",
      "src/services/smart-alarm-scheduler.ts:export default SmartAlarmScheduler;",
      "src/services/smart-notification-service.ts:export interface NotificationContext {",
      "src/services/smart-notification-service.ts:export interface SmartNotificationConfig {",
      "src/services/smart-notification-service.ts:export interface AdaptiveNotification {",
      "src/services/smart-notification-service.ts:export default SmartNotificationService;",
      "src/services/sound-effects.ts:export interface SoundEffectConfig {",
      "src/services/sound-effects.ts:export type SoundTheme =",
      "src/services/sound-effects.ts:export interface SoundEffectSettings {",
      "src/services/sound-effects.ts:export type SoundEffectId =",
      "src/services/sound-effects.ts:export const soundEffectsService = SoundEffectsService.getInstance();",
      "src/services/sound-effects.ts:export default SoundEffectsService;",
      "src/services/stripe-service.ts:export default StripeService;",
      "src/services/struggling-sam-api.ts:export class StrugglingSamApiService {",
      "src/services/struggling-sam-api.ts:export default StrugglingSamApiService;",
      "src/services/subscription-service.ts:export default SubscriptionService;",
      "src/services/subscription.ts:export class SubscriptionService {",
      "src/services/supabase.ts:export const supabase: SupabaseClient = createClient(",
      "src/services/supabase.ts:export class SupabaseService {",
      "src/services/theme-accessibility.ts:export default ThemeAccessibilityService;",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/theme-combinations.ts:export type ThemeMood =",
      "src/services/theme-combinations.ts:export type TimeOfDay =",
      "src/services/theme-combinations.ts:export type WeatherCondition =",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-combinations.ts:export interface ThemeCollection {",
      "src/services/theme-combinations.ts:  exportUserThemes(): string {",
      "src/services/theme-combinations.ts:export const themeCombinations = ThemeCombinationsService.getInstance();",
      "src/services/theme-combinations.ts:export default ThemeCombinationsService;",
      "src/services/theme-performance.ts:export default ThemePerformanceService;",
      "src/services/theme-persistence.ts:  async exportThemes(): Promise<string> {",
      "src/services/theme-persistence.ts:        exportedAt: new Date().toISOString(),",
      "src/services/theme-persistence.ts:        exportVersion: this.CURRENT_VERSION,",
      "src/services/theme-persistence.ts:        'Failed to export themes',",
      "src/services/theme-persistence.ts:export default ThemePersistenceService;",
      "src/services/typed-realtime-service.ts:export class TypedRealtimeService extends EventEmitter implements RealtimeService {",
      "src/services/typed-realtime-service.ts:export class TypedRealtimeServiceFactory {",
      "src/services/typed-realtime-service.ts:export default TypedRealtimeService;",
      "src/services/types/media.ts:export interface CustomSound {",
      "src/services/types/media.ts:export type SoundCategory =",
      "src/services/types/media.ts:export interface Playlist {",
      "src/services/types/media.ts:export interface PlaylistSound {",
      "src/services/types/media.ts:export interface MotivationalQuote {",
      "src/services/types/media.ts:export type QuoteCategory =",
      "src/services/types/media.ts:export interface AudioLoadOptions {",
      "src/services/types/media.ts:export interface AudioPlaybackOptions {",
      "src/services/types/media.ts:export interface MediaLibrary {",
      "src/services/types/media.ts:export interface StorageInfo {",
      "src/services/types/media.ts:export interface CacheSettings {",
      "src/services/types/media.ts:export interface CompressionSettings {",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/types/media.ts:export interface AudioFormat {",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/services/types/media.ts:export interface AudioAnalysis {",
      "src/services/types/media.ts:export interface SilenceSegment {",
      "src/services/types/media.ts:export interface ModerationResult {",
      "src/services/types/media.ts:export interface ContentModerationSettings {",
      "src/services/types/performance.ts:export interface PerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/types/performance.ts:export interface PerformanceThresholds {",
      "src/services/types/performance.ts:export interface RenderingOptimizations {",
      "src/services/types/performance.ts:export interface MemoryOptimizations {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface AdaptivePerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceMetric {",
      "src/services/types/performance.ts:export interface FrameRateMetrics {",
      "src/services/types/performance.ts:export interface MemoryMetrics {",
      "src/services/types/performance.ts:export interface NetworkMetrics {",
      "src/services/types/performance.ts:export interface RenderMetrics {",
      "src/services/types/performance.ts:export interface UserExperienceMetrics {",
      "src/services/types/performance.ts:export interface PerformanceSnapshot {",
      "src/services/types/performance.ts:export interface PerformanceAlert {",
      "src/services/types/performance.ts:export interface DeviceAdaptation {",
      "src/services/types/performance.ts:export type OptimizationStrategy = 'none' | 'conservative' | 'balanced' | 'aggressive';",
      "src/services/types/performance.ts:export interface ComponentOptimization {",
      "src/services/types/performance.ts:export interface AssetOptimization {",
      "src/services/types/performance.ts:export interface CacheOptimization {",
      "src/services/user-testing.ts:export interface UserTestSession {",
      "src/services/user-testing.ts:export interface DeviceInfo {",
      "src/services/user-testing.ts:export interface UserFeedback {",
      "src/services/user-testing.ts:export interface ABTest {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface ABTestMetric {",
      "src/services/user-testing.ts:export interface UsabilityEvent {",
      "src/services/user-testing.ts:export interface BugReport {",
      "src/services/user-testing.ts:export class UserTestingService {",
      "src/services/user-testing.ts:export default UserTestingService;",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:export const visualAlarmThemes = VisualAlarmThemesService.getInstance();",
      "src/services/visual-alarm-themes.ts:export default VisualAlarmThemesService;",
      "src/services/voice-ai-enhanced.ts:export interface VoicePersonality {",
      "src/services/voice-ai-enhanced.ts:export interface ContextualResponse {",
      "src/services/voice-ai-enhanced.ts:export interface VoiceLearningData {",
      "src/services/voice-ai-enhanced.ts:export default VoiceAIEnhancedService;",
      "src/services/voice-biometrics.ts:export interface VoicePrint {",
      "src/services/voice-biometrics.ts:export interface VoiceTrainingSession {",
      "src/services/voice-biometrics.ts:export interface VoiceAuthentication {",
      "src/services/voice-biometrics.ts:export interface VoiceMoodAnalysis {",
      "src/services/voice-biometrics.ts:export default VoiceBiometricsService;",
      "src/services/voice-enhanced.ts:export class VoiceServiceEnhanced {",
      "src/services/voice-enhanced.ts:export const VoiceService = VoiceServiceEnhanced;",
      "src/services/voice-pro.ts:export interface VoiceProvider {",
      "src/services/voice-pro.ts:export interface VoiceOption {",
      "src/services/voice-pro.ts:export interface VoiceSettings {",
      "src/services/voice-pro.ts:export interface CachedVoiceMessage {",
      "src/services/voice-pro.ts:export interface RecognitionResult {",
      "src/services/voice-pro.ts:export class VoiceProService {",
      "src/services/voice-pro.ts:export const VoiceService = VoiceProService;",
      "src/services/voice-recognition-enhanced.ts:export interface EnhancedVoiceCommand {",
      "src/services/voice-recognition-enhanced.ts:export interface MultiLanguageConfig {",
      "src/services/voice-recognition-enhanced.ts:export interface GestureRecognition {",
      "src/services/voice-recognition-enhanced.ts:export interface AdvancedRecognitionConfig {",
      "src/services/voice-recognition-enhanced.ts:export default VoiceRecognitionEnhancedService;",
      "src/services/voice-recognition.ts:export interface VoiceCommand {",
      "src/services/voice-recognition.ts:export interface RecognitionConfig {",
      "src/services/voice-recognition.ts:export class VoiceRecognitionService {",
      "src/services/voice-recognition.ts:export default VoiceRecognitionService;",
      "src/services/voice-smart-integration.ts:export interface SmartHomeIntegration {",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/services/voice-smart-integration.ts:export interface VoiceIntegrationConfig {",
      "src/services/voice-smart-integration.ts:export interface VoiceShortcut {",
      "src/services/voice-smart-integration.ts:export interface VoiceAction {",
      "src/services/voice-smart-integration.ts:export interface VoiceContext {",
      "src/services/voice-smart-integration.ts:export default VoiceSmartIntegrationService;",
      "src/services/voice.ts:export class VoiceService {",
      "src/stories/Button.stories.ts:export default meta;",
      "src/stories/Button.stories.ts:export const Secondary: Story = {",
      "src/stories/Button.stories.ts:export const Large: Story = {",
      "src/stories/Button.tsx:export interface ButtonProps {",
      "src/stories/Header.stories.ts:export default meta;",
      "src/stories/Header.stories.ts:export const LoggedIn: Story = {",
      "src/stories/Header.stories.ts:export const LoggedOut: Story = {};",
      "src/stories/Header.tsx:export interface HeaderProps {",
      "src/stories/Header.tsx:export const Header = ({ _user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (",
      "src/stories/Page.stories.ts:export default meta;",
      "src/stories/Page.stories.ts:export const LoggedOut: Story = {};",
      "src/stories/Page.stories.ts:export const LoggedIn: Story = {",
      "src/stories/Page.tsx:export default Page;",
      "src/stories/components/AlarmForm.stories.tsx:export default meta;",
      "src/stories/components/AlarmForm.stories.tsx:export const NewAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const PremiumUser: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const EditPremiumAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const WeekendAlarm: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const FormValidationExample: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const ResponsiveDesign: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const DarkMode: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const AccessibilityShowcase: Story = {",
      "src/stories/components/AlarmForm.stories.tsx:export const InteractivePlayground: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export default meta;",
      "src/stories/components/Dashboard.stories.tsx:export const EmptyState: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const LoadingState: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const SingleAlarm: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const OnlyDisabledAlarms: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const ResponsiveDesign: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const DarkMode: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const AccessibilityFocused: Story = {",
      "src/stories/components/Dashboard.stories.tsx:export const UserJourneyScenarios: Story = {",
      "src/stories/ui/Button.stories.tsx:export default meta;",
      "src/stories/ui/Button.stories.tsx:export const Default: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Destructive: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Outline: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Secondary: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Large: Story = {",
      "src/stories/ui/Button.stories.tsx:export const IconOutline: Story = {",
      "src/stories/ui/Button.stories.tsx:export const Disabled: Story = {",
      "src/stories/ui/Button.stories.tsx:export const InteractiveShowcase: Story = {",
      "src/stories/ui/Button.stories.tsx:export const AccessibilityTest: Story = {",
      "src/stories/ui/Card.stories.tsx:export default meta;",
      "src/stories/ui/Card.stories.tsx:export const Default: Story = {",
      "src/stories/ui/Card.stories.tsx:export const WithFooter: Story = {",
      "src/stories/ui/Card.stories.tsx:export const UserProfile: Story = {",
      "src/stories/ui/Card.stories.tsx:export const FeatureCard: Story = {",
      "src/templates/email-templates.ts:export interface EmailTemplateConfig {",
      "src/templates/email-templates.ts:export interface TemplateVariable {",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/templates/email-templates.ts:export const generateBaseTemplate = (",
      "src/templates/email-templates.ts:export const EMAIL_TEMPLATES: Record<PersonaType, EmailTemplateConfig[]> = {",
      "src/templates/email-templates.ts:export default EMAIL_TEMPLATES;",
      "src/test-setup.ts:export const testUtils = {",
      "src/tests/alarm-themes-integration.test.ts:    it('should handle export/import of _user themes', () => {",
      "src/tests/alarm-themes-integration.test.ts:      const exportData = themeCombinations.exportUserThemes();",
      "src/tests/alarm-themes-integration.test.ts:      expect(exportData).toBeDefined();",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/tests/alarm-themes-integration.test.ts:export default {};",
      "src/themes/premium-themes.ts:export const oceanBreezeTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const sunsetGlowTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const forestDreamTheme: ThemeConfig = {",
      "src/themes/premium-themes.ts:export const midnightCosmosTheme: ThemeConfig = {",
      "src/types/alarm-scheduling.ts:export interface RecurrencePattern {",
      "src/types/alarm-scheduling.ts:export interface ConditionalRule {",
      "src/types/alarm-scheduling.ts:export interface LocationTrigger {",
      "src/types/alarm-scheduling.ts:export interface SmartOptimization {",
      "src/types/alarm-scheduling.ts:export interface SeasonalAdjustment {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:export interface SunSchedule {",
      "src/types/alarm-scheduling.ts:export interface SchedulingConfig {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm-scheduling.ts:export const validateSchedulingConfig = (_config: SchedulingConfig): boolean => {",
      "src/types/alarm-scheduling.ts:export const isRecurrencePattern = (value: any): value is RecurrencePattern => {",
      "src/types/alarm-scheduling.ts:export const isConditionalRule = (value: any): value is ConditionalRule => {",
      "src/types/alarm-scheduling.ts:export const isLocationTrigger = (value: any): value is LocationTrigger => {",
      "src/types/alarm.d.ts:export interface LocationActionParameters {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/alarm.d.ts:  export class AlarmService {",
      "src/types/analytics.d.ts:export interface RevenueRecord {",
      "src/types/analytics.d.ts:export interface DailyMetric {",
      "src/types/analytics.d.ts:export interface MonthlySummary {",
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/analytics.d.ts:export type SubscriptionStatus = 'active' | 'canceled' | 'unpaid' | 'trialing';",
      "src/types/analytics.d.ts:export type RevenueEventType =",
      "src/types/analytics.d.ts:export interface UserJourney {",
      "src/types/analytics.d.ts:export interface RevenueEventInput {",
      "src/types/analytics.d.ts:export interface FeatureAdoptionMetrics {",
      "src/types/analytics.d.ts:export interface TierCorrelation {",
      "src/types/analytics.d.ts:export interface Refund {",
      "src/types/analytics.d.ts:export interface Discount {",
      "src/types/analytics.d.ts:export interface ChartDataPoint {",
      "src/types/analytics.d.ts:export interface RevenueChartData {",
      "src/types/analytics.d.ts:export interface CohortData {",
      "src/types/analytics.d.ts:export interface CohortAnalysis {",
      "src/types/analytics.d.ts:export interface AnalyticsEventProperties {",
      "src/types/analytics.d.ts:export interface RevenueReport {",
      "src/types/analytics.d.ts:export interface RevenueMetrics {",
      "src/types/analytics.d.ts:export interface SubscriptionRecord {",
      "src/types/analytics.d.ts:export interface UserEventRecord {",
      "src/types/analytics.d.ts:export interface FeatureUsageRecord {",
      "src/types/analytics.d.ts:export type TimeRange = '7d' | '30d' | '90d' | '1y';",
      "src/types/analytics.d.ts:export type ReportFormat = 'json' | 'csv';",
      "src/types/analytics.d.ts:export interface CacheEntry<T> {",
      "src/types/analytics.d.ts:export type MetricsCache = Map<string, CacheEntry<any>>;",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse;",
      "src/types/api-responses.ts:export interface ContactListSubscription {",
      "src/types/api-responses.ts:export interface SubscribeContactResponse {",
      "src/types/api-responses.ts:export interface ContactAutomation {",
      "src/types/api-responses.ts:export interface AddContactToAutomationResponse {",
      "src/types/api-responses.ts:export interface ContactTag {",
      "src/types/api-responses.ts:export interface AddTagToContactResponse {",
      "src/types/api-responses.ts:export interface CampaignStats {",
      "src/types/api-responses.ts:export interface AutomationStats {",
      "src/types/api-responses.ts:export interface ConvertKitAccount {",
      "src/types/api-responses.ts:export interface BroadcastStats {",
      "src/types/api-responses.ts:export interface GrowthStats {",
      "src/types/api-responses.ts:export interface UserFeatures {",
      "src/types/api-responses.ts:export interface EngagementMetrics {",
      "src/types/api-responses.ts:export interface ConvertKitCustomFields {",
      "src/types/api-responses.ts:export interface MailchimpMergeFields {",
      "src/types/api-responses.ts:export interface TestServiceResponse<T = any> {",
      "src/types/api-responses.ts:export interface NotificationExtras {",
      "src/types/api-responses.ts:export interface CacheGetResponse<T = any> {",
      "src/types/api-responses.ts:export interface CacheSetResponse {",
      "src/types/api-responses.ts:export interface PerformanceMetadata {",
      "src/types/api-responses.ts:export interface AnalyticsMetadata {",
      "src/types/api-responses.ts:export interface FeatureContext {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api-responses.ts:export const isSuccessResponse = <T>(",
      "src/types/api-responses.ts:export const isErrorResponse = (response: ApiResponse): response is ErrorResponse => {",
      "src/types/api-responses.ts:export const createSuccessResponse = <T>(data: T): SuccessResponse<T> => ({",
      "src/types/api-responses.ts:export const createErrorResponse = (",
      "src/types/api-responses.ts:export namespace ActiveCampaign {",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:export namespace ConvertKit {",
      "src/types/api-responses.ts:  export type AccountResponse = ApiResponse<ConvertKitAccount>;",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:  export type CustomFields = ConvertKitCustomFields;",
      "src/types/api-responses.ts:export namespace AI {",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:export namespace Testing {",
      "src/types/api-responses.ts:  export type MockResponse<T> = ApiResponse<TestServiceResponse<T>>;",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts:export interface ApiResponse<T = unknown> {",
      "src/types/api.ts:export interface ApiError {",
      "src/types/api.ts:export interface PaginationParams {",
      "src/types/api.ts:export interface PaginationMeta {",
      "src/types/api.ts:export interface PaginatedResponse<T> {",
      "src/types/api.ts:export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';",
      "src/types/api.ts:export interface HttpRequestConfig {",
      "src/types/api.ts:export interface HttpResponse<T = unknown> {",
      "src/types/api.ts:export interface HttpClient {",
      "src/types/api.ts:export interface HealthCheckResponse {",
      "src/types/api.ts:export interface CreateUserRequest {",
      "src/types/api.ts:export interface UpdateUserRequest {",
      "src/types/api.ts:export interface UserStatsResponse {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/api.ts:export interface PerformanceMetric {",
      "src/types/api.ts:export interface WebVitalsData {",
      "src/types/api.ts:export interface ErrorReportData {",
      "src/types/api.ts:export interface PerformanceDashboardResponse {",
      "src/types/api.ts:export interface SupabaseAuthResponse {",
      "src/types/api.ts:export interface StripeSubscriptionResponse {",
      "src/types/api.ts:export interface StripePaymentIntentResponse {",
      "src/types/api.ts:export interface ConvertKitSubscriberResponse {",
      "src/types/api.ts:export interface GitHubUserResponse {",
      "src/types/api.ts:export interface SocialMediaPostResponse {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export type ApiRequest =",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/api.ts:export interface ApiEndpoint {",
      "src/types/api.ts:export interface ApiEndpoints {",
      "src/types/api.ts:export interface ApiConfiguration {",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:export interface UserState {",
      "src/types/app-state.ts:export interface SubscriptionState {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/app-state.ts:export type AlarmAction =",
      "src/types/app-state.ts:export type UserAction =",
      "src/types/app-state.ts:export type SubscriptionAction =",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:export const createAppSelectors = (state: AppState) => ({",
      "src/types/app-state.ts:export const validateAlarmState = (state: AlarmState): boolean => {",
      "src/types/app-state.ts:export const validateUserState = (state: UserState): boolean => {",
      "src/types/app-state.ts:export const validateSubscriptionState = (state: SubscriptionState): boolean => {",
      "src/types/app-state.ts:export const isAlarmState = (value: any): value is AlarmState => {",
      "src/types/app-state.ts:export const isUserState = (value: any): value is UserState => {",
      "src/types/app-state.ts:export const isSubscriptionState = (value: any): value is SubscriptionState => {",
      "src/types/configuration-interfaces.ts:export interface ConvertKitAutomationParameters {",
      "src/types/configuration-interfaces.ts:export interface EmotionalMessageVariables {",
      "src/types/configuration-interfaces.ts:export interface PerformanceEventMetadata {",
      "src/types/configuration-interfaces.ts:export interface AnalyticsEventProperties {",
      "src/types/configuration-interfaces.ts:export interface FormFieldData {",
      "src/types/configuration-interfaces.ts:export interface FeatureTrackingContext {",
      "src/types/configuration-interfaces.ts:export interface NotificationExtrasData {",
      "src/types/configuration-interfaces.ts:export interface CacheConfiguration {",
      "src/types/configuration-interfaces.ts:export const isEmotionalMessageVariables = (",
      "src/types/configuration-interfaces.ts:export const isAnalyticsEventProperties = (",
      "src/types/configuration-interfaces.ts:export const isPerformanceEventMetadata = (",
      "src/types/configuration-interfaces.ts:export const DEFAULT_CACHE_CONFIG: CacheConfiguration = {",
      "src/types/configuration-interfaces.ts:export const DEFAULT_PERFORMANCE_METADATA: PerformanceEventMetadata = {",
      "src/types/configuration-interfaces.ts:export const validateFormFieldData = (data: FormFieldData): boolean => {",
      "src/types/configuration-interfaces.ts:export const sanitizeCustomFields = (customFields: any): Record<string, any> => {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundTheme {",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeUISounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAmbientSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundAssignment {",
      "src/types/custom-sound-themes.ts:export type CustomSoundType =",
      "src/types/custom-sound-themes.ts:export interface CustomSound {",
      "src/types/custom-sound-themes.ts:export type SoundCategory =",
      "src/types/custom-sound-themes.ts:export interface SoundReview {",
      "src/types/custom-sound-themes.ts:export interface AudioAnalysis {",
      "src/types/custom-sound-themes.ts:export type AudioMood =",
      "src/types/custom-sound-themes.ts:export interface AudioCharacteristics {",
      "src/types/custom-sound-themes.ts:export type SoundLicense =",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundConfig {",
      "src/types/custom-sound-themes.ts:export type GeneratedSoundType =",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundParameters {",
      "src/types/custom-sound-themes.ts:export interface ModulationConfig {",
      "src/types/custom-sound-themes.ts:export interface EnvelopeConfig {",
      "src/types/custom-sound-themes.ts:export interface FilterConfig {",
      "src/types/custom-sound-themes.ts:export interface EffectConfig {",
      "src/types/custom-sound-themes.ts:export interface HarmonicConfig {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface AudioQualityInfo {",
      "src/types/custom-sound-themes.ts:export interface CompatibilityInfo {",
      "src/types/custom-sound-themes.ts:export type Platform = 'web' | 'ios' | 'android' | 'desktop';",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface DeviceRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeRequirements {",
      "src/types/custom-sound-themes.ts:export type ThemePermission =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePreview {",
      "src/types/custom-sound-themes.ts:export interface PreviewSound {",
      "src/types/custom-sound-themes.ts:export interface DemoSequence {",
      "src/types/custom-sound-themes.ts:export interface DemoTiming {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePermissions {",
      "src/types/custom-sound-themes.ts:export type ThemePermissionLevel =",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export type CreationStep =",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/custom-sound-themes.ts:export interface RequiredField {",
      "src/types/custom-sound-themes.ts:export interface OptionalField {",
      "src/types/custom-sound-themes.ts:export interface UploadedFile {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSound {",
      "src/types/custom-sound-themes.ts:export interface SelectedBuiltInSound {",
      "src/types/custom-sound-themes.ts:export interface SoundCustomization {",
      "src/types/custom-sound-themes.ts:export interface ValidationResult {",
      "src/types/custom-sound-themes.ts:export interface ValidationIssue {",
      "src/types/custom-sound-themes.ts:export interface ValidationSuggestion {",
      "src/types/custom-sound-themes.ts:export interface CreationError {",
      "src/types/custom-sound-themes.ts:export interface CreationWarning {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCollection {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export type RecommendationSource =",
      "src/types/custom-sound-themes.ts:export interface LibrarySettings {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeExport {",
      "src/types/custom-sound-themes.ts:  exportedAt: Date;",
      "src/types/custom-sound-themes.ts:  exportType: 'single' | 'collection' | 'library';",
      "src/types/custom-sound-themes.ts:export interface ExportMetadata {",
      "src/types/custom-sound-themes.ts:export interface ExportFile {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeImport {",
      "src/types/custom-sound-themes.ts:export interface ImportOptions {",
      "src/types/custom-sound-themes.ts:export interface ImportResult {",
      "src/types/custom-sound-themes.ts:export interface ImportError {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface UsageContext {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface SoundPopularity {",
      "src/types/custom-sound-themes.ts:export interface UsagePattern {",
      "src/types/custom-sound-themes.ts:export interface TimePattern {",
      "src/types/custom-sound-themes.ts:export interface ContextPattern {",
      "src/types/custom-sound-themes.ts:export interface PerformanceMetrics {",
      "src/types/custom-sound-themes.ts:export interface LatencyMetrics {",
      "src/types/custom-sound-themes.ts:export interface FeedbackSummary {",
      "src/types/custom-sound-themes.ts:export interface TagFrequency {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeListResponse {",
      "src/types/custom-sound-themes.ts:export interface AppliedFilter {",
      "src/types/custom-sound-themes.ts:export interface SortOption {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeEvent =",
      "src/types/custom-sound-themes.ts:  | 'export_completed'",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface Alarm {",
      "src/types/domain.ts:export interface User {",
      "src/types/domain.ts:export interface UserPreferences {",
      "src/types/domain.ts:export interface UserSettings {",
      "src/types/domain.ts:export interface UserStats {",
      "src/types/domain.ts:export interface Subscription {",
      "src/types/domain.ts:export interface SubscriptionPlan {",
      "src/types/domain.ts:export interface PlanLimits {",
      "src/types/domain.ts:export interface PlanPricing {",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface FeatureUsageInfo {",
      "src/types/domain.ts:export interface FeatureUsage {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export interface VoiceMood {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export type SubscriptionTier = ",
      "src/types/domain.ts:export type SubscriptionStatus = ",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:export type PaymentStatus = ",
      "src/types/domain.ts:export interface PaymentMethod {",
      "src/types/domain.ts:export interface Invoice {",
      "src/types/domain.ts:export interface InvoiceItem {",
      "src/types/domain.ts:export interface Payment {",
      "src/types/domain.ts:export interface Trial {",
      "src/types/domain.ts:export interface Discount {",
      "src/types/domain.ts:export interface UserDiscount {",
      "src/types/domain.ts:export interface Theme {",
      "src/types/domain.ts:export interface ThemeColors {",
      "src/types/domain.ts:export interface PersonalizationSettings {",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/email-campaigns.ts:export type PersonaType =",
      "src/types/email-campaigns.ts:export interface PersonaProfile {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionResult {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionFactor {",
      "src/types/email-campaigns.ts:export interface EmailCampaign {",
      "src/types/email-campaigns.ts:export interface CampaignTrigger {",
      "src/types/email-campaigns.ts:export interface TriggerCondition {",
      "src/types/email-campaigns.ts:export interface EmailSequence {",
      "src/types/email-campaigns.ts:export interface SequenceCondition {",
      "src/types/email-campaigns.ts:export interface EmailTemplate {",
      "src/types/email-campaigns.ts:export interface TemplateVariable {",
      "src/types/email-campaigns.ts:export interface PersonalizationRule {",
      "src/types/email-campaigns.ts:export interface PersonalizedContent {",
      "src/types/email-campaigns.ts:export interface ABTestConfig {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface ABTestResults {",
      "src/types/email-campaigns.ts:export interface VariantResults {",
      "src/types/email-campaigns.ts:export interface CampaignSettings {",
      "src/types/email-campaigns.ts:export interface FrequencyCapping {",
      "src/types/email-campaigns.ts:export interface UnsubscribeSettings {",
      "src/types/email-campaigns.ts:export interface ComplianceSettings {",
      "src/types/email-campaigns.ts:export interface TrackingSettings {",
      "src/types/email-campaigns.ts:export interface CampaignMetrics {",
      "src/types/email-campaigns.ts:export interface EmailEvent {",
      "src/types/email-campaigns.ts:export interface CampaignPerformanceReport {",
      "src/types/email-campaigns.ts:export interface SequencePerformance {",
      "src/types/email-campaigns.ts:export interface CohortData {",
      "src/types/email-campaigns.ts:export interface TopPerformer {",
      "src/types/email-campaigns.ts:export interface PerformanceRecommendation {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/email-campaigns.ts:export interface MetricTrend {",
      "src/types/email-campaigns.ts:export interface EmailPreferences {",
      "src/types/email-campaigns.ts:export interface EmailSubscription {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface EmailCampaignStats {",
      "src/types/email-campaigns.ts:export interface UserWithEmailData",
      "src/types/email-campaigns.ts:export interface UserCampaignHistory {",
      "src/types/email-campaigns.ts:export interface ConversionEvent {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionConfig {",
      "src/types/email-campaigns.ts:export interface PersonaFactor {",
      "src/types/email-campaigns.ts:export interface PersonaCondition {",
      "src/types/email-campaigns.ts:export type EmailPlatform =",
      "src/types/email-campaigns.ts:export interface EmailPlatformConfig {",
      "src/types/email-campaigns.ts:export interface PlatformCapabilities {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {",
      "src/types/email-campaigns.ts:export interface EmailDeliverabilitySettings {",
      "src/types/email-campaigns.ts:export interface CampaignAutomationRule {",
      "src/types/email-campaigns.ts:export interface AutomationTrigger {",
      "src/types/email-campaigns.ts:export interface AutomationCondition {",
      "src/types/email-campaigns.ts:export interface AutomationAction {",
      "src/types/email-campaigns.ts:export const DEFAULT_PERSONAS: Record<PersonaType, PersonaProfile> = {",
      "src/types/email.ts:export type PersonaType =",
      "src/types/email.ts:export interface PersonaProfile {",
      "src/types/email.ts:export interface PersonaDetectionResult {",
      "src/types/email.ts:export interface PersonaDetectionFactor {",
      "src/types/email.ts:export interface EmailCampaign {",
      "src/types/email.ts:export interface EmailSequence {",
      "src/types/email.ts:export interface CampaignMetrics {",
      "src/types/email.ts:export interface EmailPreferences {",
      "src/types/emotional.ts:export type EmotionType =",
      "src/types/emotional.ts:export type EmotionalTone = 'encouraging' | 'playful' | 'firm' | 'roast';",
      "src/types/emotional.ts:export type EscalationLevel =",
      "src/types/emotional.ts:export interface EmotionalContext {",
      "src/types/emotional.ts:export interface EmotionalState {",
      "src/types/emotional.ts:export interface EmotionalMessage {",
      "src/types/emotional.ts:export interface EmotionalResponse {",
      "src/types/emotional.ts:export interface UserEmotionalProfile {",
      "src/types/emotional.ts:export interface EmotionalNotificationPayload {",
      "src/types/emotional.ts:export const VOICE_MOOD_TO_EMOTIONAL_TONE: Record<string, EmotionalTone> = {",
      "src/types/emotional.ts:export type EmotionalNotificationCategory =",
      "src/types/helpers.d.ts:export type AnyFn = (...args: any[]) => any; // auto",
      "src/types/helpers.d.ts:export type Maybe<T> = T | undefined | null;",
      "src/types/helpers.d.ts:export type EventHandler<T = any> = (e: T) => void; // auto",
      "src/types/helpers.d.ts:export type CallbackFunction<T = any> = (value: T) => void; // auto",
      "src/types/helpers.d.ts:export type AsyncCallback<T = any> = (value: T) => Promise<void>; // auto",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/helpers.d.ts:export type GenericObject = Record<string, any>; // auto",
      "src/types/helpers.d.ts:export type SafeAny = any; // auto - temporary fallback for complex inference",
      "src/types/http-client.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpInterceptor {",
      "src/types/http-client.ts:export interface HttpClientConfig {",
      "src/types/http-client.ts:export interface CacheConfig {",
      "src/types/http-client.ts:export interface AuthenticationConfig {",
      "src/types/http-client.ts:export interface EnhancedRequestConfig extends HttpRequestConfig {",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/http-client.ts:export interface RetryConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface RateLimiterConfig {",
      "src/types/http-client.ts:export interface RateLimitStatus {",
      "src/types/http-client.ts:export interface HttpRequestMetrics {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface StripeClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ConvertKitClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface GitHubClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpError extends Error {",
      "src/types/http-client.ts:export interface ErrorHandlerConfig {",
      "src/types/http-client.ts:export interface HttpMockConfig {",
      "src/types/http-client.ts:export interface HttpClientTestUtils {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/http-client.ts:export interface HttpClientPlugin {",
      "src/types/http-client.ts:export interface PluginManager {",
      "src/types/index.ts: * Centralized exports for all API and service interfaces",
      "src/types/index.ts:export * from './http-client';",
      "src/types/index.ts:export * from './services/stripe-api';",
      "src/types/index.ts:export * from './services/convertkit-api';",
      "src/types/index.ts:export * from './services/webhook-api';",
      "src/types/index.ts:export * from './alarm-scheduling';",
      "src/types/index.ts:export * from './app-state';",
      "src/types/index.ts:export * from './api-responses';",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/index.ts:export * from './app-state';",
      "src/types/index.ts:export * from './api-responses';",
      "src/types/index.ts:export * from './configuration-interfaces';",
      "src/types/index.ts:// Re-export commonly used interfaces with descriptive names",
      "src/types/index.ts:export type {",
      "src/types/index.ts:export type {",
      "src/types/index.ts:export type {",
      "src/types/index.ts:export type {",
      "src/types/index.ts:export type ApiEndpoint<TRequest = unknown, TResponse = unknown> = {",
      "src/types/index.ts:export type ServiceMethod<TArgs extends unknown[] = unknown[], TResult = unknown> = (",
      "src/types/index.ts:export type AsyncServiceMethod<",
      "src/types/index.ts:export const isApiResponse = <T>(value: unknown): value is ApiResponse<T> => {",
      "src/types/index.ts:export const isApiError = (value: unknown): value is ApiError => {",
      "src/types/index.ts:export const isPaginatedResponse = <T>(",
      "src/types/index.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/index.ts:export type Required<T, K extends keyof T> = T & Required<Pick<T, K>>;",
      "src/types/index.ts:export type DeepPartial<T> = {",
      "src/types/index.ts:export const DEFAULT_HTTP_TIMEOUT = 10000; // 10 seconds",
      "src/types/index.ts:export interface ApiEnvironmentConfig {",
      "src/types/index.ts:export interface ServiceFactory {",
      "src/types/index.ts:export interface GlobalErrorHandler {",
      "src/types/index.ts:export interface TelemetryData {",
      "src/types/index.ts:export interface MonitoringService {",
      "src/types/index.ts:export interface ServiceHealthCheck {",
      "src/types/index.ts:export interface HealthCheckResponse {",
      "src/types/manual-fixes.d.ts: * This file re-exports all domain interfaces from the centralized domain.ts file",
      "src/types/manual-fixes.d.ts:// Re-export all domain interfaces",
      "src/types/manual-fixes.d.ts:// Legacy compatibility exports (deprecated - use domain.ts imports instead)",
      "src/types/manual-fixes.d.ts:export type { ",
      "src/types/premium.ts:export type SubscriptionTier =",
      "src/types/premium.ts:export type SubscriptionStatus =",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:export type PaymentStatus =",
      "src/types/premium.ts:export type RefundStatus = 'pending' | 'succeeded' | 'failed' | 'canceled';",
      "src/types/premium.ts:export interface Subscription {",
      "src/types/premium.ts:export interface SubscriptionPlan {",
      "src/types/premium.ts:export interface PlanPricing {",
      "src/types/premium.ts:export interface PlanLimits {",
      "src/types/premium.ts:export interface PremiumFeature {",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/types/premium.ts:export interface PaymentMethod {",
      "src/types/premium.ts:export interface Invoice {",
      "src/types/premium.ts:export interface InvoiceItem {",
      "src/types/premium.ts:export interface Payment {",
      "src/types/premium.ts:export interface Refund {",
      "src/types/premium.ts:export interface FeatureUsage {",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/premium.ts:export interface Discount {",
      "src/types/premium.ts:export interface UserDiscount {",
      "src/types/premium.ts:export interface Trial {",
      "src/types/premium.ts:export interface FreeCredit {",
      "src/types/premium.ts:export interface ReferralProgram {",
      "src/types/premium.ts:export interface Referral {",
      "src/types/premium.ts:export interface SubscriptionChange {",
      "src/types/premium.ts:export interface CancellationSurvey {",
      "src/types/premium.ts:export interface FeatureAccess {",
      "src/types/premium.ts:export interface FeatureGate {",
      "src/types/premium.ts:export interface CohortData {",
      "src/types/premium.ts:export interface RevenueMetrics {",
      "src/types/premium.ts:export interface SubscriptionError {",
      "src/types/premium.ts:export interface CreateSubscriptionRequest {",
      "src/types/premium.ts:export interface CreateSubscriptionResponse {",
      "src/types/premium.ts:export interface UpdateSubscriptionRequest {",
      "src/types/premium.ts:export interface UpdateSubscriptionResponse {",
      "src/types/premium.ts:export interface CancelSubscriptionRequest {",
      "src/types/premium.ts:export interface CancelSubscriptionResponse {",
      "src/types/premium.ts:export interface StripeWebhookEvent {",
      "src/types/premium.ts:export interface WebhookProcessingResult {",
      "src/types/premium.ts:export interface PremiumUIState {",
      "src/types/premium.ts:export interface SubscriptionDashboardData {",
      "src/types/premium.ts:export interface StripeConfig {",
      "src/types/premium.ts:export interface PayPalConfig {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/premium.ts:export namespace Premium {",
      "src/types/premium.ts:  export type Status = SubscriptionStatus;",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/premium.ts:  export type Payment = PaymentStatus;",
      "src/types/push-notifications.ts:export type NotificationPriority = 'min' | 'low' | 'default' | 'high' | 'max';",
      "src/types/push-notifications.ts:export type NotificationCategory =",
      "src/types/push-notifications.ts:export type NotificationActionType =",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface NotificationAction {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/push-notifications.ts:export interface AlarmNotificationData {",
      "src/types/push-notifications.ts:export interface MotivationNotificationData {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/push-notifications.ts:export interface SystemNotificationData {",
      "src/types/push-notifications.ts:export interface EmergencyNotificationData {",
      "src/types/push-notifications.ts:export interface SocialNotificationData {",
      "src/types/push-notifications.ts:export interface PromotionalNotificationData {",
      "src/types/push-notifications.ts:export type NotificationDataPayload =",
      "src/types/push-notifications.ts:export interface PushSubscriptionData {",
      "src/types/push-notifications.ts:export interface NotificationPreferences {",
      "src/types/push-notifications.ts:export interface PushDeliveryStatus {",
      "src/types/push-notifications.ts:export interface PushAnalytics {",
      "src/types/push-notifications.ts:export interface ServiceWorkerMessage<T = any> {",
      "src/types/push-notifications.ts:export type ServiceWorkerMessageType =",
      "src/types/push-notifications.ts:export interface PushReceivedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClickedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClosedPayload {",
      "src/types/push-notifications.ts:export interface PushTestResults {",
      "src/types/push-notifications.ts:export interface PushNotificationManager {",
      "src/types/push-notifications.ts:export interface PushSubscriptionOptions {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSyncStatusPayload {",
      "src/types/realtime-messages.ts:export interface UserPresenceUpdatePayload {",
      "src/types/realtime-messages.ts:export interface UserActivityPayload {",
      "src/types/realtime-messages.ts:export interface DeviceStatusChangePayload {",
      "src/types/realtime-messages.ts:export interface RecommendationGeneratedPayload {",
      "src/types/realtime-messages.ts:export interface AIAnalysisCompletePayload {",
      "src/types/realtime-messages.ts:export interface VoiceMoodDetectedPayload {",
      "src/types/realtime-messages.ts:export interface SleepPatternUpdatedPayload {",
      "src/types/realtime-messages.ts:export interface SystemNotificationPayload {",
      "src/types/realtime-messages.ts:export interface EmergencyAlertPayload {",
      "src/types/realtime-messages.ts:export interface SyncStatusUpdatePayload {",
      "src/types/realtime-messages.ts:export interface SyncConflictDetectedPayload {",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/realtime-messages.ts:export type UserRealtimeMessage =",
      "src/types/realtime-messages.ts:export type AIRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SystemRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SyncRealtimeMessage =",
      "src/types/realtime-messages.ts:export type RealtimeMessage =",
      "src/types/realtime-messages.ts:export const isAlarmMessage = (",
      "src/types/realtime-messages.ts:export const isUserMessage = (",
      "src/types/realtime-messages.ts:export const isAIMessage = (",
      "src/types/realtime-messages.ts:export const isSystemMessage = (",
      "src/types/realtime-messages.ts:export const isSyncMessage = (",
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {",
      "src/types/realtime-service.ts:export interface RealtimeService {",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface UserRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface AIRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface SystemRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface ConnectionStatus {",
      "src/types/realtime-service.ts:export interface RealtimeServiceMetrics {",
      "src/types/realtime-service.ts:export interface RealtimeDiagnostics {",
      "src/types/realtime-service.ts:export interface RealtimeServiceError {",
      "src/types/realtime-service.ts:export interface RealtimeServiceFactory {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/realtime-service.ts:export interface MockRealtimeService extends RealtimeService {",
      "src/types/realtime-service.ts:export interface RealtimeServiceTestHarness {",
      "src/types/realtime-service.ts:export interface TestScenario {",
      "src/types/realtime-service.ts:export interface TestStep {",
      "src/types/realtime-service.ts:export interface TestResult {",
      "src/types/realtime-service.ts:export interface TestSuite {",
      "src/types/realtime-service.ts:export interface PerformanceTest {",
      "src/types/realtime-service.ts:export interface PerformanceResults {",
      "src/types/realtime/index.ts: * Central export point for all real-time WebSocket, push notification, and Supabase real-time types",
      "src/types/realtime/index.ts:export type {",
      "src/types/realtime/index.ts:export type {",
      "src/types/realtime/index.ts:export type {",
      "src/types/realtime/index.ts:export type {",
      "src/types/realtime/index.ts:export type {",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/realtime/index.ts:export type RealtimeEventHandler<T = any> = (payload: T) => void | Promise<void>;",
      "src/types/realtime/index.ts:export type RealtimeSubscriptionCleanup = () => void;",
      "src/types/realtime/index.ts:export interface RealtimeConfigValidation {",
      "src/types/realtime/index.ts:export interface RealtimeFeatureFlags {",
      "src/types/realtime/index.ts:export interface RealtimePerformanceThresholds {",
      "src/types/realtime/index.ts:export interface RealtimeSecurityConfig {",
      "src/types/realtime/index.ts:export const DEFAULT_WEBSOCKET_CONFIG: WebSocketConfig = {",
      "src/types/realtime/index.ts:export const DEFAULT_NOTIFICATION_PREFERENCES: NotificationPreferences = {",
      "src/types/realtime/index.ts:export const DEFAULT_REALTIME_CONFIG: RealtimeServiceConfig = {",
      "src/types/service-architecture.ts:export interface ServiceHealth {",
      "src/types/service-architecture.ts:export interface ServiceDependencyHealth {",
      "src/types/service-architecture.ts:export interface ServiceMetrics {",
      "src/types/service-architecture.ts:export interface ServiceError {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface ServiceConfig {",
      "src/types/service-architecture.ts:export interface CacheConfig {",
      "src/types/service-architecture.ts:export interface ErrorHandlingConfig {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface MonitoringConfig {",
      "src/types/service-architecture.ts:export interface AlertingConfig {",
      "src/types/service-architecture.ts:export interface ServiceDescriptor {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export interface ServiceContainer {",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/service-architecture.ts:export interface CacheEntry<T = any> {",
      "src/types/service-architecture.ts:export interface CacheProvider {",
      "src/types/service-architecture.ts:export interface CacheStats {",
      "src/types/service-architecture.ts:export interface CacheManager {",
      "src/types/service-architecture.ts:export interface ServiceEvent {",
      "src/types/service-architecture.ts:export interface EventBus {",
      "src/types/service-architecture.ts:export interface ServiceLifecycle {",
      "src/types/service-architecture.ts:export interface PerformanceTracker {",
      "src/types/service-architecture.ts:export interface PerformanceMetrics {",
      "src/types/service-architecture.ts:export interface OperationMetrics {",
      "src/types/service-architecture.ts:export interface EventMetrics {",
      "src/types/service-architecture.ts:export interface ServiceRegistry {",
      "src/types/service-architecture.ts:export interface ServiceDiscoveryCriteria {",
      "src/types/service-architecture.ts:export interface ServiceRegistryHealth {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export function isBaseService(obj: any): obj is BaseService {",
      "src/types/service-architecture.ts:export function isServiceConfig(obj: any): obj is ServiceConfig {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface User {",
      "src/types/services/backend-api.ts:export interface UserPreferences {",
      "src/types/services/backend-api.ts:export interface UserSubscription {",
      "src/types/services/backend-api.ts:export interface UserStats {",
      "src/types/services/backend-api.ts:export interface Alarm {",
      "src/types/services/backend-api.ts:export enum DayOfWeek {",
      "src/types/services/backend-api.ts:export interface AlarmSound {",
      "src/types/services/backend-api.ts:export interface SnoozeSettings {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export type ParticipantStatus =",
      "src/types/services/backend-api.ts:export interface ProofSubmission {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface Tournament {",
      "src/types/services/backend-api.ts:export type TournamentFormat =",
      "src/types/services/backend-api.ts:export type TournamentStatus =",
      "src/types/services/backend-api.ts:export interface TournamentSchedule {",
      "src/types/services/backend-api.ts:export interface TournamentParticipant {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface TournamentMatch {",
      "src/types/services/backend-api.ts:export interface TournamentPrizePool {",
      "src/types/services/backend-api.ts:export interface TournamentRules {",
      "src/types/services/backend-api.ts:export interface CreateUserRequest {",
      "src/types/services/backend-api.ts:export interface UpdateUserRequest {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface UserServiceResponses {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/backend-api.ts:export interface TournamentServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSubscriber {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitTag {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitForm {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSequence {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitCustomField {",
      "src/types/services/convertkit-api.ts:export interface AddSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface UpdateSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface TagSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface AddToSequenceRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateTagRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateFormRequest {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscribersListResponse {",
      "src/types/services/convertkit-api.ts:export interface TagsListResponse {",
      "src/types/services/convertkit-api.ts:export interface FormsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SequencesListResponse {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/services/convertkit-api.ts:export interface CustomFieldsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SubscriberStatsResponse {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSubscriberEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookFormEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSequenceEvent {",
      "src/types/services/convertkit-api.ts:export type UserPersona =",
      "src/types/services/convertkit-api.ts:export interface PersonaCampaignConfig {",
      "src/types/services/convertkit-api.ts:export interface PersonaAssignmentRequest {",
      "src/types/services/convertkit-api.ts:export interface EmailCampaignAnalytics {",
      "src/types/services/convertkit-api.ts:export interface SubscriberEngagementMetrics {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscriberServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface CampaignServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface TagServiceResponse {",
      "src/types/services/stripe-api.ts:export interface StripeCustomer {",
      "src/types/services/stripe-api.ts:export interface StripeSubscription {",
      "src/types/services/stripe-api.ts:export interface StripeSubscriptionItem {",
      "src/types/services/stripe-api.ts:export interface StripePrice {",
      "src/types/services/stripe-api.ts:export interface StripePaymentMethod {",
      "src/types/services/stripe-api.ts:export interface StripeInvoice {",
      "src/types/services/stripe-api.ts:export interface StripeAddress {",
      "src/types/services/stripe-api.ts:export interface StripeShipping {",
      "src/types/services/stripe-api.ts:export interface StripeDiscount {",
      "src/types/services/stripe-api.ts:export interface StripeCoupon {",
      "src/types/services/stripe-api.ts:export interface StripeInvoiceLineItem {",
      "src/types/services/stripe-api.ts:export interface CreateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface UpdateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface CreatePaymentIntentRequest {",
      "src/types/services/stripe-api.ts:export interface CreateCustomerRequest {",
      "src/types/services/stripe-api.ts:export interface StripeServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/stripe-api.ts:export interface SubscriptionServiceResponse {",
      "src/types/services/stripe-api.ts:export interface PaymentServiceResponse {",
      "src/types/services/stripe-api.ts:export interface CustomerServiceResponse {",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export type WebhookSource =",
      "src/types/services/webhook-api.ts:export interface WebhookVerificationResult {",
      "src/types/services/webhook-api.ts:export type StripeWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type SupabaseWebhookEventType = 'INSERT' | 'UPDATE' | 'DELETE';",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type ConvertKitWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type GitHubWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type PostHogWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type SentryWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type CustomWebhookEventType =",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export interface WebhookHandlerResult {",
      "src/types/services/webhook-api.ts:export interface WebhookConfig {",
      "src/types/services/webhook-api.ts:export interface WebhookProcessingStatus {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistryEntry {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistry {",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/types/services/webhook-api.ts:export type AllWebhookEventTypes =",
      "src/types/services/webhook-api.ts:export interface WebhookServiceResponse extends ApiResponse {",
      "src/types/state-updaters.ts:export type StateUpdater<T> = (prev: T) => T;",
      "src/types/state-updaters.ts:export type ArrayStateUpdater<T> = (prev: T[]) => T[];",
      "src/types/state-updaters.ts:export type ObjectStateUpdater<T extends Record<string, any>> = (prev: T) => T;",
      "src/types/state-updaters.ts:export interface PerformanceHistoryEntry {",
      "src/types/state-updaters.ts:export interface PreloadingStatus {",
      "src/types/state-updaters.ts:export interface AudioLoadingError {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface WarmingStatus {",
      "src/types/state-updaters.ts:export interface OptimizationStatus {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface CachePerformanceHistoryEntry {",
      "src/types/struggling-sam.ts:export interface UserStreak {",
      "src/types/struggling-sam.ts:export interface StreakMilestone {",
      "src/types/struggling-sam.ts:export interface StreakReward {",
      "src/types/struggling-sam.ts:export interface SamAchievement {",
      "src/types/struggling-sam.ts:export type SamAchievementType =",
      "src/types/struggling-sam.ts:export interface AchievementProgress {",
      "src/types/struggling-sam.ts:export interface AchievementRequirement {",
      "src/types/struggling-sam.ts:export interface SocialProofData {",
      "src/types/struggling-sam.ts:export type SocialProofType =",
      "src/types/struggling-sam.ts:export interface SocialEngagement {",
      "src/types/struggling-sam.ts:export interface SocialChallenge {",
      "src/types/struggling-sam.ts:export type SocialChallengeType =",
      "src/types/struggling-sam.ts:export interface ChallengeParticipant {",
      "src/types/struggling-sam.ts:export interface SocialChallengeReward {",
      "src/types/struggling-sam.ts:export interface ChallengeLeaderboard {",
      "src/types/struggling-sam.ts:export interface SocialProofMetrics {",
      "src/types/struggling-sam.ts:export interface SmartUpgradePrompt {",
      "src/types/struggling-sam.ts:export type UpgradeTriggerType =",
      "src/types/struggling-sam.ts:export type UpgradePromptType =",
      "src/types/struggling-sam.ts:export interface UpgradeDiscount {",
      "src/types/struggling-sam.ts:export interface UpgradeUrgency {",
      "src/types/struggling-sam.ts:export interface UpgradeContext {",
      "src/types/struggling-sam.ts:export interface ABTestGroup {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface ABTestResults {",
      "src/types/struggling-sam.ts:export interface ABTestMetrics {",
      "src/types/struggling-sam.ts:export interface UserABTest {",
      "src/types/struggling-sam.ts:export interface UserABTestMetrics {",
      "src/types/struggling-sam.ts:export interface HabitCelebration {",
      "src/types/struggling-sam.ts:export type CelebrationType =",
      "src/types/struggling-sam.ts:export interface CelebrationTrigger {",
      "src/types/struggling-sam.ts:export interface CelebrationAnimation {",
      "src/types/struggling-sam.ts:export interface CelebrationReward {",
      "src/types/struggling-sam.ts:export interface CelebrationSocialShare {",
      "src/types/struggling-sam.ts:export interface SuccessStory {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface CommunityStats {",
      "src/types/struggling-sam.ts:export interface RealtimeActivity {",
      "src/types/struggling-sam.ts:export interface ABTestContext {",
      "src/types/subscription.d.ts:export interface SubscriptionPlanDbRow {",
      "src/types/subscription.d.ts:export interface TrialDbRow {",
      "src/types/subscription.d.ts:export interface DiscountDbRow {",
      "src/types/subscription.d.ts:export interface RetentionOffer {",
      "src/types/subscription.d.ts:export interface CreateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface UpdateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface CancelSubscriptionResult {",
      "src/types/subscription.d.ts:export interface DiscountValidationResult {",
      "src/types/subscription.d.ts:export interface TrialStartResult {",
      "src/types/subscription.d.ts:export interface FeatureUsageParams {",
      "src/types/subscription.d.ts:export interface DiscountUsageParams {",
      "src/types/subscription.d.ts:export interface FeatureUsageDbRow {",
      "src/types/subscription.d.ts:export interface UserDiscountDbRow {",
      "src/types/subscription.d.ts:export interface ReferralDbRow {",
      "src/types/subscription.d.ts:export interface FreeTierLimits {",
      "src/types/subscription.d.ts:export interface ReferralStats {",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionTier(tier: string): boolean;",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionStatus(status: string): boolean;",
      "src/types/supabase-api.ts:export interface DatabaseUser {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface DatabaseSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseSignUpRequest {",
      "src/types/supabase-api.ts:export interface SupabaseSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabaseOAuthSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabasePasswordResetRequest {",
      "src/types/supabase-api.ts:export interface SupabaseUpdateUserRequest {",
      "src/types/supabase-api.ts:export type SupabaseFilterOperator =",
      "src/types/supabase-api.ts:export interface SupabaseQueryFilter {",
      "src/types/supabase-api.ts:export interface SupabaseQueryOptions {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface SupabaseSubscriptionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeMessage<T = unknown> {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadRequest {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadResponse {",
      "src/types/supabase-api.ts:export interface SupabaseFileMetadata {",
      "src/types/supabase-api.ts:export interface SupabaseSignedUrlRequest {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-api.ts:export interface UserServiceResponse {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionStats {",
      "src/types/supabase-api.ts:export interface SupabasePerformanceMetrics {",
      "src/types/supabase-realtime.ts:export type DatabaseEventType = 'INSERT' | 'UPDATE' | 'DELETE' | 'TRUNCATE';",
      "src/types/supabase-realtime.ts:export interface DatabaseChangePayload<T = any> {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserSettingsChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserPresenceChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface PushSubscriptionChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface AnalyticsEventChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export type DatabaseChange =",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelConfig {",
      "src/types/supabase-realtime.ts:export interface RealtimeSubscription {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelManager {",
      "src/types/supabase-realtime.ts:export interface PresenceState {",
      "src/types/supabase-realtime.ts:export interface PresenceInfo {",
      "src/types/supabase-realtime.ts:export interface PresenceManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinator {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinationResult {",
      "src/types/supabase-realtime.ts:export interface SyncConflict {",
      "src/types/supabase-realtime.ts:export interface SyncConflictResolution {",
      "src/types/supabase-realtime.ts:export type SyncTriggerReason =",
      "src/types/supabase-realtime.ts:export interface SyncStatus {",
      "src/types/supabase-realtime.ts:export interface ChannelStatus {",
      "src/types/supabase-realtime.ts:export interface RealtimeConnectionMetrics {",
      "src/types/supabase-realtime.ts:export interface RealtimeError {",
      "src/types/supabase-realtime.ts:export interface RealtimeRecoveryStrategy {",
      "src/types/supabase-realtime.ts:export interface RealtimeHealthCheck {",
      "src/types/supabase-realtime.ts:export interface HealthCheckResult {",
      "src/types/supabase-realtime.ts:export type HealthStatus = 'healthy' | 'degraded' | 'unhealthy' | 'unknown';",
      "src/types/tabProtection.ts:export interface TabProtectionSettings {",
      "src/types/tabProtection.ts:export const DEFAULT_TAB_PROTECTION_SETTINGS: TabProtectionSettings = {",
      "src/types/tabProtection.ts:export const formatProtectionMessage = (",
      "src/types/tabProtection.ts:export const getTabProtectionSettings = (): TabProtectionSettings => {",
      "src/types/tabProtection.ts:export const saveTabProtectionSettings = (settings: TabProtectionSettings): void => {",
      "src/types/tabProtection.ts:export const formatTimeframe = (minutes: number): string => {",
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;",
      "src/types/timers.ts:export function safeClearTimeout(handle: MaybeTimeoutHandle): void {",
      "src/types/timers.ts:export function safeSetTimeout(callback: () => void, delay: number): TimeoutHandle {",
      "src/types/user.ts:export interface SubscriptionInfo {",
      "src/types/user.ts:export interface AppUser {",
      "src/types/user.ts:// Re-export types for convenience",
      "src/types/user.ts:export type { SubscriptionTier, Subscription, User };",
      "src/types/user.ts:export function getUserTier(",
      "src/types/user.ts:export function hasSubscriptionTier(",
      "src/types/user.ts:export function normalizeUserSubscription(_user: Partial<User | AppUser>): User {",
      "src/types/user.ts:export function isPremiumUser(_user: User | AppUser | null | undefined): boolean {",
      "src/types/user.ts:export function getSubscriptionStatus(",
      "src/types/utility-types.ts:export type Nullable<T> = T | null; // type-safe replacement for any | null",
      "src/types/utility-types.ts:export type Optional<T> = T | undefined; // type-safe replacement for any | undefined",
      "src/types/utility-types.ts:export type Maybe<T> = T | null | undefined; // type-safe replacement for any | null | undefined",
      "src/types/utility-types.ts:export type RecordMap<K extends string | number | symbol, V> = Record<K, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type StringMap<V> = Record<string, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type NumberMap<V> = Record<number, V>; // type-safe replacement for Record<number, any>",
      "src/types/utility-types.ts:export type UnknownObject = Record<string, unknown>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type AnyObject = Record<string, any>; // TODO: type definition needed - temporary bridge type",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/types/utility-types.ts:export type StateUpdaterFunction<T> = (prev: T) => T; // type-safe replacement for (prev: any) => any",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utility-types.ts:export type VoidFunction = () => void; // type-safe replacement for Function | any",
      "src/types/utility-types.ts:export type AsyncVoidFunction = () => Promise<void>; // type-safe replacement for async () => any",
      "src/types/utility-types.ts:export type CallbackFunction<T = unknown> = (arg: T) => void; // type-safe replacement for callback: any",
      "src/types/utility-types.ts:export type AsyncCallbackFunction<T = unknown> = (arg: T) => Promise<void>; // type-safe replacement for async callback: any",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:export type TODO_TypeDefinitionNeeded = any; // TODO: type definition needed - mark for future typing",
      "src/types/utility-types.ts:export type Legacy_Any = any; // TODO: type definition needed - legacy any usage that needs proper typing",
      "src/types/utility-types.ts:export interface RetentionOffer {",
      "src/types/utility-types.ts:export interface AlarmHistoryData {",
      "src/types/utility-types.ts:export interface SleepPatternData {",
      "src/types/utility-types.ts:export interface VoiceSettings {",
      "src/types/utility-types.ts:export interface EscalationStrategy {",
      "src/types/utility-types.ts:export interface MotivationalContent {",
      "src/types/utility-types.ts:export const isNotNull = <T>(value: T | null): value is T => value !== null;",
      "src/types/utility-types.ts:export const isNotUndefined = <T>(value: T | undefined): value is T =>",
      "src/types/utility-types.ts:export const isDefined = <T>(value: T | null | undefined): value is T =>",
      "src/types/utils.ts:export type DeepPartial<T> = {",
      "src/types/utils.ts:export type Exact<T> = T extends infer U",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type Result<T, E = Error> =",
      "src/types/utils.ts:export type NonEmptyArray<T> = [T, ...T[]];",
      "src/types/utils.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;",
      "src/types/utils.ts:export type StrictOmit<T, K extends keyof T> = Omit<T, K>;",
      "src/types/utils.ts:export type StrictPick<T, K extends keyof T> = Pick<T, K>;",
      "src/types/utils.ts:export type ValueOf<T> = T[keyof T];",
      "src/types/utils.ts:export type KeysOfType<T, U> = {",
      "src/types/utils.ts:export type Flatten<T> = {",
      "src/types/utils.ts:export type DeepReadonly<T> = {",
      "src/types/utils.ts:export type Mutable<T> = {",
      "src/types/utils.ts:export type DeepMutable<T> = {",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type Writeable<T, K extends keyof T> = Omit<T, K> & {",
      "src/types/utils.ts:export type FactoryOptions<T> = DeepPartial<T> & {",
      "src/types/utils.ts:export type FactoryFunction<T, TOptions = FactoryOptions<T>> = (",
      "src/types/utils.ts:export type EventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type AsyncEventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type ApiResponse<T> = Result<",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/utils.ts:export type ValidationRule<T> = (value: T) => Result<T, string>;",
      "src/types/utils.ts:export type ValidationSchema<T> = {",
      "src/types/utils.ts:export type TypeGuard<T> = (value: unknown) => value is T;",
      "src/types/utils.ts:export type AsyncTypeGuard<T> = (value: unknown) => Promise<boolean>;",
      "src/types/utils.ts:export type ConfigKey = string;",
      "src/types/utils.ts:export type ConfigValue = string | number | boolean | object | null;",
      "src/types/utils.ts:export type Config = Record<ConfigKey, ConfigValue>;",
      "src/types/utils.ts:export type Discriminated<T, K extends keyof T> =",
      "src/types/utils.ts:export const createBrandedId = <B>(prefix: string) => {",
      "src/types/utils.ts:export const extractIdFromBranded = <B>(brandedId: Branded<string, B>): string =>",
      "src/types/utils.ts:export const success = <T>(data: T): Result<T> => ({ success: true, data });",
      "src/types/utils.ts:export const failure = <E = Error>(_error: E): Result<never, E> => ({",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/types/utils.ts:export interface SecurityAlertDetail {",
      "src/types/utils.ts:export interface SecurityAlertEvent extends CustomEvent {",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/types/utils.ts:export type PersonaProfileDiscriminated =",
      "src/types/utils.ts:export const isResult = <T, E>(value: unknown): value is Result<T, E> =>",
      "src/types/utils.ts:export const isSuccess = <T, E>(",
      "src/types/utils.ts:export const isFailure = <T, E>(",
      "src/types/utils.ts:export interface StripeWebhookEvent {",
      "src/types/wake-up-mood.ts:export enum WakeUpMood {",
      "src/types/wake-up-mood.ts:export type Mood = WakeUpMood;",
      "src/types/wake-up-mood.ts:export function isValidWakeUpMood(mood: string): mood is keyof typeof WakeUpMood {",
      "src/types/wake-up-mood.ts:export function normalizeWakeUpMood(mood: string): WakeUpMood {",
      "src/types/websocket.ts:export type WebSocketState = 'CONNECTING' | 'OPEN' | 'CLOSING' | 'CLOSED' | 'ERROR';",
      "src/types/websocket.ts:export type WebSocketErrorType =",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/websocket.ts:export interface WebSocketConfig {",
      "src/types/websocket.ts:export interface WebSocketConnectionInfo {",
      "src/types/websocket.ts:export interface DeviceInfo {",
      "src/types/websocket.ts:export interface WebSocketError {",
      "src/types/websocket.ts:export interface WebSocketEventHandlers {",
      "src/types/websocket.ts:export interface WebSocketMetrics {",
      "src/types/websocket.ts:export interface WebSocketManager {",
      "src/types/websocket.ts:export interface WebSocketAuthPayload {",
      "src/types/websocket.ts:export interface WebSocketAuthResponse {",
      "src/types/websocket.ts:export interface WebSocketSubscription {",
      "src/types/websocket.ts:export interface WebSocketSubscriptionManager {",
      "src/types/websocket.ts:export interface WebSocketRateLimit {",
      "src/types/websocket.ts:export interface WebSocketRateLimitStatus {",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {",
      "src/types/websocket.ts:export interface QueuedMessage {",
      "src/types/websocket.ts:export interface WebSocketPool {",
      "src/utils/accessibility.ts:export interface ColorContrastResult {",
      "src/utils/accessibility.ts:export const hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {",
      "src/utils/accessibility.ts:export const getRelativeLuminance = (r: number, g: number, b: number): number => {",
      "src/utils/accessibility.ts:export const getContrastRatio = (color1: string, color2: string): number => {",
      "src/utils/accessibility.ts:export const checkContrastAccessibility = (",
      "src/utils/accessibility.ts:export const getContrastImprovedColors = (",
      "src/utils/accessibility.ts:export const createAriaAnnouncement = (",
      "src/utils/accessibility.ts:export class FocusManager {",
      "src/utils/accessibility.ts:export const isElementVisible = (element: HTMLElement): boolean => {",
      "src/utils/accessibility.ts:export const announcePageChange = (pageName: string): void => {",
      "src/utils/accessibility.ts:export const isHighContrastMode = (): boolean => {",
      "src/utils/accessibility.ts:export const prefersReducedMotion = (): boolean => {",
      "src/utils/accessibility.ts:export const addAccessibleTooltip = (",
      "src/utils/accessibility.ts:export default {",
      "src/utils/advancedTranslationValidator.ts:export interface QualityScore {",
      "src/utils/advancedTranslationValidator.ts:export interface CulturalIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface ConsistencyIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface AdvancedValidationResult {",
      "src/utils/advancedTranslationValidator.ts:export interface PerformanceMetrics {",
      "src/utils/advancedTranslationValidator.ts:export class AdvancedTranslationValidator {",
      "src/utils/advancedTranslationValidator.ts:  public exportResults(): Record<SupportedLanguage, AdvancedValidationResult> {",
      "src/utils/advancedTranslationValidator.ts:export default AdvancedTranslationValidator;",
      "src/utils/alarm-conversion.ts:export class AlarmConversionUtil {",
      "src/utils/alarm-conversion.ts:export default AlarmConversionUtil;",
      "src/utils/analysis-worker.ts:export const getAnalysisWorker = (): SleepAnalysisWorker => {",
      "src/utils/analysis-worker.ts:export const terminateAnalysisWorker = (): void => {",
      "src/utils/analysis-worker.ts:export const useAnalysisWorker = () => {",
      "src/utils/analysis-worker.ts:export default SleepAnalysisWorker;",
      "src/utils/css-optimization.ts:export function batchCSSUpdates(",
      "src/utils/css-optimization.ts:export function createCSSProperty(",
      "src/utils/css-optimization.ts:export function getResponsiveValue(",
      "src/utils/css-optimization.ts:export function getContrastColor(hexColor: string): string {",
      "src/utils/css-optimization.ts:export function generateColorScale(",
      "src/utils/css-optimization.ts:export function stylesToCSSString(styles: Record<string, any>): string {",
      "src/utils/css-optimization.ts:export function createDebouncedStyler(delay: number = 16) {",
      "src/utils/css-optimization.ts:export class CSSCustomPropertiesManager {",
      "src/utils/enhanced-focus.ts:export interface FocusSettings {",
      "src/utils/enhanced-focus.ts:export interface FocusIndicatorOptions {",
      "src/utils/enhanced-focus.ts:export interface FocusState {",
      "src/utils/enhanced-focus.ts:export class EnhancedFocusService {",
      "src/utils/enhanced-focus.ts:export default EnhancedFocusService;",
      "src/utils/fallback-strategies.tsx:export interface FallbackState {",
      "src/utils/fallback-strategies.tsx:export const fallbackManager = new FallbackManager();",
      "src/utils/fallback-strategies.tsx:export function useFallbackState() {",
      "src/utils/fallback-strategies.tsx:export class FallbackErrorBoundary extends React.Component<",
      "src/utils/fallback-strategies.tsx:export default fallbackManager;",
      "src/utils/frame-rate-manager.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateConfig {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationConfig {",
      "src/utils/frame-rate-manager.tsx:export interface FrameMetrics {",
      "src/utils/frame-rate-manager.tsx:export interface AnimationQuality {",
      "src/utils/frame-rate-manager.tsx:export const frameRateManager = new FrameRateManager();",
      "src/utils/frame-rate-manager.tsx:export function useFrameRate() {",
      "src/utils/frame-rate-manager.tsx:export function useOptimizedAnimation(animationId: string, _config: AnimationConfig) {",
      "src/utils/frame-rate-manager.tsx:export function usePerformanceAwareRender() {",
      "src/utils/frame-rate-manager.tsx:export function withFrameRateOptimization<P extends object>(",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateMonitorProps {",
      "src/utils/frame-rate-manager.tsx:export const FrameRateMonitor: React.FC<FrameRateMonitorProps> = ({",
      "src/utils/frame-rate-manager.tsx:export default frameRateManager;",
      "src/utils/http-client.ts:export class EnhancedHttpClient implements HttpClient {",
      "src/utils/http-client.ts:export function createHttpClient(_config?: HttpClientConfig): HttpClient {",
      "src/utils/http-client.ts:export const httpClient = createHttpClient({",
      "src/utils/http-client.ts:export const createSupabaseClient = (_config: { url: string; key: string }) =>",
      "src/utils/http-client.ts:export const createStripeClient = (_config: { secretKey: string }) =>",
      "src/utils/http-client.ts:export const createConvertKitClient = (_config: { apiKey: string }) =>",
      "src/utils/image-optimization.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/image-optimization.tsx:export interface ImageOptimizationOptions {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageData {",
      "src/utils/image-optimization.tsx:export const imageOptimizer = new ImageOptimizer();",
      "src/utils/image-optimization.tsx:export function useOptimizedImage(src: string, options: ImageOptimizationOptions = {}) {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {",
      "src/utils/image-optimization.tsx:export const OptimizedImage: React.FC<OptimizedImageProps> = ({",
      "src/utils/image-optimization.tsx:export default imageOptimizer;",
      "src/utils/index.ts:export const VOICE_MOODS: VoiceMoodConfig[] = [",
      "src/utils/index.ts:export const formatTime = (time: string): string => {",
      "src/utils/index.ts:export const formatDays = (days: number[]): string => {",
      "src/utils/index.ts:export const getNextAlarmTime = (alarm: Alarm): Date | null => {",
      "src/utils/index.ts:export const generateAlarmId = (): string => {",
      "src/utils/index.ts:export const getVoiceMoodConfig = (mood: VoiceMood): VoiceMoodConfig => {",
      "src/utils/index.ts:export const isAlarmTime = (alarm: Alarm): boolean => {",
      "src/utils/index.ts:export const getTimeUntilNextAlarm = (",
      "src/utils/index.ts:export const playNotificationSound = async (): Promise<void> => {",
      "src/utils/index.ts:export const validateAlarmForm = (data: {",
      "src/utils/keyboard-navigation.ts:export interface KeyboardShortcut {",
      "src/utils/keyboard-navigation.ts:export interface NavigationState {",
      "src/utils/keyboard-navigation.ts:export class KeyboardNavigationService {",
      "src/utils/keyboard-navigation.ts:export default KeyboardNavigationService;",
      "src/utils/lazy-loading.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/lazy-loading.tsx:export const AlarmForm = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AlarmRinging = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SleepTracker = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmSettings = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const VoiceSettings = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const OnboardingFlow = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PerformanceDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SleepAnalytics = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AnalyticsDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PersonaAnalyticsDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PersonaFocusDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const ThemeCreator = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const CustomThemeManager = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PremiumDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const AccessibilityDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const ComprehensiveSecurityDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const SmartAlarmDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const PWAStatusDashboard = lazyWithPreload(",
      "src/utils/lazy-loading.tsx:export const withLazyLoading = <P extends object>(",
      "src/utils/lazy-loading.tsx:export const preloadRoute = (routePath: string) => {",
      "src/utils/lazy-loading.tsx:export const useRoutePreloading = () => {",
      "src/utils/lazy-loading.tsx:export const useInteractionPreloading = () => {",
      "src/utils/lazy-loading.tsx:export const usePerformantRender = <T,>(",
      "src/utils/lazy-loading.tsx:export const useMemoryCleanup = (cleanup: () => void, deps: React.DependencyList) => {",
      "src/utils/lazy-loading.tsx:export default {",
      "src/utils/manual-stubs.ts:// export function generateTimeString(): string {",
      "src/utils/manual-stubs.ts:// export function weightedRandom<T>(items: T[]): T {",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmTime(): string {",
      "src/utils/manual-stubs.ts:// export function generateRealisticAlarmDays(): string[] {",
      "src/utils/manual-stubs.ts:// export function generateUsername(): string {",
      "src/utils/manual-stubs.ts:// export function generateExperience(): number {",
      "src/utils/manual-stubs.ts:// export function generateRating(): number {",
      "src/utils/manual-stubs.ts:// export function generateHexColor(): string {",
      "src/utils/manual-stubs.ts:// export function randomSubset<T>(items: T[]): T[] {",
      "src/utils/manual-stubs.ts:// export function generateId(prefix?: string): string {",
      "src/utils/manual-stubs.ts:// export function generateTimestamp(): string {",
      "src/utils/mobile-accessibility.ts:export interface TouchGesture {",
      "src/utils/mobile-accessibility.ts:export interface MobileAccessibilityState {",
      "src/utils/mobile-accessibility.ts:export interface MobileDevice {",
      "src/utils/mobile-accessibility.ts:export class MobileAccessibilityService {",
      "src/utils/mobile-accessibility.ts:export default MobileAccessibilityService;",
      "src/utils/network-optimization.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/network-optimization.tsx:export interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {",
      "src/utils/network-optimization.tsx:export interface CacheEntry<T = any> {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:export const networkOptimizer = new NetworkOptimizer();",
      "src/utils/network-optimization.tsx:export function useOptimizedRequest<T = any>() {",
      "src/utils/network-optimization.tsx:export function useNetworkStats() {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {",
      "src/utils/network-optimization.tsx:export const NetworkStatus: React.FC<NetworkStatusProps> = ({",
      "src/utils/network-optimization.tsx:export default networkOptimizer;",
      "src/utils/performance-alerts.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlert {",
      "src/utils/performance-alerts.tsx:export interface AlertRule {",
      "src/utils/performance-alerts.tsx:export interface AlertAction {",
      "src/utils/performance-alerts.tsx:export interface PerformanceTrend {",
      "src/utils/performance-alerts.tsx:export interface OptimizationSuggestion {",
      "src/utils/performance-alerts.tsx:export const performanceAlertManager = new PerformanceAlertManager();",
      "src/utils/performance-alerts.tsx:export function usePerformanceAlerts() {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlertDisplayProps {",
      "src/utils/performance-alerts.tsx:export const PerformanceAlertDisplay: React.FC<PerformanceAlertDisplayProps> = ({",
      "src/utils/performance-alerts.tsx:export default performanceAlertManager;",
      "src/utils/performance-profiler.ts:  exportData(): PerformanceEntry[] {",
      "src/utils/performance-profiler.ts:export const performanceProfiler = new PerformanceProfiler();",
      "src/utils/performance-profiler.ts:export function withPerformanceProfiler<T extends {}>(",
      "src/utils/performance-profiler.ts:export function usePerformanceMonitor(componentName: string) {",
      "src/utils/performance-profiler.ts:export { Profiler } from 'react';",
      "src/utils/premium-testing.ts:export const MOCK_USAGE_DATA: Record<string, PremiumUsage> = {",
      "src/utils/premium-testing.ts:export class PremiumTester {",
      "src/utils/premium-testing.ts:export class PremiumIntegrationExamples {",
      "src/utils/premium-testing.ts:export { PremiumTester };",
      "src/utils/premium-testing.ts:export default PremiumIntegrationExamples;",
      "src/utils/progressive-loading.tsx:/* eslint-disable react-refresh/only-export-components */",
      "src/utils/progressive-loading.tsx:export interface LoadingPriority {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export interface LoadingState {",
      "src/utils/progressive-loading.tsx:export const progressiveLoader = new ProgressiveLoadManager();",
      "src/utils/progressive-loading.tsx:export function useProgressiveLoad<T>(",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export const ProgressiveWrapper: React.FC<ProgressiveWrapperProps> = ({",
      "src/utils/progressive-loading.tsx:export interface SkeletonProps {",
      "src/utils/progressive-loading.tsx:export const Skeleton: React.FC<SkeletonProps> = ({",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps",
      "src/utils/progressive-loading.tsx:export const ProgressiveImage: React.FC<ProgressiveImageProps> = ({",
      "src/utils/progressive-loading.tsx:export function inlineCriticalCSS() {",
      "src/utils/progressive-loading.tsx:export default progressiveLoader;",
      "src/utils/pwa.ts:export interface PWAInstallEvent extends Event {",
      "src/utils/pwa.ts:export default PWAUtils;",
      "src/utils/rtl-testing.tsx:export const createMockI18n = (language: SupportedLanguage = 'en') => {",
      "src/utils/rtl-testing.tsx:export const renderWithRTL = (ui: ReactElement, options: RTLRenderOptions = {}) => {",
      "src/utils/rtl-testing.tsx:export const rtlTestHelpers = {",
      "src/utils/rtl-testing.tsx:export const rtlTestScenarios = {",
      "src/utils/rtl-testing.tsx:export const rtlA11yHelpers = {",
      "src/utils/rtl-testing.tsx:export const rtlPerformanceHelpers = {",
      "src/utils/rtl-testing.tsx:export default {",
      "src/utils/rtl-utilities.ts:export const isRTL = (language: SupportedLanguage): boolean => {",
      "src/utils/rtl-utilities.ts:export const getTextDirection = (language: SupportedLanguage): 'ltr' | 'rtl' => {",
      "src/utils/rtl-utilities.ts:export const getFlexDirection = (",
      "src/utils/rtl-utilities.ts:export const getTextAlign = (",
      "src/utils/rtl-utilities.ts:export const logicalProperties = {",
      "src/utils/rtl-utilities.ts:export const getTransform = (",
      "src/utils/rtl-utilities.ts:export const rtlClassNames = {",
      "src/utils/rtl-utilities.ts:export const combineRTLClasses = (",
      "src/utils/rtl-utilities.ts:export const generateRTLUtilities = (theme: any) => {",
      "src/utils/screen-reader.ts:export interface ScreenReaderState {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/screen-reader.ts:export class ScreenReaderService {",
      "src/utils/screen-reader.ts:export class ARIAPatterns {",
      "src/utils/screen-reader.ts:export default ScreenReaderService;",
      "src/utils/service-worker-manager.ts:export class ServiceWorkerManager {",
      "src/utils/service-worker-manager.ts:export const serviceWorkerManager = ServiceWorkerManager.getInstance();",
      "src/utils/translationValidation.ts:export interface TranslationStructure {",
      "src/utils/translationValidation.ts:export interface ValidationResult {",
      "src/utils/translationValidation.ts:export interface ValidationIssue {",
      "src/utils/translationValidation.ts:export const createValidator = (referenceLanguage: SupportedLanguage = 'en') => {",
      "src/utils/translationValidation.ts:export const validateTranslationFile = async (",
      "src/utils/translationValidation.ts:export default TranslationValidator;",
      "src/utils/validation.ts:export interface ValidationResult {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {",
      "src/utils/validation.ts:export const validateTime = (time: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateLabel = (label: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateDays = (days: number[]): ValidationResult => {",
      "src/utils/validation.ts:export const validateVoiceMood = (voiceMood: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateAlarmData = (alarmData: {",
      "src/utils/validation.ts:export const sanitizeTextInput = (input: string): string => {",
      "src/utils/validation.ts:export const sanitizeHtmlInput = (input: string): string => {",
      "src/utils/validation.ts:export const validatePassword = (password: string) => {",
      "src/utils/validation.ts:export const validateNumber = (",
      "src/utils/validation.ts:export const validateEmail = (email: string): ValidationResult => {",
      "src/utils/validation.ts:export const validateUrl = (url: string): ValidationResult => {",
      "src/utils/voice-accessibility.ts:export interface VoiceCommand {",
      "src/utils/voice-accessibility.ts:export interface VoiceAccessibilityState {",
      "src/utils/voice-accessibility.ts:export class VoiceAccessibilityService {",
      "src/utils/voice-accessibility.ts:export default VoiceAccessibilityService;",
      "src/App.tsx:import type { Alarm, AppState, VoiceMood, User, Battle, DayOfWeek } from './types';",
      "src/App.tsx:import { formatProtectionMessage, formatTimeframe } from './types/tabProtection';",
      "src/App.tsx:    if (typeof updater === 'function') {",
      "src/App.tsx:      dispatch({ type: 'APP_UPDATE' as any, payload: newState });",
      "src/App.tsx:      dispatch({ type: 'APP_UPDATE' as any, payload: updater });",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:            // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:      const { type, data } = event.data;",
      "src/App.tsx:              // type-safe replacement",
      "src/App.tsx:                // type-safe replacement",
      "src/App.tsx:            new Error(`Unknown service worker message type: ${type}`),",
      "src/App.tsx:          const { type, data } = _event.data;",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:      const { action, emotion_type, notification_id, data: actionData } = event.detail;",
      "src/App.tsx:          type: 'alarm-delete',",
      "src/App.tsx:        type: 'alarm-toggle',",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:          // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                  // type-safe replacement",
      "src/App.tsx:                  type: battle.type || 'speed',",
      "src/App.tsx:                  // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/App.tsx:                    // type-safe replacement",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'auth_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'api_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'network_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:    results.push({ type: 'recovery', data: recovery.data });",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof alarm.is_active).toBe('boolean');",
      "src/__tests__/api/api-testing-utilities.ts:    expect(typeof response.success).toBe('boolean');",
      "src/__tests__/api/enhanced-msw-handlers.ts:import type { DefaultBodyType, HttpResponseResolver, PathParams } from 'msw';",
      "src/__tests__/api/enhanced-msw-handlers.ts:      type: 'weekly_challenge',",
      "src/__tests__/api/enhanced-msw-handlers.ts:        device_type: 'mobile',",
      "src/__tests__/api/enhanced-msw-handlers.ts:        type: 'elimination',",
      "src/__tests__/api/enhanced-msw-handlers.ts:          proof_type: body.proof_type,",
      "src/__tests__/api/enhanced-msw-handlers.ts:      token_type: 'bearer',",
      "src/__tests__/factories/core-factories-type-safety.test.ts: * Validates that all factory functions return properly typed objects",
      "src/__tests__/factories/core-factories-type-safety.test.ts: * without unsafe 'as any' type casts, ensuring type safety compliance.",
      "src/__tests__/factories/core-factories-type-safety.test.ts: * the core-factories type safety improvements.",
      "src/__tests__/factories/core-factories-type-safety.test.ts:import { Subscription } from '../../types/premium';",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed User object without any casts', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.email).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.username).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.subscriptionTier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.level).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.userId).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.tier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.status).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.amount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.currency).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.elevenlabsVoices).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.customVoiceMessages).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.premiumThemes).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.advancedAIInsights).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.nuclearMode).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof features.prioritySupport).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.theme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.colorPreferences.colorblindFriendly).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.typographyPreferences.preferredFontSize).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.motionPreferences.enableAnimations).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.soundPreferences.enableSounds).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.layoutPreferences.density).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        typeof personalization.accessibilityPreferences.screenReaderOptimized",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return proper Theme type for gameTheme', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof gameTheme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed SmartAlarmSettings', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.weatherEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.locationEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.fitnessEnabled).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.smartWakeWindow).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.adaptiveDifficulty).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.contextualTasks).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof smartFeatures.environmentalAdjustments).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleParticipantStats', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      const battle = createTestBattle({ type: 'consistency' });",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.tasksCompleted).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.snoozeCount).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof stats.score).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof stats.wakeTime).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattleSettings', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      const battle = createTestBattle({ type: 'speed' });",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof settings.duration).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.maxParticipants).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.allowLateJoins).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof settings.speedTarget).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.description).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof task.completed).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should return properly typed BattlePrize', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      const battle = createTestBattle({ type: 'consistency' });",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof battle.prize.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.title).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.badge).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:          expect(typeof battle.prize.seasonPoints).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:    it('should not contain any as any type casts in generated objects', () => {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      const battle = createTestBattle({ type: 'speed' });",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      // because the runtime types would not match the expected TypeScript types",
      "src/__tests__/factories/core-factories.ts: * - Battle (with different types and statuses)",
      "src/__tests__/factories/core-factories.ts:import type { Subscription } from '../../types/premium';",
      "src/__tests__/factories/core-factories.ts:    colorblindFriendly: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    highContrastMode: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts:    dyslexiaFriendly: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    enableAnimations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    reduceMotion: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    preferCrossfade: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    enableParallax: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    enableHoverEffects: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    enableFocusAnimations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    enableSounds: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    muteOnFocus: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    spatialAudio: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    showLabels: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    showIcons: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    screenReaderOptimized: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    keyboardNavigationOnly: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    highContrastMode: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts:    largeTargets: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    reducedTransparency: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    boldText: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    underlineLinks: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/core-factories.ts:    flashingElementsReduced: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    colorOnlyIndicators: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  syncAcrossDevices: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:// Note: ThemeConfig helper removed as we now use simple Theme type directly",
      "src/__tests__/factories/core-factories.ts:  weatherEnabled: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:  locationEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:  fitnessEnabled: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:  adaptiveDifficulty: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:  contextualTasks: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:  environmentalAdjustments: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    notificationsEnabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    soundEnabled: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    rewardsEnabled: faker.datatype.boolean({ probability: 0.85 }),",
      "src/__tests__/factories/core-factories.ts:    aiInsightsEnabled: premium && faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    personalizedMessagesEnabled: faker.datatype.boolean({ probability: 0.75 }),",
      "src/__tests__/factories/core-factories.ts:    shareAchievements: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    battleNotifications: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    friendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    trashTalkEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    autoJoinBattles: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:    smartFeaturesEnabled: premium && faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    fitnessIntegration: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    locationChallenges: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    photoChallenges: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:    email: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    sms: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    profileVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    statsVisible: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    allowFriendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    enabled = faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    isActive: enabled && faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/core-factories.ts:    customSoundId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:    snoozeEnabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    lastTriggered: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/core-factories.ts:    weatherEnabled: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:          adaptiveVolume: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:          sleepCycleDetection: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/core-factories.ts:          contextualMessages: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  actualWakeTime: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/core-factories.ts:  battleId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:  dismissed: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:  snoozed: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:  type?: BattleType;",
      "src/__tests__/factories/core-factories.ts:    type = faker.helpers.arrayElement(COMMON_DATA.battleTypes) as BattleType,",
      "src/__tests__/factories/core-factories.ts:    settings: createTestBattleSettings({ type, premium }),",
      "src/__tests__/factories/core-factories.ts:    tournamentId: type === 'tournament' ? generateId('tournament') : undefined,",
      "src/__tests__/factories/core-factories.ts:    teamId: type === 'team' ? generateId('team') : undefined,",
      "src/__tests__/factories/core-factories.ts:    seasonId: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/core-factories.ts:    completedAt: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/core-factories.ts:  type: BattleType;",
      "src/__tests__/factories/core-factories.ts:  const { type, premium } = options;",
      "src/__tests__/factories/core-factories.ts:    allowLateJoin: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/core-factories.ts:    publicVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/core-factories.ts:    autoStart: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/core-factories.ts:    requireVerification: premium && faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/core-factories.ts:    trashTalkEnabled: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:      type === 'speed'",
      "src/__tests__/factories/core-factories.ts:        : type === 'consistency'",
      "src/__tests__/factories/core-factories.ts:    isPremium = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/core-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/core-factories.ts:  reducedTransparency: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/core-factories.ts: * const tournamentBattle = createFlexibleBattle({ type: 'tournament' });",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.alarmAccuracy).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.wakeUpSuccess).toBe('number');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.userSatisfaction).toBe('number');",
      "src/__tests__/factories/enhanced-factories.ts:      sendTimeOptimization: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      personalizedSubjectLines: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      dynamicContent: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:      abTestEnabled: faker.datatype.boolean(),",
      "src/__tests__/factories/enhanced-factories.ts:    isActive: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/factories.test.ts: * consistent, properly typed mock data for testing purposes.",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:        type: expect.any(String),",
      "src/__tests__/factories/factories.test.ts:    it('should respect type parameter', () => {",
      "src/__tests__/factories/factories.test.ts:      expect(asset.type).toBe('audio');",
      "src/__tests__/factories/factory-utils.ts: * Enables flexible test object creation while maintaining type safety",
      "src/__tests__/factories/gaming-factories.ts:    unlocked = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/gaming-factories.ts:    completed: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/gaming-factories.ts:  const type = faker.helpers.arrayElement(requirementTypes[category]);",
      "src/__tests__/factories/gaming-factories.ts:    optional: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/gaming-factories.ts:  type?: 'single-elimination' | 'round-robin' | 'swiss';",
      "src/__tests__/factories/gaming-factories.ts:    type = faker.helpers.arrayElement(['single-elimination', 'round-robin', 'swiss']),",
      "src/__tests__/factories/gaming-factories.ts:    seasonId: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/gaming-factories.ts:  eliminated: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/gaming-factories.ts:  eliminatedRound: faker.datatype.boolean({ probability: 0.6 })",
      "src/__tests__/factories/gaming-factories.ts:  type: 'single-elimination' | 'round-robin' | 'swiss',",
      "src/__tests__/factories/gaming-factories.ts:  if (type === 'single-elimination') {",
      "src/__tests__/factories/gaming-factories.ts:  completedAt: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/factories/gaming-factories.ts:    isPublic = faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/gaming-factories.ts:    currentSeason: faker.datatype.boolean({ probability: 0.8 })",
      "src/__tests__/factories/gaming-factories.ts:      requireApproval: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/gaming-factories.ts:      allowInvites: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/gaming-factories.ts:      publicStats: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/gaming-factories.ts:      notifications: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/gaming-factories.ts:  isActive: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/gaming-factories.ts:      type: faker.helpers.arrayElement(['challenge', 'community', 'special']),",
      "src/__tests__/factories/gaming-factories.ts:    type: faker.helpers.arrayElement(['global', 'friends', 'team', 'regional']),",
      "src/__tests__/factories/gaming-factories.ts:  type: overrides.type || faker.helpers.arrayElement(['speed', 'consistency', 'tasks']),",
      "src/__tests__/factories/premium-factories.ts:} from '../../types/premium';",
      "src/__tests__/factories/premium-factories.ts:    trial = status === 'trialing' || faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:      status === 'canceled' || faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:      campaign: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/premium-factories.ts:      referrer: faker.datatype.boolean({ probability: 0.2 })",
      "src/__tests__/factories/premium-factories.ts:    isAddon: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:    addonPrice: faker.datatype.boolean({ probability: 0.2 })",
      "src/__tests__/factories/premium-factories.ts:    comingSoon: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/premium-factories.ts:  emotionalAdaptation: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/premium-factories.ts:  contextAwareness: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/premium-factories.ts:  personalizedMessages: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/premium-factories.ts:  multiLanguage: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/premium-factories.ts:  customizable: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/premium-factories.ts:  backgroundMusic: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/premium-factories.ts:  voiceEffects: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/premium-factories.ts:  realTimeGeneration: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/premium-factories.ts:    isCustom = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/premium-factories.ts:    isPreloaded: !isCustom && faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/premium-factories.ts:  type: faker.helpers.arrayElement(['sleep', 'wake', 'habit', 'battle', 'voice']),",
      "src/__tests__/factories/premium-factories.ts:  actionable: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/premium-factories.ts:  type: faker.helpers.arrayElement(['wake-time', 'consistency', 'streak', 'battles']),",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoicePersonality = Partial<VoicePersonality> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceSample = Partial<VoiceSample> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeVoiceFeatures = Partial<VoiceFeatures>;",
      "src/__tests__/factories/premium-factories.ts:export type SafeSleepInsights = Partial<SleepInsights> & {",
      "src/__tests__/factories/premium-factories.ts:export type SafeWakeUpPatterns = Partial<WakeUpPatterns> & { averageWakeTime?: string };",
      "src/__tests__/factories/premium-factories.ts:export type SafePerformanceMetrics = Partial<PerformanceMetrics> & {",
      "src/__tests__/factories/support-factories.ts:  type?: 'alarm' | 'battle' | 'achievement' | 'social' | 'system';",
      "src/__tests__/factories/support-factories.ts:    type = faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:    read = faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:    actionRequired: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:    actionUrl: faker.datatype.boolean({ probability: 0.4 }) ? generateUrl() : undefined,",
      "src/__tests__/factories/support-factories.ts:    expiresAt: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      alarms: faker.datatype.boolean({ probability: 0.95 }),",
      "src/__tests__/factories/support-factories.ts:      battles: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      achievements: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      social: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      marketing: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      digest: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:      important: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      marketing: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:      sound: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      vibration: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      badge: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      enabled: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      batchSimilar: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      animations: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      reduceMotion: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      highContrast: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      screenReader: faker.datatype.boolean({ probability: 0.05 }),",
      "src/__tests__/factories/support-factories.ts:      largeText: faker.datatype.boolean({ probability: 0.15 }),",
      "src/__tests__/factories/support-factories.ts:      colorBlindSupport: faker.datatype.boolean({ probability: 0.08 }),",
      "src/__tests__/factories/support-factories.ts:      keyboardNavigation: faker.datatype.boolean({ probability: 0.1 }),",
      "src/__tests__/factories/support-factories.ts:      profileVisible: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      statsVisible: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      allowFriendRequests: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:      showOnlineStatus: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      dataCollection: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      biometricAuth: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:      autoLock: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      requireAuthForSettings: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      cloudSync: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:      localBackup: faker.datatype.boolean({ probability: 0.5 }),",
      "src/__tests__/factories/support-factories.ts:      autoCleanup: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      betaFeatures: faker.datatype.boolean({ probability: 0.2 }),",
      "src/__tests__/factories/support-factories.ts:      aiFeatures: faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      analyticsSharing: faker.datatype.boolean({ probability: 0.4 }),",
      "src/__tests__/factories/support-factories.ts:  type?: 'image' | 'audio' | 'video' | 'document';",
      "src/__tests__/factories/support-factories.ts:    type = faker.helpers.arrayElement(['image', 'audio', 'video', 'document']),",
      "src/__tests__/factories/support-factories.ts:    isUserGenerated = faker.datatype.boolean({ probability: 0.3 }),",
      "src/__tests__/factories/support-factories.ts:      type === 'image' ? `${generateUrl()}/thumbnails/${fileName}` : undefined,",
      "src/__tests__/factories/support-factories.ts:      type === 'image'",
      "src/__tests__/factories/support-factories.ts:    isPublic: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:      variants: type === 'image' ? ['thumbnail', 'medium', 'large'] : ['original'],",
      "src/__tests__/factories/support-factories.ts:    extensions[type as keyof typeof extensions] || ['bin']",
      "src/__tests__/factories/support-factories.ts:  return mimeTypes[type as keyof typeof mimeTypes] || 'application/octet-stream';",
      "src/__tests__/factories/support-factories.ts:    isEnabled: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/factories/support-factories.ts:    isConnected: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      autoSync: faker.datatype.boolean({ probability: 0.8 }),",
      "src/__tests__/factories/support-factories.ts:      notifications: faker.datatype.boolean({ probability: 0.6 }),",
      "src/__tests__/factories/support-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:        success: faker.datatype.boolean({ probability: 0.9 }),",
      "src/__tests__/factories/support-factories.ts:    type: faker.helpers.arrayElement([",
      "src/__tests__/factories/support-factories.ts:      stack: faker.datatype.boolean({ probability: 0.3 })",
      "src/__tests__/factories/support-factories.ts:    userId: faker.datatype.boolean({ probability: 0.7 })",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:import type { UserEvent } from '@testing-library/user-event';",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:              typeof selector === 'string'",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:  async typeWithDelay(",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        await this.user.type(element, char);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        await this.user.type(field, value);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:    if (typeof expectedResult === 'function') {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:      await this.user.type(field, value);",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:        if (typeof expectedErrorMessage === 'string') {",
      "src/__tests__/integration/state-interface-validation.test.ts:} from '../../types/app-state';",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(loadAction.type).toBe('ALARMS_LOAD_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(loginAction.type).toBe('USER_LOGIN_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(upgradeAction.type).toBe('SUBSCRIPTION_UPGRADE_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(alarmAction.type).toBe('ALARM_CREATE_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(userAction.type).toBe('USER_LOGIN_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:      expect(subscriptionAction.type).toBe('SUBSCRIPTION_UPGRADE_SUCCESS');",
      "src/__tests__/integration/state-interface-validation.test.ts:    it('should simulate alarm reducer with typed state', () => {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:} from '../../types/websocket';",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'mobile',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (data.type === 'authentication_request') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:                  type: 'authentication_response',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (data.type === 'authentication_response' && data.success) {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'authentication_request',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (message.type === 'alarm_triggered') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            if (message.type === 'alarm_dismissed') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'alarm_dismissed',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'user_presence_update') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:              type: 'mobile',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:                type: scenario.activity,",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'user_presence_update',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(presenceUpdates[1]?.currentActivity?.type).toBe('in_meeting');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'recommendation_generated') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'recommendation_generated',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'ai_analysis_complete') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'sleep_pattern',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'ai_analysis_complete',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(analysisResults[0]?.type).toBe('sleep_pattern');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (data.type === 'heartbeat_pong') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            type: 'heartbeat_ping',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'system_notification') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        type: 'system_notification',",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      expect(notifications[0]?.type).toBe('warning');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_1', data: 'test1' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_2', data: 'test2' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:        { type: 'test_message_3', data: 'test3' },",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:      const sendEvents = events.filter(e => e.type === 'send');",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:            type: 'rate_limit_test',",
      "src/__tests__/mobile/mobile-testing-utilities.ts:  private testEvents: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/mobile/mobile-testing-utilities.ts:    this.testEvents.push({ type, data, timestamp: Date.now() });",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: true, type: 'cellular' as const },",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: false, type: 'none' as const },",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      { connected: true, type: 'wifi' as const }, // Reconnection",
      "src/__tests__/mobile/mobile-testing-utilities.ts:    for (const type of hapticTypes) {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      hapticResults.push({ type, triggered: true });",
      "src/__tests__/mobile/mobile-testing-utilities.ts:  simulateDevice(deviceName: keyof typeof this.deviceProfiles) {",
      "src/__tests__/mobile/mobile-testing-utilities.ts:      keyof typeof this.deviceProfiles",
      "src/__tests__/mocks/audio-mock.ts:    if (listener && typeof listener === 'function') {",
      "src/__tests__/mocks/audio-mock.ts:      (this as any)[`on${type}`] = listener;",
      "src/__tests__/mocks/audio-mock.ts:    if (type.includes('audio/mpeg') || type.includes('audio/mp3')) {",
      "src/__tests__/mocks/audio-mock.ts:    if (type.includes('audio/wav') || type.includes('audio/ogg')) {",
      "src/__tests__/mocks/audio-mock.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/mocks/audio-mock.ts:if (typeof window !== 'undefined') {",
      "src/__tests__/mocks/capacitor.mock.ts:type PermissionState = 'granted' | 'denied' | 'prompt';",
      "src/__tests__/mocks/capacitor.mock.ts:type Platform = 'web' | 'ios' | 'android';",
      "src/__tests__/mocks/capacitor.mock.ts:type NotificationAction = 'tap' | 'dismiss' | 'snooze';",
      "src/__tests__/mocks/capacitor.mock.ts:type HapticType = 'LIGHT' | 'MEDIUM' | 'HEAVY';",
      "src/__tests__/mocks/capacitor.mock.ts:type NotificationType = 'SUCCESS' | 'WARNING' | 'ERROR';",
      "src/__tests__/mocks/capacitor.mock.ts:      `\u26a1 Mock LocalNotifications.registerActionTypes: ${options.types.length} types`",
      "src/__tests__/mocks/capacitor.mock.ts:  notification: vi.fn((options?: { type?: NotificationType }) => {",
      "src/__tests__/mocks/capacitor.mock.ts:    const type = options?.type || 'SUCCESS';",
      "src/__tests__/mocks/capacitor.mock.ts:        type: 'file',",
      "src/__tests__/mocks/capacitor.mock.ts:        type: 'file',",
      "src/__tests__/mocks/capacitor.mock.ts:    permission: keyof typeof mockState.device.permissions,",
      "src/__tests__/mocks/capacitor.mock.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/mocks/enhanced-service-mocks.ts:} from '../../types/service-architecture';",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/enhanced-service-mocks.ts:      type: config.type || 'weekly_challenge',",
      "src/__tests__/mocks/enhanced-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/msw-handlers.ts:      token_type: 'bearer',",
      "src/__tests__/mocks/platform-service-mocks.ts:import type { User } from '@supabase/supabase-js';",
      "src/__tests__/mocks/platform-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/platform-service-mocks.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/platform-service-mocks.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/platform-service-mocks.ts:          type: 'weekly_challenge',",
      "src/__tests__/mocks/platform-service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/posthog.mock.ts:      if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/posthog.mock.ts:        if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/react-router.mock.ts:  if (typeof to === 'number') {",
      "src/__tests__/mocks/react-router.mock.ts:  } else if (to && typeof to === 'object') {",
      "src/__tests__/mocks/react-router.mock.ts:      } else if (typeof params === 'object') {",
      "src/__tests__/mocks/react-router.mock.ts:  const href = typeof to === 'string' ? to : to.pathname || '#';",
      "src/__tests__/mocks/react-router.mock.ts:    const linkPath = typeof to === 'string' ? to : to.pathname;",
      "src/__tests__/mocks/react-router.mock.ts:      typeof className === 'function'",
      "src/__tests__/mocks/react-router.mock.ts:      typeof style === 'function'",
      "src/__tests__/mocks/react-router.mock.ts:  if (typeof pattern === 'string') {",
      "src/__tests__/mocks/react-router.mock.ts:    if (typeof searchParams === 'string') {",
      "src/__tests__/mocks/sentry.mock.ts:      if (typeof value === 'function' && value.mockClear) {",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:        typeof arg === 'object' ? JSON.parse(JSON.stringify(arg)) : arg",
      "src/__tests__/mocks/service-mocks.ts:      type: battleData.type || 'weekly_challenge',",
      "src/__tests__/mocks/service-mocks.ts:            type: 'auto_generated',",
      "src/__tests__/mocks/stripe.mock.ts:            console.log(`\ud83c\udfaf Mock Stripe element mounted: ${type} to ${selector}`);",
      "src/__tests__/mocks/stripe.mock.ts:            console.log(`\ud83d\udc42 Mock Stripe element event listener: ${type} - ${_event}`);",
      "src/__tests__/mocks/stripe.mock.ts:              `\ud83d\udd07 Mock Stripe element event listener removed: ${type} - ${_event}`",
      "src/__tests__/mocks/stripe.mock.ts:  createPaymentMethod: jest.fn(({ type, card, billing_details }: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:        type: 'payment_intent.succeeded',",
      "src/__tests__/mocks/stripe.mock.ts:  // Error types for testing",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'card_error';",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'invalid_request_error';",
      "src/__tests__/mocks/supabase.mock.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/supabase.mock.ts:        const mockBlob = new Blob(['mock file content'], { type: 'text/plain' });",
      "src/__tests__/mocks/supabase.mock.ts:        token_type: 'bearer',",
      "src/__tests__/mocks/websocket-type-mocks.ts:} from '../../types/websocket';",
      "src/__tests__/mocks/websocket-type-mocks.ts:} from '../../types/realtime-messages';",
      "src/__tests__/mocks/websocket-type-mocks.ts:    type: 'mobile' | 'tablet' | 'desktop' | 'smartwatch' | 'smart_speaker' = 'mobile'",
      "src/__tests__/mocks/websocket-type-mocks.ts:      platform: type === 'mobile' ? 'iOS' : 'Windows',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          network: { type: 'cellular', effectiveType: '4g', downlink: 25, rtt: 50 },",
      "src/__tests__/mocks/websocket-type-mocks.ts:          network: { type: 'ethernet', downlink: 1000, rtt: 10 },",
      "src/__tests__/mocks/websocket-type-mocks.ts:          network: { type: 'bluetooth', rtt: 100 },",
      "src/__tests__/mocks/websocket-type-mocks.ts:    type: WebSocketErrorType = 'CONNECTION_FAILED'",
      "src/__tests__/mocks/websocket-type-mocks.ts:      code: type === 'CONNECTION_FAILED' ? 1006 : undefined,",
      "src/__tests__/mocks/websocket-type-mocks.ts:      details: { errorType: type, timestamp: Date.now() },",
      "src/__tests__/mocks/websocket-type-mocks.ts:      retryAfter: type === 'RATE_LIMITED' ? 60000 : undefined,",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'alarm_updates',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'mobile',",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'viewing_alarms',",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'mobile',",
      "src/__tests__/mocks/websocket-type-mocks.ts:        type: 'mobile',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'sleep_pattern',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'mood_improvement',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'voice_training',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'bedtime_adjustment',",
      "src/__tests__/mocks/websocket-type-mocks.ts:          type: 'secondary',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'service_outage',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: 'incremental_sync',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      type: type as any,",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.id === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.type === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof message.timestamp === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof info.reconnectCount === 'number' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.platform === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.userAgent === 'string' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.notifications === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.serviceWorker === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.webSocket === 'boolean' &&",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.capabilities.webRTC === 'boolean'",
      "src/__tests__/payments/payment-testing-utilities.ts:  private events: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/payments/payment-testing-utilities.ts:    this.events.push({ type, data, timestamp: Date.now() });",
      "src/__tests__/payments/payment-testing-utilities.ts:        type: 'card_error',",
      "src/__tests__/performance/performance-testing-utilities.ts:  private alerts: Array<{ type: string; message: string; timestamp: number }> = [];",
      "src/__tests__/performance/performance-testing-utilities.ts:        type: 'threshold_violation',",
      "src/__tests__/providers/context-providers.tsx:    featureAccess?: keyof typeof featureAccessScenarios;",
      "src/__tests__/providers/context-providers.tsx:    language?: keyof typeof languageScenarios;",
      "src/__tests__/providers/context-providers.tsx:    alarm?: keyof typeof alarmScenarios;",
      "src/__tests__/providers/context-providers.tsx:    theme?: keyof typeof themeScenarios;",
      "src/__tests__/providers/enhanced-service-providers.tsx:import type { BaseService, ServiceConfig } from '../../types/service-architecture';",
      "src/__tests__/providers/index.ts:  type TestProvidersOptions,",
      "src/__tests__/providers/index.ts:  type MockFeatureAccessContextValue,",
      "src/__tests__/providers/index.ts:  type MockLanguageContextValue,",
      "src/__tests__/providers/index.ts:  type MockAlarmContextValue,",
      "src/__tests__/providers/index.ts:  type MockThemeContextValue,",
      "src/__tests__/providers/index.ts:  type ContextTestOptions,",
      "src/__tests__/providers/index.ts:  type MockAlarmService,",
      "src/__tests__/providers/index.ts:  type MockAnalyticsService,",
      "src/__tests__/providers/index.ts:  type MockBattleService,",
      "src/__tests__/providers/index.ts:  type MockSubscriptionService,",
      "src/__tests__/providers/index.ts:  type MockVoiceService,",
      "src/__tests__/providers/index.ts:  type MockNotificationService,",
      "src/__tests__/providers/index.ts:  type MockAudioService,",
      "src/__tests__/providers/index.ts:  type MockStorageService,",
      "src/__tests__/providers/index.ts:  type MockSecurityService,",
      "src/__tests__/providers/index.ts:  type IntegrationTestOptions,",
      "src/__tests__/providers/integration-provider.tsx:  scenario: keyof typeof integrationScenarios,",
      "src/__tests__/providers/test-providers.tsx:  services?: Partial<ReturnType<typeof createMockServices>>;",
      "src/__tests__/providers/test-providers.tsx:  services?: Partial<ReturnType<typeof createMockServices>>;",
      "src/__tests__/providers/test-providers.tsx:  scenario: keyof typeof testScenarios,",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      this.trigger('open', { type: 'open' });",
      "src/__tests__/realtime/realtime-testing-utilities.ts:  addEventListener(type: string, listener: Function) {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:    this.eventListeners.get(type)!.push(listener);",
      "src/__tests__/realtime/realtime-testing-utilities.ts:  removeEventListener(type: string, listener: Function) {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: 'send',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:            this.triggerMessage({ type: 'pong', timestamp: Date.now() });",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          } else if (parsed.type === 'join_battle') {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:              type: 'battle_joined',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          } else if (parsed.type === 'wake_proof') {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:              type: 'wake_proof_verified',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'close',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: `event_${type}`,",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: 'message',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: 'error',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'participant_joined',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'wake_proof_submitted',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'leaderboard_updated',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'battle_phase_changed',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'join_battle',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:        type: 'wake_proof',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:    ws.send(JSON.stringify({ type: 'ping', timestamp: Date.now() }));",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          type: 'performance_test',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      event => event.socketId === ws.id && _event.type === 'event_message'",
      "src/__tests__/realtime/realtime-testing-utilities.ts:          typeof event.data.data === 'string'",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      _event.type.includes('reconnect')",
      "src/__tests__/realtime/websocket-testing.ts:  static events: Array<{ type: string; data: any; timestamp: number }> = [];",
      "src/__tests__/realtime/websocket-testing.ts:      this.trigger('open', { type: 'open' });",
      "src/__tests__/realtime/websocket-testing.ts:  addEventListener(type: string, listener: Function) {",
      "src/__tests__/realtime/websocket-testing.ts:    this.eventListeners.get(type)!.push(listener);",
      "src/__tests__/realtime/websocket-testing.ts:  removeEventListener(type: string, listener: Function) {",
      "src/__tests__/realtime/websocket-testing.ts:    MockWebSocket.events.push({ type: 'send', data, timestamp: Date.now() });",
      "src/__tests__/realtime/websocket-testing.ts:        type: 'close',",
      "src/__tests__/realtime/websocket-testing.ts:  private trigger(type: string, _event: any) {",
      "src/__tests__/realtime/websocket-testing.ts:      type: `event_${type}`,",
      "src/__tests__/realtime/websocket-testing.ts:      type: 'message',",
      "src/__tests__/realtime/websocket-testing.ts:        type: 'wake_proof',",
      "src/__tests__/services/realtime-service.integration.test.ts:} from '../../types/websocket';",
      "src/__tests__/services/realtime-service.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/services/realtime-service.integration.test.ts:          this.emit('_error', { type: 'INVALID_MESSAGE', _error });",
      "src/__tests__/services/realtime-service.integration.test.ts:      this.emit('_error', { type: 'SEND_FAILED', _error });",
      "src/__tests__/services/realtime-service.integration.test.ts:  async requestAnalysis(type: string, data: any): Promise<string> {",
      "src/__tests__/services/realtime-service.integration.test.ts:    this.emit(message.type, message.payload);",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('sync_requested');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(presenceUpdates[0]?.currentActivity?.type).toBe('viewing_alarms');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('user_presence_update');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(recommendations[0]?.type).toBe('alarm_optimization');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('ai_analysis_request');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.payload.type).toBe('sleep_pattern');",
      "src/__tests__/services/realtime-service.integration.test.ts:      for (const type of recommendationTypes) {",
      "src/__tests__/services/realtime-service.integration.test.ts:          recommendationId: `rec-${type}-${Date.now()}`,",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(recommendations.map(r => r.type)).toEqual(recommendationTypes);",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(notifications[0]?.type).toBe('info');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(alerts[0]?.type).toBe('service_outage');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(syncUpdates[0]?.type).toBe('incremental_sync');",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(errors[0]?.type).toBe('INVALID_MESSAGE');",
      "src/__tests__/services/realtime-service.integration.test.ts:      // Send different types of messages",
      "src/__tests__/services/websocket-manager.integration.test.ts:} from '../../types/websocket';",
      "src/__tests__/services/websocket-manager.integration.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/services/websocket-manager.integration.test.ts:          type: 'heartbeat_ping',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'test_message',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'test_message',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_dismissed',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[0]?.type).toBe('alarm_triggered');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[1]?.type).toBe('user_presence_update');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'alarm_updates',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_activity',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub1?.type).toBe('alarm_updates');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub2?.type).toBe('user_activity');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'system_notifications',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:        msg => msg.type === 'heartbeat_ping'",
      "src/__tests__/services/websocket-manager.integration.test.ts:      // Simulate various error types by sending invalid messages",
      "src/__tests__/services/websocket-manager.integration.test.ts:      await wsManager.send({ type: 'test1', data: 'small' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      await wsManager.send({ type: 'test2', data: 'larger message with more content' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      mockConnection?.simulateMessage({ type: 'response1', data: 'response' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'response2',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const subId1 = wsManager.subscribe({ type: 'alarm_updates', priority: 'high' });",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const subId2 = wsManager.subscribe({ type: 'user_activity', priority: 'normal' });",
      "src/__tests__/setup/after-env-setup.ts:if (typeof global !== 'undefined') {",
      "src/__tests__/setup/after-env-setup.ts:    addEventListener(type: string, listener: any) {",
      "src/__tests__/setup/after-env-setup.ts:      this[`on${type}` as keyof this] = listener;",
      "src/__tests__/setup/after-env-setup.ts:if (typeof window !== 'undefined') {",
      "src/__tests__/setup/after-env-setup.ts:    addEventListener(type: string, listener: any) {",
      "src/__tests__/setup/after-env-setup.ts:      this[`on${type}` as keyof this] = listener;",
      "src/__tests__/setup/after-env-setup.ts:        type: 'screen',",
      "src/__tests__/setup/after-env-setup.ts:        type: 'sine',",
      "src/__tests__/setup/after-env-setup.ts:  if (typeof message === 'string') {",
      "src/__tests__/setup/after-env-setup.ts:if (global && typeof global === 'object') {",
      "src/__tests__/setup/global-setup.ts:    if (typeof message === 'string') {",
      "src/__tests__/theme-integration.test.tsx:import type { AppState, User } from '../types';",
      "src/__tests__/types/websocket-types.unit.test.ts: * Tests type guards, message validation, and type utilities",
      "src/__tests__/types/websocket-types.unit.test.ts:} from '../../types/websocket';",
      "src/__tests__/types/websocket-types.unit.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/types/websocket-types.unit.test.ts:} from '../../types/realtime-messages';",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'alarm_triggered',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'user_presence_update',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'recommendation_generated',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'system_notification',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'unknown_type',",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'mobile',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'cellular',",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(mobileDevice.type).toBe('mobile');",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'desktop',",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(desktopDevice.type).toBe('desktop');",
      "src/__tests__/types/websocket-types.unit.test.ts:            type: 'mobile',",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'viewing_alarms',",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(_error.type).toBeTruthy();",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(typeof _error.recoverable).toBe('boolean');",
      "src/__tests__/types/websocket-types.unit.test.ts:          message: `Test ${type} _error`,",
      "src/__tests__/types/websocket-types.unit.test.ts:        expect(_error.type).toBe(type);",
      "src/__tests__/types/websocket-types.unit.test.ts:        expect(_error.message).toContain(type.toLowerCase().replace('_', ' '));",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'mobile',",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(connectionInfo.deviceInfo?.type).toBeTruthy();",
      "src/__tests__/types/websocket-types.unit.test.ts:          type: 'mobile',",
      "src/__tests__/utils/accessibility-helpers.ts:  type: '_error' | 'warning';",
      "src/__tests__/utils/accessibility-helpers.ts:        type: '_error',",
      "src/__tests__/utils/accessibility-helpers.ts:        'button,[role=\"button\"],input[type=\"button\"],input[type=\"submit\"]'",
      "src/__tests__/utils/accessibility-helpers.ts:          type: '_error',",
      "src/__tests__/utils/animation-helpers.tsx:    Element.prototype.animate = jest.fn(() => mockAnimation);",
      "src/__tests__/utils/animation-helpers.tsx:        return typeof children === 'function' ? children('entered') : children;",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received === 'object' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.id === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.userId === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.time === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.label === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.enabled === 'boolean' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received === 'object' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.id === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.email === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.name === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received === 'object' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.id === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.name === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.colors.primary === 'string' &&",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.colors.background === 'string';",
      "src/__tests__/utils/assertion-helpers.ts:      if (typeof received === 'function') {",
      "src/__tests__/utils/async-helpers.ts:          if (typeof scenario.expectedError === 'string') {",
      "src/__tests__/utils/async-helpers.ts:        if (typeof expectedError === 'string') {",
      "src/__tests__/utils/async-helpers.ts:    Promise.reject(typeof error === 'string' ? new Error(_error) : error),",
      "src/__tests__/utils/audio-helpers.ts:        eventListeners[event.type].forEach(callback => callback(_event));",
      "src/__tests__/utils/audio-helpers.ts:        type: 'sine',",
      "src/__tests__/utils/audio-helpers.ts:      (global as any).Audio.prototype.canPlayType = mockCanPlayType;",
      "src/__tests__/utils/data-builders.ts:    type: 'daily' | 'weekly' | 'monthly' = 'daily',",
      "src/__tests__/utils/data-builders.ts:    notifications: faker.datatype.boolean({ probability: 0.85 }),",
      "src/__tests__/utils/data-builders.ts:    hapticFeedback: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/utils/data-builders.ts:    voiceFeatures: isPremium ? faker.datatype.boolean({ probability: 0.8 }) : false,",
      "src/__tests__/utils/data-builders.ts:    advancedAnalytics: isPremium ? faker.datatype.boolean({ probability: 0.6 }) : false,",
      "src/__tests__/utils/data-builders.ts:        type: faker.helpers.arrayElement(challengeTypes),",
      "src/__tests__/utils/data-builders.ts:        completed: faker.datatype.boolean({ probability: 0.7 }),",
      "src/__tests__/utils/data-builders.ts:        .enabled(faker.datatype.boolean({ probability: 0.8 }));",
      "src/__tests__/utils/dom-helpers.ts:      if (typeof value === 'string') {",
      "src/__tests__/utils/dom-helpers.ts:        await user.type(field, value);",
      "src/__tests__/utils/dom-helpers.ts:      } else if (typeof value === 'boolean' && field.type === 'checkbox') {",
      "src/__tests__/utils/dom-helpers.ts:      await user.type(element, text);",
      "src/__tests__/utils/i18n-helpers.ts:        if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:      if (typeof value === 'string') {",
      "src/__tests__/utils/i18n-helpers.ts:          if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:        if (typeof value === 'string') {",
      "src/__tests__/utils/i18n-helpers.ts:          if (value && typeof value === 'object') {",
      "src/__tests__/utils/i18n-helpers.ts:        return typeof value === 'string';",
      "src/__tests__/utils/i18n-helpers.ts:      expect(typeof value).toBe('object');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof value).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof translated).toBe('string');",
      "src/__tests__/utils/i18n-helpers.ts:    expect(typeof formattedNumber).toBe('string');",
      "src/__tests__/utils/index.ts:    type: 'daily' | 'weekly' | 'monthly';",
      "src/__tests__/utils/index.ts:    type: 'math' | 'pattern' | 'memory' | 'reaction';",
      "src/__tests__/utils/mobile-helpers.ts:        type: 'landscape-primary',",
      "src/__tests__/utils/mobile-helpers.ts:        type: 'screen',",
      "src/__tests__/utils/performance-helpers.ts:          type: resource.initiatorType,",
      "src/__tests__/utils/performance-helpers.ts:    leakTest: Awaited<ReturnType<typeof memoryTesting.testMemoryLeak>>",
      "src/analytics/PersonaAnalytics.tsx:/// <reference types=\"node\" />",
      "src/analytics/PersonaAnalytics.tsx:} from '../types/index';",
      "src/analytics/PersonaAnalytics.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/analytics/PersonaAnalytics.tsx:import type { Metadata } from '../types/utility-types';",
      "src/analytics/PersonaAnalytics.tsx:// Define missing types based on what the component needs",
      "src/analytics/PersonaAnalytics.tsx:type UserPersona = {",
      "src/analytics/PersonaAnalytics.tsx:  type: PersonaType;",
      "src/analytics/PersonaAnalytics.tsx:export type PersonaAnalyticsEvent =",
      "src/backend/api.ts:// Import types from the main application",
      "src/backend/api.ts:} from '../types/index';",
      "src/backend/api.ts:    type: 'speed',",
      "src/backend/api.ts:        const type = url.searchParams.get('type');",
      "src/backend/api.ts:          filteredBattles = filteredBattles.filter(b => b.type === type);",
      "src/backend/api.ts:        if (!body.type || !body.creatorId || !body.startTime || !body.endTime) {",
      "src/backend/api.ts:          type: body.type,",
      "src/backend/api.ts:// GET  /api/battles - List battles (with type, status, userId filters)",
      "src/backend/cloudflare-functions.ts:      device_type: alarmData.deviceInfo.type,",
      "src/backend/cloudflare-functions.ts:      network_type: alarmData.deviceInfo.networkType,",
      "src/backend/cloudflare-functions.ts:      (id, alarm_id, fired_at, device_type, network_type, battery_level,",
      "src/backend/cloudflare-functions.ts:      existingData && typeof existingData === 'object'",
      "src/backend/cloudflare-functions.ts:    const themeTips = tips[theme as keyof typeof tips] || tips['morning-energy'];",
      "src/backend/cloudflare-functions.ts:      affirmations[theme as keyof typeof affirmations] || affirmations['morning-energy']",
      "src/backend/cloudflare-functions.ts:      GROUP BY a.alarm_type, a.voice_mood",
      "src/backend/cloudflare-functions.ts:          description: `Your ${asString(bestPerforming.alarm_type)} alarms with ${asString(bestPerforming.voice_mood)} mood are ${Math.round((asNumber(bestPerforming.avg_rating, 0) - asNumber(worstPerforming.avg_rating, 0)) * 20)}% more effective.`,",
      "src/backend/cloudflare-functions.ts:            alarm_type: asString(bestPerforming.alarm_type),",
      "src/backend/cloudflare-functions.ts:          recommendation_type: 'bedtime',",
      "src/backend/cloudflare-functions.ts:          recommendation_type: 'voice_optimization',",
      "src/backend/cloudflare-functions.ts:      if (data && typeof data === 'object' && 'events' in data) {",
      "src/backend/cloudflare-functions.ts:        const typedData = data as { events: any[]; totalTriggers: number };",
      "src/backend/cloudflare-functions.ts:        aggregatedData.totalAlarmTriggers += typedData.totalTriggers;",
      "src/backend/cloudflare-functions.ts:        for (const _event of typedData.events) {",
      "src/backend/cloudflare-functions.ts:      type: 'usage_pattern',",
      "src/backend/cloudflare-functions.ts:        type: 'device_preference',",
      "src/backend/database-types.ts:// Utility type for generic database operations",
      "src/backend/database-types.ts:// Type guards for runtime type checking",
      "src/backend/database-types.ts:  return typeof obj === 'object' && obj !== null && 'id' in obj && 'email' in obj;",
      "src/backend/database-types.ts:    typeof obj === 'object' &&",
      "src/backend/database-types.ts:    typeof obj === 'object' && obj !== null && 'alarm_id' in obj && 'user_id' in obj",
      "src/backend/database-types.ts:  return typeof value === 'number' && !isNaN(value);",
      "src/backend/database-types.ts:  return typeof value === 'string';",
      "src/backend/database-types.ts:// Safe type casting utilities",
      "src/backend/database-types.ts:  if (typeof value === 'number' && !isNaN(value)) return value;",
      "src/backend/database-types.ts:  if (typeof value === 'string') {",
      "src/backend/database-types.ts:  if (typeof value === 'string') return value;",
      "src/backend/database-types.ts:  if (typeof value === 'object' && value !== null) return value;",
      "src/backend/monitoring-integration.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/monitoring-integration.ts:          `device_type:${metric.device_type || 'unknown'}`,",
      "src/backend/monitoring-integration.ts:        type: metric.type || 'gauge',",
      "src/backend/monitoring-integration.ts:        event_type: event.event_name || 'performance_metric',",
      "src/backend/monitoring-integration.ts:         device_type, metadata, timestamp, created_at)",
      "src/backend/performance-monitoring.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/performance-monitoring.ts:          network_type: metric.network_type || 'unknown',",
      "src/backend/performance-monitoring.ts:           page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:             page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:                connection_type: vitalsData.connection_type,",
      "src/backend/performance-monitoring.ts:         page_path, user_agent, device_type, network_type, timestamp, metadata, created_at)",
      "src/backend/performance-monitoring.ts:          type: 'performance',",
      "src/backend/performance-monitoring.ts:          description: `LCP is ${Math.round(result.avg_value)}ms on ${result.device_type} devices. Target: <2500ms`,",
      "src/backend/performance-monitoring.ts:          type: 'interactivity',",
      "src/backend/performance-monitoring.ts:          description: `FID is ${Math.round(result.avg_value)}ms on ${result.device_type} devices. Target: <100ms`,",
      "src/backend/performance-monitoring.ts:          description: `CLS is ${result.avg_value.toFixed(3)} on ${result.device_type} devices. Target: <0.1`,",
      "src/backend/performance-monitoring.ts:        type: 'user_pattern',",
      "src/backend/performance-monitoring.ts:                type: error.error_category,",
      "src/backend/performance-monitoring.ts:            $device_type: event.device_type,",
      "src/backend/stripe-webhooks.ts:} from '../types/premium';",
      "src/backend/stripe-webhooks.ts:          console.log(`Unhandled webhook event type: ${_event.type}`);",
      "src/backend/stripe-webhooks.ts:    if (invoice.charge && typeof invoice.charge === 'string') {",
      "src/backend/stripe-webhooks.ts:    if (invoice.charge && typeof invoice.charge === 'string') {",
      "src/backend/stripe-webhooks.ts:      type: paymentMethod.type as any,",
      "src/backend/subscription-api.ts:} from '../types/premium';",
      "src/backend/subscription-api.ts:import type { RetentionOffer } from '../types/utility-types';",
      "src/backend/subscription-api.ts:        event_type: _event.type,",
      "src/backend/subscription-api.ts:        console.log(`Unhandled event type: ${_event.type}`);",
      "src/backend/webhook-config.ts:export type WebhookEventType = (typeof WEBHOOK_EVENTS)[number];",
      "src/backend/webhook-config.ts:      type: 'customer.subscription.created',",
      "src/backend/webhook-endpoint.ts:      `Successfully processed webhook ${event.type} (${_event.id}) in ${processingTime}ms`",
      "src/backend/webhook-endpoint.ts:        typeof request.body === 'string' ? request.body.substring(0, 1000) : '[Buffer]',",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/backend/webhook-endpoint.ts:          'content-type': req.headers['content-type'],",
      "src/components/AIAutomation.tsx:} from '../types/index';",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:    type: 'difficulty_adjustment',",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:    type: 'difficulty_adjustment',",
      "src/components/AIAutomation.tsx:    type: 'wake_time',",
      "src/components/AIAutomation.tsx:      { type: 'sleep_pattern', value: 'night_owl', weight: 0.8 },",
      "src/components/AIAutomation.tsx:      { type: 'motivation_style', value: 'gradual_progress', weight: 0.6 },",
      "src/components/AIAutomation.tsx:    personalizedFor: ['sleep_chronotype', 'performance_history'],",
      "src/components/AIAutomation.tsx:        type: 'external_api',",
      "src/components/AIAutomation.tsx:        type: 'weather',",
      "src/components/AIAutomation.tsx:    type: 'routine_adjustment',",
      "src/components/AIAutomation.tsx:        type: 'performance',",
      "src/components/AIAutomation.tsx:        type: 'update_settings',",
      "src/components/AIAutomation.tsx:        type: 'performance_threshold',",
      "src/components/AIAutomation.tsx:                        {optimization.type.replace('_', ' ')}",
      "src/components/AIAutomation.tsx:                      {typeof recommendation.action === 'object' &&",
      "src/components/AIAutomation.tsx:                        {challenge.type.replace('_', ' ')} Challenge",
      "src/components/AIAutomation.tsx:                              {factor.type.replace('_', ' ')}",
      "src/components/AccessibilityDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"range\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityDashboard.tsx:          type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:  const handlePreferenceChange = (key: keyof typeof preferences, value: any) => {",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                        e.target.value as typeof preferences.fontSize",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/AccessibilityTester.tsx:                    type=\"checkbox\"",
      "src/components/ActiveAlarm.tsx:import type { Alarm, AlarmDifficulty, AlarmInstance } from '../types/index';",
      "src/components/ActiveAlarm.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ActiveAlarm.tsx:// Different challenge types based on difficulty",
      "src/components/ActiveAlarm.tsx:        setCurrentChallenge({ type: 'tasks', tasks: extremeTasks });",
      "src/components/ActiveAlarm.tsx:                        type=\"number\"",
      "src/components/AdaptiveAlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AdaptiveButton.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveButton.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AdaptiveImage.tsx:      if (typeof window === 'undefined') return false;",
      "src/components/AdaptiveModal.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AdaptiveSpinner.tsx:import type { AnimationConfig } from '../utils/frame-rate-manager';",
      "src/components/AdaptiveSpinner.tsx:    // Different spinner types based on device capabilities",
      "src/components/AdaptiveSpinner.tsx:if (typeof window !== 'undefined' && typeof document !== 'undefined') {",
      "src/components/AdvancedAlarmScheduling.tsx:} from '../types/index';",
      "src/components/AdvancedAlarmScheduling.tsx:    return types[type as keyof typeof types] || type;",
      "src/components/AdvancedAlarmScheduling.tsx:        type=\"multiple\"",
      "src/components/AdvancedAlarmScheduling.tsx:                  type=\"time\"",
      "src/components/AdvancedAlarmScheduling.tsx:                <Label htmlFor=\"schedule-type\">Schedule Type</Label>",
      "src/components/AdvancedAlarmScheduling.tsx:                    type=\"number\"",
      "src/components/AdvancedAlarmScheduling.tsx:                          type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                          type: value as any,",
      "src/components/AdvancedAlarmScheduling.tsx:                              type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                              type: prev.recurrencePattern?.type || 'daily',",
      "src/components/AdvancedAlarmScheduling.tsx:                      type=\"date\"",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'sleep_cycle',",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'sunrise_sunset',",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'weather_forecast',",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'energy_levels',",
      "src/components/AdvancedAlarmScheduling.tsx:                  type: 'workout_schedule',",
      "src/components/AdvancedAlarmScheduling.tsx:              ].map(({ type, icon: Icon, label, desc }) => (",
      "src/components/AdvancedAlarmScheduling.tsx:                            o => o.type === type && o.isEnabled",
      "src/components/AdvancedAlarmScheduling.tsx:                            o => o.type === type",
      "src/components/AdvancedAlarmScheduling.tsx:                                type: type as any,",
      "src/components/AdvancedAlarmScheduling.tsx:                        type=\"number\"",
      "src/components/AdvancedAnalytics.tsx:} from '../types/index';",
      "src/components/AdvancedSchedulingDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/AdvancedSchedulingDashboard.tsx:              onClick={() => onScheduleAlarm?.({ type: 'smart', enabled: true })}",
      "src/components/AdvancedSchedulingDashboard.tsx:                  type=\"number\"",
      "src/components/AdvancedSchedulingDashboard.tsx:                  <input type=\"checkbox\" className=\"mr-2\" defaultChecked />",
      "src/components/AlarmForm.tsx:import type { Alarm, VoiceMood, CustomSound, AlarmDifficulty, User } from '../types';",
      "src/components/AlarmForm.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmForm.tsx:              type=\"time\"",
      "src/components/AlarmForm.tsx:              type=\"text\"",
      "src/components/AlarmForm.tsx:                    Select the challenge types you want to face:",
      "src/components/AlarmForm.tsx:                          type=\"checkbox\"",
      "src/components/AlarmForm.tsx:                      type=\"file\"",
      "src/components/AlarmList.tsx:import type { Alarm } from '../types';",
      "src/components/AlarmList.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmList.tsx:          type: 'alarm-delete',",
      "src/components/AlarmList.tsx:        type: 'alarm-toggle',",
      "src/components/AlarmManagement.tsx:import type { Alarm, DayOfWeek, AlarmDifficulty, VoiceMood } from '../types/index';",
      "src/components/AlarmManagement.tsx:import { type EnhancedSmartAlarm } from '../services/enhanced-smart-alarm-scheduler';",
      "src/components/AlarmManagement.tsx:        key => dayMap[key as keyof typeof dayMap] === checkDate.getDay()",
      "src/components/AlarmManagement.tsx:                        type=\"time\"",
      "src/components/AlarmManagement.tsx:                  type=\"time\"",
      "src/components/AlarmRinging.tsx:/// <reference types=\"node\" />",
      "src/components/AlarmRinging.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmRinging.tsx:import type { Alarm, User } from '../types';",
      "src/components/AlarmRinging.tsx:  type VoiceCommand,",
      "src/components/AlarmRinging.tsx:import type { NuclearModeSession, NuclearModeChallenge as Challenge } from '../types';",
      "src/components/AlarmRinging.tsx:// Web Speech API type declarations",
      "src/components/AlarmRinging.tsx:    webkitAudioContext: typeof AudioContext;",
      "src/components/AlarmRinging.tsx:          oscillator.type = 'sine';",
      "src/components/AlarmTester.tsx:} from '../types/index';",
      "src/components/AlarmTester.tsx:              type=\"checkbox\"",
      "src/components/AlarmThemeBrowser.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmThemeBrowser.tsx:type ViewMode = 'grid' | 'list' | 'collections';",
      "src/components/AlarmThemeBrowser.tsx:type SortMode = 'popularity' | 'recent' | 'alphabetical' | 'rating' | 'category';",
      "src/components/AlarmThemeBrowser.tsx:                type=\"text\"",
      "src/components/AlarmThemeBrowser.tsx:                      type=\"checkbox\"",
      "src/components/AlarmThemeBrowser.tsx:                      type=\"checkbox\"",
      "src/components/AlarmThemeSelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmThemeSelector.tsx:              type=\"text\"",
      "src/components/AnalyticsProvider.tsx:import type { ReactNode } from 'react';",
      "src/components/AnalyticsProvider.tsx:        element_type: element,",
      "src/components/AuthenticationFlow.tsx:type AuthView = 'login' | 'signup' | 'forgot-password';",
      "src/components/BattleSystem.tsx:} from '../types/index';",
      "src/components/BattleSystem.tsx:    type: 'speed' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'consistency' as BattleType,",
      "src/components/BattleSystem.tsx:    type: 'tasks' as BattleType,",
      "src/components/BattleSystem.tsx:      const battleType = BATTLE_TYPES.find(bt => bt.type === selectedBattleType)!;",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:        type: selectedBattleType,",
      "src/components/BattleSystem.tsx:          type: battle.type,",
      "src/components/BattleSystem.tsx:          type: battle.type,",
      "src/components/BattleSystem.tsx:      type: battle.type,",
      "src/components/BattleSystem.tsx:                        type=\"checkbox\"",
      "src/components/BattleSystem.tsx:              const battleType = BATTLE_TYPES.find(bt => bt.type === battle.type)!;",
      "src/components/BattleSystem.tsx:                                type: 'battle',",
      "src/components/CSRFProtection.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/CloudSyncControls.tsx:                  type=\"checkbox\"",
      "src/components/CloudSyncControls.tsx:                  type=\"checkbox\"",
      "src/components/CloudSyncControls.tsx:                  type=\"checkbox\"",
      "src/components/CommunityHub.tsx:} from '../types/index';",
      "src/components/CommunityHub.tsx:    type: 'weekly',",
      "src/components/CommunityHub.tsx:    type: 'achievement',",
      "src/components/CommunityHub.tsx:  const getQuestTypeEmoji = (type: Quest['type']) => {",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                            type: 'leaderboard',",
      "src/components/CommunityHub.tsx:                          variant={quest.type === 'daily' ? 'default' : 'secondary'}",
      "src/components/CompleteThemeSystemDemo.tsx:                type=\"text\"",
      "src/components/CompleteThemeSystemDemo.tsx:                  type=\"text\"",
      "src/components/CompleteThemeSystemDemo.tsx:                        type=\"checkbox\"",
      "src/components/CompleteThemeSystemDemo.tsx:                  type=\"time\"",
      "src/components/CompleteThemeSystemDemo.tsx:                  type=\"date\"",
      "src/components/CompleteThemeSystemDemo.tsx:                      {ctx.type}: {ctx.value}",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/CompleteThemeSystemDemo.tsx:              type=\"range\"",
      "src/components/ComprehensiveSecurityDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ComprehensiveSecurityDashboard.tsx:  type: 'immediate' | 'hourly' | 'daily';",
      "src/components/ComprehensiveSecurityDashboard.tsx:                  type=\"checkbox\"",
      "src/components/ConsentBanner.tsx:  type ConsentSettings,",
      "src/components/ConsentBanner.tsx:  const handleConsentChange = (type: keyof ConsentSettings, value: boolean) => {",
      "src/components/ConsentBanner.tsx:      [type]: value,",
      "src/components/ConsentBanner.tsx:                        type=\"checkbox\"",
      "src/components/CustomSoundThemeCreator.tsx:} from '../types/custom-sound-themes';",
      "src/components/CustomThemeManager.tsx:} from '../types/custom-sound-themes';",
      "src/components/CustomThemeManager.tsx:type ViewMode = 'grid' | 'list';",
      "src/components/CustomThemeManager.tsx:type SortOption = 'name' | 'created' | 'updated' | 'rating' | 'downloads';",
      "src/components/CustomThemeManager.tsx:type FilterCategory = 'all' | CustomSoundThemeCategory;",
      "src/components/CustomThemeManager.tsx:    input.type = 'file';",
      "src/components/CustomThemeManager.tsx:            type=\"checkbox\"",
      "src/components/Dashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EmotionalNudgeModal.tsx:} from '../types/emotional';",
      "src/components/EmotionalNudgeModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/EnhancedBattles.tsx:import type { Tournament, Team, Season, User as UserType } from '../types/index';",
      "src/components/EnhancedBattles.tsx:    type: 'single-elimination',",
      "src/components/EnhancedBattles.tsx:  type: 'mixed',",
      "src/components/EnhancedBattles.tsx:                          type: 'tournament',",
      "src/components/EnhancedBattles.tsx:                          type: 'friend',",
      "src/components/EnhancedBattles.tsx:                    <Label htmlFor=\"tournament-type\">Type</Label>",
      "src/components/EnhancedBattles.tsx:                        type: 'friend',",
      "src/components/EnhancedDashboard.tsx:import type { Alarm } from '../types';",
      "src/components/EnhancedDashboard.tsx:                  type: achievement.achievementType,",
      "src/components/EnhancedDashboard.tsx:                  type: achievement.achievementType,",
      "src/components/EnhancedDashboard.tsx:                type: celebration.celebrationType,",
      "src/components/EnhancedMediaContent.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/EnhancedMediaContent.tsx:} from '../services/types/media';",
      "src/components/EnhancedMediaContent.tsx:                type=\"file\"",
      "src/components/EnhancedSettings.tsx:import type { AppState, User } from '../types';",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type EnhancedSmartAlarm,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type ConditionBasedAdjustment,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type OptimalTimeSlot,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type SmartAlarmMetrics,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type WakeUpFeedback,",
      "src/components/EnhancedSmartAlarmSettings.tsx:  type SmartRecommendation,",
      "src/components/EnhancedSmartAlarmSettings.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/EnhancedSmartAlarmSettings.tsx:                    const IconComponent = conditionIcons[condition.type] || Settings;",
      "src/components/EnhancedSmartAlarmSettings.tsx:                      type=\"checkbox\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                          type=\"checkbox\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                          type=\"checkbox\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                        type=\"range\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                        type=\"range\"",
      "src/components/EnhancedSmartAlarmSettings.tsx:                const Icon = conditionIcons[condition.type] || Settings;",
      "src/components/EnhancedSmartAlarmSettings.tsx:                              {condition.type.replace('_', ' ')} Adjustment",
      "src/components/EnhancedSmartAlarmSettings.tsx:                              type=\"checkbox\"",
      "src/components/ErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/ErrorBoundaryTest.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ErrorBoundaryTest.tsx:    // Trigger different types of errors",
      "src/components/ErrorBoundaryTest.tsx:      case 'type-error':",
      "src/components/ErrorBoundaryTest.tsx:        throw new Error(`Unknown test _error type: ${type}`);",
      "src/components/ExtendedScreenReaderTester.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ExtendedScreenReaderTester.tsx:          appSpecificCategoryConfig[key as keyof typeof appSpecificCategoryConfig];",
      "src/components/ExtendedScreenReaderTester.tsx:            key as keyof typeof additionalAppSpecificCategoryConfig",
      "src/components/ExtendedScreenReaderTester.tsx:              type=\"checkbox\"",
      "src/components/ExtendedScreenReaderTester.tsx:              type=\"checkbox\"",
      "src/components/ForgotPasswordForm.tsx:              type=\"email\"",
      "src/components/FriendsManager.tsx:import type { User as UserType, UserStats, Friendship } from '../types/index';",
      "src/components/FriendsManager.tsx:                    type: 'friend',",
      "src/components/FriendsManager.tsx:                            type: 'battle',",
      "src/components/FriendsManager.tsx:                                type: 'friend',",
      "src/components/Gamification.tsx:} from '../types/index';",
      "src/components/Gamification.tsx:    type: 'streak',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 250, description: '250 XP' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'Early Bird', description: 'Early Bird Badge' },",
      "src/components/Gamification.tsx:        type: 'early_wake',",
      "src/components/Gamification.tsx:    type: 'milestone',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 1000, description: '1000 XP' },",
      "src/components/Gamification.tsx:        type: 'title',",
      "src/components/Gamification.tsx:      { type: 'theme', value: 'champion', description: 'Champion Theme' },",
      "src/components/Gamification.tsx:    requirements: [{ type: 'battles_won', value: 50, description: 'Win 50 battles' }],",
      "src/components/Gamification.tsx:      { type: 'experience', value: 500, description: '500 XP' },",
      "src/components/Gamification.tsx:        type: 'badge',",
      "src/components/Gamification.tsx:    requirements: [{ type: 'friends_added', value: 20, description: 'Add 20 friends' }],",
      "src/components/Gamification.tsx:    type: 'no_snooze',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/Gamification.tsx:      { type: 'badge', value: 'No Snooze Hero', description: 'Daily Badge' },",
      "src/components/Gamification.tsx:    type: 'friend_challenge',",
      "src/components/Gamification.tsx:    rewards: [{ type: 'experience', value: 100, description: '100 XP' }],",
      "src/components/Gamification.tsx:    type: 'wake_early',",
      "src/components/Gamification.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/Gamification.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/Gamification.tsx:        type: 'title',",
      "src/components/Gamification.tsx:        type: 'theme',",
      "src/components/Gamification.tsx:        type: 'achievement',",
      "src/components/Gamification.tsx:        type: 'quest',",
      "src/components/Gamification.tsx:                      (reward && typeof reward.value === 'number' ? reward.value : 0)",
      "src/components/GamingHub.tsx:import type { User, Battle, RewardSystem } from '../types';",
      "src/components/HabitCelebration.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/HabitCelebration.tsx:    if (celebration && celebration.animation.type === 'confetti') {",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'streak_reached' &&",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'achievement_earned' &&",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'challenge_won' && 'Challenge Victory!'}",
      "src/components/HabitCelebration.tsx:                  {celebration.trigger.type === 'milestone_hit' &&",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'badge' && (",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'experience' && (",
      "src/components/HabitCelebration.tsx:                            {reward.type === 'streak_freeze' && (",
      "src/components/HabitCelebration.tsx:                                {reward.type.replace('_', ' ').toUpperCase()}",
      "src/components/LoginForm.tsx:              type=\"email\"",
      "src/components/LoginForm.tsx:              type={showPassword ? 'text' : 'password'}",
      "src/components/MediaContent.tsx:} from '../types/index';",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 50, description: '50 XP' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Early Bird', description: 'Morning Selfie Badge' },",
      "src/components/MediaContent.tsx:      { type: 'experience', value: 100, description: '100 XP' },",
      "src/components/MediaContent.tsx:      { type: 'badge', value: 'Nutrition Expert', description: 'Healthy Eating Badge' },",
      "src/components/MediaContent.tsx:        xp: challenge.rewards.find(r => r.type === 'experience')?.value,",
      "src/components/MediaContent.tsx:        badge: challenge.rewards.find(r => r.type === 'badge')?.value?.toString(),",
      "src/components/MobileAccessibilityProvider.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/MobileTester.tsx:// import { TimeoutHandle } from '../types/timers';",
      "src/components/NuclearModeBattle.tsx:/// <reference types=\"node\" />",
      "src/components/NuclearModeBattle.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/NuclearModeBattle.tsx:import type { Alarm, User, AlarmDifficulty } from '../types';",
      "src/components/NuclearModeBattle.tsx:  type: 'sequence' | 'math' | 'pattern' | 'endurance' | 'precision';",
      "src/components/NuclearModeBattle.tsx:    type: 'sequence',",
      "src/components/NuclearModeBattle.tsx:    type: 'pattern',",
      "src/components/NuclearModeBattle.tsx:    type: 'endurance',",
      "src/components/NuclearModeBattle.tsx:    type: 'precision',",
      "src/components/NuclearModeChallenge.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/NuclearModeChallenge.tsx:            type=\"number\"",
      "src/components/NuclearModeChallenge.tsx:      type: 'selfie',",
      "src/components/NuclearModeChallenge.tsx:      type: 'date_proof',",
      "src/components/NuclearModeChallenge.tsx:          type=\"file\"",
      "src/components/NuclearModeChallenge.tsx:              Challenge type not implemented: {currentChallenge.type}",
      "src/components/NuclearModeSelector.tsx:      type: NuclearChallengeType;",
      "src/components/NuclearModeSelector.tsx:        const types = nuclearModeService.getChallengeTypes();",
      "src/components/NuclearModeSelector.tsx:      const challenge = challengeTypes.find((c: any) => c.type === challengeType);",
      "src/components/NuclearModeSelector.tsx:                      <div key={challenge.type} className=\"p-4 border rounded-lg\">",
      "src/components/NuclearModeSelector.tsx:                    onClick={() => handleChallengeToggle(challenge.type, !isSelected)}",
      "src/components/NuclearModeSelector.tsx:                          handleChallengeToggle(challenge.type, checked as boolean)",
      "src/components/OfflineDiagnostics.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OfflineDiagnostics.tsx:          controller.postMessage({ type: 'GET_STATUS' }, [channel.port2]);",
      "src/components/OfflineIndicator.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OnboardingFlow.tsx:import type { AppState } from '../types';",
      "src/components/OnboardingFlow.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OnboardingFlow.tsx:type OnboardingStep =",
      "src/components/PWAInstallPrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PWAStatusDashboard.tsx:  type PWACapabilities,",
      "src/components/PWAStatusDashboard.tsx:import { OfflineManager, type SyncStatus } from '../services/offline-manager';",
      "src/components/PerformanceDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PerformanceProfilerWrapper.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PerformanceProfilerWrapper.tsx:              type=\"checkbox\"",
      "src/components/PersonaFocusDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PersonalizationSettings.tsx:              type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"range\"",
      "src/components/PersonalizationSettings.tsx:            type=\"range\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:          type=\"range\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PersonalizationSettings.tsx:            type=\"checkbox\"",
      "src/components/PremiumDashboard.tsx:import type { PremiumFeatureAccess } from '../types';",
      "src/components/PremiumThemeSettings.tsx:import type { ThemeConfig } from '../types';",
      "src/components/PremiumThemeShowcase.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PremiumThemeShowcase.tsx:              type=\"text\"",
      "src/components/PricingPage.tsx:import type { User } from '../types';",
      "src/components/PushNotificationSettings.tsx:import type { PushNotificationSettings } from '../services/push-notifications';",
      "src/components/PushNotificationSettings.tsx:                type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                    type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                    type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                    type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                    type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                    type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                      type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                      type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                      type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                        type=\"checkbox\"",
      "src/components/PushNotificationSettings.tsx:                          type=\"time\"",
      "src/components/PushNotificationSettings.tsx:                          type=\"time\"",
      "src/components/PushNotificationTester.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/QuickAlarmSetup.tsx:import type { DayOfWeek } from '../types/index';",
      "src/components/QuickAlarmSetup.tsx:              type=\"time\"",
      "src/components/QuickAlarmSetup.tsx:          <Button type=\"submit\" className=\"w-full\" disabled={selectedDays.length === 0}>",
      "src/components/RTLLayout/RTLContainer.tsx:    typeof padding === 'boolean'",
      "src/components/RTLLayout/RTLFlex.tsx:    return directionClasses[direction as keyof typeof directionClasses] || 'flex-row';",
      "src/components/RTLLayout/RTLFlex.tsx:        flex.justifyContent[justify] as keyof typeof justifyClasses",
      "src/components/RTLLayout/RTLFlex.tsx:    ...(gap && { gap: typeof gap === 'number' ? `${gap}px` : gap }),",
      "src/components/RTLLayout/RTLGrid.tsx:    if (typeof cols === 'number') {",
      "src/components/RTLLayout/RTLGrid.tsx:      return colsClasses[cols as keyof typeof colsClasses] || 'grid-cols-1';",
      "src/components/RTLLayout/RTLGrid.tsx:      classes.push(colsClasses[cols.sm as keyof typeof colsClasses]);",
      "src/components/RTLLayout/RTLGrid.tsx:        responsiveColsClasses[breakpoint as keyof typeof responsiveColsClasses]",
      "src/components/RTLLayout/RTLGrid.tsx:          responsiveColsClasses[breakpoint as keyof typeof responsiveColsClasses][",
      "src/components/RTLLayout/RTLGrid.tsx:            value as keyof typeof responsiveColsClasses.sm",
      "src/components/RTLLayout/RTLGrid.tsx:    return autoFlowClasses[autoFlow as keyof typeof autoFlowClasses] || 'grid-flow-row';",
      "src/components/RTLLayout/RTLGrid.tsx:    rows && typeof rows === 'number' && `grid-rows-${rows}`,",
      "src/components/RTLLayout/RTLGrid.tsx:    ...(gap && typeof gap === 'object'",
      "src/components/RTLLayout/RTLGrid.tsx:          columnGap: typeof gap.x === 'number' ? `${gap.x}px` : gap.x,",
      "src/components/RTLLayout/RTLGrid.tsx:          rowGap: typeof gap.y === 'number' ? `${gap.y}px` : gap.y,",
      "src/components/RTLLayout/RTLGrid.tsx:          gap: typeof gap === 'number' ? `${gap}px` : gap,",
      "src/components/RTLLayout/RTLText.tsx:    if (typeof truncate === 'number') {",
      "src/components/RealtimeDemo.tsx:} from '../types/realtime';",
      "src/components/RealtimeDemo.tsx:                  Type: {_error.type} | Severity: {_error.severity}",
      "src/components/RewardsDashboard.tsx:import type { RewardSystem, Reward, AIInsight, UserHabit } from '../types';",
      "src/components/RewardsDashboard.tsx:        type: 'reward',",
      "src/components/RewardsDashboard.tsx:        type: 'level',",
      "src/components/RewardsDashboard.tsx:          type: 'achievement',",
      "src/components/RewardsDashboard.tsx:          type: 'quest',",
      "src/components/RewardsDashboard.tsx:                        type: 'reward',",
      "src/components/RewardsDashboard.tsx:                  type: 'reward',",
      "src/components/RootErrorBoundary.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/RootErrorBoundary.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ScreenReaderProvider.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SettingsPage.tsx:import type { AppState, VoiceMood, Theme } from '../types';",
      "src/components/SettingsPage.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SettingsPage.tsx:        sectionNames[section as keyof typeof sectionNames] || section,",
      "src/components/SettingsPage.tsx:                  type=\"range\"",
      "src/components/SignUpForm.tsx:    typeof SecurityService.checkPasswordStrength",
      "src/components/SignUpForm.tsx:  const handleInputChange = (field: keyof typeof formData, value: string) => {",
      "src/components/SignUpForm.tsx:              type=\"text\"",
      "src/components/SignUpForm.tsx:              type=\"email\"",
      "src/components/SignUpForm.tsx:              type={showPassword ? 'text' : 'password'}",
      "src/components/SignUpForm.tsx:              type={showConfirmPassword ? 'text' : 'password'}",
      "src/components/SleepTracker.tsx:  type SleepSession,",
      "src/components/SleepTracker.tsx:  type SleepPattern,",
      "src/components/SleepTracker.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/SleepTracker.tsx:                      type=\"date\"",
      "src/components/SleepTracker.tsx:                        type=\"time\"",
      "src/components/SleepTracker.tsx:                        type=\"time\"",
      "src/components/SleepTracker.tsx:                      type=\"range\"",
      "src/components/SleepTracker.tsx:                        {sleepPattern.chronotype.replace('_', ' ').toUpperCase()}",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'extreme_early' &&",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'early' &&",
      "src/components/SleepTracker.tsx:                        'You have a normal chronotype! Your sleep schedule aligns with typical social hours.'}",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'late' &&",
      "src/components/SleepTracker.tsx:                      {sleepPattern.chronotype === 'extreme_late' &&",
      "src/components/SmartAlarmDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SmartAlarmDashboard.tsx:  type EnhancedSmartAlarm,",
      "src/components/SmartAlarmDashboard.tsx:  type OptimalTimeSlot,",
      "src/components/SmartAlarmDashboard.tsx:                                    {condition.type.replace('_', ' ')}",
      "src/components/SmartAlarmSettings.tsx:  type SleepGoal,",
      "src/components/SmartAlarmSettings.tsx:  type UserScheduleAnalysis,",
      "src/components/SmartAlarmSettings.tsx:  type ScheduleRecommendation,",
      "src/components/SmartAlarmSettings.tsx:  const getScoreColor = (score: number, type: 'percentage' | 'debt'): string => {",
      "src/components/SmartAlarmSettings.tsx:    if (type === 'debt') {",
      "src/components/SmartAlarmSettings.tsx:                onClick={() => setActiveTab(tab.id as typeof activeTab)}",
      "src/components/SmartAlarmSettings.tsx:                      type=\"checkbox\"",
      "src/components/SmartAlarmSettings.tsx:                          type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                            type=\"checkbox\"",
      "src/components/SmartAlarmSettings.tsx:                            type=\"checkbox\"",
      "src/components/SmartAlarmSettings.tsx:                            type=\"checkbox\"",
      "src/components/SmartAlarmSettings.tsx:                    type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                      type=\"time\"",
      "src/components/SmartAlarmSettings.tsx:                      type=\"time\"",
      "src/components/SmartAlarmSettings.tsx:                        type=\"checkbox\"",
      "src/components/SmartAlarmSettings.tsx:                      type=\"range\"",
      "src/components/SmartAlarmSettings.tsx:                          className={`font-semibold ${getScoreColor(scheduleAnalysis.chronotypeAlignment, 'percentage')}`}",
      "src/components/SmartAlarmSettings.tsx:                          {scheduleAnalysis.chronotypeAlignment}%",
      "src/components/SmartAlarmSettings.tsx:                            scheduleAnalysis.chronotypeAlignment >= 80",
      "src/components/SmartAlarmSettings.tsx:                              : scheduleAnalysis.chronotypeAlignment >= 60",
      "src/components/SmartAlarmSettings.tsx:                          style={{ width: `${scheduleAnalysis.chronotypeAlignment}%` }}",
      "src/components/SmartFeatures.tsx:} from '../types/index';",
      "src/components/SmartFeatures.tsx:    type: 'visit_place',",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 150, description: '150 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Coffee Enthusiast', description: 'Coffee Badge' },",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 200, description: '200 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'bonus_xp', value: 50, description: '50 Bonus XP' },",
      "src/components/SmartFeatures.tsx:    type: 'task_master',",
      "src/components/SmartFeatures.tsx:      { type: 'experience', value: 100, description: '100 XP' },",
      "src/components/SmartFeatures.tsx:      { type: 'badge', value: 'Step Master', description: 'Daily Steps Badge' },",
      "src/components/SmartFeatures.tsx:      type: 'visit_place',",
      "src/components/SmartFeatures.tsx:                  type=\"number\"",
      "src/components/SmartUpgradePrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SmartUpgradePrompt.tsx:          transition={{ type: 'spring', damping: 25, stiffness: 300 }}",
      "src/components/SocialProof.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SocialProof.tsx:                          {currentProof.type.replace('_', ' ').toUpperCase()}",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'streak_started' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'achievement_unlocked' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'challenge_joined' && (",
      "src/components/SocialProof.tsx:                      {currentActivity.type === 'milestone_reached' && (",
      "src/components/SoundPicker.tsx:} from '../types/custom-sound-themes';",
      "src/components/SoundPicker.tsx:    type: 'sine_wave' as const,",
      "src/components/SoundPicker.tsx:      type: 'uploaded',",
      "src/components/SoundPicker.tsx:      type: 'generated',",
      "src/components/SoundPicker.tsx:        type: generatedSoundConfig.type,",
      "src/components/SoundPicker.tsx:  const getSoundTypeIcon = (type: CustomSoundType) => {",
      "src/components/SoundPicker.tsx:                                  type: value,",
      "src/components/SoundPicker.tsx:                              type=\"range\"",
      "src/components/SoundPicker.tsx:                              type=\"range\"",
      "src/components/SoundPreviewSystem.tsx:/// <reference types=\"node\" />",
      "src/components/SoundPreviewSystem.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundPreviewSystem.tsx:} from '../types/custom-sound-themes';",
      "src/components/SoundSettings.tsx:import type { SoundEffectId, SoundTheme } from '../services/sound-effects';",
      "src/components/SoundSettings.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundThemeDemo.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundThemeDemo.tsx:  // Sound types for testing",
      "src/components/SoundUploader.tsx:} from '../types/custom-sound-themes';",
      "src/components/SoundUploader.tsx:              type=\"file\"",
      "src/components/SpecializedErrorBoundaries.tsx:import React, { Component, type ReactNode, type ErrorInfo } from 'react';",
      "src/components/StreakCounter.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/StreakCounter.tsx:              type: 'badge',",
      "src/components/StrugglingSamWrapper.tsx:import type { Alarm } from '../types';",
      "src/components/SubscriptionStatus.tsx:import type { User, SubscriptionStatus as SubscriptionStatusType } from '../types';",
      "src/components/SyncStatus.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SyncStatus.tsx:  type SyncStatus as SyncStatusType,",
      "src/components/SyncStatus.tsx:  type OfflineCapabilities,",
      "src/components/TabProtectionSettings.tsx:import { formatTimeframe } from '../types/tabProtection';",
      "src/components/TabProtectionSettings.tsx:            type=\"checkbox\"",
      "src/components/TabProtectionSettings.tsx:                      type=\"checkbox\"",
      "src/components/TabProtectionSettings.tsx:                      type=\"checkbox\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionSettings.tsx:                      type=\"checkbox\"",
      "src/components/TabProtectionSettings.tsx:                    type=\"checkbox\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"range\"",
      "src/components/TabProtectionSettings.tsx:                        type=\"checkbox\"",
      "src/components/TabProtectionWarning.tsx:import type { Alarm } from '../types';",
      "src/components/TabProtectionWarning.tsx:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/components/TabProtectionWarning.tsx:import { formatProtectionMessage, formatTimeframe } from '../types/tabProtection';",
      "src/components/TabProtectionWarning.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ThemeCreator.tsx:          type=\"text\"",
      "src/components/ThemeCreator.tsx:            type=\"text\"",
      "src/components/ThemeCreator.tsx:                      type=\"text\"",
      "src/components/ThemeCreator.tsx:                          type=\"text\"",
      "src/components/ThemeCreator.tsx:                          type=\"time\"",
      "src/components/ThemeCreator.tsx:                          type=\"text\"",
      "src/components/ThemeCustomizationStudio.tsx:        type=\"text\"",
      "src/components/ThemeCustomizationStudio.tsx:          type=\"checkbox\"",
      "src/components/ThemeCustomizationStudio.tsx:          if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:          if (typeof value === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:        if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:        if (typeof shades === 'object') {",
      "src/components/ThemeCustomizationStudio.tsx:                        {typeof shades === 'object' &&",
      "src/components/ThemeCustomizationStudio.tsx:                        <div key={type} className=\"font-family-control\">",
      "src/components/ThemeCustomizationStudio.tsx:                            {type.charAt(0).toUpperCase() + type.slice(1)} Font",
      "src/components/ThemeCustomizationStudio.tsx:                            type=\"text\"",
      "src/components/ThemeCustomizationStudio.tsx:                            type=\"text\"",
      "src/components/ThemeCustomizationStudio.tsx:                            type=\"text\"",
      "src/components/ThemeCustomizationStudio.tsx:                            type=\"range\"",
      "src/components/ThemeGallery.tsx:import type { CustomThemeConfig, ThemePreset, Theme } from '../types';",
      "src/components/ThemeGallery.tsx:            type=\"text\"",
      "src/components/ThemeManager.tsx:import type { Theme, CustomThemeConfig } from '../types';",
      "src/components/ThemeManager.tsx:                type=\"file\"",
      "src/components/ThemeManager.tsx:                type=\"file\"",
      "src/components/ThemeStudio.tsx:import type { CustomThemeConfig } from '../types';",
      "src/components/ThemeStudio.tsx:type StudioView = 'gallery' | 'creator' | 'editor';",
      "src/components/TranslationDashboard.tsx:                        type=\"monotone\"",
      "src/components/UpgradePrompt.tsx:    typeof feature === 'string'",
      "src/components/UserProfile.tsx:import type { User as AppUser, VoiceMood } from '../types';",
      "src/components/UserProfile.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/VisualAlarmDisplay.tsx:        {theme.background.type === 'pattern' && (",
      "src/components/VoiceCloning.tsx:/// <reference types=\"node\" />",
      "src/components/VoiceCloning.tsx:import type { User, VoiceCloneRequest } from '../types';",
      "src/components/VoiceCloning.tsx:                  type=\"file\"",
      "src/components/VoicePersonalitySelector.tsx:import type { VoiceMood, VoiceMoodConfig, User } from '../types';",
      "src/components/VoicePersonalitySelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/VoiceSelector.tsx:import type { VoiceMood, VoiceMoodConfig, VoicePersonality, User } from '../types';",
      "src/components/VoiceSelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/VoiceSettings.tsx:  type VoiceProvider,",
      "src/components/VoiceSettings.tsx:  type VoiceOption,",
      "src/components/VoiceSettings.tsx:import type { VoiceMood } from '../types';",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/VoiceSettings.tsx:                  type=\"range\"",
      "src/components/VoiceSettings.tsx:                  type=\"checkbox\"",
      "src/components/VoiceSettings.tsx:                  type=\"checkbox\"",
      "src/components/WakeUpFeedbackModal.tsx:import { type WakeUpFeedback } from '../services/enhanced-smart-alarm-scheduler';",
      "src/components/WakeUpFeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/WakeUpFeedbackModal.tsx:                  type=\"time\"",
      "src/components/WakeUpFeedbackModal.tsx:                type=\"range\"",
      "src/components/WakeUpFeedbackModal.tsx:              type=\"range\"",
      "src/components/WakeUpFeedbackModal.tsx:                  type=\"checkbox\"",
      "src/components/WakeUpFeedbackModal.tsx:                  type=\"checkbox\"",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        type=\"time\"",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        type=\"text\"",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:            <input type=\"checkbox\" name=\"days\" value={day.toLowerCase()} />",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        <input type=\"checkbox\" />",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      <button type=\"submit\" onClick={onSave}>",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      <button type=\"button\" onClick={onCancel}>",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        'input[type=\"time\"]',",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        'input[type=\"text\"]',",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:        'input[type=\"checkbox\"]:not([name=\"days\"])', // snooze checkbox",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      expect(timeInput).toHaveAttribute('type', 'time');",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      await user.type(timeInput, '09:30');",
      "src/components/__tests__/AlarmForm.a11y.test.tsx:      const checkboxes = container.querySelectorAll('input[type=\"checkbox\"]');",
      "src/components/__tests__/AlarmForm.test.tsx:import type { Alarm, VoiceMood } from '../../types';",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '09:15');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Custom Alarm');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '25:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'A');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '25:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '25:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'A');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '25:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '09:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '08:30');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Work Alarm');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, 'Updated Label');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '25:00');",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(labelInput, longLabel);",
      "src/components/__tests__/AlarmForm.test.tsx:      await user.type(timeInput, '08:30');",
      "src/components/__tests__/BattleSystem.test.tsx: * different battle types, participant management, and trash talk functionality.",
      "src/components/__tests__/BattleSystem.test.tsx:      type: 'speed',",
      "src/components/__tests__/BattleSystem.test.tsx:      type: 'consistency',",
      "src/components/__tests__/BattleSystem.test.tsx:    it('shows battle creation form when type is selected', async () => {",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'My Epic Battle');",
      "src/components/__tests__/BattleSystem.test.tsx:            type: 'speed',",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, \"You're going down!\");",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, longMessage);",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(searchInput, 'Friend One');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, 'Offline message');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/BattleSystem.test.tsx:      await user.type(messageInput, 'Test message');",
      "src/components/__tests__/Dashboard.test.tsx:      jest.spyOn(Date.prototype, 'getHours').mockReturnValueOnce(7); // Morning",
      "src/components/__tests__/GamingHub.test.tsx:import type { User, Battle, RewardSystem } from '../../types';",
      "src/components/__tests__/GamingHub.test.tsx:          onClick={() => onCreateBattle({ type: 'speed' })}",
      "src/components/__tests__/GamingHub.test.tsx:          onClick={() => onCreateBattle({ type: 'consistency' })}",
      "src/components/__tests__/GamingHub.test.tsx:      type: 'speed',",
      "src/components/__tests__/GamingHub.test.tsx:      type: 'consistency',",
      "src/components/__tests__/GamingHub.test.tsx:        type: 'speed',",
      "src/components/__tests__/GamingHub.test.tsx:        type: 'consistency',",
      "src/components/__tests__/GamingIntegration.test.tsx:      type: 'speed',",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(startTimeInput, tomorrow.toISOString().slice(0, 16));",
      "src/components/__tests__/GamingIntegration.test.tsx:            type: 'speed',",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Test Battle');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Test description');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(messageInput, \"You're going down, Speed Demon!\");",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(messageInput, 'This is inappropriate content!');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/battle name/i), 'Recovery Test');",
      "src/components/__tests__/GamingIntegration.test.tsx:      await user.type(screen.getByLabelText(/description/i), 'Testing recovery');",
      "src/components/__tests__/RootErrorBoundary.test.tsx:    (_error as any).type = errorType;",
      "src/components/animations/AnimationLibrary.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/animations/AnimationLibrary.tsx:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/components/animations/AnimationLibrary.tsx:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/components/animations/AnimationLibrary.tsx:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/components/animations/AnimationLibrary.tsx:        transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:        transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:          transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:  type: 'success' | '_error' | 'warning' | 'info';",
      "src/components/animations/AnimationLibrary.tsx:  const typeStyles = {",
      "src/components/animations/AnimationLibrary.tsx:        ${typeStyles[type].bg}",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:        <div className={`flex-shrink-0 ${typeStyles[type].icon}`}>",
      "src/components/animations/AnimationLibrary.tsx:        className={`absolute bottom-0 left-0 h-1 ${typeStyles[type].progress}`}",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/LoadingStates.tsx:          transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/MicroInteractions.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/animations/MicroInteractions.tsx:  type?: 'text' | 'email' | 'password' | 'number' | 'tel';",
      "src/components/animations/MicroInteractions.tsx:  type = 'text',",
      "src/components/animations/MicroInteractions.tsx:          type={type}",
      "src/components/animations/MicroInteractions.tsx:                    transition={{ type: 'spring' as const, stiffness: 300 }}",
      "src/components/animations/MicroInteractions.tsx:            scale: { duration: 0.2, type: 'spring' as const, stiffness: 300 },",
      "src/components/premium/BillingHistory.tsx:import type { Invoice, PaymentStatus } from '../../types/premium';",
      "src/components/premium/EnhancedUpgradePrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PaymentFlow.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PaymentFlow.tsx:} from '../../types/premium';",
      "src/components/premium/PaymentFlow.tsx:                type=\"email\"",
      "src/components/premium/PaymentMethodManager.tsx:import type { PaymentMethod, PaymentMethod } from '../../types/premium';",
      "src/components/premium/PaymentMethodManager.tsx:  const getPaymentMethodIcon = (type: PaymentMethod) => {",
      "src/components/premium/PaymentMethodManager.tsx:                        {method.type === 'card' && method.cardData ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'apple_pay' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                        ) : method.type === 'google_pay' ? (",
      "src/components/premium/PaymentMethodManager.tsx:                    {method.type === 'card' && method.cardData && (",
      "src/components/premium/PremiumAlarmFeatures.tsx:import type { Alarm } from '../../types';",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"3\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  type: scheduleType,",
      "src/components/premium/PremiumAlarmFeatures.tsx:            {soundCategories[selectedCategory as keyof typeof soundCategories].map(",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"7\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  <Input type=\"number\" placeholder=\"100\" />",
      "src/components/premium/PremiumAlarmFeatures.tsx:                  type: battleType,",
      "src/components/premium/PremiumAnalytics.tsx:    type: 'tip' | 'warning' | 'achievement';",
      "src/components/premium/PremiumAnalytics.tsx:        type: 'achievement',",
      "src/components/premium/PremiumFeaturePreview.tsx:import type { VoiceMood, AlarmDifficulty } from '../../types';",
      "src/components/premium/PremiumFeaturePreview.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PremiumVoiceFeatures.tsx:                  type=\"checkbox\"",
      "src/components/premium/PsychologyDrivenCTA.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/SubscriptionDashboard.tsx:} from '../../types/premium';",
      "src/components/premium/SubscriptionDashboard.tsx:                    featureKey as keyof typeof data.currentPlan.limits",
      "src/components/premium/SubscriptionDashboard.tsx:                  typeof limit === 'number'",
      "src/components/premium/SubscriptionDashboard.tsx:                          <span>{typeof limit === 'number' ? limit : '\u221e'} limit</span>",
      "src/components/premium/SubscriptionDashboard.tsx:                        {typeof limit === 'number' && (",
      "src/components/premium/SubscriptionManagement.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/SubscriptionManagement.tsx:} from '../../types/premium';",
      "src/components/premium/SubscriptionPage.tsx:import type { SubscriptionPlan, BillingInterval } from '../../types/premium';",
      "src/components/premium/SubscriptionPage.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:import type { PaymentMethod, CreateSubscriptionRequest } from '../../../types/premium';",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(expiryInput, '13/25'); // Invalid month",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(emailInput, 'invalid-email');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PaymentFlow.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4000000000000002'); // Declined card",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/card number/i), '4242424242424242');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/expiry date/i), '12/25');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cvc/i), '123');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/cardholder name/i), 'John Doe');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/email/i), 'john@example.com');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/address line 1/i), '123 Main St');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/city/i), 'New York');",
      "src/components/premium/__tests__/PremiumIntegration.test.tsx:      await user.type(screen.getByLabelText(/postal code/i), '10001');",
      "src/components/premium/__tests__/PricingTable.test.tsx:import type { SubscriptionPlan, BillingInterval } from '../../../types/premium';",
      "src/components/premium/__tests__/SubscriptionDashboard.test.tsx:import type { SubscriptionDashboardData } from '../../../types/premium';",
      "src/components/premium/index.ts:// Re-export types for convenience",
      "src/components/premium/index.ts:} from '../../types/premium';",
      "src/components/ui/__tests__/button.a11y.test.tsx:      await user.type(button, '{Enter}');",
      "src/components/ui/__tests__/input.a11y.test.tsx:      for (const type of inputTypes) {",
      "src/components/ui/__tests__/input.a11y.test.tsx:            <label htmlFor={`${type}-input`}>{type} Input</label>",
      "src/components/ui/__tests__/input.a11y.test.tsx:            <Input id={`${type}-input`} type={type as any} />",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"labeled-input\" type=\"email\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'email');",
      "src/components/ui/__tests__/input.a11y.test.tsx:      await axeRender(<Input aria-label=\"Search products\" type=\"search\" />, {",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input type=\"password\" aria-labelledby=\"password-heading password-help\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:            type=\"email\"",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"good-placeholder\" type=\"email\" placeholder=\"_user@example.com\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      await user.type(input, 'Hello world');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"number-input\" type=\"number\" min=\"0\" max=\"120\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      // Test arrow key navigation - clear and type new value",
      "src/components/ui/__tests__/input.a11y.test.tsx:      await user.type(input, 'John Doe');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"email\" type=\"email\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'email');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"phone\" type=\"tel\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'tel');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"search\" type=\"search\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'search');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"file-input\" type=\"file\" accept=\".jpg,.png\" />",
      "src/components/ui/__tests__/input.a11y.test.tsx:      expect(input).toHaveAttribute('type', 'file');",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"multi-file\" type=\"file\" multiple />",
      "src/components/ui/accordion.tsx:function Accordion({ ...props }: React.ComponentProps<typeof AccordionPrimitive.Root>) {",
      "src/components/ui/accordion.tsx:}: React.ComponentProps<typeof AccordionPrimitive.Item>) {",
      "src/components/ui/accordion.tsx:}: React.ComponentProps<typeof AccordionPrimitive.Trigger>) {",
      "src/components/ui/accordion.tsx:}: React.ComponentProps<typeof AccordionPrimitive.Content>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Root>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Trigger>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Portal>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Overlay>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Content>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Title>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Description>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Action>) {",
      "src/components/ui/alert-dialog.tsx:}: React.ComponentProps<typeof AlertDialogPrimitive.Cancel>) {",
      "src/components/ui/alert.tsx:}: React.ComponentProps<'div'> & VariantProps<typeof alertVariants>) {",
      "src/components/ui/aspect-ratio.tsx:}: React.ComponentProps<typeof AspectRatioPrimitive.Root>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Root>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Image>) {",
      "src/components/ui/avatar.tsx:}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {",
      "src/components/ui/badge.tsx:  VariantProps<typeof badgeVariants> & { asChild?: boolean }) {",
      "src/components/ui/calendar.tsx:}: React.ComponentProps<typeof DayPicker>) {",
      "src/components/ui/carousel.tsx:import useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';",
      "src/components/ui/carousel.tsx:type CarouselApi = UseEmblaCarouselType[1];",
      "src/components/ui/carousel.tsx:type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;",
      "src/components/ui/carousel.tsx:type CarouselOptions = UseCarouselParameters[0];",
      "src/components/ui/carousel.tsx:type CarouselPlugin = UseCarouselParameters[1];",
      "src/components/ui/carousel.tsx:type CarouselProps = {",
      "src/components/ui/carousel.tsx:type CarouselContextProps = {",
      "src/components/ui/carousel.tsx:  carouselRef: ReturnType<typeof useEmblaCarousel>[0];",
      "src/components/ui/carousel.tsx:  api: ReturnType<typeof useEmblaCarousel>[1];",
      "src/components/ui/carousel.tsx:  type CarouselApi,",
      "src/components/ui/chart.tsx:type ChartContextProps = { _config: ChartConfig };",
      "src/components/ui/chart.tsx:    typeof RechartsPrimitive.ResponsiveContainer",
      "src/components/ui/chart.tsx:      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;",
      "src/components/ui/chart.tsx:}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &",
      "src/components/ui/chart.tsx:      !labelKey && typeof label === 'string'",
      "src/components/ui/chart.tsx:        ? config[label as keyof typeof config]?.label || label",
      "src/components/ui/chart.tsx:  if (typeof payload !== 'object' || payload === null) {",
      "src/components/ui/chart.tsx:    typeof payload.payload === 'object' &&",
      "src/components/ui/chart.tsx:  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {",
      "src/components/ui/chart.tsx:    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'",
      "src/components/ui/checkbox.tsx:}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.Root>) {",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleTrigger>) {",
      "src/components/ui/collapsible.tsx:}: React.ComponentProps<typeof CollapsiblePrimitive.CollapsibleContent>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Input>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.List>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Empty>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Group>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Separator>) {",
      "src/components/ui/command.tsx:}: React.ComponentProps<typeof CommandPrimitive.Item>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Root>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Trigger>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Group>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Portal>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Sub>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.RadioGroup>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.SubTrigger> & {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.SubContent>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Content>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Item> & {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.CheckboxItem>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.RadioItem>) {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Label> & {",
      "src/components/ui/context-menu.tsx:}: React.ComponentProps<typeof ContextMenuPrimitive.Separator>) {",
      "src/components/ui/dialog.tsx:function Dialog({ ...props }: React.ComponentProps<typeof DialogPrimitive.Root>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Portal>) {",
      "src/components/ui/dialog.tsx:function DialogClose({ ...props }: React.ComponentProps<typeof DialogPrimitive.Close>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Content> & {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Title>) {",
      "src/components/ui/dialog.tsx:}: React.ComponentProps<typeof DialogPrimitive.Description>) {",
      "src/components/ui/drawer.tsx:function Drawer({ ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Trigger>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Portal>) {",
      "src/components/ui/drawer.tsx:function DrawerClose({ ...props }: React.ComponentProps<typeof DrawerPrimitive.Close>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Overlay>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Content>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Title>) {",
      "src/components/ui/drawer.tsx:}: React.ComponentProps<typeof DrawerPrimitive.Description>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {",
      "src/components/ui/dropdown-menu.tsx:}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {",
      "src/components/ui/form.tsx:  type ControllerProps,",
      "src/components/ui/form.tsx:  type FieldPath,",
      "src/components/ui/form.tsx:  type FieldValues,",
      "src/components/ui/form.tsx:type FormFieldContextValue<",
      "src/components/ui/form.tsx:type FormItemContextValue = {",
      "src/components/ui/form.tsx:}: React.ComponentProps<typeof LabelPrimitive.Root>) {",
      "src/components/ui/hover-card.tsx:function HoverCard({ ...props }: React.ComponentProps<typeof HoverCardPrimitive.Root>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Trigger>) {",
      "src/components/ui/hover-card.tsx:}: React.ComponentProps<typeof HoverCardPrimitive.Content>) {",
      "src/components/ui/input.tsx:      type={type}",
      "src/components/ui/label.tsx:}: React.ComponentProps<typeof LabelPrimitive.Root>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Root>) {",
      "src/components/ui/menubar.tsx:function MenubarMenu({ ...props }: React.ComponentProps<typeof MenubarPrimitive.Menu>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Group>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Trigger>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Content>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Item> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.CheckboxItem>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.RadioItem>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Label> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.Separator>) {",
      "src/components/ui/menubar.tsx:function MenubarSub({ ...props }: React.ComponentProps<typeof MenubarPrimitive.Sub>) {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.SubTrigger> & {",
      "src/components/ui/menubar.tsx:}: React.ComponentProps<typeof MenubarPrimitive.SubContent>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Root> & {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.List>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Item>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Trigger>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Content>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Viewport>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Link>) {",
      "src/components/ui/navigation-menu.tsx:}: React.ComponentProps<typeof NavigationMenuPrimitive.Indicator>) {",
      "src/components/ui/pagination.tsx:} & Pick<React.ComponentProps<typeof Button>, 'size'> &",
      "src/components/ui/popover.tsx:function Popover({ ...props }: React.ComponentProps<typeof PopoverPrimitive.Root>) {",
      "src/components/ui/popover.tsx:}: React.ComponentProps<typeof PopoverPrimitive.Trigger>) {",
      "src/components/ui/popover.tsx:}: React.ComponentProps<typeof PopoverPrimitive.Content>) {",
      "src/components/ui/popover.tsx:}: React.ComponentProps<typeof PopoverPrimitive.Anchor>) {",
      "src/components/ui/progress.tsx:}: React.ComponentProps<typeof ProgressPrimitive.Root>) {",
      "src/components/ui/radio-group.tsx:}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {",
      "src/components/ui/radio-group.tsx:}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {",
      "src/components/ui/resizable.tsx:}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {",
      "src/components/ui/scroll-area.tsx:}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {",
      "src/components/ui/scroll-area.tsx:}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {",
      "src/components/ui/select.tsx:function Select({ ...props }: React.ComponentProps<typeof SelectPrimitive.Root>) {",
      "src/components/ui/select.tsx:function SelectGroup({ ...props }: React.ComponentProps<typeof SelectPrimitive.Group>) {",
      "src/components/ui/select.tsx:function SelectValue({ ...props }: React.ComponentProps<typeof SelectPrimitive.Value>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Content>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Label>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Item>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.Separator>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {",
      "src/components/ui/select.tsx:}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {",
      "src/components/ui/separator.tsx:}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {",
      "src/components/ui/sheet.tsx:function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {",
      "src/components/ui/sheet.tsx:function SheetClose({ ...props }: React.ComponentProps<typeof SheetPrimitive.Close>) {",
      "src/components/ui/sheet.tsx:function SheetPortal({ ...props }: React.ComponentProps<typeof SheetPrimitive.Portal>) {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Content> & {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Title>) {",
      "src/components/ui/sheet.tsx:}: React.ComponentProps<typeof SheetPrimitive.Description>) {",
      "src/components/ui/sidebar.tsx:type SidebarContextProps = {",
      "src/components/ui/sidebar.tsx:      const openState = typeof value === 'function' ? value(open) : value;",
      "src/components/ui/sidebar.tsx:}: React.ComponentProps<typeof Separator>) {",
      "src/components/ui/sidebar.tsx:  tooltip?: string | React.ComponentProps<typeof TooltipContent>;",
      "src/components/ui/sidebar.tsx:} & VariantProps<typeof sidebarMenuButtonVariants>) {",
      "src/components/ui/slider.tsx:}: React.ComponentProps<typeof SliderPrimitive.Root>) {",
      "src/components/ui/switch.tsx:}: React.ComponentProps<typeof SwitchPrimitive.Root>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Root>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.List>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {",
      "src/components/ui/tabs.tsx:}: React.ComponentProps<typeof TabsPrimitive.Content>) {",
      "src/components/ui/toggle-group.tsx:import { type VariantProps } from 'class-variance-authority';",
      "src/components/ui/toggle-group.tsx:const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({",
      "src/components/ui/toggle-group.tsx:}: React.ComponentProps<typeof ToggleGroupPrimitive.Root> &",
      "src/components/ui/toggle-group.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/ui/toggle-group.tsx:}: React.ComponentProps<typeof ToggleGroupPrimitive.Item> &",
      "src/components/ui/toggle-group.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/ui/toggle.tsx:}: React.ComponentProps<typeof TogglePrimitive.Root> &",
      "src/components/ui/toggle.tsx:  VariantProps<typeof toggleVariants>) {",
      "src/components/ui/tooltip.tsx:}: React.ComponentProps<typeof TooltipPrimitive.Provider>) {",
      "src/components/ui/tooltip.tsx:function Tooltip({ ...props }: React.ComponentProps<typeof TooltipPrimitive.Root>) {",
      "src/components/ui/tooltip.tsx:}: React.ComponentProps<typeof TooltipPrimitive.Trigger>) {",
      "src/components/ui/tooltip.tsx:}: React.ComponentProps<typeof TooltipPrimitive.Content>) {",
      "src/components/user-testing/ABTestWrapper.tsx:import type { Metadata } from '../../types/utility-types';",
      "src/components/user-testing/ABTestWrapper.tsx:          type: 'ab_test_view',",
      "src/components/user-testing/ABTestWrapper.tsx:          type: 'ab_test_event',",
      "src/components/user-testing/BetaTestingProgram.tsx:  type: 'feature' | 'bug' | 'suggestion' | 'general';",
      "src/components/user-testing/BetaTestingProgram.tsx:        type: 'feature',",
      "src/components/user-testing/BetaTestingProgram.tsx:                      <Badge variant=\"outline\">{item.type}</Badge>",
      "src/components/user-testing/BetaTestingProgram.tsx:                  type=\"number\"",
      "src/components/user-testing/BetaTestingProgram.tsx:                  type=\"date\"",
      "src/components/user-testing/BetaTestingProgram.tsx:                  type=\"date\"",
      "src/components/user-testing/BugReportModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/FeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/FeedbackModal.tsx:        type: activeTab as UserFeedback['type'],",
      "src/components/user-testing/FeedbackWidget.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/FeedbackWidget.tsx:      setFeedbackType(optionId as typeof feedbackType);",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:    type: initialType as UserFeedback['type'],",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:    if (feedbackData.type === 'bug') points += 15; // Extra for bug reports",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:          description: \"Choose the type of feedback you'd like to share\",",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:        type: feedbackData.type,",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:      type: initialType as UserFeedback['type'],",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:        {types.map(type => {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:          const isSelected = feedbackData.type === type.id;",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                setFeedbackData((prev: any) => ({ ...prev, type: type.id as any }))",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                  className={`w-14 h-14 rounded-full bg-gradient-to-br ${type.color} p-3 group-hover:scale-110 transition-transform duration-300`}",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                  <h3 className=\"font-semibold text-lg\">{type.title}</h3>",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:                    {type.description}",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:  const handleQuickFeedback = (type: typeof feedbackType, prefilledText?: string) => {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:  errorsByType: Array<{ type: string; count: number }>;",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:      .filter((e: any) => e.type === 'error')",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:                        label={({ type, count }) => `${type}: ${count}`}",
      "src/components/user-testing/index.ts:// Re-export types from the service",
      "src/config/convertkit-config.ts:import { PersonaType } from '../types/email-campaigns';",
      "src/config/convertkit-config.ts:import { ConvertKitAutomationParameters } from '../types/configuration-interfaces';",
      "src/config/convertkit-generated.ts:import { PersonaType } from '../types/email-campaigns';",
      "src/config/environment.ts:export type Environment = 'development' | 'staging' | 'production';",
      "src/config/i18n.ts:export type SupportedLanguage = keyof typeof SUPPORTED_LANGUAGES;",
      "src/config/i18n.ts:    type: 'languageDetector' as const,",
      "src/config/i18n.ts:    if (typeof Intl.ListFormat !== 'undefined') {",
      "src/config/stripe.ts:    if (typeof window === 'undefined') {",
      "src/constants/initialDomainState.ts: * Provides properly typed initial state that matches the AppState interface",
      "src/constants/initialDomainState.ts: * from types/app-state.ts",
      "src/constants/initialDomainState.ts:} from '../types/app-state';",
      "src/constants/initialState.ts: * @description Centralized type-safe default values for the AppState interface.",
      "src/constants/initialState.ts: * This object ensures TypeScript compilation success by providing type-safe defaults",
      "src/constants/initialState.ts:    typeof obj === 'object' &&",
      "src/constants/initialState.ts:    typeof obj.isOnboarding === 'boolean' &&",
      "src/constants/initialState.ts:    typeof obj.currentView === 'string' &&",
      "src/constants/initialState.ts:    typeof obj.currentTheme === 'string' &&",
      "src/constants/initialState.ts:    typeof obj.permissions.notifications === 'object' &&",
      "src/constants/initialState.ts:    typeof obj.permissions.microphone === 'object'",
      "src/contexts/FeatureAccessContext.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/contexts/LanguageContext.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/contexts/LanguageContext.tsx:  languageInfo: (typeof SUPPORTED_LANGUAGES)[SupportedLanguage];",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_LOADING'; payload: boolean }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_USER_STREAK'; payload: UserStreak }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_ACHIEVEMENT'; payload: SamAchievement }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_ACHIEVEMENTS'; payload: SamAchievement[] }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_ACTIVE_CHALLENGES'; payload: SocialChallenge[] }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_UPGRADE_PROMPT'; payload: SmartUpgradePrompt }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'ADD_CELEBRATION'; payload: HabitCelebration }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_AB_TEST_GROUP'; payload: ABTestGroup }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'SET_USER_AB_TEST'; payload: UserABTest }",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'TRACK_CONVERSION'; payload: { testId: string; userId: string } }",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'SET_LOADING', payload: true });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_USER_STREAK', payload: mockUserStreak });",
      "src/contexts/StrugglingsamContext.tsx:            { type: 'streak_days', value: 5, description: 'Maintain 5-day streak' },",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ACHIEVEMENTS', payload: mockAchievements });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_LOADING', payload: false });",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ERROR', payload: 'Failed to load _user data' });",
      "src/contexts/StrugglingsamContext.tsx:            type: 'achievement_unlocked',",
      "src/contexts/StrugglingsamContext.tsx:            type: 'streak_started',",
      "src/contexts/StrugglingsamContext.tsx:          type: 'user_count',",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'UPDATE_STREAK', payload: streakData });",
      "src/contexts/StrugglingsamContext.tsx:          type: 'streak_reached',",
      "src/contexts/StrugglingsamContext.tsx:          type: 'confetti',",
      "src/contexts/StrugglingsamContext.tsx:            type: 'badge',",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_ACHIEVEMENT', payload: achievement });",
      "src/contexts/StrugglingsamContext.tsx:        type: 'achievement_earned',",
      "src/contexts/StrugglingsamContext.tsx:        type: 'fireworks',",
      "src/contexts/StrugglingsamContext.tsx:          type: 'badge',",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'JOIN_CHALLENGE', payload: challengeId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'LEAVE_CHALLENGE', payload: challengeId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'ADD_CELEBRATION', payload: celebration });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'DISMISS_CELEBRATION', payload: celebrationId });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_CONVERSION', payload: { testId, userId } });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_ENGAGEMENT', payload: { testId, userId, action } });",
      "src/data/emotional-message-templates.ts:import type { EmotionType, EmotionalTone } from '../types/emotional';",
      "src/data/emotional-message-templates.ts:import type { EmotionalMessageVariables } from '../types/configuration-interfaces';",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:          type: 'use_stripe_sdk',",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:            type: 'three_d_secure_redirect',",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:        { id: null, type: undefined, last4: 'invalid' }, // Invalid data",
      "src/hooks/__tests__/edge-cases/useSubscription.edge.test.ts:        method => method && typeof method === 'object' && method.id",
      "src/hooks/__tests__/integration/useAuth.integration.test.tsx:            error_type: 'sign_in_failed',",
      "src/hooks/__tests__/useAccessibilityPreferences.test.ts:    expect(typeof mockService.subscribe.mock.calls[0][0]).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmRinging).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmSnoozed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:    expect(typeof result.current.announceAlarmDismissed).toBe('function');",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:      { type: 'volume', volume: 80 },",
      "src/hooks/__tests__/useAlarmRingingAnnouncements.test.ts:      { type: 'sound', soundName: 'Birds' },",
      "src/hooks/__tests__/useAuth.test.ts:      expect(typeof rateLimitInfo.remaining).toBe('number');",
      "src/hooks/__tests__/useEnhancedSmartAlarms.test.ts:        type: 'bedtime',",
      "src/hooks/__tests__/useEnhancedSmartAlarms.test.ts:        { type: 'bedtime_shift', magnitude: 0.5, direction: 'later' },",
      "src/hooks/__tests__/useEnhancedSmartAlarms.test.ts:        { type: 'wake_quality', magnitude: -0.3, direction: 'decline' },",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceError).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceLoading).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:    expect(typeof result.current.announceSuccess).toBe('function');",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:      type: 'multi-step',",
      "src/hooks/__tests__/useErrorLoadingAnnouncements.test.ts:      type: 'network',",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceValidationError).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFormSuccess).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:    expect(typeof result.current.announceFieldChange).toBe('function');",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:      { field: 'email', type: 'required' },",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:      { field: 'password', type: 'password', params: { minLength: 8 } },",
      "src/hooks/__tests__/useFormAnnouncements.test.ts:        { field: 'email', type: 'required' },",
      "src/hooks/__tests__/useMobileTouch.test.ts:const createMockTouchEvent = (type: string, touches: any[] = []) => ({",
      "src/hooks/__tests__/useMobileTouch.test.ts:  let mockElement: ReturnType<typeof createMockElement>;",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[0].type).toBe('triggered');",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[1].type).toBe('dismissed');",
      "src/hooks/__tests__/usePWA.test.ts:      expect(result.current.alarmEvents[2].type).toBe('snoozed');",
      "src/hooks/__tests__/useSubscription.test.ts:} from '../../types/premium';",
      "src/hooks/__tests__/useTheme.test.tsx:import type { Theme, PersonalizationSettings } from '../../types';",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof cssVars).toBe('object');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof isAccessible).toBe('boolean');",
      "src/hooks/__tests__/useTheme.test.tsx:      expect(typeof exportData).toBe('string');",
      "src/hooks/useABTesting.tsx:export type FeatureKey = keyof typeof STRUGGLING_SAM_FEATURES.FULL_OPTIMIZATION;",
      "src/hooks/useABTesting.tsx:          { type: conversionType }",
      "src/hooks/useAccessibility.ts:  type AccessibilityPreferences,",
      "src/hooks/useAccessibility.ts:  type AccessibilityState,",
      "src/hooks/useAccessibilityPreferences.ts:    (color: string, type: 'text' | 'background' = 'text') => {",
      "src/hooks/useAdvancedAlarms.ts:import type { Alarm } from '../types';",
      "src/hooks/useAlarmRingingAnnouncements.ts:import type { Alarm } from '../types/index';",
      "src/hooks/useAnalytics.ts:        alarm_type: alarmType,",
      "src/hooks/useAnimations.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAnimations.ts:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/hooks/useAnimations.ts:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/hooks/useAnimations.ts:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/hooks/useAnimations.ts:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/hooks/useAnimations.ts:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/hooks/useAudioLazyLoading.ts:/// <reference types=\"node\" />",
      "src/hooks/useAudioLazyLoading.ts:import type { AudioLoadProgress, AudioCacheEntry } from '../services/audio-manager';",
      "src/hooks/useAudioLazyLoading.ts:import type { CustomSound, Playlist, LoadingState } from '../services/types/media';",
      "src/hooks/useAudioLazyLoading.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAudioLazyLoading.ts:} from '../types/state-updaters';",
      "src/hooks/useAuth.ts:/// <reference types=\"node\" />",
      "src/hooks/useAuth.ts:import type { User } from '../types';",
      "src/hooks/useAuth.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice') => {",
      "src/hooks/useAuthAnnouncements.ts:      const typeNames = {",
      "src/hooks/useAuthAnnouncements.ts:      announce(`Please use the ${typeNames[type]} to authenticate.`, 'polite');",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice') => {",
      "src/hooks/useAuthAnnouncements.ts:      announce(`${type} authentication successful!`, 'polite');",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice', _error: string) => {",
      "src/hooks/useAuthAnnouncements.ts:        `${type} authentication failed: ${_error}. Please try again or use alternative method.`,",
      "src/hooks/useCapacitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useCapacitor.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useCriticalPreloading.ts:/// <reference types=\"node\" />",
      "src/hooks/useCriticalPreloading.ts:import type { Alarm } from '../types';",
      "src/hooks/useCriticalPreloading.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useCriticalPreloading.ts:import type { PerformanceHistoryEntry } from '../types/state-updaters';",
      "src/hooks/useCulturalTheme.tsx:      const themeObj = typeof theme === 'string' ? REGIONAL_THEMES[theme] : theme;",
      "src/hooks/useDynamicFocus.ts:/// <reference types=\"node\" />",
      "src/hooks/useDynamicFocus.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useDynamicFocus.ts:  type: 'added' | 'updated' | 'removed';",
      "src/hooks/useDynamicFocus.ts:      const { type, element, description, shouldFocus } = change;",
      "src/hooks/useDynamicFocus.ts:      if ((shouldFocus ?? focusOnChange) && type !== 'removed') {",
      "src/hooks/useEmotionalNotifications.ts:} from '../types/emotional';",
      "src/hooks/useEmotionalNotifications.ts:    async (newSettings: Partial<typeof settings>) => {",
      "src/hooks/useEmotionalNotifications.ts:      setSettings((prev: typeof settings) => ({ ...prev, ...newSettings }));",
      "src/hooks/useEnhancedCaching.ts:/// <reference types=\"node\" />",
      "src/hooks/useEnhancedCaching.ts:import type { CustomSound } from '../services/types/media';",
      "src/hooks/useEnhancedCaching.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useEnhancedCaching.ts:import type { PerformanceHistoryEntry } from '../types/state-updaters';",
      "src/hooks/useEnhancedServiceWorker.ts:import type { Alarm } from '../types';",
      "src/hooks/useEnhancedServiceWorker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useEnhancedSmartAlarms.ts:  type EnhancedSmartAlarm,",
      "src/hooks/useFocusRestoration.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFocusTrap.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useFormAnnouncements.ts:/// <reference types=\"node\" />",
      "src/hooks/useFormAnnouncements.ts:import type { VoiceMood } from '../types';",
      "src/hooks/useFormAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFormAnnouncements.ts:          if (typeof value === 'string') {",
      "src/hooks/useFormAnnouncements.ts:        type: '_error',",
      "src/hooks/useFormAnnouncements.ts:        type: 'success',",
      "src/hooks/useGamingAnnouncements.ts:      const { type, action, data, priority = 'polite', customMessage } = announcement;",
      "src/hooks/useGamingAnnouncements.ts:        type: 'battle',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'achievement',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'level',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'friend',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'reward',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'quest',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'leaderboard',",
      "src/hooks/useGamingAnnouncements.ts:        type: 'tournament',",
      "src/hooks/useGamingAnnouncements.ts:            type: 'battle',",
      "src/hooks/useGamingAnnouncements.ts:          type: 'achievement',",
      "src/hooks/useGamingAnnouncements.ts:  const battleName = data.type ? battleTypeNames[data.type] : 'Battle';",
      "src/hooks/useI18n.ts:  // Enhanced translation function with better type safety and fallbacks",
      "src/hooks/useI18n.ts:        typeof optionsOrDefault === 'string'",
      "src/hooks/useI18n.ts:      return typeof optionsOrDefault === 'string' ? optionsOrDefault : key; // Fallback",
      "src/hooks/useI18n.ts:    return i18n.tc(`gaming:rewards.types.${rewardType}`) || rewardType;",
      "src/hooks/useMediaContentAnnouncements.ts:} from '../types/index';",
      "src/hooks/useMediaContentAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useMobilePerformance.ts:/// <reference types=\"node\" />",
      "src/hooks/useMobilePerformance.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useMobileTouch.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'triggered', ...data }]);",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'dismissed', ...data }]);",
      "src/hooks/usePWA.ts:      setAlarmEvents((prev: any) => [...prev, { type: 'snoozed', ...data }]);",
      "src/hooks/useProfileAnnouncements.ts:import type { VoiceMood } from '../types';",
      "src/hooks/useProfileAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useProfileAnnouncements.ts:      } else if (typeof newValue === 'number') {",
      "src/hooks/useProfileAnnouncements.ts:      } else if (typeof newValue === 'string') {",
      "src/hooks/useProfileAnnouncements.ts:        type: 'success',",
      "src/hooks/useProfileAnnouncements.ts:        type: '_error',",
      "src/hooks/usePushNotifications.ts:  type PushNotificationSettings,",
      "src/hooks/usePushNotifications.ts:import type { Alarm } from '../types';",
      "src/hooks/usePushNotifications.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useRTL.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/hooks/useRealtime.tsx:} from '../types/realtime';",
      "src/hooks/useRealtime.tsx:  requestAnalysis: (type: string, data: any) => Promise<string>;",
      "src/hooks/useRealtime.tsx:      if (message.type === messageType) {",
      "src/hooks/useScreenReaderAnnouncements.ts:/// <reference types=\"node\" />",
      "src/hooks/useScreenReaderAnnouncements.ts:import ScreenReaderService, { type AlarmAnnouncement } from '../utils/screen-reader';",
      "src/hooks/useScreenReaderAnnouncements.ts:import type { Alarm } from '../types';",
      "src/hooks/useScreenReaderAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useScreenReaderAnnouncements.ts:      const { type, message, data, priority = 'polite', delay = 0 } = announcement;",
      "src/hooks/useScreenReaderAnnouncements.ts:          type: '_error',",
      "src/hooks/useSettingsAnnouncements.ts:import type { VoiceMood } from '../types';",
      "src/hooks/useSettingsAnnouncements.ts:        type: '_error',",
      "src/hooks/useSettingsAnnouncements.ts:        type: 'success',",
      "src/hooks/useSmartFeaturesAnnouncements.ts:} from '../types/index';",
      "src/hooks/useSmartFeaturesAnnouncements.ts:    (adjustment: { type: string; message: string; timeChange?: number }) => {",
      "src/hooks/useSmartFeaturesAnnouncements.ts:            challenge.rewards.find(r => r.type === 'experience')?.value || 0;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:          challenge.rewards.find(r => r.type === 'experience')?.value || 0;",
      "src/hooks/useSmartFeaturesAnnouncements.ts:      if (typeof newValue === 'boolean') {",
      "src/hooks/useSmartFeaturesAnnouncements.ts:      message += `Challenge type: ${challenge.type.replace('_', ' ')}. `;",
      "src/hooks/useSoundEffects.tsx:  type SoundEffectId,",
      "src/hooks/useSoundEffects.tsx:  type SoundEffectSettings,",
      "src/hooks/useSoundEffects.tsx:  type SoundTheme,",
      "src/hooks/useSoundEffects.tsx:    async (type: 'default' | 'alarm' | 'beep' = 'default') => {",
      "src/hooks/useSubscription.ts:/// <reference types=\"node\" />",
      "src/hooks/useSubscription.ts:} from '../types/premium';",
      "src/hooks/useSubscription.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useTabProtectionAnnouncements.ts:import type { Alarm } from '../types';",
      "src/hooks/useTabProtectionAnnouncements.ts:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/hooks/useTabProtectionAnnouncements.ts:import { formatProtectionMessage, formatTimeframe } from '../types/tabProtection';",
      "src/hooks/useTabProtectionAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useTabProtectionSettings.ts:import type { TabProtectionSettings } from '../types/tabProtection';",
      "src/hooks/useTabProtectionSettings.ts:} from '../types/tabProtection';",
      "src/hooks/useTabProtectionSettings.ts:      if (typeof importedSettings !== 'object' || importedSettings === null) {",
      "src/hooks/useTheme.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useTheme.tsx:        typeof value === 'string' && value.includes('rem')",
      "src/hooks/useTheme.tsx:        typeof value === 'string' && value.includes('ms')",
      "src/lib/utils.ts:import { clsx, type ClassValue } from 'clsx';",
      "src/reducers/__tests__/alarmReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { AlarmState, AlarmAction } from '../../types/app-state';",
      "src/reducers/__tests__/alarmReducer.test.ts:import type { Alarm } from '../../types/domain';",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_CREATE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_TOGGLE with typed toggle payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/subscriptionReducer.test.ts:import type { SubscriptionState, SubscriptionAction } from '../../types/app-state';",
      "src/reducers/__tests__/subscriptionReducer.test.ts:import type { Subscription, PaymentMethod } from '../../types/domain';",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_UPGRADE_SUCCESS with typed upgrade payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle FEATURE_ACCESS_UPDATE with typed feature access payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle FEATURE_USAGE_UPDATE with typed usage payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle PAYMENT_METHOD_ADD with typed payment method payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle PAYMENT_METHOD_REMOVE with typed payment method id payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_UPGRADE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_LOAD_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts: * Tests that the reducer handles typed payloads correctly",
      "src/reducers/__tests__/userReducer.test.ts:import type { UserState, UserAction } from '../../types/app-state';",
      "src/reducers/__tests__/userReducer.test.ts:import type { User } from '../../types/domain';",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_SUCCESS with typed user payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_PREFERENCES_UPDATE with typed preferences payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_ACHIEVEMENT_UNLOCK with typed achievement payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_STREAK_UPDATE with typed streak payload', () => {",
      "src/reducers/alarmReducer.ts: * Handles all alarm-related state mutations with type safety",
      "src/reducers/alarmReducer.ts:import type { AlarmState, AlarmAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:import type { AppState, AppAction } from '../types/app-state';",
      "src/reducers/rootReducer.ts:  action: AppAction | { type: 'APP_UPDATE'; payload: AppState }",
      "src/reducers/subscriptionReducer.ts: * Handles all subscription-related state mutations with type safety",
      "src/reducers/subscriptionReducer.ts:import type { SubscriptionState, SubscriptionAction } from '../types/app-state';",
      "src/reducers/userReducer.ts: * Handles all user-related state mutations with type safety",
      "src/reducers/userReducer.ts:import type { UserState, UserAction } from '../types/app-state';",
      "src/services/CloudSyncService.ts:/// <reference types=\"node\" />",
      "src/services/CloudSyncService.ts:import type { PersonalizationSettings, Theme, ThemeConfig } from '../types';",
      "src/services/CloudSyncService.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/__tests__/alarm.test.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../../types';",
      "src/services/__tests__/alarm.test.ts:// Import mocked modules for type safety",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getHours').mockReturnValue(7);",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getMinutes').mockReturnValue(0);",
      "src/services/__tests__/alarm.test.ts:      jest.spyOn(Date.prototype, 'getDay').mockReturnValue(1); // Monday",
      "src/services/__tests__/alarm.test.ts:          type: 'alarm-triggered',",
      "src/services/__tests__/alarm.test.ts:          type: 'alarm-security-event',",
      "src/services/__tests__/analytics.test.ts:      const properties = { alarm_type: 'voice' };",
      "src/services/__tests__/analytics.test.ts:        expect(typeof duration).toBe('number');",
      "src/services/__tests__/analytics.test.ts:      analytics.track(ANALYTICS_EVENTS.ALARM_CREATED, { alarm_type: 'voice' });",
      "src/services/__tests__/performance-monitor.test.ts:    test('categorizes resource types correctly', () => {",
      "src/services/__tests__/performance-monitor.test.ts:      expect(resources[0].type).toBe('image');",
      "src/services/__tests__/test-setup.ts:          typeof arg === 'object' &&",
      "src/services/__tests__/test-setup.ts:Object.setPrototypeOf(global.Date, OriginalDate);",
      "src/services/__tests__/test-setup.ts:    type: 'wake_up',",
      "src/services/__tests__/theme-accessibility.test.ts:    test('should simulate different types of color blindness', () => {",
      "src/services/__tests__/theme-accessibility.test.ts:      expect(typeof result.overallScore).toBe('number');",
      "src/services/__tests__/theme-accessibility.test.ts:        expect(typeof value).toBe('boolean');",
      "src/services/__tests__/theme-persistence.test.ts:import type { Theme } from '../../types';",
      "src/services/__tests__/theme-persistence.test.ts:      expect(typeof exported).toBe('string');",
      "src/services/__tests__/voice.test.ts:import type { Alarm, VoiceMood } from '../../types';",
      "src/services/__tests__/voice.test.ts:      expect(typeof result).toBe('string');",
      "src/services/accessibility-preferences.ts:      typeof SpeechSynthesisUtterance !== 'undefined'",
      "src/services/advanced-alarm-scheduler.ts:} from '../types/index';",
      "src/services/advanced-analytics.ts:import type { Alarm, User } from '../types';",
      "src/services/advanced-analytics.ts:  type: 'performance' | 'behavior' | 'optimization' | 'health' | 'prediction';",
      "src/services/advanced-analytics.ts:  pattern_type: 'wake_time' | 'success_rate' | 'sleep_duration';",
      "src/services/advanced-analytics.ts:  type: 'bedtime' | 'duration' | 'consistency' | 'environment';",
      "src/services/advanced-analytics.ts:        type: 'performance',",
      "src/services/advanced-analytics.ts:        type: 'behavior',",
      "src/services/advanced-analytics.ts:        type: 'health',",
      "src/services/advanced-analytics.ts:    const data = peerData[metric as keyof typeof peerData] || peerData.success_rate;",
      "src/services/advanced-analytics.ts:        pattern_type: 'success_rate',",
      "src/services/advanced-analytics.ts:        pattern_type: 'wake_time',",
      "src/services/advanced-analytics.ts:          type: 'consistency',",
      "src/services/advanced-conditions-helper.ts:  type EnhancedSmartAlarm,",
      "src/services/advanced-conditions-helper.ts:  type ConditionBasedAdjustment,",
      "src/services/advanced-conditions-helper.ts:    type: 'weather',",
      "src/services/advanced-conditions-helper.ts:    type: 'calendar',",
      "src/services/advanced-conditions-helper.ts:    type: 'sleep_debt',",
      "src/services/advanced-conditions-helper.ts:    type: 'exercise',",
      "src/services/advanced-conditions-helper.ts:      recommendations.push('Consider adding more condition types for better coverage');",
      "src/services/advanced-conditions-helper.ts:      issues.push('Limited condition type variety');",
      "src/services/ai-rewards.ts:      type: 'consistency',",
      "src/services/ai-rewards.ts:      type: 'time_preference',",
      "src/services/ai-rewards.ts:      type: 'voice_mood',",
      "src/services/ai-rewards.ts:      type: 'dismissal_method',",
      "src/services/ai-rewards.ts:      type: 'frequency',",
      "src/services/ai-rewards.ts:    const timePattern = patterns.find(p => p.type === 'time_preference');",
      "src/services/ai-rewards.ts:    const consistencyPattern = patterns.find(p => p.type === 'consistency');",
      "src/services/ai-rewards.ts:    const voicePattern = patterns.find(p => p.type === 'voice_mood');",
      "src/services/ai-rewards.ts:    const frequencyPattern = patterns.find(p => p.type === 'frequency');",
      "src/services/ai-rewards.ts:    const consistencyPattern = patterns.find(p => p.type === 'consistency');",
      "src/services/ai-rewards.ts:    const timePattern = patterns.find(p => p.type === 'time_preference');",
      "src/services/ai-rewards.ts:    const frequencyPattern = patterns.find(p => p.type === 'frequency');",
      "src/services/ai-rewards.ts:    const voicePattern = patterns.find(p => p.type === 'voice_mood');",
      "src/services/ai-rewards.ts:    const timePattern = patterns.find(p => p.type === 'time_preference');",
      "src/services/ai-rewards.ts:    const consistencyPattern = patterns.find(p => p.type === 'consistency');",
      "src/services/ai-rewards.ts:    const consistencyPattern = patterns.find(p => p.type === 'consistency');",
      "src/services/ai-rewards.ts:    const timePattern = patterns.find(p => p.type === 'time_preference');",
      "src/services/ai-rewards.ts:        type: 'improvement_suggestion',",
      "src/services/ai-rewards.ts:        type: 'pattern_recognition',",
      "src/services/ai-rewards.ts:      Object.entries(personalizedMessages).find(([type]) => key.includes(type))?.[1] ||",
      "src/services/ai-rewards.ts:      Object.entries(aiInsights).find(([type]) => key.includes(type))?.[1] ||",
      "src/services/ai-rewards.ts:      type: template.type || 'achievement',",
      "src/services/ai-rewards.ts:  private calculateImprovementTrend(type: string): number {",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'streak' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'niche_mastery' as const,",
      "src/services/ai-rewards.ts:          type: 'milestone' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/ai-rewards.ts:          type: 'achievement' as const,",
      "src/services/alarm-access-control.ts:import type { Alarm, User } from '../types';",
      "src/services/alarm-access-control.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-access-control.ts:type UserRole = 'user' | 'premium' | 'admin';",
      "src/services/alarm-access-control.ts:    return limits[role][action as keyof typeof limits.user] || 10;",
      "src/services/alarm-api-security.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-api-security.ts:        if (typeof request.body !== 'object' || request.body === null) {",
      "src/services/alarm-api-security.ts:            if (!sanitizedData.backupId || typeof sanitizedData.backupId !== 'string') {",
      "src/services/alarm-api-security.ts:    if (!alarm.label || typeof alarm.label !== 'string') {",
      "src/services/alarm-api-security.ts:    if (!alarm.time || typeof alarm.time !== 'string') {",
      "src/services/alarm-api-security.ts:          d => typeof d === 'number' && d >= 0 && d <= 6",
      "src/services/alarm-api-security.ts:    if (typeof alarm.snoozeEnabled === 'boolean') {",
      "src/services/alarm-api-security.ts:      typeof alarm.snoozeInterval === 'number' &&",
      "src/services/alarm-api-security.ts:            typeof value !== 'string' ||",
      "src/services/alarm-api-security.ts:    if (!request.url || typeof request.url !== 'string') {",
      "src/services/alarm-api-security.ts:    if (!request.headers || typeof request.headers !== 'object') {",
      "src/services/alarm-api-security.ts:        request.headers['content-type'] || request.headers['Content-Type'];",
      "src/services/alarm-api-security.ts:    if (typeof obj === 'object' && obj !== null) {",
      "src/services/alarm-api-security.ts:    if (typeof data === 'object' && data !== null) {",
      "src/services/alarm-api-security.ts:    if (typeof obj === 'object' && obj !== null) {",
      "src/services/alarm-api-security.ts:        if (typeof value === 'object') {",
      "src/services/alarm-backup-redundancy.ts:/// <reference types=\"node\" />",
      "src/services/alarm-backup-redundancy.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm-backup-redundancy.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-backup-redundancy.ts:  type: 'manual' | 'scheduled' | 'emergency';",
      "src/services/alarm-backup-redundancy.ts:  type: 'local' | 'secure_local' | 'cloud_cache' | 'redundant';",
      "src/services/alarm-backup-redundancy.ts:      type: 'secure_local',",
      "src/services/alarm-backup-redundancy.ts:      type: 'redundant',",
      "src/services/alarm-backup-redundancy.ts:    type: 'manual' | 'scheduled' | 'emergency' = 'manual',",
      "src/services/alarm-battle-integration.ts:import { Alarm, Battle, User, BattleParticipant, AlarmInstance } from '../types/index';",
      "src/services/alarm-battle-integration.ts:          battle.settings.difficulty as keyof typeof difficultyMultipliers",
      "src/services/alarm-enhanced.ts:/// <reference types=\"node\" />",
      "src/services/alarm-enhanced.ts:import type { Alarm, VoiceMood, AlarmEvent } from '../types';",
      "src/services/alarm-enhanced.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-executor.ts:} from '../types/index';",
      "src/services/alarm-executor.ts:        console._error('Error applying optimization:', optimization.type, _error);",
      "src/services/alarm-executor.ts:    const { type, parameters } = optimization;",
      "src/services/alarm-executor.ts:          o.type === type ? optimization : o",
      "src/services/alarm-executor.ts:            return trigger.action.type !== 'disable_alarm';",
      "src/services/alarm-executor.ts:            return trigger.action.type !== 'disable_alarm';",
      "src/services/alarm-executor.ts:        sunSchedule.type === 'sunrise' ? sunTimes.sunrise : sunTimes.sunset;",
      "src/services/alarm-executor.ts:            console.log(`Unknown conditional rule type: ${rule.type}`);",
      "src/services/alarm-executor.ts:        console._error(`Error evaluating conditional rule ${rule.type}:`, _error);",
      "src/services/alarm-executor.ts:      if (rule.action.type === 'disable_alarm' && conditionMet) {",
      "src/services/alarm-executor.ts:      } else if (rule.action.type === 'enable_alarm' && !conditionMet) {",
      "src/services/alarm-integrity-monitor.ts:/// <reference types=\"node\" />",
      "src/services/alarm-integrity-monitor.ts:import type { Alarm } from '../types';",
      "src/services/alarm-integrity-monitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-integrity-monitor.ts:          type: 'timestamp_anomaly',",
      "src/services/alarm-integrity-monitor.ts:          type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:              type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:            type: 'unauthorized_access',",
      "src/services/alarm-integrity-monitor.ts:            type: 'timestamp_anomaly',",
      "src/services/alarm-integrity-monitor.ts:      type: 'integrity_violation',",
      "src/services/alarm-integrity-monitor.ts:      type: details.type,",
      "src/services/alarm-parser.ts:import type { Alarm, RecurrencePattern } from '../types/index';",
      "src/services/alarm-rate-limiting.ts:/// <reference types=\"node\" />",
      "src/services/alarm-rate-limiting.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-rate-limiting.ts:type AlarmOperation =",
      "src/services/alarm-rate-limiting.ts:type UserTier = 'free' | 'premium' | 'admin' | 'system';",
      "src/services/alarm-rate-limiting.ts:type EscalationLevel = 'warning' | 'temporary_limit' | 'strict_limit' | 'account_block';",
      "src/services/alarm-security-integration.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/alarm-security-integration.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-security-integration.ts:  type: 'create' | 'read' | 'update' | 'delete' | 'backup' | 'restore';",
      "src/services/alarm.ts:/// <reference types=\"node\" />",
      "src/services/alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/alarm.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm.ts:      if (!alarm.days.every(day => typeof day === 'number' && day >= 0 && day <= 6)) {",
      "src/services/alarm.ts:      if (typeof alarm.label !== 'string' || alarm.label.length > 100) {",
      "src/services/alarm.ts:        typeof alarm.snoozeInterval === 'number' &&",
      "src/services/analytics.ts:      device_type: this.getDeviceType(),",
      "src/services/analytics.ts:      device_type: this.getDeviceType(),",
      "src/services/analytics.ts:      conversion_type: conversionType,",
      "src/services/analytics.ts:   * Get device type information with enhanced detection",
      "src/services/analytics.ts:      connection_type: connection?.effectiveType || 'unknown',",
      "src/services/analytics.ts:      connection_type: (navigator as any).connection?.effectiveType,",
      "src/services/analytics.ts:    if (this.isInitialized && typeof posthog !== 'undefined') {",
      "src/services/analytics.ts:      deployment_type: version.indexOf('hotfix') !== -1 ? 'hotfix' : 'release',",
      "src/services/animation-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/animation-manager.ts:  createSpringConfig(type: 'gentle' | 'bouncy' | 'snappy'): any {",
      "src/services/animation-manager.ts:    return { type: 'spring' as const, ...baseConfig };",
      "src/services/api-service.ts: * Demonstrates improved type safety and standardized error handling",
      "src/services/api-service.ts: * Main API service with comprehensive type safety",
      "src/services/app-analytics.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/app-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/app-analytics.ts:   * Map alarm event types to analytics event names",
      "src/services/app-analytics.ts:            type: 'memory_mb',",
      "src/services/app-specific-test-scenarios.ts:    id: 'chronotype-detection',",
      "src/services/app-specific-test-scenarios.ts:      'Chronotype Analysis Complete! Based on 30 days of data, you are identified as a \"Bear\" chronotype. Optimal sleep: 11:00 PM to 7:00 AM. Peak productivity: 10:00 AM to 2:00 PM.',",
      "src/services/app-specific-test-scenarios.ts:    expectedBehavior: 'Should provide chronotype explanation with actionable insights',",
      "src/services/app-specific-test-scenarios.ts:      'Test chronotype detection, sleep debt tracking, and efficiency analysis',",
      "src/services/audio-manager.ts:/// <reference types=\"node\" />",
      "src/services/audio-manager.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/audio-manager.ts:import type { CustomSound, Playlist, PlaylistSound } from './types/media';",
      "src/services/audio-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/audio-manager.ts:  type: 'tts' | 'audio_file' | 'web_audio';",
      "src/services/audio-manager.ts:          store.createIndex('type', 'type');",
      "src/services/audio-manager.ts:            type: 'audio_file',",
      "src/services/audio-manager.ts:        type: 'audio_file',",
      "src/services/audio-manager.ts:      if (cached && cached.data && typeof cached.data === 'string') {",
      "src/services/audio-manager.ts:      oscillator.type = 'sine';",
      "src/services/audio-manager.ts:      stats.byType[entry.type] = (stats.byType[entry.type] || 0) + 1;",
      "src/services/base/BaseService.ts:} from '../../types/service-architecture';",
      "src/services/base/BaseService.ts:    if (typeof (performance as any)?.memory !== 'undefined') {",
      "src/services/base/BaseService.ts:    if (typeof this._config.enabled !== 'boolean') {",
      "src/services/base/BaseService.ts:      type: event,",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).serviceEventBus?.publish === 'function') {",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).errorReporter?.report === 'function') {",
      "src/services/base/CacheManager.ts:} from '../../types/service-architecture';",
      "src/services/base/ServiceContainer.ts:} from '../../types/service-architecture';",
      "src/services/base/ServiceContainer.ts:    if (!descriptor.name || typeof descriptor.name !== 'string') {",
      "src/services/base/ServiceContainer.ts:    if (!descriptor.factory || typeof descriptor.factory.create !== 'function') {",
      "src/services/battle.ts:} from '../types/index';",
      "src/services/battle.ts:      type: 'speed',",
      "src/services/battle.ts:    type?: BattleType;",
      "src/services/battle.ts:          battles = battles.filter(b => b.type === filters.type);",
      "src/services/capacitor-enhanced.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.SUCCESS });",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.WARNING });",
      "src/services/capacitor-enhanced.ts:          await Haptics.notification({ type: NotificationType.ERROR });",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [4, 6], weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 1, weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [6, 9], weight: 0.8 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'rain', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 0, weight: 1 }, // Sunday",
      "src/services/contextual-themes.ts:          { type: 'day-of-week', operator: 'equals', value: 6, weight: 1 }, // Saturday",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [23, 4], weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'clear', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'time-range', operator: 'between', value: [6, 10], weight: 0.8 },",
      "src/services/contextual-themes.ts:          { type: 'weather', operator: 'contains', value: 'storm', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'calendar-event', operator: 'contains', value: 'workout', weight: 1 },",
      "src/services/contextual-themes.ts:          { type: 'calendar-event', operator: 'contains', value: 'gym', weight: 1 },",
      "src/services/contextual-themes.ts:      type: 'time',",
      "src/services/contextual-themes.ts:      type: 'time',",
      "src/services/contextual-themes.ts:        type: 'weather',",
      "src/services/contextual-themes.ts:        type: 'calendar',",
      "src/services/contextual-themes.ts:        type: 'sleep',",
      "src/services/contextual-themes.ts:        if (context.type === 'time' && condition.operator === 'between') {",
      "src/services/contextual-themes.ts:        if (context.type === 'weather' && condition.operator === 'contains') {",
      "src/services/contextual-themes.ts:        if (context.type === 'time' && condition.operator === 'equals') {",
      "src/services/contextual-themes.ts:        if (context.type === 'calendar' && condition.operator === 'contains') {",
      "src/services/contextual-themes.ts:      context: [{ type: 'pattern', value: 'user-history', weight: 1 }],",
      "src/services/convertkit-service.ts:} from '../types/email-campaigns';",
      "src/services/critical-preloader.ts:/// <reference types=\"node\" />",
      "src/services/critical-preloader.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/critical-preloader.ts:import type { CustomSound } from './types/media';",
      "src/services/critical-preloader.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/critical-preloader.ts:  type: 'tts' | 'audio_file' | 'fallback_beep';",
      "src/services/critical-preloader.ts:          type: 'audio_file',",
      "src/services/critical-preloader.ts:        type: 'fallback_beep',",
      "src/services/critical-preloader.ts:      type: asset.type,",
      "src/services/custom-sound-manager.ts:import type { CustomSound, SoundCategory } from '../types';",
      "src/services/custom-sound-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/custom-test-scenarios.ts:    // If test specifies user types, check if current _user type is included",
      "src/services/custom-test-scenarios.ts:    // If no user type specified, include all tests",
      "src/services/device-capabilities.ts:import type { PerformanceConfig } from './types/performance';",
      "src/services/device-capabilities.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/device-capabilities.ts:export type DeviceTier = 'low-end' | 'mid-range' | 'high-end';",
      "src/services/email-campaign.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/emotional-intelligence.ts:} from '../types/emotional';",
      "src/services/emotional-intelligence.ts:import { VOICE_MOOD_TO_EMOTIONAL_TONE } from '../types/emotional';",
      "src/services/emotional-intelligence.ts:        emotion_type: response.emotion,",
      "src/services/enhanced-alarm.ts:import type { Alarm, VoiceMood, AlarmEvent, AlarmInstance, User } from '../types';",
      "src/services/enhanced-alarm.ts:} from '../types/service-architecture';",
      "src/services/enhanced-alarm.ts:      if (typeof window !== 'undefined') {",
      "src/services/enhanced-alarm.ts:    if (!data.label || typeof data.label !== 'string' || data.label.length > 100) {",
      "src/services/enhanced-alarm.ts:      !data.days.every((day: any) => typeof day === 'number' && day >= 0 && day <= 6)",
      "src/services/enhanced-alarm.ts:        alarm.days.every(day => typeof day === 'number' && day >= 0 && day <= 6)",
      "src/services/enhanced-alarm.ts:          if (instance && typeof snoozeCount === 'number') {",
      "src/services/enhanced-analytics.ts:} from '../types/service-architecture';",
      "src/services/enhanced-analytics.ts:      if (typeof window !== 'undefined' && 'performance' in window) {",
      "src/services/enhanced-analytics.ts:    if (typeof window !== 'undefined' && window.performance) {",
      "src/services/enhanced-analytics.ts:      connection_type: this.getConnectionType(),",
      "src/services/enhanced-battle.ts:} from '../types/index';",
      "src/services/enhanced-battle.ts:} from '../types/service-architecture';",
      "src/services/enhanced-battle.ts:  type?: BattleType;",
      "src/services/enhanced-battle.ts:      type: 'speed',",
      "src/services/enhanced-battle.ts:    if (!battleData.type || !battleData.startTime) {",
      "src/services/enhanced-battle.ts:      if (filter.type && battle.type !== filter.type) return false;",
      "src/services/enhanced-battle.ts:      if (filter.type && battle.type !== filter.type) return false;",
      "src/services/enhanced-battle.ts:        if (filter.type) query = query.eq('type', filter.type);",
      "src/services/enhanced-cache-manager.ts:import type { AudioCacheEntry, AudioMetadata } from './audio-manager';",
      "src/services/enhanced-cache-manager.ts:import type { CustomSound } from './types/media';",
      "src/services/enhanced-cache-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/enhanced-cache-manager.ts:          store.createIndex('type', 'type');",
      "src/services/enhanced-cache-manager.ts:        type: 'audio_file',",
      "src/services/enhanced-calendar-service.ts:    type: 'google' | 'outlook' | 'apple' | 'caldav';",
      "src/services/enhanced-calendar-service.ts:  type: 'adjustment' | 'preparation' | 'travel' | 'conflict' | 'optimization';",
      "src/services/enhanced-calendar-service.ts:  type: 'pattern' | 'trend' | 'anomaly' | 'recommendation';",
      "src/services/enhanced-calendar-service.ts:          type: 'adjustment',",
      "src/services/enhanced-calendar-service.ts:          type: 'travel',",
      "src/services/enhanced-calendar-service.ts:        type: 'preparation',",
      "src/services/enhanced-calendar-service.ts:    type: 'google' | 'outlook' | 'apple' | 'caldav',",
      "src/services/enhanced-calendar-service.ts:    const calendarId = `${type}_${Date.now()}`;",
      "src/services/enhanced-calendar-service.ts:      name: `${type.charAt(0).toUpperCase() + type.slice(1)} Calendar`,",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:          type: 'trend',",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:          type: 'pattern',",
      "src/services/enhanced-calendar-service.ts:    return colors[type as keyof typeof colors] || '#6b7280';",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/enhanced-calendar-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/enhanced-calendar-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/enhanced-location-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/enhanced-location-service.ts:  type: 'enter' | 'exit' | 'dwell';",
      "src/services/enhanced-location-service.ts:  type: 'home' | 'work' | 'gym' | 'shopping' | 'social' | 'other';",
      "src/services/enhanced-location-service.ts:      const relevantTriggers = geofence.triggers.filter(t => t.type === eventType);",
      "src/services/enhanced-location-service.ts:          `You have ${trigger.type === 'enter' ? 'entered' : 'exited'} ${geofence.name}`,",
      "src/services/enhanced-location-service.ts:    // Determine location type based on patterns",
      "src/services/enhanced-location-service.ts:    const type = this.classifyLocationType(timePatterns, dayPatterns, cluster.length);",
      "src/services/enhanced-location-service.ts:      name: this.generateLocationName(type, centerLat, centerLon),",
      "src/services/enhanced-location-service.ts:    type: LocationPattern['type'],",
      "src/services/enhanced-location-service.ts:        p => p.type === 'home'",
      "src/services/enhanced-location-service.ts:    const dwellTriggers = geofence.triggers.filter(t => t.type === 'dwell');",
      "src/services/enhanced-offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-offline-storage.ts:        if (!change.id || !change.type || !change.timestamp) {",
      "src/services/enhanced-offline-storage.ts:          if (change.type === 'update' && change.data) {",
      "src/services/enhanced-offline-storage.ts:          if (change.type === 'update' && mergedData) {",
      "src/services/enhanced-performance-monitor.ts:} from '../types/service-architecture';",
      "src/services/enhanced-performance-monitor.ts:  type: 'console' | 'webhook' | 'analytics' | 'notification';",
      "src/services/enhanced-performance-monitor.ts:  type: 'click' | 'scroll' | 'input' | 'navigation' | 'alarm_action' | 'voice_command';",
      "src/services/enhanced-performance-monitor.ts:          type: 'console',",
      "src/services/enhanced-performance-monitor.ts:    type: UserInteraction['type'],",
      "src/services/enhanced-performance-monitor.ts:      interaction_type: type,",
      "src/services/enhanced-performance-monitor.ts:            type: entry.initiatorType || 'unknown',",
      "src/services/enhanced-performance-monitor.ts:            resource_type: resourceMetric.type,",
      "src/services/enhanced-performance-monitor.ts:        type: connection.type || 'unknown',",
      "src/services/enhanced-performance-monitor.ts:        network_type: networkMetric.type,",
      "src/services/enhanced-performance-monitor.ts:        effective_type: networkMetric.effectiveType,",
      "src/services/enhanced-performance-monitor.ts:          tags: { budget: budget.name, type: 'budget_violation' },",
      "src/services/enhanced-performance-monitor.ts:        tags: { ...metric.tags, type: 'threshold_violation' },",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SleepGoal,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type UserScheduleAnalysis,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SleepPattern,",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type SmartAlarmRecommendation,",
      "src/services/enhanced-smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/enhanced-smart-alarm-scheduler.ts:  type: 'time_adjustment' | 'condition_change' | 'sleep_goal_update';",
      "src/services/enhanced-smart-alarm-scheduler.ts:          appliedAdjustments.push(`${conditionAdj.type}: ${adjustment}min`);",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'weather',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'sleep_debt',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'calendar',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'time_adjustment',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        action: { type: 'adjust_wake_window', value: alarm.wakeWindow + 10 },",
      "src/services/enhanced-smart-alarm-scheduler.ts:        type: 'sleep_goal_update',",
      "src/services/enhanced-smart-alarm-scheduler.ts:        action: { type: 'adjust_bedtime', value: -30 },",
      "src/services/enhanced-subscription.ts:} from '../types/service-architecture';",
      "src/services/enhanced-voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/enhanced-voice.ts:} from '../types/service-architecture';",
      "src/services/error-handler.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/error-handler.ts:type ErrorCategory =",
      "src/services/error-handler.ts:        type: e._error.constructor.name,",
      "src/services/error-handler.ts:        if (result && typeof result.then === 'function') {",
      "src/services/error-handler.ts:export type { ErrorEntry, ErrorContext, ErrorCategory, ErrorAnalytics };",
      "src/services/feature-gate-service.ts:import type { FeatureAccess, FeatureGate, PremiumFeature } from '../types/premium';",
      "src/services/feature-gate-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/health-tracker-integration.ts:  type: 'sleep_pattern' | 'recovery' | 'optimization' | 'alert' | 'trend';",
      "src/services/health-tracker-integration.ts:  chronotype: 'morning' | 'evening' | 'intermediate';",
      "src/services/health-tracker-integration.ts:          `Deviates from your natural chronotype by ${Math.round(deviation)} minutes`",
      "src/services/health-tracker-integration.ts:    let chronotype: 'morning' | 'evening' | 'intermediate' = 'intermediate';",
      "src/services/health-tracker-integration.ts:    else if (avgWakeHour > 8.5) chronotype = 'evening';",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/health-tracker-integration.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/health-tracker-integration.ts:          if (value && typeof value === 'object' && value.__type === 'Date') {",
      "src/services/lazy-audio-loader.ts:import type { AudioLoadProgress, AudioCacheEntry } from './audio-manager';",
      "src/services/lazy-audio-loader.ts:import type { CustomSound, Playlist, AudioLoadOptions } from './types/media';",
      "src/services/lazy-audio-loader.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/ml-alarm-optimizer.ts:} from '../types/index';",
      "src/services/ml-alarm-optimizer.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/ml-alarm-optimizer.ts:  type: 'sleep_cycle' | 'weather' | 'calendar' | 'historical' | 'location' | 'health';",
      "src/services/ml-alarm-optimizer.ts:        if (typeof value === 'number') {",
      "src/services/ml-alarm-optimizer.ts:      type: 'sleep_cycle',",
      "src/services/ml-alarm-optimizer.ts:        type: 'weather',",
      "src/services/ml-alarm-optimizer.ts:        type: 'weather',",
      "src/services/ml-alarm-optimizer.ts:        type: 'calendar',",
      "src/services/ml-alarm-optimizer.ts:        type: 'calendar',",
      "src/services/ml-alarm-optimizer.ts:      type: 'health',",
      "src/services/ml-alarm-optimizer.ts:          type: 'wake_time',",
      "src/services/mobile-performance.ts:/// <reference types=\"node\" />",
      "src/services/mobile-performance.ts:export type { PerformanceConfig, PerformanceMetrics };",
      "src/services/mobile-touch.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/mobile-touch.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.SUCCESS });",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.WARNING });",
      "src/services/mobile-touch.ts:          await Haptics.notification({ type: NotificationType.ERROR });",
      "src/services/notification.ts:import type { Alarm } from '../types';",
      "src/services/notification.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/notification.ts:  type: 'alarm' | 'reminder' | 'snooze';",
      "src/services/notification.ts:          type: 'reminder',",
      "src/services/notification.ts:              type: 'reminder',",
      "src/services/notification.ts:        type: 'snooze',",
      "src/services/notification.ts:            type: 'snooze',",
      "src/services/notification.ts:      data: { type: 'test', voiceMood },",
      "src/services/notification.ts:        const { type, data } = _event.data;",
      "src/services/nuclear-mode.ts:      type: 'multi_step_math',",
      "src/services/nuclear-mode.ts:      type: 'memory_sequence',",
      "src/services/nuclear-mode.ts:      type: 'physical_movement',",
      "src/services/nuclear-mode.ts:      type: 'barcode_scan',",
      "src/services/nuclear-mode.ts:      type: 'voice_recognition',",
      "src/services/nuclear-mode.ts:      type: 'qr_code_hunt',",
      "src/services/nuclear-mode.ts:      type: 'typing_challenge',",
      "src/services/nuclear-mode.ts:        const template = this.challengeTemplates.find(t => t.type === type);",
      "src/services/nuclear-mode.ts:          id: `${alarmId}_${type}_${Date.now()}`,",
      "src/services/nuclear-mode.ts:   * Get available challenge types and their descriptions",
      "src/services/nuclear-mode.ts:    type: NuclearChallengeType;",
      "src/services/nuclear-mode.ts:      type: template.type,",
      "src/services/offline-analytics.ts:/// <reference types=\"node\" />",
      "src/services/offline-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-analytics.ts:    type: AnalyticsEvent['type'],",
      "src/services/offline-analytics.ts:        console.log('[OfflineAnalytics] Tracked _event:', type, action, properties);",
      "src/services/offline-analytics.ts:    type: PerformanceMetric['type'],",
      "src/services/offline-analytics.ts:        type: metric.type,",
      "src/services/offline-gaming.ts:} from '../types/index';",
      "src/services/offline-gaming.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-gaming.ts:  type: 'create' | 'join' | 'leave' | 'update' | 'complete' | 'message';",
      "src/services/offline-gaming.ts:  type: 'experience' | 'achievement' | 'level_up' | 'streak' | 'battle_win';",
      "src/services/offline-gaming.ts:        type: battleData.type || 'speed',",
      "src/services/offline-gaming.ts:        type: 'create',",
      "src/services/offline-gaming.ts:          type: isWinner ? 'battle_win' : 'experience',",
      "src/services/offline-gaming.ts:            ? `Won ${battle.type} battle`",
      "src/services/offline-gaming.ts:            : `Participated in ${battle.type} battle`,",
      "src/services/offline-gaming.ts:        type: 'complete',",
      "src/services/offline-gaming.ts:    type: OfflineReward['type'];",
      "src/services/offline-gaming.ts:        type: reward.type,",
      "src/services/offline-gaming.ts:            type: 'level_up',",
      "src/services/offline-gaming.ts:    console.log('[OfflineGaming] Syncing battle action:', action.type, action.battleId);",
      "src/services/offline-gaming.ts:    console.log('[OfflineGaming] Syncing offline reward:', reward.type, reward.amount);",
      "src/services/offline-manager.ts:import type { Alarm } from '../types';",
      "src/services/offline-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-manager.ts:      type: 'alarm' | 'sleep' | 'voice';",
      "src/services/offline-manager.ts:            syncStore.createIndex('type', 'type');",
      "src/services/offline-manager.ts:    type: 'alarm' | 'sleep' | 'voice',",
      "src/services/offline-manager.ts:        throw new Error(`Unknown sync item type: ${item.type}`);",
      "src/services/offline-manager.ts:    if (typeof window !== 'undefined' && window.postMessage) {",
      "src/services/offline-sleep-tracker.ts:/// <reference types=\"node\" />",
      "src/services/offline-sleep-tracker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-sleep-tracker.ts:  type: 'awake' | 'light' | 'deep' | 'rem';",
      "src/services/offline-sleep-tracker.ts:  type: 'noise' | 'movement' | 'light' | 'temperature' | 'other';",
      "src/services/offline-sleep-tracker.ts:  type: 'pattern' | 'recommendation' | 'achievement' | 'warning';",
      "src/services/offline-sleep-tracker.ts:          type: 'bedtime_consistency',",
      "src/services/offline-sleep-tracker.ts:          type: 'sleep_duration',",
      "src/services/offline-sleep-tracker.ts:          type: 'sleep_quality',",
      "src/services/offline-sleep-tracker.ts:    type: SleepInterruption['type'],",
      "src/services/offline-sleep-tracker.ts:    console.log('[OfflineSleepTracker] Recorded sleep interruption:', type, severity);",
      "src/services/offline-sleep-tracker.ts:      type: 'awake',",
      "src/services/offline-sleep-tracker.ts:    if (sessionMinutes > 15 && currentStage.type === 'awake') {",
      "src/services/offline-sleep-tracker.ts:      currentStage.type === 'deep' &&",
      "src/services/offline-sleep-tracker.ts:      currentStage.type === 'rem' &&",
      "src/services/offline-sleep-tracker.ts:    // Add new stage if type changed",
      "src/services/offline-sleep-tracker.ts:    if (nextStageType !== currentStage.type && currentStage.duration >= 5) {",
      "src/services/offline-sleep-tracker.ts:        type: nextStageType,",
      "src/services/offline-sleep-tracker.ts:      .filter(stage => stage.type === 'deep')",
      "src/services/offline-sleep-tracker.ts:      .filter(stage => stage.type === 'rem')",
      "src/services/offline-sleep-tracker.ts:          .filter(stage => stage.type === 'deep')",
      "src/services/offline-sleep-tracker.ts:          .filter(stage => stage.type === 'rem')",
      "src/services/offline-sleep-tracker.ts:          type: 'recommendation',",
      "src/services/offline-sleep-tracker.ts:          type: 'achievement',",
      "src/services/offline-sleep-tracker.ts:      const existingInsightTypes = this.sleepInsights.map(i => i.type + '_' + i.title);",
      "src/services/offline-sleep-tracker.ts:        insight => !existingInsightTypes.includes(insight.type + '_' + insight.title)",
      "src/services/offline-storage.ts:import type { Alarm } from '../types';",
      "src/services/offline-storage.ts:  type: 'create' | 'update' | 'delete';",
      "src/services/offline-storage.ts:          type: 'update',",
      "src/services/offline-storage.ts:          type: 'create',",
      "src/services/offline-storage.ts:        type: 'delete',",
      "src/services/performance-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-analytics.ts:          type: this.getResourceType(resource.name),",
      "src/services/performance-analytics.ts:      if (typeof PerformanceObserver !== 'undefined') {",
      "src/services/performance-analytics.ts:      console.warn(`Failed to observe ${type} performance entries:`, _error);",
      "src/services/performance-analytics.ts:    const thresholdKey = metric.name as keyof typeof this.thresholds;",
      "src/services/performance-analytics.ts:      const thresholdKey = metric as keyof typeof this.thresholds;",
      "src/services/performance-budget-manager.ts:/// <reference types=\"node\" />",
      "src/services/performance-budget-manager.ts:} from './types/performance';",
      "src/services/performance-budget-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-budget-manager.ts:      // Observe different types of performance entries",
      "src/services/performance-budget-manager.ts:      for (const type of entryTypes) {",
      "src/services/performance-budget-manager.ts:          this.performanceObserver.observe({ type, buffered: true });",
      "src/services/performance-budget-manager.ts:          // Entry type not supported in this browser",
      "src/services/performance-budget-manager.ts:      type: this.getAlertType(id),",
      "src/services/performance-budget-manager.ts:          detail: { type: 'fps', action: 'reduce-complexity' },",
      "src/services/performance-monitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-monitor.ts:                type: resourceEntry.initiatorType,",
      "src/services/performance-monitor.ts:                type: resourceEntry.initiatorType,",
      "src/services/performance-monitor.ts:    type: UserInteraction['type'],",
      "src/services/performance-monitor.ts:    this.trackCustomMetric(`interaction_${type}`, 1, { target, ...metadata });",
      "src/services/performance-monitor.ts:    const threshold = thresholds[name as keyof typeof thresholds];",
      "src/services/performance-monitor.ts:  ): Array<{ type: string; count: number }> {",
      "src/services/performance-monitor.ts:        const key = `${interaction.type}:${interaction.target}`;",
      "src/services/performance-monitor.ts:        const [type, target] = key.split(':');",
      "src/services/performance-monitor.ts:        return { type: `${type} - ${target}`, count };",
      "src/services/performance-monitor.ts:PerformanceMonitor.prototype.getPerformanceTrends = function (): PerformanceTrends {",
      "src/services/performance-monitor.ts:export type { PerformanceTrends };",
      "src/services/predictive-analytics-service.ts:} from '../types/index';",
      "src/services/predictive-analytics-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/predictive-analytics-service.ts:  type: PatternType;",
      "src/services/predictive-analytics-service.ts:type PatternType =",
      "src/services/predictive-analytics-service.ts:  type: 'optimization' | 'warning' | 'trend' | 'recommendation' | 'anomaly';",
      "src/services/predictive-analytics-service.ts:        type: 'wake_consistency',",
      "src/services/predictive-analytics-service.ts:      type: 'snooze_behavior',",
      "src/services/predictive-analytics-service.ts:        type: 'seasonal_adjustment',",
      "src/services/predictive-analytics-service.ts:      const homePattern = locationPatterns.find(p => p.type === 'home');",
      "src/services/predictive-analytics-service.ts:              type: 'location_influence',",
      "src/services/predictive-analytics-service.ts:                correlations: [{ factor: 'location_type', strength: 0.8 }],",
      "src/services/predictive-analytics-service.ts:          type: 'weather_sensitivity',",
      "src/services/predictive-analytics-service.ts:            type: 'recommendation',",
      "src/services/predictive-analytics-service.ts:    return `pattern_${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;",
      "src/services/premium-theme-animations.ts:  type: 'fade' | 'slide' | 'scale' | 'flip' | 'wave' | 'particle' | 'morphing' | 'glow';",
      "src/services/premium-theme-animations.ts:  private createParticleSystem(type: 'stars' | 'leaves'): void {",
      "src/services/premium-theme-animations.ts:    const particleClass = type === 'stars' ? 'star-particle' : 'leaf-particle';",
      "src/services/premium-theme-animations.ts:    this.animationElements.set(`particles-${type}`, particleContainer);",
      "src/services/premium.ts:import type { User } from '../types';",
      "src/services/premium.ts:import type { SubscriptionTier } from '../types/premium';",
      "src/services/privacy-compliance.ts:  type: 'export' | 'delete' | 'rectify' | 'portability';",
      "src/services/privacy-compliance.ts:    Object.entries(consents).forEach(([type, granted]) => {",
      "src/services/privacy-compliance.ts:        this.setConsent(type as keyof ConsentSettings, granted, source, userId);",
      "src/services/privacy-compliance.ts:      type: 'export',",
      "src/services/privacy-compliance.ts:      type: 'delete',",
      "src/services/push-notifications.ts:import type { Alarm } from '../types';",
      "src/services/push-notifications.ts:          type: 'progress',",
      "src/services/push-notifications.ts:          type: 'system',",
      "src/services/push-notifications.ts:          type: 'emergency',",
      "src/services/push-notifications.ts:        console.log('Unknown secure push notification type:', notification.data?.type);",
      "src/services/push-notifications.ts:          type: notification.data?.type,",
      "src/services/push-notifications.ts:          type: 'test',",
      "src/services/pwa-manager.ts:      const { type, data } = _event.data;",
      "src/services/pwa-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/pwa-service.ts:    const { type, data } = event.data;",
      "src/services/real-time-smart-adapter.ts:/// <reference types=\"node\" />",
      "src/services/real-time-smart-adapter.ts:  type EnhancedSmartAlarm,",
      "src/services/real-time-smart-adapter.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/real-time-smart-adapter.ts:          type: 'sleep_pattern_change',",
      "src/services/real-time-smart-adapter.ts:            type: 'external_condition',",
      "src/services/real-time-smart-adapter.ts:            reason: `${conditionAdj.type} condition met: ${conditionAdj.adjustment.reason}`,",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/real-time-smart-adapter.ts:          type: 'emergency',",
      "src/services/real-time-smart-adapter.ts:          type: 'emergency',",
      "src/services/realtime-service.ts:/// <reference types=\"node\" />",
      "src/services/realtime-service.ts:import type { Alarm, User } from '../types';",
      "src/services/realtime-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/realtime-service.ts:          type: this.getDeviceType(),",
      "src/services/realtime-service.ts:          console.warn('Unknown WebSocket message type:', data.type);",
      "src/services/realtime-service.ts:        type: data.type,",
      "src/services/realtime-service.ts:        type: this.getUpdateType(table, payload.eventType),",
      "src/services/revenue-analytics.ts:} from '../types/premium';",
      "src/services/revenue-analytics.ts:    type: RevenueEventType;",
      "src/services/revenue-analytics.ts:          type: event.type,",
      "src/services/revenue-analytics.ts:      type: event.type,",
      "src/services/scheduler-core.ts:} from '../types/index';",
      "src/services/scheduler-core.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/secure-alarm-storage.ts:/// <reference types=\"node\" />",
      "src/services/secure-alarm-storage.ts:import type { Alarm, AlarmEvent } from '../types';",
      "src/services/secure-alarm-storage.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/secure-alarm-storage.ts:  private handleTamperDetection(type: string, details: any): void {",
      "src/services/secure-alarm-storage.ts:        ? alarm.days.filter(d => typeof d === 'number')",
      "src/services/secure-alarm-storage.ts:        typeof alarm.snoozeInterval === 'number' ? alarm.snoozeInterval : 5,",
      "src/services/secure-alarm-storage.ts:      snoozeCount: typeof alarm.snoozeCount === 'number' ? alarm.snoozeCount : 0,",
      "src/services/secure-alarm-storage.ts:      .filter(alarm => alarm && typeof alarm === 'object')",
      "src/services/secure-push-notification.ts:import type { Alarm } from '../types';",
      "src/services/secure-push-notification.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/secure-push-notification.ts:    // Handle different notification types with enhanced security",
      "src/services/secure-push-notification.ts:        console.log('Unknown secure push notification type:', data.type);",
      "src/services/secure-push-notification.ts:          type: 'emergency',",
      "src/services/secure-push-notification.ts:        type: 'test',",
      "src/services/security-monitoring-forensics.ts:/// <reference types=\"node\" />",
      "src/services/security-monitoring-forensics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/security-monitoring-forensics.ts:  type: SecurityEventType;",
      "src/services/security-monitoring-forensics.ts:type SecurityEventType =",
      "src/services/security-monitoring-forensics.ts:  type: 'immediate' | 'hourly' | 'daily';",
      "src/services/security-monitoring-forensics.ts:    type: SecurityEventType,",
      "src/services/security-monitoring-forensics.ts:        fingerprint: this.generateEventFingerprint(type, source, details),",
      "src/services/security-monitoring-forensics.ts:        `[SecurityMonitoring] Event logged: ${type} (${severity}) from ${source}`",
      "src/services/security-monitoring-forensics.ts:      type: 'threat_detected',",
      "src/services/security-monitoring-forensics.ts:    type: 'immediate' | 'hourly' | 'daily',",
      "src/services/security-monitoring-forensics.ts:          _event.type === 'threat_detected'",
      "src/services/security-monitoring-forensics.ts:        e => e.type === 'threat_detected'",
      "src/services/security-monitoring-forensics.ts:      return event.type === signature.pattern;",
      "src/services/security-monitoring-forensics.ts:        e.type === event.type &&",
      "src/services/security-monitoring-forensics.ts:        e.type === event.type &&",
      "src/services/security-monitoring-forensics.ts:    if (event.type === 'tampering_detected' || _event.type === 'threat_detected') {",
      "src/services/security-monitoring-forensics.ts:    type: SecurityEventType,",
      "src/services/security-monitoring-forensics.ts:    const fingerprintData = { type, source, details: JSON.stringify(details) };",
      "src/services/security-monitoring-forensics.ts:      .filter(e => e.type === 'threat_detected')",
      "src/services/security-monitoring-forensics.ts:      totalThreats: events.filter(e => e.type === 'threat_detected').length,",
      "src/services/security-monitoring-forensics.ts:    const tamperingEvents = events.filter(e => e.type === 'tampering_detected').length;",
      "src/services/security-monitoring-forensics.ts:      e => e.type === 'alarm_access_denied'",
      "src/services/service-worker-manager.ts:    const { type, data } = event.data;",
      "src/services/sleep-analysis.ts:import type { Alarm } from '../types';",
      "src/services/sleep-analysis.ts:  chronotype: 'extreme_early' | 'early' | 'normal' | 'late' | 'extreme_late';",
      "src/services/sleep-analysis.ts:        chronotype: this.determineChronotype(sessions),",
      "src/services/sleep-analysis.ts:      light: `You'll be in light sleep, making it easier to wake up naturally. Based on your ${pattern.chronotype} chronotype.`,",
      "src/services/smart-alarm-scheduler.ts:import type { Alarm } from '../types';",
      "src/services/smart-alarm-scheduler.ts:  chronotypeAlignment: number; // how well aligned current schedule is",
      "src/services/smart-alarm-scheduler.ts:        chronotypeAlignment: this.calculateChronotypeAlignment(pattern, alarms),",
      "src/services/smart-alarm-scheduler.ts:  private static calculateChronotypeAlignment(",
      "src/services/smart-alarm-scheduler.ts:    const idealBedtime = this.getIdealBedtimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:    const idealWakeTime = this.getIdealWakeTimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:  private static getIdealBedtimeForChronotype(chronotype: string): {",
      "src/services/smart-alarm-scheduler.ts:    return idealTimes[chronotype as keyof typeof idealTimes] || idealTimes.normal;",
      "src/services/smart-alarm-scheduler.ts:  private static getIdealWakeTimeForChronotype(chronotype: string): {",
      "src/services/smart-alarm-scheduler.ts:    return idealTimes[chronotype as keyof typeof idealTimes] || idealTimes.normal;",
      "src/services/smart-alarm-scheduler.ts:        type: 'bedtime_earlier',",
      "src/services/smart-alarm-scheduler.ts:        type: 'wake_consistent',",
      "src/services/smart-alarm-scheduler.ts:    // Chronotype alignment",
      "src/services/smart-alarm-scheduler.ts:    const alignment = this.calculateChronotypeAlignment(pattern, alarms);",
      "src/services/smart-alarm-scheduler.ts:      const idealBedtime = this.getIdealBedtimeForChronotype(pattern.chronotype);",
      "src/services/smart-alarm-scheduler.ts:        type: adjustment > 0 ? 'bedtime_later' : 'bedtime_earlier',",
      "src/services/smart-alarm-scheduler.ts:        description: `Adjust bedtime to better match your ${pattern.chronotype} chronotype`,",
      "src/services/smart-alarm-scheduler.ts:        optimization_type: optimization.optimizationType,",
      "src/services/smart-notification-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/smart-notification-service.ts:  type: 'alarm' | 'reminder' | 'optimization' | 'insight' | 'emergency';",
      "src/services/smart-notification-service.ts:    type: 'alarm' | 'reminder' | 'optimization' | 'insight' = 'alarm'",
      "src/services/smart-notification-service.ts:      priority: type === 'alarm' ? 'urgent' : 'normal',",
      "src/services/smart-notification-service.ts:  private getActivityBasedAdjustment(activity: string, type: string): number {",
      "src/services/smart-notification-service.ts:  private getLocationBasedAdjustment(location: any, type: string): number {",
      "src/services/smart-notification-service.ts:    const patternKey = `${notification.type}_${notification.context.timeOfDay}`;",
      "src/services/smart-notification-service.ts:            type: notification.type,",
      "src/services/smart-notification-service.ts:    const patternKey = `${notification.type}_${notification.context.timeOfDay}`;",
      "src/services/smart-notification-service.ts:      responseRates[key as keyof typeof responseRates] =",
      "src/services/smart-notification-service.ts:          ? (responseRates[key as keyof typeof responseRates] / totalResponses) * 100",
      "src/services/smart-notification-service.ts:    if (type === 'alarm' && 'label' in alarm) {",
      "src/services/smart-notification-service.ts:    if (type === 'alarm' && 'label' in alarm) {",
      "src/services/smart-notification-service.ts:    return bodies[type] || 'You have a new notification.';",
      "src/services/smart-notification-service.ts:        priority as keyof typeof this._config.vibrationPatterns",
      "src/services/smart-notification-service.ts:      this.config.soundProfiles[timeOfDay as keyof typeof this._config.soundProfiles] ||",
      "src/services/smart-notification-service.ts:    return escalation[currentPriority as keyof typeof escalation] as any;",
      "src/services/smart-notification-service.ts:  private getEscalationDelay(level: number, type: string): number {",
      "src/services/smart-notification-service.ts:    const delays = baseDelays[type] || baseDelays.reminder;",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:    if (typeof localStorage !== 'undefined') {",
      "src/services/smart-notification-service.ts:            return { __type: 'Date', value: value.toISOString() };",
      "src/services/sound-effects.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/sound-effects.ts:} from '../types/custom-sound-themes';",
      "src/services/sound-effects.ts:export type SoundTheme =",
      "src/services/sound-effects.ts:export type SoundEffectId =",
      "src/services/sound-effects.ts:    const sounds = categoryMap[category as keyof typeof categoryMap];",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:        type: 'completeness',",
      "src/services/sound-effects.ts:          type: '_error',",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:    const isValid = issues.filter(issue => issue.type === '_error').length === 0;",
      "src/services/sound-effects.ts:    // Map existing alarm sound types to our new system",
      "src/services/sound-effects.ts:    console.warn(`Unknown alarm sound type: ${alarmSoundType}`);",
      "src/services/stripe-service.ts:} from '../types/premium';",
      "src/services/stripe-service.ts:      if (typeof window !== 'undefined') {",
      "src/services/stripe-service.ts:      type: stripePaymentMethod.type,",
      "src/services/stripe-service.ts:      type: data.type,",
      "src/services/subscription-service.ts:} from '../types/premium';",
      "src/services/subscription-service.ts:import type { User } from '../types';",
      "src/services/subscription-service.ts:      type: data.type,",
      "src/services/supabase.ts:import type { User } from '@supabase/supabase-js';",
      "src/services/supabase.ts:import type { Alarm, AlarmEvent, User as AppUser } from '../types';",
      "src/services/supabase.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/theme-accessibility.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/theme-accessibility.ts:    if (typeof document === 'undefined') return;",
      "src/services/theme-accessibility.ts:    if (typeof window !== 'undefined' && window.matchMedia) {",
      "src/services/theme-combinations.ts:export type ThemeCategory =",
      "src/services/theme-combinations.ts:export type AlarmIntensity = 'gentle' | 'moderate' | 'intense' | 'extreme';",
      "src/services/theme-combinations.ts:export type ThemeMood =",
      "src/services/theme-combinations.ts:export type TimeOfDay =",
      "src/services/theme-combinations.ts:export type WeatherCondition =",
      "src/services/theme-performance.ts:/// <reference types=\"node\" />",
      "src/services/theme-performance.ts:    if (typeof window === 'undefined' || !('MutationObserver' in window)) {",
      "src/services/theme-performance.ts:          mutation.type === 'attributes' &&",
      "src/services/theme-performance.ts:    if (typeof performance !== 'undefined' && performance.mark) {",
      "src/services/theme-performance.ts:    options: Parameters<typeof this.applyTheme>[2] = {}",
      "src/services/theme-persistence.ts:        data && typeof data === 'object' && data.version && data.theme && data.timestamp",
      "src/services/typed-realtime-service.ts:import type { SupabaseClient } from '@supabase/supabase-js';",
      "src/services/typed-realtime-service.ts:} from '../types/realtime';",
      "src/services/typed-realtime-service.ts:        type: 'network',",
      "src/services/typed-realtime-service.ts:        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js',",
      "src/services/typed-realtime-service.ts:          typeof navigator !== 'undefined' ? navigator.platform : process.platform,",
      "src/services/typed-realtime-service.ts:        onlineStatus: typeof navigator !== 'undefined' ? navigator.onLine : true,",
      "src/services/typed-realtime-service.ts:        webSocket: typeof WebSocket !== 'undefined',",
      "src/services/typed-realtime-service.ts:        serviceWorker: typeof navigator !== 'undefined' && 'serviceWorker' in navigator,",
      "src/services/typed-realtime-service.ts:        pushNotifications: typeof navigator !== 'undefined' && 'PushManager' in window,",
      "src/services/typed-realtime-service.ts:          typeof navigator !== 'undefined' && 'serviceWorker' in navigator,",
      "src/services/typed-realtime-service.ts:        webRTC: typeof RTCPeerConnection !== 'undefined',",
      "src/services/typed-realtime-service.ts:        indexedDB: typeof indexedDB !== 'undefined',",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_triggered') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_dismissed') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'alarm_snoozed') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'user_presence_update') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'recommendation_generated') {",
      "src/services/typed-realtime-service.ts:  async requestAnalysis(type: string, data: any): Promise<string> {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'voice_mood_detected') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'sleep_pattern_updated') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'system_notification') {",
      "src/services/typed-realtime-service.ts:      if (message.type === 'emergency_alert') {",
      "src/services/types/media.ts:// Media types for the audio system",
      "src/services/types/media.ts:export type SoundCategory =",
      "src/services/types/media.ts:export type QuoteCategory =",
      "src/services/types/media.ts:// Enhanced alarm type with media support",
      "src/services/types/media.ts:  voiceMood: import('../types').VoiceMood;",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/services/types/performance.ts:  type: 'memory' | 'fps' | 'network' | 'render' | 'user';",
      "src/services/types/performance.ts:// Utility types for specific optimizations",
      "src/services/types/performance.ts:export type OptimizationStrategy = 'none' | 'conservative' | 'balanced' | 'aggressive';",
      "src/services/user-testing.ts:  type: 'rating' | 'text' | 'bug' | 'suggestion' | 'complaint';",
      "src/services/user-testing.ts:  type: 'conversion' | 'engagement' | 'retention' | 'custom';",
      "src/services/user-testing.ts:        type: event.type || 'click',",
      "src/services/user-testing.ts:      type: '_error',",
      "src/services/user-testing.ts:      type: 'performance',",
      "src/services/user-testing.ts:        type: feedback.type || 'text',",
      "src/services/user-testing.ts:      type: 'conversion',",
      "src/services/user-testing.ts:        type: 'ab_test_conversion',",
      "src/services/user-testing.ts:    if (feedback.type === 'bug' && feedback.rating && feedback.rating <= 2)",
      "src/services/user-testing.ts:    if (feedback.type === 'complaint') return 'high';",
      "src/services/user-testing.ts:        { name: 'alarm_created', type: 'conversion', target: 0.8 },",
      "src/services/user-testing.ts:        { name: 'button_clicks', type: 'engagement', target: 5 },",
      "src/services/visual-alarm-themes.ts:export type VisualAlarmThemeId =",
      "src/services/visual-alarm-themes.ts:        type: 'gradient',",
      "src/services/visual-alarm-themes.ts:        type: 'animated',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:        type: 'animated',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:        type: 'particles',",
      "src/services/visual-alarm-themes.ts:        type: 'pattern',",
      "src/services/visual-alarm-themes.ts:          background.type === 'gradient'",
      "src/services/voice-ai-enhanced.ts:import type { Alarm, VoiceMood, User } from '../types';",
      "src/services/voice-biometrics.ts:import type { User } from '../types';",
      "src/services/voice-biometrics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-biometrics.ts:            const blob = new Blob(chunks, { type: 'audio/webm' });",
      "src/services/voice-enhanced.ts:/// <reference types=\"node\" />",
      "src/services/voice-enhanced.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-enhanced.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-pro.ts:/// <reference types=\"node\" />",
      "src/services/voice-pro.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice-pro.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-pro.ts:  type: 'web-speech' | 'elevenlabs' | 'google-cloud' | 'azure' | 'amazon-polly';",
      "src/services/voice-pro.ts:      type: 'web-speech',",
      "src/services/voice-pro.ts:      type: 'elevenlabs',",
      "src/services/voice-recognition-enhanced.ts:    onGesture?: (gesture: { type: string; confidence: number; intent: string }) => void,",
      "src/services/voice-recognition-enhanced.ts:    onGesture?: (gesture: { type: string; confidence: number; intent: string }) => void,",
      "src/services/voice-recognition-enhanced.ts:    onGesture?: (gesture: { type: string; confidence: number; intent: string }) => void",
      "src/services/voice-recognition-enhanced.ts:  ): { type: string; confidence: number; intent: string } | null {",
      "src/services/voice-recognition-enhanced.ts:        type: 'whistle',",
      "src/services/voice-recognition-enhanced.ts:  ): { type: string; confidence: number; intent: string } | null {",
      "src/services/voice-recognition-enhanced.ts:  ): { type: string; confidence: number; intent: string } | null {",
      "src/services/voice-recognition-enhanced.ts:  ): { type: string; confidence: number; intent: string } | null {",
      "src/services/voice-smart-integration.ts:import type { User, Alarm } from '../types';",
      "src/services/voice-smart-integration.ts:    lights: { id: string; name: string; type: string; controllable: boolean }[];",
      "src/services/voice-smart-integration.ts:  type: 'alarm' | 'smart_home' | 'navigation' | 'settings' | 'calendar' | 'custom';",
      "src/services/voice-smart-integration.ts:    gesture: { type: string; confidence: number; intent: string },",
      "src/services/voice.ts:import type { Alarm, VoiceMood } from '../types';",
      "src/services/voice.ts:import { TimeoutHandle } from '../types/timers';",
      "src/stories/Button.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Button.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/Header.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Header.stories.ts:} satisfies Meta<typeof Header>;",
      "src/stories/Header.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/Header.tsx:type User = {",
      "src/stories/Page.stories.ts:import type { Meta, StoryObj } from '@storybook/react-vite';",
      "src/stories/Page.stories.ts:} satisfies Meta<typeof Page>;",
      "src/stories/Page.stories.ts:type Story = StoryObj<typeof meta>;",
      "src/stories/Page.tsx:type User = {",
      "src/stories/components/AlarmForm.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/components/AlarmForm.stories.tsx:import type { Alarm, VoiceMood, AlarmDifficulty, User } from '../../types';",
      "src/stories/components/AlarmForm.stories.tsx:      control: { type: 'object' },",
      "src/stories/components/AlarmForm.stories.tsx:      control: { type: 'text' },",
      "src/stories/components/AlarmForm.stories.tsx:      control: { type: 'object' },",
      "src/stories/components/AlarmForm.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/components/Dashboard.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/components/Dashboard.stories.tsx:      control: { type: 'object' },",
      "src/stories/components/Dashboard.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/ui/Button.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'select' },",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'select' },",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'boolean' },",
      "src/stories/ui/Button.stories.tsx:      control: { type: 'boolean' },",
      "src/stories/ui/Button.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/stories/ui/Card.stories.tsx:import type { Meta, StoryObj } from '@storybook/react';",
      "src/stories/ui/Card.stories.tsx:type Story = StoryObj<typeof meta>;",
      "src/templates/email-templates.ts:import { PersonaType, DEFAULT_PERSONAS } from '../types/email-campaigns';",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/templates/email-templates.ts:      type: 'welcome',",
      "src/test-setup.ts:import { TimeoutHandle } from '../types/timers';",
      "src/test-setup.ts:if (typeof global !== 'undefined') {",
      "src/test-setup.ts:if (typeof window !== 'undefined') {",
      "src/test-setup.ts:if (typeof document !== 'undefined' && document.body) {",
      "src/test-setup.ts:// Mock HTMLCanvasElement.prototype.getContext for color contrast checking",
      "src/test-setup.ts:if (typeof HTMLCanvasElement !== 'undefined') {",
      "src/test-setup.ts:  HTMLCanvasElement.prototype.getContext = vi.fn().mockImplementation(function (",
      "src/test-setup.ts:if (typeof window !== 'undefined') {",
      "src/test-setup.ts:    ] as import('./types').DayOfWeek[],",
      "src/test-setup.ts:if (typeof global !== 'undefined') {",
      "src/test-setup.ts:  console.log('document.body type:', typeof document?.body);",
      "src/test-setup.ts:  console.log('document.createElement type:', typeof document?.createElement);",
      "src/tests/alarm-themes-integration.test.ts:        expect(typeof combo.popularity).toBe('number');",
      "src/tests/alarm-themes-integration.test.ts:      expect(typeof exportData).toBe('string');",
      "src/types/alarm-scheduling.ts:  type: 'daily' | 'weekly' | 'monthly' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'weather' | 'location' | 'calendar' | 'sleep' | 'health' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'adjust_time' | 'disable' | 'change_sound' | 'add_notification' | 'custom';",
      "src/types/alarm-scheduling.ts:    type: 'enable' | 'disable' | 'adjust_time' | 'notification';",
      "src/types/alarm-scheduling.ts:    type: 'time_before' | 'time_after' | 'disable' | 'custom_time';",
      "src/types/alarm-scheduling.ts:// Export helper types for component props",
      "src/types/alarm-scheduling.ts:  return value && typeof value.type === 'string' && typeof value.interval === 'number';",
      "src/types/alarm.d.ts:// Additional type definitions for Advanced Alarm Scheduler",
      "src/types/alarm.d.ts:// Helper types for geolocation",
      "src/types/alarm.d.ts:// Location action type for location triggers",
      "src/types/alarm.d.ts:  type?: 'alert' | 'banner' | 'sound'; // for notification actions",
      "src/types/alarm.d.ts:// Additional utility types for the advanced scheduler",
      "src/types/alarm.d.ts:// Global type augmentations for browser APIs",
      "src/types/analytics.d.ts: * Comprehensive types for revenue analytics, user journey tracking, and feature adoption metrics",
      "src/types/analytics.d.ts:export type SubscriptionTier = 'free' | 'basic' | 'premium' | 'pro' | 'enterprise';",
      "src/types/analytics.d.ts:export type BillingInterval = 'month' | 'year';",
      "src/types/analytics.d.ts:export type SubscriptionStatus = 'active' | 'canceled' | 'unpaid' | 'trialing';",
      "src/types/analytics.d.ts:export type RevenueEventType =",
      "src/types/analytics.d.ts:    type: RevenueEventType;",
      "src/types/analytics.d.ts:  type: 'percentage' | 'fixed_amount';",
      "src/types/analytics.d.ts:  type: RevenueEventType;",
      "src/types/analytics.d.ts:export type TimeRange = '7d' | '30d' | '90d' | '1y';",
      "src/types/analytics.d.ts:export type ReportFormat = 'json' | 'csv';",
      "src/types/analytics.d.ts:export type MetricsCache = Map<string, CacheEntry<any>>;",
      "src/types/api-responses.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse;",
      "src/types/api-responses.ts:    type: 'free' | 'creator' | 'creator_pro' | 'enterprise';",
      "src/types/api-responses.ts:  type?: 'alarm' | 'reminder' | 'achievement' | 'social';",
      "src/types/api-responses.ts:  export type SubscribeResponse = ApiResponse<SubscribeContactResponse>;",
      "src/types/api-responses.ts:  export type AutomationResponse = ApiResponse<AddContactToAutomationResponse>;",
      "src/types/api-responses.ts:  export type TagResponse = ApiResponse<AddTagToContactResponse>;",
      "src/types/api-responses.ts:  export type CampaignStatsResponse = ApiResponse<CampaignStats>;",
      "src/types/api-responses.ts:  export type AutomationStatsResponse = ApiResponse<AutomationStats>;",
      "src/types/api-responses.ts:  export type AccountResponse = ApiResponse<ConvertKitAccount>;",
      "src/types/api-responses.ts:  export type BroadcastStatsResponse = ApiResponse<BroadcastStats>;",
      "src/types/api-responses.ts:  export type GrowthStatsResponse = ApiResponse<GrowthStats>;",
      "src/types/api-responses.ts:  export type CustomFields = ConvertKitCustomFields;",
      "src/types/api-responses.ts:  export type UserFeaturesResponse = ApiResponse<UserFeatures>;",
      "src/types/api-responses.ts:  export type EngagementResponse = ApiResponse<EngagementMetrics>;",
      "src/types/api-responses.ts:  export type MockResponse<T> = ApiResponse<TestServiceResponse<T>>;",
      "src/types/api-responses.ts:  export type NotificationResponse = ApiResponse<NotificationExtras>;",
      "src/types/api-responses.ts:  export type CacheResponse<T> = ApiResponse<CacheGetResponse<T>>;",
      "src/types/api.ts: * Provides type safety for all API interactions",
      "src/types/api.ts:export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';",
      "src/types/api.ts:  type: 'challenge' | 'tournament' | 'friendly';",
      "src/types/api.ts:    type: 'photo' | 'location' | 'challenge';",
      "src/types/api.ts:  type: 'javascript' | 'network' | 'resource' | 'security';",
      "src/types/api.ts:  type: 'User' | 'Organization';",
      "src/types/api.ts:    type: 'image' | 'video' | 'gif';",
      "src/types/api.ts:  type: 'alarm.triggered' | 'alarm.snoozed' | 'alarm.dismissed';",
      "src/types/api.ts:  type: 'system.maintenance' | 'system.update' | 'system.announcement';",
      "src/types/api.ts:export type ApiRequest =",
      "src/types/api.ts:export type ApiResponseData =",
      "src/types/api.ts:export type WebhookPayloadTypes =",
      "src/types/api.ts:export type WebSocketMessageTypes =",
      "src/types/api.ts:    type: 'bearer' | 'basic' | 'api-key';",
      "src/types/app-state.ts:   * @type {AlarmInstance[]}",
      "src/types/app-state.ts:   * @type {boolean}",
      "src/types/app-state.ts:   * @type {boolean}",
      "src/types/app-state.ts:   * @type {Date | null}",
      "src/types/app-state.ts:   * @type {Record<string, { snoozeCount: number; snoozeUntil: Date }>}",
      "src/types/app-state.ts:   * @type {Object}",
      "src/types/app-state.ts:     * @type {boolean}",
      "src/types/app-state.ts:     * @type {boolean}",
      "src/types/app-state.ts:     * @type {Record<string, string>}",
      "src/types/app-state.ts:   * @type {Record<string, SchedulingConfig>}",
      "src/types/app-state.ts:   * @example [{ type: 'sleep_cycle', isEnabled: true, parameters: { sensitivity: 0.8 } }]",
      "src/types/app-state.ts:   * @type {LocationTrigger[]}",
      "src/types/app-state.ts:   * @type {ConditionalRule[]}",
      "src/types/app-state.ts:  type: 'upgrade' | 'downgrade' | 'cancel' | 'reactivate';",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_ERROR'; payload: { id: string; _error: string } }",
      "src/types/app-state.ts:  | { type: 'ALARM_TOGGLE'; payload: { id: string; enabled: boolean } }",
      "src/types/app-state.ts:  | { type: 'ALARM_SNOOZE'; payload: { id: string; snoozeUntil: Date } }",
      "src/types/app-state.ts:  | { type: 'SET_ALARM_VALIDATION_ERRORS'; payload: Record<string, string> }",
      "src/types/app-state.ts:export type UserAction =",
      "src/types/app-state.ts:  | { type: 'USER_PROFILE_LOAD_SUCCESS'; payload: UserProfile }",
      "src/types/app-state.ts:  | { type: 'USER_PREFERENCES_UPDATE'; payload: Partial<UserState['preferences']> }",
      "src/types/app-state.ts:  | { type: 'USER_ACHIEVEMENT_UNLOCK'; payload: Achievement }",
      "src/types/app-state.ts:  | { type: 'USER_STREAK_UPDATE'; payload: { current: number; longest: number } }",
      "src/types/app-state.ts:  | { type: 'USER_FRIEND_REQUEST'; payload: UserFriend }",
      "src/types/app-state.ts:  | { type: 'USER_CHALLENGE_JOIN'; payload: SocialChallenge };",
      "src/types/app-state.ts:  | { type: 'FEATURE_ACCESS_UPDATE'; payload: FeatureAccess }",
      "src/types/app-state.ts:  | { type: 'FEATURE_USAGE_UPDATE'; payload: { feature: string; usage: FeatureUsage } }",
      "src/types/app-state.ts:  | { type: 'PAYMENT_METHOD_ADD'; payload: PaymentMethod }",
      "src/types/app-state.ts:  | { type: 'INVOICE_RECEIVED'; payload: Invoice }",
      "src/types/app-state.ts:  | { type: 'UPGRADE_PROMPT_SHOW'; payload: UpgradePrompt }",
      "src/types/app-state.ts:export type AppAction = AlarmAction | UserAction | SubscriptionAction;",
      "src/types/app-state.ts:    typeof state.isLoading === 'boolean' &&",
      "src/types/app-state.ts:    typeof state.editing === 'object'",
      "src/types/app-state.ts:    typeof state.auth === 'object' &&",
      "src/types/app-state.ts:    typeof state.auth.isAuthenticated === 'boolean'",
      "src/types/app-state.ts:    typeof state.status === 'object' &&",
      "src/types/app-state.ts:    typeof state.status.isActive === 'boolean'",
      "src/types/browser-apis.d.ts:// Comprehensive type definitions for Browser APIs used in the application",
      "src/types/browser-apis.d.ts:type PushEncryptionKeyName = 'p256dh' | 'auth';",
      "src/types/browser-apis.d.ts:  readonly type: 'screen';",
      "src/types/browser-apis.d.ts:  addEventListener(type: 'release', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  removeEventListener(type: 'release', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  request(type: 'screen'): Promise<WakeLockSentinel>;",
      "src/types/browser-apis.d.ts:type PermissionName =",
      "src/types/browser-apis.d.ts:  addEventListener(type: 'change', listener: () => void): void;",
      "src/types/browser-apis.d.ts:  removeEventListener(type: 'change', listener: () => void): void;",
      "src/types/browser-apis.d.ts:    BroadcastChannel: typeof BroadcastChannel;",
      "src/types/browser-apis.d.ts:    prototype: BroadcastChannel;",
      "src/types/cloudflare-runtime.d.ts: * when @cloudflare/workers-types isn't present in the runtime environment.",
      "src/types/cloudflare-runtime.d.ts:    get(key: string, type?: 'text' | 'json' | 'arrayBuffer' | 'stream'): Promise<any>;",
      "src/types/configuration-interfaces.ts:  condition_type?: 'has_tag' | 'field_equals' | 'date_based' | 'engagement_based';",
      "src/types/configuration-interfaces.ts:      type: 'text' | 'number' | 'boolean' | 'select' | 'multiselect';",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:  return typeof value === 'object' && value !== null;",
      "src/types/configuration-interfaces.ts:  if (typeof customFields === 'object' && customFields !== null) {",
      "src/types/configuration-interfaces.ts:      if (['string', 'number', 'boolean'].includes(typeof value)) {",
      "src/types/custom-sound-themes.ts: * Defines types for creating, managing, and using custom sound themes",
      "src/types/custom-sound-themes.ts:import type { SoundTheme, SoundEffectId } from '../services/sound-effects';",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeCategory =",
      "src/types/custom-sound-themes.ts:  type: CustomSoundType;",
      "src/types/custom-sound-themes.ts:export type CustomSoundType =",
      "src/types/custom-sound-themes.ts:export type SoundCategory =",
      "src/types/custom-sound-themes.ts:export type SoundLicense =",
      "src/types/custom-sound-themes.ts:  type: GeneratedSoundType;",
      "src/types/custom-sound-themes.ts:export type GeneratedSoundType =",
      "src/types/custom-sound-themes.ts:  type: 'lfo' | 'envelope' | 'random';",
      "src/types/custom-sound-themes.ts:  type: 'reverb' | 'delay' | 'chorus' | 'distortion' | 'compression';",
      "src/types/custom-sound-themes.ts:export type Platform = 'web' | 'ios' | 'android' | 'desktop';",
      "src/types/custom-sound-themes.ts:export type ThemePermission =",
      "src/types/custom-sound-themes.ts:export type ThemePermissionLevel =",
      "src/types/custom-sound-themes.ts:export type CreationStep =",
      "src/types/custom-sound-themes.ts:  type: '_error' | 'warning' | 'info';",
      "src/types/custom-sound-themes.ts:  type: 'quality' | 'completeness' | 'optimization' | 'accessibility';",
      "src/types/custom-sound-themes.ts:  type: 'upload' | 'generation' | 'validation' | 'save' | 'network';",
      "src/types/custom-sound-themes.ts:  type: 'quality' | 'compatibility' | 'performance' | 'legal';",
      "src/types/custom-sound-themes.ts:export type RecommendationSource =",
      "src/types/custom-sound-themes.ts:  type: 'validation' | 'format' | 'size' | 'corruption' | 'permission';",
      "src/types/custom-sound-themes.ts:// Event types for the creation process",
      "src/types/custom-sound-themes.ts:export type CustomSoundThemeEvent =",
      "src/types/domain.ts:  type: 'triggered' | 'dismissed' | 'snoozed' | 'missed';",
      "src/types/domain.ts:export type SubscriptionTier = ",
      "src/types/domain.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/domain.ts:export type PaymentStatus = ",
      "src/types/domain.ts:  type: 'percentage' | 'fixed';",
      "src/types/domain.ts:  type: 'math' | 'memory' | 'puzzle' | 'qr_code' | 'photo' | 'walking';",
      "src/types/domain.ts:  type: Battle['type'];",
      "src/types/email-campaigns.ts:export type PersonaType =",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'subscription_status' | 'engagement_level';",
      "src/types/email-campaigns.ts:  type: 'text' | 'number' | 'date' | 'boolean' | 'url';",
      "src/types/email-campaigns.ts:  type: 'subject_line' | 'content' | 'cta_button' | 'send_time' | 'sender_name';",
      "src/types/email-campaigns.ts:  type: 'sequence' | 'subject_line' | 'cta' | 'send_time';",
      "src/types/email-campaigns.ts:  type: 'behavioral' | 'demographic' | 'engagement' | 'subscription';",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'data_change' | 'external_event';",
      "src/types/email.ts:export type PersonaType =",
      "src/types/emotional.ts:export type EmotionType =",
      "src/types/emotional.ts:export type EmotionalTone = 'encouraging' | 'playful' | 'firm' | 'roast';",
      "src/types/emotional.ts:export type EscalationLevel =",
      "src/types/emotional.ts:export type EmotionalNotificationCategory =",
      "src/types/emotional.ts:  (typeof EMOTIONAL_NOTIFICATION_CATEGORIES)[keyof typeof EMOTIONAL_NOTIFICATION_CATEGORIES];",
      "src/types/global.d.ts:// Global utility types for better type safety in backend utilities",
      "src/types/global.d.ts:type UnknownRecord = Record<string, unknown>;",
      "src/types/global.d.ts:type JsonArray = JsonObject[];",
      "src/types/global.d.ts:type Result<T, E = Error> = { success: true; data: T } | { success: false; _error: E };",
      "src/types/helpers.d.ts: * Utility types for Phase 2B TypeScript implicit any parameter fixes",
      "src/types/helpers.d.ts: * These types provide safe fallbacks for common patterns where exact types are unknown",
      "src/types/helpers.d.ts:export type Maybe<T> = T | undefined | null;",
      "src/types/helpers.d.ts:export type EventHandler<T = any> = (e: T) => void; // auto",
      "src/types/helpers.d.ts:export type CallbackFunction<T = any> = (value: T) => void; // auto",
      "src/types/helpers.d.ts:export type AsyncCallback<T = any> = (value: T) => Promise<void>; // auto",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/helpers.d.ts:export type GenericObject = Record<string, any>; // auto",
      "src/types/helpers.d.ts:export type SafeAny = any; // auto - temporary fallback for complex inference",
      "src/types/http-client.ts:  type: 'bearer' | 'basic' | 'api-key' | 'custom';",
      "src/types/http-client.ts:export type CircuitBreakerState = 'CLOSED' | 'OPEN' | 'HALF_OPEN';",
      "src/types/index.ts:export type ApiEndpoint<TRequest = unknown, TResponse = unknown> = {",
      "src/types/index.ts:export type ServiceMethod<TArgs extends unknown[] = unknown[], TResult = unknown> = (",
      "src/types/index.ts:export type AsyncServiceMethod<",
      "src/types/index.ts:// Common type guards for runtime type checking",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as ApiResponse).success === 'boolean' &&",
      "src/types/index.ts:    typeof (value as ApiResponse).timestamp === 'string'",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as ApiError).code === 'string' &&",
      "src/types/index.ts:    typeof (value as ApiError).message === 'string'",
      "src/types/index.ts:    typeof value === 'object' &&",
      "src/types/index.ts:    typeof (value as PaginatedResponse<T>).meta === 'object'",
      "src/types/index.ts:// Helper types for common patterns",
      "src/types/index.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/index.ts:export type Required<T, K extends keyof T> = T & Required<Pick<T, K>>;",
      "src/types/index.ts:export type DeepPartial<T> = {",
      "src/types/index.ts:// Service factory type for dependency injection",
      "src/types/manual-fixes.d.ts: * to maintain backward compatibility while providing proper type safety.",
      "src/types/premium.ts:export type SubscriptionTier =",
      "src/types/premium.ts:export type BillingInterval = 'month' | 'year' | 'lifetime';",
      "src/types/premium.ts:export type PaymentStatus =",
      "src/types/premium.ts:export type RefundStatus = 'pending' | 'succeeded' | 'failed' | 'canceled';",
      "src/types/premium.ts:export type PremiumFeatureCategory =",
      "src/types/premium.ts:  type: 'card' | 'bank_account' | 'paypal' | 'apple_pay' | 'google_pay';",
      "src/types/premium.ts:  type: 'percentage' | 'fixed' | 'trial_extension';",
      "src/types/premium.ts:    type: 'credit' | 'discount' | 'free_months';",
      "src/types/premium.ts:    type: 'credit' | 'discount' | 'free_months' | 'trial_extension';",
      "src/types/premium.ts:// Export all types as a namespace for easy importing",
      "src/types/premium.ts:  export type Billing = BillingInterval;",
      "src/types/premium.ts:  export type Payment = PaymentStatus;",
      "src/types/push-notifications.ts:export type NotificationPriority = 'min' | 'low' | 'default' | 'high' | 'max';",
      "src/types/push-notifications.ts:export type NotificationCategory =",
      "src/types/push-notifications.ts:export type NotificationActionType =",
      "src/types/push-notifications.ts:  type?: 'button' | 'text'; // text for input responses",
      "src/types/push-notifications.ts:  type: 'progress';",
      "src/types/push-notifications.ts:  type: 'system';",
      "src/types/push-notifications.ts:  type: 'emergency';",
      "src/types/push-notifications.ts:    type: 'mobile' | 'desktop' | 'tablet';",
      "src/types/push-notifications.ts:  type: ServiceWorkerMessageType;",
      "src/types/push-notifications.ts:export type ServiceWorkerMessageType =",
      "src/types/realtime-messages.ts: * Specific message types and payloads for alarm and user activity real-time communication",
      "src/types/realtime-messages.ts:import type { Alarm, VoiceMood, User, Battle } from './index';",
      "src/types/realtime-messages.ts:import type { WebSocketMessage } from './websocket';",
      "src/types/realtime-messages.ts:    type: 'time_conflict' | 'data_conflict' | 'permission_conflict';",
      "src/types/realtime-messages.ts:    type: 'viewing_alarms' | 'setting_alarm' | 'in_meeting' | 'sleeping' | 'commuting';",
      "src/types/realtime-messages.ts:    type: 'wifi' | 'cellular' | 'ethernet' | 'offline';",
      "src/types/realtime-messages.ts:  type: 'alarm_optimization' | 'sleep_schedule' | 'voice_mood' | 'challenge_difficulty';",
      "src/types/realtime-messages.ts:    type: 'voice_training' | 'mood_improvement' | 'schedule_adjustment';",
      "src/types/realtime-messages.ts:    type: 'bedtime_adjustment' | 'wake_time_adjustment' | 'environment_change';",
      "src/types/realtime-messages.ts:  type: 'info' | 'warning' | '_error' | 'success' | 'maintenance';",
      "src/types/realtime-messages.ts:    type: 'primary' | 'secondary' | 'danger';",
      "src/types/realtime-messages.ts:  type: 'security_breach' | 'service_outage' | 'data_loss' | 'critical_bug';",
      "src/types/realtime-messages.ts:  type: 'full_sync' | 'incremental_sync' | 'conflict_resolution';",
      "src/types/realtime-messages.ts:export type AlarmRealtimeMessage =",
      "src/types/realtime-messages.ts:export type UserRealtimeMessage =",
      "src/types/realtime-messages.ts:export type AIRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SystemRealtimeMessage =",
      "src/types/realtime-messages.ts:export type SyncRealtimeMessage =",
      "src/types/realtime-messages.ts:export type RealtimeMessage =",
      "src/types/realtime-service.ts:  requestAnalysis(type: string, data: any): Promise<string>;",
      "src/types/realtime/index.ts: * Extract payload type from a WebSocket message",
      "src/types/realtime/index.ts:export type ExtractPayload<T> = T extends WebSocketMessage<infer P> ? P : never;",
      "src/types/realtime/index.ts: * Create a typed WebSocket message",
      "src/types/realtime/index.ts:export type TypedWebSocketMessage<",
      "src/types/realtime/index.ts:export type RealtimeEventHandler<T = any> = (payload: T) => void | Promise<void>;",
      "src/types/realtime/index.ts:export type RealtimeSubscriptionCleanup = () => void;",
      "src/types/service-architecture.ts:export type ServiceMap = Map<string, BaseService>;",
      "src/types/service-architecture.ts:    typeof obj.name === 'string' &&",
      "src/types/service-architecture.ts:    typeof obj.version === 'string' &&",
      "src/types/service-architecture.ts:    typeof obj.initialize === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.cleanup === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.isReady === 'function' &&",
      "src/types/service-architecture.ts:    typeof obj.getHealth === 'function'",
      "src/types/service-architecture.ts:    typeof obj.enabled === 'boolean' &&",
      "src/types/service-architecture.ts:    typeof obj.environment === 'string' &&",
      "src/types/services/backend-api.ts:export type BattleChallengeType =",
      "src/types/services/backend-api.ts:  type: AlarmEventType;",
      "src/types/services/backend-api.ts:export type AlarmEventType =",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:export type BattleType =",
      "src/types/services/backend-api.ts:export type BattleStatus =",
      "src/types/services/backend-api.ts:  type: BattleChallengeType;",
      "src/types/services/backend-api.ts:  type: 'points' | 'badges' | 'premium_days' | 'custom';",
      "src/types/services/backend-api.ts:export type TournamentFormat =",
      "src/types/services/backend-api.ts:export type TournamentStatus =",
      "src/types/services/backend-api.ts:  type: BattleType;",
      "src/types/services/backend-api.ts:    type: BattleChallengeType;",
      "src/types/services/convertkit-api.ts:  type: 'embed' | 'hosted' | 'modal' | 'slide_in';",
      "src/types/services/convertkit-api.ts: * User persona types for targeted campaigns",
      "src/types/services/convertkit-api.ts:export type UserPersona =",
      "src/types/services/convertkit-api.ts:    content_type: 'educational' | 'motivational' | 'promotional' | 'mixed';",
      "src/types/services/convertkit-api.ts:  campaign_type: 'broadcast' | 'sequence' | 'form';",
      "src/types/services/stripe-api.ts:    usage_type?: 'licensed' | 'metered';",
      "src/types/services/stripe-api.ts:  type: 'one_time' | 'recurring';",
      "src/types/services/stripe-api.ts:  type: 'card' | 'us_bank_account' | 'sepa_debit';",
      "src/types/services/stripe-api.ts:  type: 'invoiceitem' | 'subscription';",
      "src/types/services/webhook-api.ts:export type WebhookSource =",
      "src/types/services/webhook-api.ts:export type StripeWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: StripeWebhookEventType;",
      "src/types/services/webhook-api.ts:export type SupabaseWebhookEventType = 'INSERT' | 'UPDATE' | 'DELETE';",
      "src/types/services/webhook-api.ts:  type: SupabaseWebhookEventType;",
      "src/types/services/webhook-api.ts:export type ConvertKitWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: ConvertKitWebhookEventType;",
      "src/types/services/webhook-api.ts:export type GitHubWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: GitHubWebhookEventType;",
      "src/types/services/webhook-api.ts:export type PostHogWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: PostHogWebhookEventType;",
      "src/types/services/webhook-api.ts:export type SentryWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: SentryWebhookEventType;",
      "src/types/services/webhook-api.ts:export type CustomWebhookEventType =",
      "src/types/services/webhook-api.ts:  type: CustomWebhookEventType;",
      "src/types/services/webhook-api.ts:export type WebhookHandler<T extends WebhookPayload = WebhookPayload> = (",
      "src/types/services/webhook-api.ts:export type AllWebhookPayloads =",
      "src/types/services/webhook-api.ts:export type AllWebhookEventTypes =",
      "src/types/state-updaters.ts: * Utility types for type-safe state updaters",
      "src/types/state-updaters.ts: * These types help ensure proper typing for React useState setters",
      "src/types/state-updaters.ts:export type StateUpdater<T> = (prev: T) => T;",
      "src/types/state-updaters.ts:export type ArrayStateUpdater<T> = (prev: T[]) => T[];",
      "src/types/state-updaters.ts:export type ObjectStateUpdater<T extends Record<string, any>> = (prev: T) => T;",
      "src/types/state-updaters.ts: * Performance history entry type for preloading hooks",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'feature_unlock' | 'discount' | 'social_share';",
      "src/types/struggling-sam.ts:export type SamAchievementType =",
      "src/types/struggling-sam.ts:  type: SocialProofType;",
      "src/types/struggling-sam.ts:export type SocialProofType =",
      "src/types/struggling-sam.ts:export type SocialChallengeType =",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'streak_freeze' | 'premium_trial' | 'discount';",
      "src/types/struggling-sam.ts:export type UpgradeTriggerType =",
      "src/types/struggling-sam.ts:export type UpgradePromptType =",
      "src/types/struggling-sam.ts:export type CelebrationType =",
      "src/types/struggling-sam.ts:  type: 'streak_reached' | 'achievement_earned' | 'challenge_won' | 'milestone_hit';",
      "src/types/struggling-sam.ts:  type: 'confetti' | 'fireworks' | 'pulse' | 'bounce' | 'glow';",
      "src/types/struggling-sam.ts:  type: 'badge' | 'experience' | 'streak_freeze' | 'discount' | 'social_unlock';",
      "src/types/subscription.d.ts:// Additional types for subscription service to complement premium.ts",
      "src/types/subscription.d.ts:// Retention offer type to replace 'any'",
      "src/types/subscription.d.ts:  type: 'discount' | 'free_months' | 'upgrade' | 'feature_unlock';",
      "src/types/subscription.d.ts:// Enhanced response types with proper typing",
      "src/types/subscription.d.ts:// Extended interfaces for better type safety",
      "src/types/subscription.d.ts:// Type guards for runtime type checking",
      "src/types/supabase-api.ts:  event_type: 'triggered' | 'snoozed' | 'dismissed' | 'missed';",
      "src/types/supabase-api.ts:  type: 'challenge' | 'tournament' | 'friendly';",
      "src/types/supabase-api.ts:    type: 'photo' | 'location' | 'challenge';",
      "src/types/supabase-api.ts:export type SupabaseFilterOperator =",
      "src/types/supabase-api.ts:      fetch?: typeof fetch;",
      "src/types/supabase-realtime.ts:export type DatabaseEventType = 'INSERT' | 'UPDATE' | 'DELETE' | 'TRUNCATE';",
      "src/types/supabase-realtime.ts:// Union type for all database changes",
      "src/types/supabase-realtime.ts:export type DatabaseChange =",
      "src/types/supabase-realtime.ts:  type: BroadcastMessageType;",
      "src/types/supabase-realtime.ts:export type BroadcastMessageType =",
      "src/types/supabase-realtime.ts:export type SyncTriggerReason =",
      "src/types/supabase-realtime.ts:  type: 'full' | 'incremental' | 'conflict_resolution';",
      "src/types/supabase-realtime.ts:export type HealthStatus = 'healthy' | 'degraded' | 'unhealthy' | 'unknown';",
      "src/types/timers.ts: * This file provides cross-platform timer types that work consistently",
      "src/types/timers.ts:// Normalize timeout handle type across environments",
      "src/types/timers.ts:export type TimeoutHandle = ReturnType<typeof setTimeout>;",
      "src/types/timers.ts:// Helper type for optional timeout handles",
      "src/types/timers.ts:export type MaybeTimeoutHandle = TimeoutHandle | undefined;",
      "src/types/user.ts:import type { User } from './index';",
      "src/types/user.ts:import type { SubscriptionTier, Subscription } from './premium';",
      "src/types/user.ts:// Re-export types for convenience",
      "src/types/user.ts:export type { SubscriptionTier, Subscription, User };",
      "src/types/utility-types.ts: * These utility types help reduce 'any' usage across the codebase",
      "src/types/utility-types.ts: * by providing common type patterns and safer alternatives.",
      "src/types/utility-types.ts:export type Nullable<T> = T | null; // type-safe replacement for any | null",
      "src/types/utility-types.ts:export type Optional<T> = T | undefined; // type-safe replacement for any | undefined",
      "src/types/utility-types.ts:export type Maybe<T> = T | null | undefined; // type-safe replacement for any | null | undefined",
      "src/types/utility-types.ts:export type RecordMap<K extends string | number | symbol, V> = Record<K, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type StringMap<V> = Record<string, V>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type NumberMap<V> = Record<number, V>; // type-safe replacement for Record<number, any>",
      "src/types/utility-types.ts:export type UnknownObject = Record<string, unknown>; // type-safe replacement for Record<string, any>",
      "src/types/utility-types.ts:export type AnyObject = Record<string, any>; // TODO: type definition needed - temporary bridge type",
      "src/types/utility-types.ts:export type ChangeEventHandler<T = HTMLInputElement> = React.ChangeEventHandler<T>; // type-safe replacement for onChange: any",
      "src/types/utility-types.ts:export type MouseEventHandler<T = HTMLElement> = React.MouseEventHandler<T>; // type-safe replacement for onClick: any",
      "src/types/utility-types.ts:export type KeyboardEventHandler<T = HTMLElement> = React.KeyboardEventHandler<T>; // type-safe replacement for onKeyDown: any",
      "src/types/utility-types.ts:export type FormEventHandler<T = HTMLFormElement> = React.FormEventHandler<T>; // type-safe replacement for onSubmit: any",
      "src/types/utility-types.ts:export type StateUpdater<T> = React.Dispatch<React.SetStateAction<T>>; // type-safe replacement for setState: any",
      "src/types/utility-types.ts:export type StateUpdaterFunction<T> = (prev: T) => T; // type-safe replacement for (prev: any) => any",
      "src/types/utility-types.ts:export type ApiResponse<T = unknown> = SuccessResponse<T> | ErrorResponse; // type-safe replacement for Promise<any>",
      "src/types/utility-types.ts:export type VoidFunction = () => void; // type-safe replacement for Function | any",
      "src/types/utility-types.ts:export type AsyncVoidFunction = () => Promise<void>; // type-safe replacement for async () => any",
      "src/types/utility-types.ts:export type CallbackFunction<T = unknown> = (arg: T) => void; // type-safe replacement for callback: any",
      "src/types/utility-types.ts:export type AsyncCallbackFunction<T = unknown> = (arg: T) => Promise<void>; // type-safe replacement for async callback: any",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:export type TODO_TypeDefinitionNeeded = any; // TODO: type definition needed - mark for future typing",
      "src/types/utility-types.ts:export type Legacy_Any = any; // TODO: type definition needed - legacy any usage that needs proper typing",
      "src/types/utils.ts:// Provides sophisticated type utilities for complex type scenarios",
      "src/types/utils.ts:export type DeepPartial<T> = {",
      "src/types/utils.ts:export type Exact<T> = T extends infer U",
      "src/types/utils.ts: * Branded types for type-safe identifiers",
      "src/types/utils.ts:export type Branded<T, B> = T & { readonly [__brand]: B };",
      "src/types/utils.ts:export type UserId = Branded<string, 'UserId'>;",
      "src/types/utils.ts:export type AlarmId = Branded<string, 'AlarmId'>;",
      "src/types/utils.ts:export type BattleId = Branded<string, 'BattleId'>;",
      "src/types/utils.ts:export type ThemeId = Branded<string, 'ThemeId'>;",
      "src/types/utils.ts:export type SubscriptionId = Branded<string, 'SubscriptionId'>;",
      "src/types/utils.ts:export type Result<T, E = Error> =",
      "src/types/utils.ts:export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;",
      "src/types/utils.ts:export type StrictOmit<T, K extends keyof T> = Omit<T, K>;",
      "src/types/utils.ts:export type StrictPick<T, K extends keyof T> = Pick<T, K>;",
      "src/types/utils.ts:export type ValueOf<T> = T[keyof T];",
      "src/types/utils.ts:export type KeysOfType<T, U> = {",
      "src/types/utils.ts:export type Flatten<T> = {",
      "src/types/utils.ts:export type DeepReadonly<T> = {",
      "src/types/utils.ts:export type Mutable<T> = {",
      "src/types/utils.ts:export type DeepMutable<T> = {",
      "src/types/utils.ts:export type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;",
      "src/types/utils.ts:export type Writeable<T, K extends keyof T> = Omit<T, K> & {",
      "src/types/utils.ts:// Factory function type utilities",
      "src/types/utils.ts:export type FactoryOptions<T> = DeepPartial<T> & {",
      "src/types/utils.ts:// Event handler type utilities",
      "src/types/utils.ts:export type EventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:export type AsyncEventHandler<TElement = Element, TEvent = Event> = (",
      "src/types/utils.ts:// API response type utilities",
      "src/types/utils.ts:export type ApiResponse<T> = Result<",
      "src/types/utils.ts:export type PaginatedResponse<T> = {",
      "src/types/utils.ts:// Validation type utilities",
      "src/types/utils.ts:export type ValidationRule<T> = (value: T) => Result<T, string>;",
      "src/types/utils.ts:export type ValidationSchema<T> = {",
      "src/types/utils.ts:export type TypeGuard<T> = (value: unknown) => value is T;",
      "src/types/utils.ts:export type AsyncTypeGuard<T> = (value: unknown) => Promise<boolean>;",
      "src/types/utils.ts:// Configuration type utilities",
      "src/types/utils.ts:export type ConfigKey = string;",
      "src/types/utils.ts:export type ConfigValue = string | number | boolean | object | null;",
      "src/types/utils.ts:export type Config = Record<ConfigKey, ConfigValue>;",
      "src/types/utils.ts:export type Discriminated<T, K extends keyof T> =",
      "src/types/utils.ts:// Discriminated union types for Personas",
      "src/types/utils.ts:export type PersonaProfileDiscriminated =",
      "src/types/utils.ts:  typeof value === 'object' &&",
      "src/types/utils.ts:  typeof value.success === 'boolean';",
      "src/types/wake-up-mood.ts:export type Mood = WakeUpMood;",
      "src/types/wake-up-mood.ts:export function isValidWakeUpMood(mood: string): mood is keyof typeof WakeUpMood {",
      "src/types/wake-up-mood.ts:    return WakeUpMood[mood as keyof typeof WakeUpMood];",
      "src/types/websocket.ts: * Comprehensive type definitions for WebSocket connections and messaging",
      "src/types/websocket.ts:export type WebSocketState = 'CONNECTING' | 'OPEN' | 'CLOSING' | 'CLOSED' | 'ERROR';",
      "src/types/websocket.ts:export type WebSocketErrorType =",
      "src/types/websocket.ts:  type: WebSocketMessageType;",
      "src/types/websocket.ts:export type WebSocketMessageType =",
      "src/types/websocket.ts:  type: 'mobile' | 'tablet' | 'desktop' | 'smartwatch' | 'smart_speaker';",
      "src/types/websocket.ts:  type: WebSocketErrorType;",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:              type: 'religious_sensitivity',",
      "src/utils/advancedTranslationValidator.ts:            type: 'time_format',",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:          type: 'terminology_variation',",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'string') allTexts.push(value);",
      "src/utils/advancedTranslationValidator.ts:      if (typeof refValue !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:      if (typeof transValue !== 'string') return;",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'string') texts.push(value);",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {",
      "src/utils/advancedTranslationValidator.ts:      if (typeof value === 'object' && value !== null && !Array.isArray(value)) {",
      "src/utils/alarm-conversion.ts:            `Smart optimization \"${optimization.type}\" has invalid max adjustment`",
      "src/utils/alarm-conversion.ts:          type: 'sleep_cycle',",
      "src/utils/analysis-worker.ts:    if (typeof Worker === 'undefined') {",
      "src/utils/analysis-worker.ts:        if (avgBedtimeHour < 21) results.chronotype = 'early';",
      "src/utils/analysis-worker.ts:        else if (avgBedtimeHour > 24) results.chronotype = 'late';",
      "src/utils/analysis-worker.ts:        const { type, data, jobId } = e.data;",
      "src/utils/analysis-worker.ts:              throw new Error('Unknown job type: ' + type);",
      "src/utils/analysis-worker.ts:        type: 'analyzeSleep',",
      "src/utils/analysis-worker.ts:        type: 'predictWakeTime',",
      "src/utils/analysis-worker.ts:        type: 'analyzeVoice',",
      "src/utils/analysis-worker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/css-optimization.ts:/// <reference types=\"node\" />",
      "src/utils/frame-rate-manager.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/frame-rate-manager.tsx:    if (typeof window === 'undefined' || !('PerformanceObserver' in window)) {",
      "src/utils/frame-rate-manager.tsx:    if (typeof window === 'undefined') return;",
      "src/utils/image-optimization.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/image-optimization.tsx:    if (typeof window === 'undefined' || !('IntersectionObserver' in window)) {",
      "src/utils/image-optimization.tsx:    if (typeof window === 'undefined') return false;",
      "src/utils/index.ts:import type { VoiceMood, VoiceMoodConfig, Alarm } from '../types';",
      "src/utils/keyboard-navigation.ts:    const type = (element as HTMLInputElement).type?.toLowerCase();",
      "src/utils/keyboard-navigation.ts:   * Get element type for screen reader announcement",
      "src/utils/keyboard-navigation.ts:    const type = (element as HTMLInputElement).type?.toLowerCase();",
      "src/utils/lazy-loading.tsx:import type { ComponentType, LazyExoticComponent } from 'react';",
      "src/utils/lazy-loading.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/mobile-accessibility.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/mobile-accessibility.ts:      .mobile-accessible input[type=\"checkbox\"],",
      "src/utils/network-optimization.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/network-optimization.tsx:    if (typeof navigator === 'undefined') return;",
      "src/utils/performance-alerts.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/performance-alerts.tsx:  type: 'warning' | 'error' | 'critical' | 'info';",
      "src/utils/performance-alerts.tsx:  type: 'notification' | 'console' | 'storage' | 'callback' | 'optimization';",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'console', _config: { level: 'warn' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'Layout Stability Issue' } },",
      "src/utils/performance-alerts.tsx:          { type: 'notification', _config: { title: 'High Memory Usage' } },",
      "src/utils/performance-alerts.tsx:          { type: 'optimization', _config: { type: 'memory_cleanup' } },",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },",
      "src/utils/performance-alerts.tsx:      type: this.getAlertType(rule.severity),",
      "src/utils/performance-alerts.tsx:   * Get alert type from severity",
      "src/utils/performance-alerts.tsx:        console._error(`[PerformanceAlert] Action ${action.type} failed:`, _error);",
      "src/utils/performance-alerts.tsx:    if (typeof method === 'function') {",
      "src/utils/performance-alerts.tsx:    if (typeof window !== 'undefined' && 'gc' in window) {",
      "src/utils/performance-alerts.tsx:    if (typeof performance !== 'undefined' && 'memory' in performance) {",
      "src/utils/performance-alerts.tsx:                    : alert.type === '_error'",
      "src/utils/performance-profiler.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/performance-profiler.ts:    if (typeof PerformanceObserver === 'undefined') return;",
      "src/utils/premium-testing.ts:import type { Subscription, PremiumFeatureAccess, PremiumUsage } from '../types';",
      "src/utils/progressive-loading.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/progressive-loading.tsx:    if (typeof window !== 'undefined') {",
      "src/utils/progressive-loading.tsx:        width: typeof width === 'number' ? `${width}px` : width,",
      "src/utils/progressive-loading.tsx:        height: typeof height === 'number' ? `${height}px` : height,",
      "src/utils/progressive-loading.tsx:  if (typeof document === 'undefined') return;",
      "src/utils/progressive-loading.tsx:if (typeof window !== 'undefined') {",
      "src/utils/pwa.ts:      request(type: string): Promise<{",
      "src/utils/rtl-testing.tsx:import { type SupportedLanguage } from '../config/i18n';",
      "src/utils/rtl-testing.tsx:        ? `${type}-${isRTL ? 'right' : 'left'}`",
      "src/utils/rtl-testing.tsx:        : `${type}-${isRTL ? 'left' : 'right'}`;",
      "src/utils/rtl-utilities.ts:import { type SupportedLanguage } from '../config/i18n';",
      "src/utils/screen-reader.ts:      if (typeof newState === 'boolean') {",
      "src/utils/screen-reader.ts:      } else if (typeof newState === 'string') {",
      "src/utils/screen-reader.ts:      } else if (typeof newState === 'number') {",
      "src/utils/service-worker-manager.ts:import type { Alarm } from '../types';",
      "src/utils/service-worker-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/service-worker-manager.ts:  private async sendMessage(type: string, data?: any): Promise<any> {",
      "src/utils/service-worker-manager.ts:      this.registration.active.postMessage({ type, data }, [messageChannel.port2]);",
      "src/utils/service-worker-manager.ts:      const { type, data } = _event.data;",
      "src/utils/translationValidation.ts:          type: 'missing_key',",
      "src/utils/translationValidation.ts:      if (typeof value === 'string' && value.trim() === '') {",
      "src/utils/translationValidation.ts:          type: 'empty_value',",
      "src/utils/translationValidation.ts:      return value && typeof value === 'string' && value.trim() !== '';",
      "src/utils/translationValidation.ts:            type: 'invalid_interpolation',",
      "src/utils/translationValidation.ts:            type: 'invalid_interpolation',",
      "src/utils/translationValidation.ts:      if (typeof refValue === 'string' && typeof translatedValue === 'string') {",
      "src/utils/translationValidation.ts:      } else if (typeof refValue === 'object' && typeof translatedValue === 'object') {",
      "src/utils/translationValidation.ts:      if (typeof value === 'string') {",
      "src/utils/translationValidation.ts:      } else if (typeof value === 'object' && value !== null) {",
      "src/utils/translationValidation.ts:      if (typeof current !== 'object' || current === null || !(k in current)) {",
      "src/utils/translationValidation.ts:      if (typeof current !== 'object' || current === null || !(k in current)) {",
      "src/utils/translationValidation.ts:          report += `  ${icon} **${issue.type}** (${issue.key}): ${issue.message}\\n`;",
      "src/utils/validation.ts:  if (!time || typeof time !== 'string') {",
      "src/utils/validation.ts:  if (!label || typeof label !== 'string') {",
      "src/utils/validation.ts:    day => typeof day === 'number' && Number.isInteger(day) && day >= 0 && day <= 6",
      "src/utils/validation.ts:  if (!voiceMood || typeof voiceMood !== 'string') {",
      "src/utils/validation.ts:  if (!email || typeof email !== 'string') {",
      "src/utils/voice-accessibility.ts:import { TimeoutHandle } from '../types/timers';",
      "src/vite-env.d.ts:/// <reference types=\"vite/client\" />",
      "src/vite-env.d.ts:/// <reference types=\"@testing-library/jest-dom\" />",
      "src/vite-env.d.ts:// Global type extensions for Browser APIs",
      "src/__tests__/api/api-testing-utilities.ts:export interface ApiTestConfig {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      // Verify basic User interface compliance",
      "src/__tests__/factories/core-factories.ts:export interface CreateUserOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateAlarmOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateBattleOptions {",
      "src/__tests__/factories/core-factories.ts:export interface CreateThemeOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaProfileOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePersonaDetectionResultOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailCampaignOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateEmailSequenceOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreateCampaignMetricsOptions {",
      "src/__tests__/factories/enhanced-factories.ts:export interface CreatePerformanceMetricsOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateAchievementOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTournamentOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateTeamOptions {",
      "src/__tests__/factories/gaming-factories.ts:export interface CreateSeasonOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateSubscriptionOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateVoiceOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateCustomSoundOptions {",
      "src/__tests__/factories/premium-factories.ts:export interface CreateAnalyticsOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateEmotionalStateOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateNotificationOptions {",
      "src/__tests__/factories/support-factories.ts:export interface CreateMediaAssetOptions {",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:export interface TestAssertionOptions {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestConfig {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2ETestContext {",
      "src/__tests__/integration/e2e-testing-utilities.ts:export interface E2EFlowResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenario {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestScenarioResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestStepResult {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestSuite {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestOrchestrationConfig {",
      "src/__tests__/integration/test-orchestration.ts:export interface TestReport {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockAudioAsset {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockDeviceInfo {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockBatteryInfo {",
      "src/__tests__/mocks/capacitor.mock.ts:interface MockNetworkStatus {",
      "src/__tests__/mocks/enhanced-service-mocks.ts: * Implements the enhanced service interfaces with dependency injection patterns",
      "src/__tests__/performance/performance-testing-utilities.ts:// Enhanced performance interfaces for Relife",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface AlarmPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface ApiPerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface RealTimePerformanceMetrics {",
      "src/__tests__/performance/performance-testing-utilities.ts:export interface MobilePerformanceProfile {",
      "src/__tests__/providers/context-providers.tsx:export interface MockFeatureAccessContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockLanguageContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockAlarmContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface MockThemeContextValue {",
      "src/__tests__/providers/context-providers.tsx:export interface ContextTestOptions {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface EnhancedServiceContainer {",
      "src/__tests__/providers/enhanced-service-providers.tsx:export interface ServiceProviderProps {",
      "src/__tests__/providers/integration-provider.tsx:export interface IntegrationTestOptions {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAlarmService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAnalyticsService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockBattleService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSubscriptionService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockVoiceService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockNotificationService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockAudioService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockStorageService {",
      "src/__tests__/providers/service-providers.tsx:export interface MockSecurityService {",
      "src/__tests__/providers/test-providers.tsx:interface FeatureAccessContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface LanguageContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface AuthContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface ThemeContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface AlarmContextValue {",
      "src/__tests__/providers/test-providers.tsx:interface SubscriptionContextValue {",
      "src/__tests__/providers/test-providers.tsx:export interface TestProvidersOptions {",
      "src/__tests__/providers/test-providers.tsx:export interface TestRenderOptions extends RenderOptions {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface AccessibilityViolation {",
      "src/__tests__/utils/accessibility-helpers.ts:export interface ColorContrastResult {",
      "src/__tests__/utils/animation-helpers.tsx:interface MockAnimationFrame {",
      "src/__tests__/utils/assertion-helpers.ts:    interface Matchers<R> {",
      "src/__tests__/utils/hook-testing-utils.tsx:interface MockThemeContextValue {",
      "src/__tests__/utils/hook-testing-utils.tsx:interface AllTheProvidersProps {",
      "src/__tests__/utils/hook-testing-utils.tsx:export interface CustomRenderHookOptions<TProps>",
      "src/__tests__/utils/i18n-helpers.ts:interface LocaleConfig {",
      "src/__tests__/utils/i18n-helpers.ts:interface I18nContextValue {",
      "src/__tests__/utils/index.ts:export interface TestUser {",
      "src/__tests__/utils/index.ts:export interface TestAlarm {",
      "src/__tests__/utils/index.ts:export interface TestTheme {",
      "src/__tests__/utils/index.ts:export interface TestBattle {",
      "src/__tests__/utils/index.ts:export interface TestVoiceClip {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceMark {",
      "src/__tests__/utils/performance-helpers.ts:export interface RenderPerformanceResult {",
      "src/__tests__/utils/performance-helpers.ts:export interface MemorySnapshot {",
      "src/__tests__/utils/performance-helpers.ts:export interface PerformanceBenchmark {",
      "src/__tests__/utils/render-helpers.ts:interface MockProviderProps {",
      "src/__tests__/utils/render-helpers.ts:interface AllProvidersProps {",
      "src/__tests__/utils/render-helpers.ts:interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {",
      "src/__tests__/utils/storage-helpers.ts:interface MockStorageInterface {",
      "src/__tests__/utils/storage-helpers.ts:interface MockIndexedDBDatabase {",
      "src/__tests__/utils/storage-helpers.ts:interface MockCacheStorage {",
      "src/__tests__/utils/storage-helpers.ts:interface AlarmStorageData {",
      "src/__tests__/utils/storage-helpers.ts:interface UserPreferences {",
      "src/analytics/PersonaAnalytics.tsx:interface PersonaDetectionData extends PersonaDetectionResult {",
      "src/analytics/PersonaAnalytics.tsx:export interface PersonaAnalyticsData {",
      "src/analytics/PersonaAnalytics.tsx:export interface CampaignPerformanceData {",
      "src/backend/api.ts:interface Battle {",
      "src/backend/api.ts:interface BattleParticipant {",
      "src/backend/api.ts:interface BattleSettings {",
      "src/backend/api.ts:interface Tournament {",
      "src/backend/api.ts:// Environment bindings interface for enhanced monitoring",
      "src/backend/database-types.ts:// Comprehensive TypeScript interfaces for all database query results",
      "src/backend/database-types.ts:export interface DatabaseUser {",
      "src/backend/database-types.ts:export interface DatabaseAlarm {",
      "src/backend/database-types.ts:export interface DatabaseAlarmEvent {",
      "src/backend/database-types.ts:export interface DatabaseAnalyticsEvent {",
      "src/backend/database-types.ts:export interface DatabaseUserStats {",
      "src/backend/database-types.ts:export interface DatabaseEmotionalProfile {",
      "src/backend/database-types.ts:export interface DatabaseBattleStats {",
      "src/backend/database-types.ts:export interface DatabasePerformanceMetric {",
      "src/backend/database-types.ts:export interface DatabaseDeploymentData {",
      "src/backend/database-types.ts:export interface DatabaseHealthData {",
      "src/backend/database-types.ts:export interface DatabaseAIResponse {",
      "src/backend/database-types.ts:export interface DatabaseRecommendation {",
      "src/backend/database-types.ts:export interface DatabaseVoiceAnalysis {",
      "src/backend/database-types.ts:export interface DatabaseQueryResult<T = any> {",
      "src/backend/performance-monitoring.ts:interface PerformanceMetric {",
      "src/backend/performance-monitoring.ts:interface WebVitalsData {",
      "src/backend/performance-monitoring.ts:interface ErrorEvent {",
      "src/backend/performance-monitoring.ts:interface AnalyticsEvent {",
      "src/backend/subscription-api.ts:interface StripeEnv {",
      "src/backend/webhook-config.ts:export interface WebhookEnvironmentConfig {",
      "src/backend/webhook-endpoint.ts:export interface WebhookRequest {",
      "src/backend/webhook-endpoint.ts:export interface WebhookResponse {",
      "src/components/AccessibilityDashboard.tsx: * Comprehensive accessibility settings interface with live preview",
      "src/components/AccessibilityDashboard.tsx:interface AccessibilityDashboardProps {",
      "src/components/AccessibilityDashboard.tsx:          Optimize interface for screen readers with enhanced descriptions",
      "src/components/AccessibilityTester.tsx:interface AccessibilityTesterProps {",
      "src/components/AchievementBadges.tsx:interface AchievementBadgesProps {",
      "src/components/ActiveAlarm.tsx:interface ActiveAlarmProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AlarmItemProps {",
      "src/components/AdaptiveAlarmList.tsx:interface AdaptiveAlarmListWrapperProps extends AdaptiveAlarmListProps {",
      "src/components/AdaptiveButton.tsx:export interface AdaptiveButtonProps",
      "src/components/AdaptiveImage.tsx:interface AdaptiveImageProps {",
      "src/components/AdaptiveImage.tsx:interface ImageVariant {",
      "src/components/AdaptiveModal.tsx:export interface AdaptiveModalProps {",
      "src/components/AdaptiveModal.tsx:export interface ConfirmationModalProps extends Omit<AdaptiveModalProps, 'children'> {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSpinnerProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingOverlayProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveSkeletonProps {",
      "src/components/AdaptiveSpinner.tsx:export interface AdaptiveLoadingButtonProps",
      "src/components/AdvancedAlarmScheduling.tsx:interface AdvancedAlarmSchedulingProps {",
      "src/components/AdvancedAlarmScheduling.tsx:            Advanced alarm editing interface would be implemented here",
      "src/components/AdvancedAnalytics.tsx:interface AdvancedAnalyticsProps {",
      "src/components/AdvancedSchedulingDashboard.tsx:interface AdvancedSchedulingDashboardProps {",
      "src/components/AlarmManagement.tsx:interface AlarmManagementProps {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionEvent extends Event {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionErrorEvent extends Event {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionResult {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionAlternative {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognitionResultList {",
      "src/components/AlarmRinging.tsx:interface SpeechRecognition extends EventTarget {",
      "src/components/AlarmTester.tsx:interface AlarmTesterProps {",
      "src/components/AlarmThemeBrowser.tsx: * Advanced theme selection interface with collections, filtering, and preview",
      "src/components/AlarmThemeBrowser.tsx:interface AlarmThemeBrowserProps {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeCardProps {",
      "src/components/AlarmThemeBrowser.tsx:interface CollectionViewProps {",
      "src/components/AlarmThemeBrowser.tsx:interface ThemeListItemProps {",
      "src/components/AlarmThemeSelector.tsx:interface ThemeCombination {",
      "src/components/AlarmThemeSelector.tsx:interface AlarmThemeSelectorProps {",
      "src/components/AnalyticsDashboard.tsx:interface AnalyticsMetric {",
      "src/components/AnalyticsDashboard.tsx:interface UsageData {",
      "src/components/AnalyticsProvider.tsx:interface AnalyticsContextType {",
      "src/components/AnalyticsProvider.tsx:interface AnalyticsProviderProps {",
      "src/components/AuthenticationFlow.tsx:interface AuthenticationFlowProps {",
      "src/components/BattleSystem.tsx:interface BattleSystemProps {",
      "src/components/CSRFProtection.tsx:interface CSRFProtectionProps {",
      "src/components/CommunityChallenge.tsx:interface CommunityChallengeProps {",
      "src/components/ComprehensiveSecurityDashboard.tsx:// Provides a unified interface for monitoring all alarm security features",
      "src/components/ComprehensiveSecurityDashboard.tsx:interface SecurityStatus {",
      "src/components/ComprehensiveSecurityDashboard.tsx:interface SecurityAlert {",
      "src/components/ConsentBanner.tsx:interface ConsentBannerProps {",
      "src/components/CustomSoundThemeCreator.tsx:interface CustomSoundThemeCreatorProps {",
      "src/components/CustomSoundThemeCreator.tsx:          <p>Sound assignment interface will be implemented</p>",
      "src/components/CustomSoundThemeCreator.tsx:    <p>Sound customization interface will be implemented</p>",
      "src/components/CustomSoundThemeCreator.tsx:    <p>Theme preview and testing interface will be implemented</p>",
      "src/components/CustomThemeManager.tsx:interface CustomThemeManagerProps {",
      "src/components/EmotionalNudgeModal.tsx:interface EmotionalNudgeModalProps {",
      "src/components/EnhancedBattles.tsx:interface EnhancedBattlesProps {",
      "src/components/EnhancedDashboard.tsx:interface EnhancedDashboardProps {",
      "src/components/EnhancedMediaContent.tsx:interface EnhancedMediaContentProps {",
      "src/components/EnhancedMediaContent.tsx:interface AudioPlayerState {",
      "src/components/EnhancedSettings.tsx:interface EnhancedSettingsProps {",
      "src/components/EnhancedSmartAlarmSettings.tsx:interface EnhancedSmartAlarmSettingsProps {",
      "src/components/ErrorBoundary.tsx:interface State {",
      "src/components/ErrorBoundaryTest.tsx:interface ErrorBoundaryTestProps {",
      "src/components/ExtendedScreenReaderTester.tsx:interface ExtendedScreenReaderTesterProps {",
      "src/components/ExtendedScreenReaderTester.tsx:interface TestResult {",
      "src/components/ExtendedScreenReaderTester.tsx:interface TestPreferences {",
      "src/components/FeatureLockOverlay.tsx:interface FeatureLockOverlayProps {",
      "src/components/FriendsManager.tsx:interface FriendsManagerProps {",
      "src/components/HabitCelebration.tsx:interface HabitCelebrationProps {",
      "src/components/HabitCelebration.tsx:interface ConfettiPiece {",
      "src/components/LanguageSelector.tsx:interface LanguageSelectorProps {",
      "src/components/MediaContent.tsx:interface MediaContentProps {",
      "src/components/MobileAccessibilityProvider.tsx:interface MobileAccessibilityContextValue {",
      "src/components/MobileAccessibilityProvider.tsx:interface MobileAccessibilityProviderProps {",
      "src/components/MobileAlarmCard.tsx:interface MobileAlarmCardProps {",
      "src/components/MobileAlarmCard.tsx:interface ToggleSwitchProps {",
      "src/components/MobileNavigation.tsx:interface NavigationItem {",
      "src/components/MobileNavigation.tsx:interface MobileNavigationProps {",
      "src/components/MobileNavigation.tsx:interface ExtendedNavigationPanelProps {",
      "src/components/MobileTester.tsx:// interface MobileTesterProps {",
      "src/components/MobileTester.tsx:// interface TestResult {",
      "src/components/NuclearModeBattle.tsx:interface NuclearModeBattleProps {",
      "src/components/NuclearModeBattle.tsx:interface NuclearChallenge {",
      "src/components/NuclearModeChallenge.tsx:interface NuclearModeChallengeProps {",
      "src/components/NuclearModeResults.tsx:interface NuclearModeResultsProps {",
      "src/components/NuclearModeResults.tsx:interface PerformanceMetric {",
      "src/components/NuclearModeSelector.tsx:interface NuclearModeSelectorProps {",
      "src/components/OfflineDiagnostics.tsx:interface DiagnosticCheck {",
      "src/components/OfflineDiagnostics.tsx:interface OfflineDiagnosticsProps {",
      "src/components/OfflineIndicator.tsx:interface CacheStats {",
      "src/components/OfflineIndicator.tsx:interface ServiceWorkerStatus {",
      "src/components/OfflineIndicator.tsx:interface OfflineIndicatorProps {",
      "src/components/PWAInstallPrompt.tsx:interface BeforeInstallPromptEvent extends Event {",
      "src/components/PWAInstallPrompt.tsx:  interface WindowEventMap {",
      "src/components/PerformanceDashboard.tsx:interface WebVitalMetric {",
      "src/components/PerformanceDashboard.tsx:interface DashboardState {",
      "src/components/PerformanceProfilerWrapper.tsx:interface PerformanceProfilerWrapperProps {",
      "src/components/PerformanceProfilerWrapper.tsx:interface PerformanceDashboardProps {",
      "src/components/PersonaAnalyticsDashboard.tsx:interface PersonaMetrics {",
      "src/components/PersonaAnalyticsDashboard.tsx:interface CampaignMetrics {",
      "src/components/PersonaDrivenUI.tsx:// Adapts interface based on user persona and subscription tier",
      "src/components/PersonaDrivenUI.tsx:interface PersonaUIProps {",
      "src/components/PersonaFocusDashboard.tsx:interface PersonaMetrics {",
      "src/components/PersonaFocusDashboard.tsx:interface PersonaDashboardProps {",
      "src/components/PersonalizationSettings.tsx:interface PersonalizationSettingsProps {",
      "src/components/PersonalizationSettings.tsx:      description: 'Adjust interface density and layout preferences',",
      "src/components/PremiumDashboard.tsx:interface PremiumDashboardProps {",
      "src/components/PremiumDashboard.tsx:interface DashboardState {",
      "src/components/PremiumDashboard.tsx:interface FeatureCardProps {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeature {",
      "src/components/PremiumFeatureCard.tsx:interface User {",
      "src/components/PremiumFeatureCard.tsx:interface PremiumFeatureCardProps {",
      "src/components/PremiumFeatureTest.tsx:interface PremiumFeatureTestProps {",
      "src/components/PremiumGate.tsx:interface PremiumGateProps {",
      "src/components/PremiumThemeSettings.tsx:interface PremiumThemeSettingsProps {",
      "src/components/PremiumThemeSettings.tsx:interface ThemeState {",
      "src/components/PremiumThemeShowcase.tsx:interface ThemeCardProps {",
      "src/components/PremiumUsageTracker.tsx:interface UsageTrackerProps {",
      "src/components/PremiumUsageTracker.tsx:interface UsageData {",
      "src/components/PricingPage.tsx:interface PricingPageProps {",
      "src/components/PushNotificationSettings.tsx:interface PushNotificationSettingsProps {",
      "src/components/PushNotificationTester.tsx:interface TestResult {",
      "src/components/QuickAlarmSetup.tsx:interface QuickAlarmSetupProps {",
      "src/components/RTLLayout/RTLContainer.tsx:interface RTLContainerProps {",
      "src/components/RTLLayout/RTLFlex.tsx:interface RTLFlexProps {",
      "src/components/RTLLayout/RTLForm.tsx:interface RTLFormFieldProps {",
      "src/components/RTLLayout/RTLText.tsx:interface RTLTextProps {",
      "src/components/RewardsDashboard.tsx:interface RewardsDashboardProps {",
      "src/components/RootErrorBoundary.tsx:interface State {",
      "src/components/ScreenReaderProvider.tsx:interface ScreenReaderProviderProps {",
      "src/components/SettingsPage.tsx:interface SettingsPageProps {",
      "src/components/SleepTracker.tsx:interface SleepTrackerProps {",
      "src/components/SleepTracker.tsx:interface SleepEntry {",
      "src/components/SmartAlarmSettings.tsx:interface SmartAlarmSettingsProps {",
      "src/components/SmartFeatures.tsx:interface SmartFeaturesProps {",
      "src/components/SmartUpgradePrompt.tsx:interface SmartUpgradePromptProps {",
      "src/components/SoundPicker.tsx:interface SoundPickerProps {",
      "src/components/SoundPreviewSystem.tsx:interface SoundPreviewSystemProps {",
      "src/components/SoundPreviewSystem.tsx:interface PlaybackState {",
      "src/components/SoundPreviewSystem.tsx:interface ThemeTestResults {",
      "src/components/SoundPreviewSystem.tsx:interface SoundTest {",
      "src/components/SoundPreviewSystem.tsx:    description: 'Primary interface interaction',",
      "src/components/SoundSettings.tsx:interface SoundSettingsProps {",
      "src/components/SoundThemeDemo.tsx:interface ThemeCategory {",
      "src/components/SoundUploader.tsx:interface SoundUploaderProps {",
      "src/components/SoundUploader.tsx:interface UploadItem extends UploadedFile {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryProps {",
      "src/components/SpecializedErrorBoundaries.tsx:interface SpecializedErrorBoundaryState {",
      "src/components/StreakCounter.tsx:interface StreakCounterProps {",
      "src/components/StrugglingSamWrapper.tsx:interface StrugglingSamWrapperProps {",
      "src/components/TabProtectionSettings.tsx:interface TabProtectionSettingsProps {",
      "src/components/TabProtectionWarning.tsx:interface TabProtectionWarningProps {",
      "src/components/ThemeCreator.tsx:interface ThemeCreatorProps {",
      "src/components/ThemeCreator.tsx:interface ColorPaletteState {",
      "src/components/ThemeCreator.tsx:interface PreviewComponent {",
      "src/components/ThemeCustomizationStudio.tsx:interface ColorPickerProps {",
      "src/components/ThemeDemo.tsx:interface ThemeDemoProps {",
      "src/components/ThemeGallery.tsx:interface ThemeGalleryProps {",
      "src/components/ThemeGallery.tsx:interface ThemeCard {",
      "src/components/ThemeGallery.tsx:      description: 'Clean and bright interface perfect for daytime use',",
      "src/components/ThemeManager.tsx:interface ThemeManagerProps {",
      "src/components/ThemeManager.tsx:interface QuickTheme {",
      "src/components/ThemeStudio.tsx:interface ThemeStudioProps {",
      "src/components/TranslationDashboard.tsx:interface QualityScore {",
      "src/components/TranslationDashboard.tsx:interface LanguageData {",
      "src/components/UpgradePrompt.tsx:interface UpgradePromptProps {",
      "src/components/UserProfile.tsx:interface UserProfileProps {",
      "src/components/VirtualScroll.tsx:interface AlarmHistoryItem {",
      "src/components/VirtualScroll.tsx:interface SleepSessionItem {",
      "src/components/VisualAlarmDisplay.tsx:interface ParticleEffect {",
      "src/components/VoiceAnalyticsDashboard.tsx:interface VoiceAnalytics {",
      "src/components/VoiceCloning.tsx:interface VoiceCloningProps {",
      "src/components/VoiceCloning.tsx:interface AudioSample {",
      "src/components/VoicePersonalitySelector.tsx:interface VoicePersonalitySelectorProps {",
      "src/components/VoiceSelector.tsx:interface VoiceSelectorProps {",
      "src/components/VoiceSelector.tsx:interface VoiceCardProps {",
      "src/components/VoiceSettings.tsx:interface VoiceSettingsProps {",
      "src/components/VoiceSettings.tsx:interface VoiceConfiguration {",
      "src/components/WakeUpFeedbackModal.tsx:interface WakeUpFeedbackModalProps {",
      "src/components/__tests__/AccessibilityDashboard.test.tsx: * Tests comprehensive accessibility settings interface including visual settings,",
      "src/components/__tests__/AccessibilityIntegration.test.tsx:    it('should adapt interface for mobile accessibility', async () => {",
      "src/components/__tests__/AccessibilityTester.test.tsx: * Tests accessibility testing interface including contrast checking,",
      "src/components/__tests__/GamingHub.test.tsx: * Tests the main gaming interface including rewards, community, and battles tabs,",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedButtonProps {",
      "src/components/animations/AnimationLibrary.tsx:interface LoadingSpinnerProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedCardProps {",
      "src/components/animations/AnimationLibrary.tsx:interface ScrollRevealProps {",
      "src/components/animations/AnimationLibrary.tsx:interface AnimatedToggleProps {",
      "src/components/animations/AnimationLibrary.tsx:interface StaggerContainerProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedInputProps {",
      "src/components/animations/MicroInteractions.tsx:interface SelectOption {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedSelectProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedButtonProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedCheckboxProps {",
      "src/components/animations/MicroInteractions.tsx:interface AnimatedProgressProps {",
      "src/components/premium/EnhancedUpgradePrompt.tsx:interface EnhancedUpgradePromptProps {",
      "src/components/premium/FeatureGate.tsx:interface FeatureGateProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureBadgeProps {",
      "src/components/premium/FeatureUtils.tsx:interface TierComparisonProps {",
      "src/components/premium/FeatureUtils.tsx:interface UsageProgressProps {",
      "src/components/premium/FeatureUtils.tsx:interface FeatureHighlightProps {",
      "src/components/premium/FeatureUtils.tsx:interface TeamFeatureIndicatorProps {",
      "src/components/premium/PaymentFlow.tsx:interface PaymentFlowProps {",
      "src/components/premium/PaymentFlow.tsx:interface PaymentFormData {",
      "src/components/premium/PaymentMethodManager.tsx:interface PaymentMethodManagerProps {",
      "src/components/premium/PremiumAlarmFeatures.tsx:interface PremiumAlarmFeaturesProps {",
      "src/components/premium/PremiumAnalytics.tsx:interface PremiumAnalyticsProps {",
      "src/components/premium/PremiumFeaturePreview.tsx:interface PremiumFeaturePreviewProps {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface TeamMember {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface Team {",
      "src/components/premium/PremiumTeamFeatures.tsx:interface PremiumTeamFeaturesProps {",
      "src/components/premium/PremiumVoiceFeatures.tsx:interface PremiumVoiceFeaturesProps {",
      "src/components/premium/PricingTable.tsx:interface PricingTableProps {",
      "src/components/premium/PsychologyDrivenCTA.tsx:interface PsychologyDrivenCTAProps {",
      "src/components/premium/SubscriptionManagement.tsx:interface SubscriptionManagementProps {",
      "src/components/premium/SubscriptionManagement.tsx:interface CancellationData {",
      "src/components/premium/SubscriptionPage.tsx:interface SubscriptionPageProps {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestWrapperProps {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestContextType {",
      "src/components/user-testing/ABTestWrapper.tsx:interface ABTestPropsProps<T> {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaProgram {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaTester {",
      "src/components/user-testing/BetaTestingProgram.tsx:interface BetaFeedback {",
      "src/components/user-testing/BugReportModal.tsx:interface BugReportModalProps {",
      "src/components/user-testing/FeedbackModal.tsx:interface FeedbackModalProps {",
      "src/components/user-testing/FeedbackWidget.tsx:interface FeedbackWidgetProps {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:interface RedesignedFeedbackModalProps {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:interface FeedbackStep {",
      "src/components/user-testing/RedesignedFeedbackWidget.tsx:interface RedesignedFeedbackWidgetProps {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface SessionMetrics {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface EventAnalytics {",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:interface FeedbackAnalytics {",
      "src/config/convertkit-config.ts:export interface PersonaConvertKitConfig {",
      "src/config/convertkit-config.ts:export interface PersonaAutomationRule {",
      "src/config/convertkit-config.ts:export interface ConvertKitFormTemplate {",
      "src/config/convertkit-config.ts:export interface ConvertKitSequenceTemplate {",
      "src/config/convertkit-config.ts:export interface SequenceEmailTemplate {",
      "src/config/convertkit-generated.ts:export interface GeneratedConvertKitConfig {",
      "src/config/environment.ts:export interface EnvironmentConfig {",
      "src/config/stripe.ts:export interface StripeConfig {",
      "src/config/themes.ts:export interface CulturalTheme {",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessContextValue {",
      "src/contexts/FeatureAccessContext.tsx:interface FeatureAccessProviderProps {",
      "src/contexts/FeatureAccessContext.tsx:interface ConditionalFeatureProps {",
      "src/contexts/LanguageContext.tsx:interface LanguageContextType {",
      "src/contexts/LanguageContext.tsx:// Props interface for provider",
      "src/contexts/LanguageContext.tsx:interface LanguageProviderProps {",
      "src/contexts/StrugglingsamContext.tsx:interface StrugglingSamState {",
      "src/contexts/StrugglingsamContext.tsx:interface StrugglingSamContextType extends StrugglingSamState, ABTestContext {",
      "src/data/emotional-message-templates.ts:export interface MessageTemplate {",
      "src/hooks/__tests__/integration/cross-hook.integration.test.tsx:interface FullTestWrapperProps {",
      "src/hooks/__tests__/integration/useAuth.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/__tests__/integration/useFeatureGate.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/__tests__/integration/usePWA.integration.test.tsx:interface TestWrapperProps {",
      "src/hooks/useABTesting.tsx:interface ABTestingState {",
      "src/hooks/useAnalytics.ts:interface UseAnalyticsReturn {",
      "src/hooks/useAudioLazyLoading.ts:export interface AudioLoadingState {",
      "src/hooks/useAuth.ts:interface AuthState {",
      "src/hooks/useAuth.ts:interface AuthHook extends AuthState {",
      "src/hooks/useCriticalPreloading.ts:export interface CriticalPreloadingState {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeOptions {",
      "src/hooks/useCulturalTheme.tsx:interface UseCulturalThemeReturn {",
      "src/hooks/useCulturalTheme.tsx:export interface CulturalThemeContextValue {",
      "src/hooks/useCulturalTheme.tsx:interface CulturalThemeProviderProps {",
      "src/hooks/useDeviceCapabilities.tsx:export interface DeviceCapabilityHookReturn {",
      "src/hooks/useDeviceCapabilities.tsx:interface DeviceCapabilityContextType {",
      "src/hooks/useDynamicFocus.ts:interface ContentChange {",
      "src/hooks/useEmotionalNotifications.ts:interface UseEmotionalNotificationsProps {",
      "src/hooks/useEmotionalNotifications.ts:interface EmotionalNotificationState {",
      "src/hooks/useEnhancedCaching.ts:export interface CacheState {",
      "src/hooks/useEnhancedServiceWorker.ts:export interface ServiceWorkerState {",
      "src/hooks/useEnhancedSmartAlarms.ts:export interface UseEnhancedSmartAlarmsResult {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateConfig {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateResult {",
      "src/hooks/useFeatureGate.ts:interface FeatureGateActions {",
      "src/hooks/useFeatureGate.ts:interface UseFeatureGateOptions {",
      "src/hooks/useFocusRestoration.ts:interface FocusRestorationOptions {",
      "src/hooks/useFocusTrap.ts:interface FocusableElement {",
      "src/hooks/useFormAnnouncements.ts:export interface FormFieldChange {",
      "src/hooks/useGamingAnnouncements.ts:interface GamingAnnouncement {",
      "src/hooks/useKeyboardNavigation.ts:interface KeyboardNavigationHookReturn {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceMetrics {",
      "src/hooks/useMobilePerformance.ts:export interface PerformanceOptimizations {",
      "src/hooks/usePushNotifications.ts:export interface UsePushNotificationsReturn {",
      "src/hooks/useRealtime.tsx:interface RealtimeContextValue {",
      "src/hooks/useRealtime.tsx:interface RealtimeProviderProps {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeOptions {",
      "src/hooks/useRealtime.tsx:export interface UseRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAlarmRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseUserRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UseAIRealtimeReturn {",
      "src/hooks/useRealtime.tsx:export interface UsePushNotificationReturn {",
      "src/hooks/useScreenReaderAnnouncements.ts:interface UseScreenReaderOptions {",
      "src/hooks/useScreenReaderAnnouncements.ts:interface StateChangeAnnouncement {",
      "src/hooks/useSettingsAnnouncements.ts:export interface SettingsAnnouncement {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectHandlers {",
      "src/hooks/useSoundEffects.tsx:export interface SoundEffectControls {",
      "src/hooks/useSubscription.ts:interface SubscriptionHookState {",
      "src/hooks/useSubscription.ts:interface UseSubscriptionOptions {",
      "src/hooks/useTabProtectionAnnouncements.ts:interface UseTabProtectionAnnouncementsProps {",
      "src/hooks/useTabProtectionSettings.ts:interface UseTabProtectionSettingsReturn {",
      "src/hooks/useTheme.tsx:export interface ThemeContextValue {",
      "src/hooks/useTheme.tsx:interface ThemeProviderProps {",
      "src/hooks/useTheme.tsx:  // Memoized public interface for theme classes",
      "src/services/CloudSyncService.ts:export interface CloudSyncPreferences {",
      "src/services/__tests__/test-setup.ts:    interface Matchers<R> {",
      "src/services/accessibility-preferences.ts:export interface AccessibilityPreferences {",
      "src/services/accessibility-preferences.ts:export interface AccessibilityState extends AccessibilityPreferences {",
      "src/services/advanced-analytics.ts:export interface UserAnalytics {",
      "src/services/advanced-analytics.ts:export interface TrendData {",
      "src/services/advanced-analytics.ts:export interface PeerComparison {",
      "src/services/advanced-analytics.ts:export interface PersonalBest {",
      "src/services/advanced-analytics.ts:export interface SeasonalPattern {",
      "src/services/advanced-analytics.ts:export interface OptimalWakeTime {",
      "src/services/advanced-analytics.ts:export interface EffectivenessForecast {",
      "src/services/advanced-analytics.ts:export interface SleepRecommendation {",
      "src/services/advanced-conditions-helper.ts:export interface PerformanceAnalysis {",
      "src/services/ai-rewards.ts:interface BehaviorPattern {",
      "src/services/ai-rewards.ts:interface PersonalityProfile {",
      "src/services/alarm-access-control.ts:interface AccessControlContext {",
      "src/services/alarm-access-control.ts:interface AccessAttempt {",
      "src/services/alarm-api-security.ts:interface APIRequest {",
      "src/services/alarm-api-security.ts:interface SecurityHeaders {",
      "src/services/alarm-api-security.ts:interface ValidationResult {",
      "src/services/alarm-api-security.ts:interface APISecurityContext {",
      "src/services/alarm-backup-redundancy.ts:interface BackupMetadata {",
      "src/services/alarm-backup-redundancy.ts:interface RecoveryPoint {",
      "src/services/alarm-integrity-monitor.ts:interface IntegrityCheckResult {",
      "src/services/alarm-integrity-monitor.ts:interface IntegrityIssue {",
      "src/services/alarm-integrity-monitor.ts:interface TamperDetectionEvent {",
      "src/services/alarm-integrity-monitor.ts:interface IntegrityMetrics {",
      "src/services/alarm-rate-limiting.ts:interface RateLimit {",
      "src/services/alarm-rate-limiting.ts:interface UserRateLimits {",
      "src/services/alarm-rate-limiting.ts:interface RateLimitEntry {",
      "src/services/alarm-rate-limiting.ts:interface RateLimitResult {",
      "src/services/alarm-rate-limiting.ts:interface AdaptiveLimitAdjustment {",
      "src/services/alarm-security-integration.ts:interface SecurityStatus {",
      "src/services/alarm-security-integration.ts:interface SecurityOperation {",
      "src/services/alarm-security-integration.ts:interface SecurityResult {",
      "src/services/analytics-config.ts:export interface AnalyticsEnvironmentConfig {",
      "src/services/analytics.ts:export interface UserProperties {",
      "src/services/analytics.ts:export interface EventProperties {",
      "src/services/animation-manager.ts:export interface AnimationPreferences {",
      "src/services/animation-manager.ts:export interface AnimationMetrics {",
      "src/services/app-analytics.ts:export interface AppAnalyticsEvents {",
      "src/services/audio-manager.ts:export interface AudioCacheEntry {",
      "src/services/audio-manager.ts:export interface AudioMetadata {",
      "src/services/audio-manager.ts:export interface AudioLoadProgress {",
      "src/services/audio-manager.ts:export interface AudioPreloadConfig {",
      "src/services/capacitor-enhanced.ts:export interface DeviceFeatures {",
      "src/services/capacitor.ts:export interface CapacitorInitResult {",
      "src/services/contextual-themes.ts:export interface ContextualThemeRecommendation {",
      "src/services/contextual-themes.ts:export interface ThemeContext {",
      "src/services/contextual-themes.ts:export interface UserThemePattern {",
      "src/services/contextual-themes.ts:export interface SmartThemeRule {",
      "src/services/contextual-themes.ts:export interface ThemeCondition {",
      "src/services/convertkit-service.ts:export interface ConvertKitConfig {",
      "src/services/convertkit-service.ts:export interface ConvertKitSubscriber {",
      "src/services/convertkit-service.ts:export interface ConvertKitTag {",
      "src/services/convertkit-service.ts:export interface ConvertKitForm {",
      "src/services/convertkit-service.ts:export interface ConvertKitSequence {",
      "src/services/convertkit-service.ts:export interface ConvertKitBroadcast {",
      "src/services/convertkit-service.ts:export interface ConvertKitWebhookPayload {",
      "src/services/critical-preloader.ts:export interface CriticalAsset {",
      "src/services/critical-preloader.ts:export interface PreloadStrategy {",
      "src/services/critical-preloader.ts:export interface PreloadStats {",
      "src/services/critical-preloader.ts:    // This would typically interface with your alarm storage service",
      "src/services/custom-sound-manager.ts:export interface SoundUploadResult {",
      "src/services/custom-sound-manager.ts:export interface SoundUploadProgress {",
      "src/services/custom-sound-manager.ts:export interface SoundValidationResult {",
      "src/services/custom-test-scenarios.ts:export interface TestScenario {",
      "src/services/custom-test-scenarios.ts:export interface TestCategory {",
      "src/services/custom-test-scenarios.ts:export interface CustomCategoryConfig {",
      "src/services/custom-test-scenarios.ts:export interface UserContext {",
      "src/services/device-capabilities.ts:export interface DeviceCapabilities {",
      "src/services/device-capabilities.ts:export interface DevicePerformanceMetrics {",
      "src/services/device-capabilities.ts:export interface AdaptiveConfig {",
      "src/services/device-capabilities.ts:export interface PerformanceConfig {",
      "src/services/email-campaigns.ts:export interface SendEmailOptions {",
      "src/services/emotional-intelligence.ts:interface UserStats {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceConfig extends ServiceConfig {",
      "src/services/enhanced-alarm.ts:export interface AlarmServiceDependencies {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceConfig extends ServiceConfig {",
      "src/services/enhanced-analytics.ts:export interface UserProperties {",
      "src/services/enhanced-analytics.ts:export interface EventProperties {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsEvent {",
      "src/services/enhanced-analytics.ts:export interface PerformanceMetrics {",
      "src/services/enhanced-analytics.ts:export interface WebVitals {",
      "src/services/enhanced-analytics.ts:export interface UserJourneyStep {",
      "src/services/enhanced-analytics.ts:export interface AnalyticsServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleServiceConfig extends ServiceConfig {",
      "src/services/enhanced-battle.ts:export interface BattleServiceDependencies {",
      "src/services/enhanced-battle.ts:export interface BattleResult {",
      "src/services/enhanced-battle.ts:export interface BattleRanking {",
      "src/services/enhanced-battle.ts:export interface BattleRewards {",
      "src/services/enhanced-battle.ts:export interface BattleStatistics {",
      "src/services/enhanced-battle.ts:export interface BattleFilter {",
      "src/services/enhanced-battle.ts:export interface BattlePersistenceLayer {",
      "src/services/enhanced-cache-manager.ts:export interface CacheEntry extends AudioCacheEntry {",
      "src/services/enhanced-cache-manager.ts:export interface CachePolicy {",
      "src/services/enhanced-cache-manager.ts:export interface CacheStats {",
      "src/services/enhanced-cache-manager.ts:export interface CacheWarmingConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarEvent {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarConfig {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarSuggestion {",
      "src/services/enhanced-calendar-service.ts:export interface CalendarInsight {",
      "src/services/enhanced-location-service.ts:interface Geofence {",
      "src/services/enhanced-location-service.ts:interface GeofenceTrigger {",
      "src/services/enhanced-location-service.ts:interface LocationPattern {",
      "src/services/enhanced-offline-storage.ts:interface EnhancedStorageMetadata {",
      "src/services/enhanced-offline-storage.ts:interface ConflictResolution {",
      "src/services/enhanced-offline-storage.ts:interface DataIntegrityCheck {",
      "src/services/enhanced-offline-storage.ts:interface SyncResult {",
      "src/services/enhanced-offline-storage.ts:interface BackupMetadata {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorConfig extends ServiceConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface ThresholdConfig {",
      "src/services/enhanced-performance-monitor.ts:export interface AlertChannel {",
      "src/services/enhanced-performance-monitor.ts:export interface SeverityLevel {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceBudget {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMonitorDependencies {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface WebVitalsMetrics {",
      "src/services/enhanced-performance-monitor.ts:export interface UserInteraction {",
      "src/services/enhanced-performance-monitor.ts:export interface ResourceMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface MemoryMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface NetworkMetric {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceReport {",
      "src/services/enhanced-performance-monitor.ts:export interface PerformanceAlert {",
      "src/services/enhanced-performance-monitor.ts:export interface DeviceInfo {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface EnhancedSmartAlarm extends SmartAlarm {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface ConditionBasedAdjustment {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface WakeUpFeedback {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface OptimalTimeSlot {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface AdaptationRecord {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartAlarmMetrics {",
      "src/services/enhanced-smart-alarm-scheduler.ts:export interface SmartRecommendation {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceConfig extends ServiceConfig {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionServiceDependencies {",
      "src/services/enhanced-subscription.ts:export interface SubscriptionCheckResult {",
      "src/services/enhanced-voice.ts:export interface VoiceServiceConfig extends ServiceConfig {",
      "src/services/enhanced-voice.ts:export interface VoiceServiceDependencies {",
      "src/services/enhanced-voice.ts:export interface VoiceSettings {",
      "src/services/error-handler.ts:export interface ErrorContext {",
      "src/services/error-handler.ts:export interface ErrorMetrics {",
      "src/services/feature-gate-service.ts:interface FeatureDefinition {",
      "src/services/feature-gate-service.ts:interface FeatureAccessResult {",
      "src/services/feature-gate-service.ts:interface FeatureRestriction {",
      "src/services/health-tracker-integration.ts:export interface SleepData {",
      "src/services/health-tracker-integration.ts:export interface HealthInsight {",
      "src/services/health-tracker-integration.ts:export interface CircadianProfile {",
      "src/services/health-tracker-integration.ts:export interface HealthConfig {",
      "src/services/lazy-audio-loader.ts:export interface LazyLoadQueueItem {",
      "src/services/ml-alarm-optimizer.ts:interface UserBehaviorPattern {",
      "src/services/ml-alarm-optimizer.ts:interface PredictionResult {",
      "src/services/ml-alarm-optimizer.ts:interface PredictionFactor {",
      "src/services/mobile-performance.ts:export interface PerformanceConfig {",
      "src/services/mobile-performance.ts:export interface PerformanceMetrics {",
      "src/services/mobile-touch.ts:export interface TouchGestureOptions {",
      "src/services/notification.ts:export interface ScheduledNotification {",
      "src/services/offline-analytics.ts:interface AnalyticsEvent {",
      "src/services/offline-analytics.ts:interface SessionData {",
      "src/services/offline-analytics.ts:interface PerformanceMetric {",
      "src/services/offline-gaming.ts:interface OfflineGamingData {",
      "src/services/offline-gaming.ts:interface BattleAction {",
      "src/services/offline-gaming.ts:interface OfflineReward {",
      "src/services/offline-manager.ts:interface OfflineDB extends DBSchema {",
      "src/services/offline-manager.ts:export interface OfflineCapabilities {",
      "src/services/offline-sleep-tracker.ts:interface SleepSession {",
      "src/services/offline-sleep-tracker.ts:interface SleepStage {",
      "src/services/offline-sleep-tracker.ts:interface SleepInterruption {",
      "src/services/offline-sleep-tracker.ts:interface SleepEnvironment {",
      "src/services/offline-sleep-tracker.ts:interface SleepGoal {",
      "src/services/offline-sleep-tracker.ts:interface SleepInsight {",
      "src/services/offline-sleep-tracker.ts:interface SleepAnalytics {",
      "src/services/offline-storage.ts:interface StorageMetadata {",
      "src/services/offline-storage.ts:interface PendingChange {",
      "src/services/performance-analytics.ts:export interface PerformanceMetric {",
      "src/services/performance-analytics.ts:export interface PerformanceThresholds {",
      "src/services/performance-analytics.ts:export interface WebVitalsMetrics {",
      "src/services/performance-monitor.ts:interface PerformanceMetric {",
      "src/services/performance-monitor.ts:interface WebVitalsMetrics {",
      "src/services/performance-monitor.ts:interface UserInteraction {",
      "src/services/performance-monitor.ts:interface PerformanceReport {",
      "src/services/performance-monitor.ts:interface PerformanceTrends {",
      "src/services/predictive-analytics-service.ts:interface DetectedPattern {",
      "src/services/predictive-analytics-service.ts:interface PatternContext {",
      "src/services/predictive-analytics-service.ts:interface PredictiveInsight {",
      "src/services/predictive-analytics-service.ts:interface TrendAnalysis {",
      "src/services/premium-theme-animations.ts:export interface ThemeAnimationConfig {",
      "src/services/premium-theme-animations.ts:export interface PremiumAnimationEffects {",
      "src/services/premium.ts:export interface PremiumFeature {",
      "src/services/privacy-compliance.ts:export interface ConsentSettings {",
      "src/services/privacy-compliance.ts:export interface PrivacySettings {",
      "src/services/privacy-compliance.ts:export interface UserDataRequest {",
      "src/services/privacy-compliance.ts:export interface ConsentEvent {",
      "src/services/push-notifications.ts:export interface PushNotificationSettings {",
      "src/services/pwa-manager.ts:interface BeforeInstallPromptEvent extends Event {",
      "src/services/pwa-manager.ts:interface PWAInstallationState {",
      "src/services/pwa-manager.ts:interface PWACapabilities {",
      "src/services/pwa-service.ts:export interface PWACapabilities {",
      "src/services/real-time-smart-adapter.ts:export interface RealTimeAdaptationConfig {",
      "src/services/real-time-smart-adapter.ts:export interface AdaptationTrigger {",
      "src/services/realtime-service.ts:export interface RealtimeConfig {",
      "src/services/realtime-service.ts:export interface PresenceData {",
      "src/services/realtime-service.ts:export interface LiveUpdate {",
      "src/services/revenue-analytics.ts:export interface RevenueMetrics {",
      "src/services/revenue-analytics.ts:export interface UserJourney {",
      "src/services/revenue-analytics.ts:export interface FeatureAdoptionMetrics {",
      "src/services/secure-alarm-storage.ts:interface SecureAlarmData {",
      "src/services/secure-push-notification.ts:export interface SecurePushNotificationPayload {",
      "src/services/secure-push-notification.ts:export interface PushNotificationSettings {",
      "src/services/secure-push-notification.ts:export interface SecurePushSubscription {",
      "src/services/secure-push-notification.ts:interface PushSecurityMetrics {",
      "src/services/security-monitoring-forensics.ts:interface SecurityEvent {",
      "src/services/security-monitoring-forensics.ts:interface ThreatSignature {",
      "src/services/security-monitoring-forensics.ts:interface SecurityMetrics {",
      "src/services/security-monitoring-forensics.ts:interface ForensicReport {",
      "src/services/security-monitoring-forensics.ts:interface SecurityAlert {",
      "src/services/security.ts:export interface PasswordStrength {",
      "src/services/sentry.ts:export interface SentryConfig {",
      "src/services/sentry.ts:export interface UserContext {",
      "src/services/sentry.ts:export interface ErrorContext {",
      "src/services/service-worker-manager.ts:interface EmotionalEvent {",
      "src/services/service-worker-manager.ts:interface ServiceWorkerMessage {",
      "src/services/sleep-analysis.ts:export interface SleepSession {",
      "src/services/sleep-analysis.ts:export interface SleepStage {",
      "src/services/sleep-analysis.ts:export interface EnvironmentData {",
      "src/services/sleep-analysis.ts:export interface WearableData {",
      "src/services/sleep-analysis.ts:export interface SleepPattern {",
      "src/services/sleep-analysis.ts:export interface DayPattern {",
      "src/services/sleep-analysis.ts:export interface SmartAlarmRecommendation {",
      "src/services/sleep-analysis.ts:export interface OptimalWakeWindow {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartAlarm extends Alarm {",
      "src/services/smart-alarm-scheduler.ts:export interface SmartSchedule {",
      "src/services/smart-alarm-scheduler.ts:export interface SleepGoal {",
      "src/services/smart-alarm-scheduler.ts:export interface UserScheduleAnalysis {",
      "src/services/smart-alarm-scheduler.ts:export interface ScheduleRecommendation {",
      "src/services/smart-notification-service.ts:export interface NotificationContext {",
      "src/services/smart-notification-service.ts:export interface AdaptiveNotification {",
      "src/services/sound-effects.ts:export interface SoundEffectConfig {",
      "src/services/sound-effects.ts:export interface SoundEffectSettings {",
      "src/services/subscription.ts:interface SubscriptionCheckResult {",
      "src/services/supabase.ts:interface ConnectionPoolConfig {",
      "src/services/supabase.ts:interface CacheConfig {",
      "src/services/theme-accessibility.ts:interface AccessibilityAnnouncement {",
      "src/services/theme-accessibility.ts:interface ColorBlindnessSimulation {",
      "src/services/theme-combinations.ts:export interface ThemeCombination {",
      "src/services/theme-combinations.ts:export interface ThemeCustomizations {",
      "src/services/theme-combinations.ts:export interface ThemeCollection {",
      "src/services/theme-performance.ts:interface CSSVariableCache {",
      "src/services/theme-performance.ts:interface ThemeTransition {",
      "src/services/theme-persistence.ts:interface ThemeStorageData {",
      "src/services/theme-persistence.ts:interface StorageMetadata {",
      "src/services/typed-realtime-service.ts: * Implementation of the real-time service interface with full TypeScript support",
      "src/services/types/media.ts:export interface MotivationalQuote {",
      "src/services/types/media.ts:export interface MediaLibrary {",
      "src/services/types/media.ts:export interface StorageInfo {",
      "src/services/types/media.ts:export interface CacheSettings {",
      "src/services/types/media.ts:export interface CompressionSettings {",
      "src/services/types/media.ts:export interface EnhancedAlarm {",
      "src/services/types/media.ts:export interface ProgressiveLoadingStatus {",
      "src/services/types/media.ts:export interface SilenceSegment {",
      "src/services/types/media.ts:export interface ModerationResult {",
      "src/services/types/media.ts:export interface ContentModerationSettings {",
      "src/services/types/performance.ts:export interface PerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceBudget {",
      "src/services/types/performance.ts:export interface PerformanceThresholds {",
      "src/services/types/performance.ts:export interface RenderingOptimizations {",
      "src/services/types/performance.ts:export interface MemoryOptimizations {",
      "src/services/types/performance.ts:export interface NetworkOptimizations {",
      "src/services/types/performance.ts:export interface AdaptivePerformanceConfig {",
      "src/services/types/performance.ts:export interface PerformanceMetric {",
      "src/services/types/performance.ts:export interface FrameRateMetrics {",
      "src/services/types/performance.ts:export interface MemoryMetrics {",
      "src/services/types/performance.ts:export interface NetworkMetrics {",
      "src/services/types/performance.ts:export interface RenderMetrics {",
      "src/services/types/performance.ts:export interface UserExperienceMetrics {",
      "src/services/types/performance.ts:export interface PerformanceSnapshot {",
      "src/services/types/performance.ts:export interface PerformanceAlert {",
      "src/services/types/performance.ts:export interface DeviceAdaptation {",
      "src/services/types/performance.ts:export interface ComponentOptimization {",
      "src/services/types/performance.ts:export interface AssetOptimization {",
      "src/services/types/performance.ts:export interface CacheOptimization {",
      "src/services/user-testing.ts:export interface UserTestSession {",
      "src/services/user-testing.ts:export interface DeviceInfo {",
      "src/services/user-testing.ts:export interface UserFeedback {",
      "src/services/user-testing.ts:export interface ABTest {",
      "src/services/user-testing.ts:export interface ABTestVariant {",
      "src/services/user-testing.ts:export interface ABTestMetric {",
      "src/services/user-testing.ts:export interface UsabilityEvent {",
      "src/services/user-testing.ts:export interface BugReport {",
      "src/services/visual-alarm-themes.ts:export interface VisualAlarmTheme {",
      "src/services/voice-ai-enhanced.ts:export interface VoicePersonality {",
      "src/services/voice-ai-enhanced.ts:export interface ContextualResponse {",
      "src/services/voice-ai-enhanced.ts:export interface VoiceLearningData {",
      "src/services/voice-biometrics.ts:export interface VoicePrint {",
      "src/services/voice-biometrics.ts:export interface VoiceTrainingSession {",
      "src/services/voice-biometrics.ts:export interface VoiceAuthentication {",
      "src/services/voice-biometrics.ts:export interface VoiceMoodAnalysis {",
      "src/services/voice-pro.ts:export interface VoiceProvider {",
      "src/services/voice-pro.ts:export interface VoiceOption {",
      "src/services/voice-pro.ts:export interface VoiceSettings {",
      "src/services/voice-pro.ts:export interface CachedVoiceMessage {",
      "src/services/voice-pro.ts:export interface RecognitionResult {",
      "src/services/voice-recognition-enhanced.ts:export interface EnhancedVoiceCommand {",
      "src/services/voice-recognition-enhanced.ts:export interface MultiLanguageConfig {",
      "src/services/voice-recognition-enhanced.ts:export interface GestureRecognition {",
      "src/services/voice-recognition-enhanced.ts:export interface AdvancedRecognitionConfig {",
      "src/services/voice-recognition.ts:export interface VoiceCommand {",
      "src/services/voice-recognition.ts:export interface RecognitionConfig {",
      "src/services/voice-smart-integration.ts:export interface SmartHomeIntegration {",
      "src/services/voice-smart-integration.ts:export interface CalendarIntegration {",
      "src/services/voice-smart-integration.ts:export interface VoiceIntegrationConfig {",
      "src/services/voice-smart-integration.ts:export interface VoiceShortcut {",
      "src/services/voice-smart-integration.ts:export interface VoiceAction {",
      "src/services/voice-smart-integration.ts:export interface VoiceContext {",
      "src/stories/Header.tsx:export interface HeaderProps {",
      "src/templates/email-templates.ts:export interface EmailTemplateConfig {",
      "src/templates/email-templates.ts:export interface TemplateVariable {",
      "src/templates/email-templates.ts:export interface ABTestVariant {",
      "src/types/alarm-scheduling.ts: * Comprehensive interfaces for complex alarm scheduling features",
      "src/types/alarm-scheduling.ts:export interface RecurrencePattern {",
      "src/types/alarm-scheduling.ts:export interface ConditionalRule {",
      "src/types/alarm-scheduling.ts:export interface LocationTrigger {",
      "src/types/alarm-scheduling.ts:export interface SeasonalAdjustment {",
      "src/types/alarm-scheduling.ts:interface TimeAdjustment {",
      "src/types/alarm-scheduling.ts:export interface CalendarIntegration {",
      "src/types/alarm-scheduling.ts:interface CalendarProvider {",
      "src/types/alarm-scheduling.ts:interface CalendarRule {",
      "src/types/alarm-scheduling.ts:export interface SunSchedule {",
      "src/types/alarm-scheduling.ts:export interface SchedulingConfig {",
      "src/types/alarm-scheduling.ts:interface SchedulingExecution {",
      "src/types/alarm-scheduling.ts:export interface AlarmSchedulingProps {",
      "src/types/alarm.d.ts:interface GeolocationPosition {",
      "src/types/alarm.d.ts:export interface LocationActionParameters {",
      "src/types/alarm.d.ts:export interface AlarmUpdateData {",
      "src/types/alarm.d.ts:// Enhanced AlarmService interface with advanced scheduling methods",
      "src/types/alarm.d.ts:  interface GeolocationPosition {",
      "src/types/analytics.d.ts:export interface RevenueRecord {",
      "src/types/analytics.d.ts:export interface DailyMetric {",
      "src/types/analytics.d.ts:export interface UserJourney {",
      "src/types/analytics.d.ts:export interface RevenueEventInput {",
      "src/types/analytics.d.ts:export interface FeatureAdoptionMetrics {",
      "src/types/analytics.d.ts:export interface TierCorrelation {",
      "src/types/analytics.d.ts:export interface Refund {",
      "src/types/analytics.d.ts:export interface RevenueChartData {",
      "src/types/analytics.d.ts:export interface AnalyticsEventProperties {",
      "src/types/analytics.d.ts:export interface RevenueReport {",
      "src/types/analytics.d.ts:export interface RevenueMetrics {",
      "src/types/analytics.d.ts:export interface SubscriptionRecord {",
      "src/types/analytics.d.ts:export interface UserEventRecord {",
      "src/types/analytics.d.ts:export interface FeatureUsageRecord {",
      "src/types/analytics.d.ts:export interface CacheEntry<T> {",
      "src/types/api-responses.ts: * Comprehensive interfaces for all API responses to replace Promise<any>",
      "src/types/api-responses.ts:export interface BaseApiResponse {",
      "src/types/api-responses.ts:export interface SuccessResponse<T = unknown> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface ErrorResponse extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface SubscribeContactResponse {",
      "src/types/api-responses.ts:export interface AddContactToAutomationResponse {",
      "src/types/api-responses.ts:export interface AddTagToContactResponse {",
      "src/types/api-responses.ts:export interface ConvertKitAccount {",
      "src/types/api-responses.ts:export interface UserFeatures {",
      "src/types/api-responses.ts:export interface EngagementMetrics {",
      "src/types/api-responses.ts:export interface ConvertKitCustomFields {",
      "src/types/api-responses.ts:export interface MailchimpMergeFields {",
      "src/types/api-responses.ts:export interface TestServiceResponse<T = any> {",
      "src/types/api-responses.ts:export interface CacheGetResponse<T = any> {",
      "src/types/api-responses.ts:export interface CacheSetResponse {",
      "src/types/api-responses.ts:export interface PerformanceMetadata {",
      "src/types/api-responses.ts:export interface AnalyticsMetadata {",
      "src/types/api-responses.ts:export interface FeatureContext {",
      "src/types/api-responses.ts:export interface PaginatedApiResponse<T> extends BaseApiResponse {",
      "src/types/api-responses.ts:export interface BatchOperationResponse<T> {",
      "src/types/api.ts:export interface ApiResponse<T = unknown> {",
      "src/types/api.ts:export interface PaginationMeta {",
      "src/types/api.ts:export interface PaginatedResponse<T> {",
      "src/types/api.ts:export interface HttpRequestConfig {",
      "src/types/api.ts:export interface HttpResponse<T = unknown> {",
      "src/types/api.ts:export interface HttpClient {",
      "src/types/api.ts:export interface HealthCheckResponse {",
      "src/types/api.ts:export interface CreateUserRequest {",
      "src/types/api.ts:export interface UpdateUserRequest {",
      "src/types/api.ts:export interface UserStatsResponse {",
      "src/types/api.ts:export interface CreateAlarmRequest {",
      "src/types/api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/api.ts:export interface CreateBattleRequest {",
      "src/types/api.ts:export interface JoinBattleRequest {",
      "src/types/api.ts:export interface BattleWakeRequest {",
      "src/types/api.ts:export interface TournamentFilters extends PaginationParams {",
      "src/types/api.ts:export interface PerformanceMetric {",
      "src/types/api.ts:export interface WebVitalsData {",
      "src/types/api.ts:export interface ErrorReportData {",
      "src/types/api.ts:export interface PerformanceDashboardResponse {",
      "src/types/api.ts:export interface SupabaseAuthResponse {",
      "src/types/api.ts:export interface StripeSubscriptionResponse {",
      "src/types/api.ts:export interface StripePaymentIntentResponse {",
      "src/types/api.ts:export interface ConvertKitSubscriberResponse {",
      "src/types/api.ts:export interface GitHubUserResponse {",
      "src/types/api.ts:export interface SocialMediaPostResponse {",
      "src/types/api.ts:export interface WebhookPayload {",
      "src/types/api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/api.ts:export interface WebSocketMessage {",
      "src/types/api.ts:export interface AlarmNotificationMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface BattleUpdateMessage extends WebSocketMessage {",
      "src/types/api.ts:export interface SystemNotificationMessage extends WebSocketMessage {",
      "src/types/app-state.ts: * Central state management interfaces for the Relife alarm application",
      "src/types/app-state.ts: * Comprehensive state interface for alarm management in the Relife application.",
      "src/types/app-state.ts: * This interface manages all aspects of alarm functionality including:",
      "src/types/app-state.ts: * @interface AlarmState",
      "src/types/app-state.ts:export interface AlarmState {",
      "src/types/app-state.ts:// Helper interfaces for AlarmState",
      "src/types/app-state.ts:interface BattleResult {",
      "src/types/app-state.ts:interface BattleStats {",
      "src/types/app-state.ts:interface WeeklyAlarmPattern {",
      "src/types/app-state.ts:export interface UserState {",
      "src/types/app-state.ts:// Helper interfaces for UserState",
      "src/types/app-state.ts:interface UserProfile {",
      "src/types/app-state.ts:interface Achievement {",
      "src/types/app-state.ts:interface AchievementRequirement {",
      "src/types/app-state.ts:interface Badge {",
      "src/types/app-state.ts:interface UserFriend {",
      "src/types/app-state.ts:interface SocialChallenge {",
      "src/types/app-state.ts:interface SharePermissions {",
      "src/types/app-state.ts:export interface SubscriptionState {",
      "src/types/app-state.ts:// Helper interfaces for SubscriptionState",
      "src/types/app-state.ts:interface SubscriptionChange {",
      "src/types/app-state.ts:interface UpgradePrompt {",
      "src/types/app-state.ts:interface OverageFee {",
      "src/types/app-state.ts:export interface AppState {",
      "src/types/browser-apis.d.ts:interface ServiceWorkerEventMap {",
      "src/types/browser-apis.d.ts:interface EnhancedServiceWorkerRegistration extends ServiceWorkerRegistration {",
      "src/types/browser-apis.d.ts:interface StorageEstimate {",
      "src/types/browser-apis.d.ts:interface StorageManager {",
      "src/types/browser-apis.d.ts:interface SyncManager {",
      "src/types/browser-apis.d.ts:interface SyncEvent extends ExtendableEvent {",
      "src/types/browser-apis.d.ts:interface PeriodicSyncManager {",
      "src/types/browser-apis.d.ts:interface PeriodicSyncOptions {",
      "src/types/browser-apis.d.ts:interface ShareData {",
      "src/types/browser-apis.d.ts:interface WakeLockSentinel {",
      "src/types/browser-apis.d.ts:interface WakeLock {",
      "src/types/browser-apis.d.ts:interface PermissionStatus extends EventTarget {",
      "src/types/browser-apis.d.ts:interface Permissions {",
      "src/types/browser-apis.d.ts:interface PermissionDescriptor {",
      "src/types/browser-apis.d.ts:interface IDBDatabase {",
      "src/types/browser-apis.d.ts:interface Connection {",
      "src/types/browser-apis.d.ts:interface ScreenWakeLock {",
      "src/types/browser-apis.d.ts:  interface ServiceWorkerContainer {",
      "src/types/cloudflare-runtime.d.ts:  interface D1Database {",
      "src/types/cloudflare-runtime.d.ts:  interface KVNamespace {",
      "src/types/cloudflare-runtime.d.ts:  interface DurableObjectNamespace {",
      "src/types/configuration-interfaces.ts: * Specific interfaces to replace Record<string, any> objects",
      "src/types/configuration-interfaces.ts:export interface ConvertKitAutomationParameters {",
      "src/types/configuration-interfaces.ts:export interface EmotionalMessageVariables {",
      "src/types/configuration-interfaces.ts:export interface PerformanceEventMetadata {",
      "src/types/configuration-interfaces.ts:export interface AnalyticsEventProperties {",
      "src/types/configuration-interfaces.ts:export interface FormFieldData {",
      "src/types/configuration-interfaces.ts:export interface FeatureTrackingContext {",
      "src/types/configuration-interfaces.ts:export interface CacheConfiguration {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundTheme {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeUISounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeNotificationSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAlarmSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomThemeAmbientSounds {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundAssignment {",
      "src/types/custom-sound-themes.ts:export interface SoundReview {",
      "src/types/custom-sound-themes.ts:export interface AudioCharacteristics {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundConfig {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSoundParameters {",
      "src/types/custom-sound-themes.ts:export interface EnvelopeConfig {",
      "src/types/custom-sound-themes.ts:export interface FilterConfig {",
      "src/types/custom-sound-themes.ts:export interface EffectConfig {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeMetadata {",
      "src/types/custom-sound-themes.ts:export interface BrowserCompatibility {",
      "src/types/custom-sound-themes.ts:export interface DeviceRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeFeatures {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeRequirements {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePreview {",
      "src/types/custom-sound-themes.ts:export interface PreviewSound {",
      "src/types/custom-sound-themes.ts:export interface DemoSequence {",
      "src/types/custom-sound-themes.ts:export interface DemoTiming {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemePermissions {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCreationSession {",
      "src/types/custom-sound-themes.ts:export interface CreationProgress {",
      "src/types/custom-sound-themes.ts:export interface RequiredField {",
      "src/types/custom-sound-themes.ts:export interface OptionalField {",
      "src/types/custom-sound-themes.ts:export interface UploadedFile {",
      "src/types/custom-sound-themes.ts:export interface GeneratedSound {",
      "src/types/custom-sound-themes.ts:export interface SelectedBuiltInSound {",
      "src/types/custom-sound-themes.ts:export interface ValidationResult {",
      "src/types/custom-sound-themes.ts:export interface ValidationIssue {",
      "src/types/custom-sound-themes.ts:export interface ValidationSuggestion {",
      "src/types/custom-sound-themes.ts:export interface CreationError {",
      "src/types/custom-sound-themes.ts:export interface CreationWarning {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeCollection {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeLibrary {",
      "src/types/custom-sound-themes.ts:export interface ThemeRecommendation {",
      "src/types/custom-sound-themes.ts:export interface LibrarySettings {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeExport {",
      "src/types/custom-sound-themes.ts:export interface ExportMetadata {",
      "src/types/custom-sound-themes.ts:export interface ExportFile {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeImport {",
      "src/types/custom-sound-themes.ts:export interface ImportResult {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeUsage {",
      "src/types/custom-sound-themes.ts:export interface UsageContext {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeAnalytics {",
      "src/types/custom-sound-themes.ts:export interface UsagePattern {",
      "src/types/custom-sound-themes.ts:export interface TimePattern {",
      "src/types/custom-sound-themes.ts:export interface ContextPattern {",
      "src/types/custom-sound-themes.ts:export interface PerformanceMetrics {",
      "src/types/custom-sound-themes.ts:export interface LatencyMetrics {",
      "src/types/custom-sound-themes.ts:export interface FeedbackSummary {",
      "src/types/custom-sound-themes.ts:export interface TagFrequency {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeListResponse {",
      "src/types/custom-sound-themes.ts:export interface AppliedFilter {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeSearchRequest {",
      "src/types/custom-sound-themes.ts:export interface CustomSoundThemeEventData {",
      "src/types/domain.ts:export interface User {",
      "src/types/domain.ts:export interface UserPreferences {",
      "src/types/domain.ts:export interface UserSettings {",
      "src/types/domain.ts:export interface UserStats {",
      "src/types/domain.ts:export interface FeatureAccess {",
      "src/types/domain.ts:export interface FeatureUsageInfo {",
      "src/types/domain.ts:export interface FeatureUsage {",
      "src/types/domain.ts:export interface BillingUsage {",
      "src/types/domain.ts:export interface VoiceMood {",
      "src/types/domain.ts:export interface AlarmEvent {",
      "src/types/domain.ts:export interface AlarmContext {",
      "src/types/domain.ts:export interface AlarmInstance {",
      "src/types/domain.ts:export interface PaymentMethod {",
      "src/types/domain.ts:export interface Invoice {",
      "src/types/domain.ts:export interface InvoiceItem {",
      "src/types/domain.ts:export interface Payment {",
      "src/types/domain.ts:export interface UserDiscount {",
      "src/types/domain.ts:export interface Theme {",
      "src/types/domain.ts:export interface ThemeColors {",
      "src/types/domain.ts:export interface PersonalizationSettings {",
      "src/types/domain.ts:export interface Battle {",
      "src/types/domain.ts:export interface BattleConfig {",
      "src/types/domain.ts:export interface BattleSettings {",
      "src/types/domain.ts:export interface BattleParticipantStats {",
      "src/types/domain.ts:export interface SmartAlarmSettings {",
      "src/types/domain.ts:export interface PremiumFeatureAccess {",
      "src/types/email-campaigns.ts:export interface PersonaProfile {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionResult {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionFactor {",
      "src/types/email-campaigns.ts:export interface CampaignTrigger {",
      "src/types/email-campaigns.ts:export interface TriggerCondition {",
      "src/types/email-campaigns.ts:export interface EmailSequence {",
      "src/types/email-campaigns.ts:export interface SequenceCondition {",
      "src/types/email-campaigns.ts:export interface EmailTemplate {",
      "src/types/email-campaigns.ts:export interface TemplateVariable {",
      "src/types/email-campaigns.ts:export interface PersonalizationRule {",
      "src/types/email-campaigns.ts:export interface PersonalizedContent {",
      "src/types/email-campaigns.ts:export interface ABTestConfig {",
      "src/types/email-campaigns.ts:export interface ABTestVariant {",
      "src/types/email-campaigns.ts:export interface ABTestResults {",
      "src/types/email-campaigns.ts:export interface VariantResults {",
      "src/types/email-campaigns.ts:export interface CampaignSettings {",
      "src/types/email-campaigns.ts:export interface FrequencyCapping {",
      "src/types/email-campaigns.ts:export interface UnsubscribeSettings {",
      "src/types/email-campaigns.ts:export interface ComplianceSettings {",
      "src/types/email-campaigns.ts:export interface TrackingSettings {",
      "src/types/email-campaigns.ts:export interface CampaignMetrics {",
      "src/types/email-campaigns.ts:export interface EmailEvent {",
      "src/types/email-campaigns.ts:export interface CampaignPerformanceReport {",
      "src/types/email-campaigns.ts:export interface SequencePerformance {",
      "src/types/email-campaigns.ts:export interface TopPerformer {",
      "src/types/email-campaigns.ts:export interface PerformanceRecommendation {",
      "src/types/email-campaigns.ts:export interface BenchmarkComparison {",
      "src/types/email-campaigns.ts:export interface PersonaBenchmark {",
      "src/types/email-campaigns.ts:export interface MetricTrend {",
      "src/types/email-campaigns.ts:export interface EmailPreferences {",
      "src/types/email-campaigns.ts:export interface SendEmailRequest {",
      "src/types/email-campaigns.ts:export interface SendEmailResponse {",
      "src/types/email-campaigns.ts:export interface UserWithEmailData",
      "src/types/email-campaigns.ts:export interface UserCampaignHistory {",
      "src/types/email-campaigns.ts:export interface ConversionEvent {",
      "src/types/email-campaigns.ts:export interface PersonaDetectionConfig {",
      "src/types/email-campaigns.ts:export interface PersonaFactor {",
      "src/types/email-campaigns.ts:export interface PersonaCondition {",
      "src/types/email-campaigns.ts:export interface PlatformCapabilities {",
      "src/types/email-campaigns.ts:export interface SmartSendOptimization {",
      "src/types/email-campaigns.ts:export interface EmailDeliverabilitySettings {",
      "src/types/email-campaigns.ts:export interface CampaignAutomationRule {",
      "src/types/email-campaigns.ts:export interface AutomationTrigger {",
      "src/types/email.ts:export interface PersonaProfile {",
      "src/types/email.ts:export interface PersonaDetectionResult {",
      "src/types/email.ts:export interface PersonaDetectionFactor {",
      "src/types/email.ts:export interface EmailSequence {",
      "src/types/email.ts:export interface CampaignMetrics {",
      "src/types/email.ts:export interface EmailPreferences {",
      "src/types/emotional.ts:export interface EmotionalContext {",
      "src/types/emotional.ts:export interface EmotionalState {",
      "src/types/emotional.ts:export interface EmotionalMessage {",
      "src/types/emotional.ts:export interface EmotionalResponse {",
      "src/types/emotional.ts:export interface UserEmotionalProfile {",
      "src/types/global.d.ts:interface JsonObject {",
      "src/types/global.d.ts:interface ServiceWorkerMessageData {",
      "src/types/global.d.ts:interface ComponentState {",
      "src/types/global.d.ts:interface SleepSession {",
      "src/types/global.d.ts:interface VoiceCommand {",
      "src/types/global.d.ts:interface AnalysisResult {",
      "src/types/global.d.ts:interface SubscriptionAccessResult {",
      "src/types/global.d.ts:interface UsageLimitsResult {",
      "src/types/global.d.ts:interface VoiceGenerationResult {",
      "src/types/global.d.ts:interface UpgradeRecommendation {",
      "src/types/http-client.ts: * Standardized interfaces for all HTTP operations",
      "src/types/http-client.ts: * HTTP client interface with standardized methods",
      "src/types/http-client.ts:export interface HttpClient {",
      "src/types/http-client.ts:export interface HttpInterceptor {",
      "src/types/http-client.ts:export interface HttpClientConfig {",
      "src/types/http-client.ts:export interface CacheConfig {",
      "src/types/http-client.ts:export interface AuthenticationConfig {",
      "src/types/http-client.ts:export interface EnhancedRequestConfig extends HttpRequestConfig {",
      "src/types/http-client.ts:export interface EnhancedResponse<T> extends ApiResponse<T> {",
      "src/types/http-client.ts:export interface RetryConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerConfig {",
      "src/types/http-client.ts:export interface CircuitBreakerMetrics {",
      "src/types/http-client.ts:export interface RateLimiterConfig {",
      "src/types/http-client.ts:export interface RateLimitStatus {",
      "src/types/http-client.ts:export interface HttpRequestMetrics {",
      "src/types/http-client.ts:export interface HttpClientAnalytics {",
      "src/types/http-client.ts:export interface SupabaseClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface StripeClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface ConvertKitClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface GitHubClientConfig extends HttpClientConfig {",
      "src/types/http-client.ts:export interface HttpError extends Error {",
      "src/types/http-client.ts:export interface ErrorHandlerConfig {",
      "src/types/http-client.ts:export interface HttpClientTestUtils {",
      "src/types/http-client.ts:export interface HttpClientFactory {",
      "src/types/http-client.ts:export interface HttpClientBuilder {",
      "src/types/http-client.ts:export interface HttpClientPlugin {",
      "src/types/http-client.ts:export interface PluginManager {",
      "src/types/index.ts:// Re-export commonly used interfaces with descriptive names",
      "src/types/index.ts:export interface ApiEnvironmentConfig {",
      "src/types/index.ts:export interface ServiceFactory {",
      "src/types/index.ts:export interface GlobalErrorHandler {",
      "src/types/index.ts:export interface TelemetryData {",
      "src/types/index.ts:export interface MonitoringService {",
      "src/types/index.ts:export interface ServiceHealthCheck {",
      "src/types/index.ts:export interface HealthCheckResponse {",
      "src/types/manual-fixes.d.ts: * This file re-exports all domain interfaces from the centralized domain.ts file",
      "src/types/premium.ts:export interface PremiumFeature {",
      "src/types/premium.ts:export interface PaymentMethod {",
      "src/types/premium.ts:export interface Invoice {",
      "src/types/premium.ts:export interface InvoiceItem {",
      "src/types/premium.ts:export interface Payment {",
      "src/types/premium.ts:export interface Refund {",
      "src/types/premium.ts:export interface FeatureUsage {",
      "src/types/premium.ts:export interface BillingUsage {",
      "src/types/premium.ts:export interface UserDiscount {",
      "src/types/premium.ts:export interface FreeCredit {",
      "src/types/premium.ts:export interface ReferralProgram {",
      "src/types/premium.ts:export interface Referral {",
      "src/types/premium.ts:export interface SubscriptionChange {",
      "src/types/premium.ts:export interface CancellationSurvey {",
      "src/types/premium.ts:export interface FeatureAccess {",
      "src/types/premium.ts:export interface FeatureGate {",
      "src/types/premium.ts:export interface RevenueMetrics {",
      "src/types/premium.ts:export interface CreateSubscriptionRequest {",
      "src/types/premium.ts:export interface CreateSubscriptionResponse {",
      "src/types/premium.ts:export interface UpdateSubscriptionRequest {",
      "src/types/premium.ts:export interface UpdateSubscriptionResponse {",
      "src/types/premium.ts:export interface CancelSubscriptionRequest {",
      "src/types/premium.ts:export interface CancelSubscriptionResponse {",
      "src/types/premium.ts:export interface StripeWebhookEvent {",
      "src/types/premium.ts:export interface WebhookProcessingResult {",
      "src/types/premium.ts:export interface PremiumUIState {",
      "src/types/premium.ts:export interface StripeConfig {",
      "src/types/premium.ts:export interface ApplePayConfig {",
      "src/types/push-notifications.ts:export interface PushNotificationBase {",
      "src/types/push-notifications.ts:export interface PushNotification extends PushNotificationBase {",
      "src/types/push-notifications.ts:export interface ProgressNotificationData {",
      "src/types/push-notifications.ts:export interface SystemNotificationData {",
      "src/types/push-notifications.ts:export interface EmergencyNotificationData {",
      "src/types/push-notifications.ts:export interface NotificationPreferences {",
      "src/types/push-notifications.ts:export interface PushDeliveryStatus {",
      "src/types/push-notifications.ts:export interface ServiceWorkerMessage<T = any> {",
      "src/types/push-notifications.ts:export interface PushReceivedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClickedPayload {",
      "src/types/push-notifications.ts:export interface NotificationClosedPayload {",
      "src/types/push-notifications.ts:export interface PushTestResults {",
      "src/types/push-notifications.ts:export interface PushNotificationManager {",
      "src/types/realtime-messages.ts:export interface AlarmTriggeredPayload {",
      "src/types/realtime-messages.ts:export interface AlarmDismissedPayload {",
      "src/types/realtime-messages.ts:export interface AlarmSnoozedPayload {",
      "src/types/realtime-messages.ts:export interface UserPresenceUpdatePayload {",
      "src/types/realtime-messages.ts:export interface UserActivityPayload {",
      "src/types/realtime-messages.ts:export interface DeviceStatusChangePayload {",
      "src/types/realtime-messages.ts:export interface RecommendationGeneratedPayload {",
      "src/types/realtime-messages.ts:export interface AIAnalysisCompletePayload {",
      "src/types/realtime-messages.ts:export interface VoiceMoodDetectedPayload {",
      "src/types/realtime-messages.ts:export interface SleepPatternUpdatedPayload {",
      "src/types/realtime-messages.ts:export interface SystemNotificationPayload {",
      "src/types/realtime-messages.ts:export interface EmergencyAlertPayload {",
      "src/types/realtime-messages.ts:export interface SyncStatusUpdatePayload {",
      "src/types/realtime-messages.ts:export interface SyncConflictDetectedPayload {",
      "src/types/realtime-service.ts: * Complete interface for real-time functionality combining WebSockets, push notifications, and Supabase real-time",
      "src/types/realtime-service.ts:export interface RealtimeServiceConfig {",
      "src/types/realtime-service.ts:export interface RealtimeService {",
      "src/types/realtime-service.ts:export interface AlarmRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface UserRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface AIRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface SystemRealtimeFeatures {",
      "src/types/realtime-service.ts:export interface ConnectionStatus {",
      "src/types/realtime-service.ts:export interface RealtimeServiceMetrics {",
      "src/types/realtime-service.ts:export interface RealtimeDiagnostics {",
      "src/types/realtime-service.ts:export interface RealtimeServiceError {",
      "src/types/realtime-service.ts:export interface RealtimeServiceFactory {",
      "src/types/realtime-service.ts:export interface RealtimeServiceBuilder {",
      "src/types/realtime-service.ts:export interface MockRealtimeService extends RealtimeService {",
      "src/types/realtime-service.ts:export interface RealtimeServiceTestHarness {",
      "src/types/realtime-service.ts:export interface TestScenario {",
      "src/types/realtime-service.ts:export interface TestStep {",
      "src/types/realtime-service.ts:export interface TestResult {",
      "src/types/realtime-service.ts:export interface TestSuite {",
      "src/types/realtime-service.ts:export interface PerformanceTest {",
      "src/types/realtime-service.ts:export interface PerformanceResults {",
      "src/types/realtime/index.ts:export interface RealtimeConfigValidation {",
      "src/types/realtime/index.ts:export interface RealtimeFeatureFlags {",
      "src/types/realtime/index.ts:export interface RealtimePerformanceThresholds {",
      "src/types/realtime/index.ts:export interface RealtimeSecurityConfig {",
      "src/types/service-architecture.ts:export interface ServiceHealth {",
      "src/types/service-architecture.ts:export interface ServiceDependencyHealth {",
      "src/types/service-architecture.ts:export interface ServiceMetrics {",
      "src/types/service-architecture.ts:export interface ServiceError {",
      "src/types/service-architecture.ts:export interface BaseService {",
      "src/types/service-architecture.ts:export interface ServiceConfig {",
      "src/types/service-architecture.ts:export interface CacheConfig {",
      "src/types/service-architecture.ts:export interface CircuitBreakerConfig {",
      "src/types/service-architecture.ts:export interface AlertingConfig {",
      "src/types/service-architecture.ts:export interface ServiceDescriptor {",
      "src/types/service-architecture.ts:export interface ServiceFactory<T extends BaseService> {",
      "src/types/service-architecture.ts:export interface ServiceContainer {",
      "src/types/service-architecture.ts:export interface CacheEntry<T = any> {",
      "src/types/service-architecture.ts:export interface CacheProvider {",
      "src/types/service-architecture.ts:export interface CacheStats {",
      "src/types/service-architecture.ts:export interface CacheManager {",
      "src/types/service-architecture.ts:export interface ServiceEvent {",
      "src/types/service-architecture.ts:export interface EventBus {",
      "src/types/service-architecture.ts:export interface ServiceLifecycle {",
      "src/types/service-architecture.ts:export interface PerformanceTracker {",
      "src/types/service-architecture.ts:export interface PerformanceMetrics {",
      "src/types/service-architecture.ts:export interface OperationMetrics {",
      "src/types/service-architecture.ts:export interface EventMetrics {",
      "src/types/service-architecture.ts:export interface ServiceRegistry {",
      "src/types/service-architecture.ts:export interface ServiceDiscoveryCriteria {",
      "src/types/service-architecture.ts:export interface ServiceRegistryHealth {",
      "src/types/service-architecture.ts:export interface AlarmServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface AnalyticsServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface SubscriptionServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface BattleServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface VoiceServiceInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface PerformanceMonitorInterface extends BaseService {",
      "src/types/service-architecture.ts:export interface ServiceBuilder<T extends BaseService> {",
      "src/types/services/backend-api.ts:export interface User {",
      "src/types/services/backend-api.ts:export interface UserPreferences {",
      "src/types/services/backend-api.ts:export interface UserSubscription {",
      "src/types/services/backend-api.ts:export interface UserStats {",
      "src/types/services/backend-api.ts:export interface SnoozeSettings {",
      "src/types/services/backend-api.ts:export interface BattleSettings {",
      "src/types/services/backend-api.ts:export interface AlarmEvent {",
      "src/types/services/backend-api.ts:export interface AlarmEventMetadata {",
      "src/types/services/backend-api.ts:export interface Battle {",
      "src/types/services/backend-api.ts:export interface BattleParticipant {",
      "src/types/services/backend-api.ts:export interface BattlePrize {",
      "src/types/services/backend-api.ts:export interface BattleSchedule {",
      "src/types/services/backend-api.ts:export interface BattleRules {",
      "src/types/services/backend-api.ts:export interface BattleLeaderboard {",
      "src/types/services/backend-api.ts:export interface Tournament {",
      "src/types/services/backend-api.ts:export interface TournamentSchedule {",
      "src/types/services/backend-api.ts:export interface TournamentParticipant {",
      "src/types/services/backend-api.ts:export interface TournamentBracket {",
      "src/types/services/backend-api.ts:export interface TournamentMatch {",
      "src/types/services/backend-api.ts:export interface TournamentPrizePool {",
      "src/types/services/backend-api.ts:export interface TournamentRules {",
      "src/types/services/backend-api.ts:export interface CreateUserRequest {",
      "src/types/services/backend-api.ts:export interface UpdateUserRequest {",
      "src/types/services/backend-api.ts:export interface CreateAlarmRequest {",
      "src/types/services/backend-api.ts:export interface UpdateAlarmRequest extends Partial<CreateAlarmRequest> {",
      "src/types/services/backend-api.ts:export interface AlarmFilters extends PaginationParams {",
      "src/types/services/backend-api.ts:export interface CreateBattleRequest {",
      "src/types/services/backend-api.ts:export interface JoinBattleRequest {",
      "src/types/services/backend-api.ts:export interface SubmitBattleProofRequest {",
      "src/types/services/backend-api.ts:export interface BackendServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/backend-api.ts:export interface UserServiceResponses {",
      "src/types/services/backend-api.ts:export interface AlarmServiceResponses {",
      "src/types/services/backend-api.ts:export interface BattleServiceResponses {",
      "src/types/services/backend-api.ts:export interface TournamentServiceResponses {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSubscriber {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitTag {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitForm {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitSequence {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitBroadcast {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitCustomField {",
      "src/types/services/convertkit-api.ts:export interface AddSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface UpdateSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface TagSubscriberRequest {",
      "src/types/services/convertkit-api.ts:export interface AddToSequenceRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateBroadcastRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateTagRequest {",
      "src/types/services/convertkit-api.ts:export interface CreateFormRequest {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscribersListResponse {",
      "src/types/services/convertkit-api.ts:export interface TagsListResponse {",
      "src/types/services/convertkit-api.ts:export interface FormsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SequencesListResponse {",
      "src/types/services/convertkit-api.ts:export interface BroadcastsListResponse {",
      "src/types/services/convertkit-api.ts:export interface CustomFieldsListResponse {",
      "src/types/services/convertkit-api.ts:export interface SubscriberStatsResponse {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSubscriberEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookFormEvent {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitWebhookSequenceEvent {",
      "src/types/services/convertkit-api.ts:export interface PersonaCampaignConfig {",
      "src/types/services/convertkit-api.ts:export interface PersonaAssignmentRequest {",
      "src/types/services/convertkit-api.ts:export interface SubscriberEngagementMetrics {",
      "src/types/services/convertkit-api.ts:export interface ConvertKitServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/convertkit-api.ts:export interface SubscriberServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface CampaignServiceResponse {",
      "src/types/services/convertkit-api.ts:export interface TagServiceResponse {",
      "src/types/services/stripe-api.ts:export interface StripeCustomer {",
      "src/types/services/stripe-api.ts:export interface StripeSubscription {",
      "src/types/services/stripe-api.ts:export interface StripeSubscriptionItem {",
      "src/types/services/stripe-api.ts:export interface StripePrice {",
      "src/types/services/stripe-api.ts:export interface StripePaymentMethod {",
      "src/types/services/stripe-api.ts:export interface StripeInvoice {",
      "src/types/services/stripe-api.ts:export interface StripeAddress {",
      "src/types/services/stripe-api.ts:export interface StripeShipping {",
      "src/types/services/stripe-api.ts:export interface StripeDiscount {",
      "src/types/services/stripe-api.ts:export interface StripeCoupon {",
      "src/types/services/stripe-api.ts:export interface StripeInvoiceLineItem {",
      "src/types/services/stripe-api.ts:export interface CreateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface UpdateSubscriptionRequest {",
      "src/types/services/stripe-api.ts:export interface CreatePaymentIntentRequest {",
      "src/types/services/stripe-api.ts:export interface CreateCustomerRequest {",
      "src/types/services/stripe-api.ts:export interface StripeServiceResponse<T> extends ApiResponse<T> {",
      "src/types/services/stripe-api.ts:export interface SubscriptionServiceResponse {",
      "src/types/services/stripe-api.ts:export interface PaymentServiceResponse {",
      "src/types/services/stripe-api.ts:export interface CustomerServiceResponse {",
      "src/types/services/webhook-api.ts:export interface WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookVerificationResult {",
      "src/types/services/webhook-api.ts:export interface StripeWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SupabaseWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface ConvertKitWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface GitHubWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface PostHogWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface SentryWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface CustomWebhookPayload extends WebhookPayload {",
      "src/types/services/webhook-api.ts:export interface WebhookHandlerResult {",
      "src/types/services/webhook-api.ts:export interface WebhookConfig {",
      "src/types/services/webhook-api.ts:export interface WebhookProcessingStatus {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistryEntry {",
      "src/types/services/webhook-api.ts:export interface WebhookRegistry {",
      "src/types/services/webhook-api.ts:export interface WebhookServiceResponse extends ApiResponse {",
      "src/types/state-updaters.ts:export interface PerformanceHistoryEntry {",
      "src/types/state-updaters.ts:export interface PreloadingStatus {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface CacheDebugInfo {",
      "src/types/state-updaters.ts:export interface CachePerformanceHistoryEntry {",
      "src/types/struggling-sam.ts:export interface UserStreak {",
      "src/types/struggling-sam.ts:export interface StreakMilestone {",
      "src/types/struggling-sam.ts:export interface StreakReward {",
      "src/types/struggling-sam.ts:export interface SamAchievement {",
      "src/types/struggling-sam.ts:export interface AchievementProgress {",
      "src/types/struggling-sam.ts:export interface AchievementRequirement {",
      "src/types/struggling-sam.ts:export interface SocialEngagement {",
      "src/types/struggling-sam.ts:export interface SocialChallenge {",
      "src/types/struggling-sam.ts:export interface ChallengeParticipant {",
      "src/types/struggling-sam.ts:export interface SocialChallengeReward {",
      "src/types/struggling-sam.ts:export interface ChallengeLeaderboard {",
      "src/types/struggling-sam.ts:export interface SocialProofMetrics {",
      "src/types/struggling-sam.ts:export interface SmartUpgradePrompt {",
      "src/types/struggling-sam.ts:export interface UpgradeDiscount {",
      "src/types/struggling-sam.ts:export interface UpgradeUrgency {",
      "src/types/struggling-sam.ts:export interface UpgradeContext {",
      "src/types/struggling-sam.ts:export interface ABTestGroup {",
      "src/types/struggling-sam.ts:export interface ABTestFeature {",
      "src/types/struggling-sam.ts:export interface ABTestResults {",
      "src/types/struggling-sam.ts:export interface ABTestMetrics {",
      "src/types/struggling-sam.ts:export interface UserABTest {",
      "src/types/struggling-sam.ts:export interface UserABTestMetrics {",
      "src/types/struggling-sam.ts:export interface HabitCelebration {",
      "src/types/struggling-sam.ts:export interface CelebrationTrigger {",
      "src/types/struggling-sam.ts:export interface CelebrationAnimation {",
      "src/types/struggling-sam.ts:export interface CelebrationReward {",
      "src/types/struggling-sam.ts:export interface CelebrationSocialShare {",
      "src/types/struggling-sam.ts:export interface SuccessStory {",
      "src/types/struggling-sam.ts:export interface BeforeAfterStats {",
      "src/types/struggling-sam.ts:export interface RealtimeActivity {",
      "src/types/struggling-sam.ts:export interface ABTestContext {",
      "src/types/subscription.d.ts:export interface RetentionOffer {",
      "src/types/subscription.d.ts:export interface CreateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface UpdateSubscriptionResult {",
      "src/types/subscription.d.ts:export interface CancelSubscriptionResult {",
      "src/types/subscription.d.ts:export interface DiscountValidationResult {",
      "src/types/subscription.d.ts:export interface TrialStartResult {",
      "src/types/subscription.d.ts:export interface FeatureUsageParams {",
      "src/types/subscription.d.ts:export interface DiscountUsageParams {",
      "src/types/subscription.d.ts:export interface FeatureUsageDbRow {",
      "src/types/subscription.d.ts:export interface UserDiscountDbRow {",
      "src/types/subscription.d.ts:export interface ReferralDbRow {",
      "src/types/subscription.d.ts:export interface FreeTierLimits {",
      "src/types/subscription.d.ts:export interface ReferralStats {",
      "src/types/subscription.d.ts:// Extended interfaces for better type safety",
      "src/types/subscription.d.ts:export interface EnhancedBillingUsage extends Record<string, unknown> {",
      "src/types/supabase-api.ts:export interface DatabaseUser {",
      "src/types/supabase-api.ts:export interface DatabaseAlarm {",
      "src/types/supabase-api.ts:export interface DatabaseAlarmEvent {",
      "src/types/supabase-api.ts:export interface DatabaseBattle {",
      "src/types/supabase-api.ts:export interface DatabaseBattleParticipant {",
      "src/types/supabase-api.ts:export interface DatabaseSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseSignUpRequest {",
      "src/types/supabase-api.ts:export interface SupabaseSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabaseOAuthSignInRequest {",
      "src/types/supabase-api.ts:export interface SupabasePasswordResetRequest {",
      "src/types/supabase-api.ts:export interface SupabaseUpdateUserRequest {",
      "src/types/supabase-api.ts:export interface SupabaseQueryFilter {",
      "src/types/supabase-api.ts:export interface SupabaseQueryOptions {",
      "src/types/supabase-api.ts:export interface SupabaseBulkRequest<T> {",
      "src/types/supabase-api.ts:export interface SupabaseBulkResponse<T> {",
      "src/types/supabase-api.ts:export interface SupabaseSubscriptionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeMessage<T = unknown> {",
      "src/types/supabase-api.ts:export interface SupabaseRealtimeSubscription {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadRequest {",
      "src/types/supabase-api.ts:export interface SupabaseFileUploadResponse {",
      "src/types/supabase-api.ts:export interface SupabaseFileMetadata {",
      "src/types/supabase-api.ts:export interface SupabaseSignedUrlRequest {",
      "src/types/supabase-api.ts:export interface SupabaseServiceResponse<T> extends ApiResponse<T> {",
      "src/types/supabase-api.ts:export interface AlarmServiceResponse {",
      "src/types/supabase-api.ts:export interface UserServiceResponse {",
      "src/types/supabase-api.ts:export interface BattleServiceResponse {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionConfig {",
      "src/types/supabase-api.ts:export interface SupabaseConnectionStats {",
      "src/types/supabase-api.ts:export interface SupabasePerformanceMetrics {",
      "src/types/supabase-realtime.ts:export interface DatabaseChangePayload<T = any> {",
      "src/types/supabase-realtime.ts:export interface AlarmChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserSettingsChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface UserPresenceChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface PushSubscriptionChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface AnalyticsEventChangePayload extends DatabaseChangePayload {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelConfig {",
      "src/types/supabase-realtime.ts:export interface RealtimeSubscription {",
      "src/types/supabase-realtime.ts:export interface RealtimeChannelManager {",
      "src/types/supabase-realtime.ts:export interface PresenceState {",
      "src/types/supabase-realtime.ts:export interface PresenceInfo {",
      "src/types/supabase-realtime.ts:export interface PresenceManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastMessage<T = any> {",
      "src/types/supabase-realtime.ts:export interface BroadcastManager {",
      "src/types/supabase-realtime.ts:export interface BroadcastDeliveryStatus {",
      "src/types/supabase-realtime.ts:export interface SyncCoordinationResult {",
      "src/types/supabase-realtime.ts:export interface SyncConflictResolution {",
      "src/types/supabase-realtime.ts:export interface ChannelStatus {",
      "src/types/supabase-realtime.ts:export interface RealtimeConnectionMetrics {",
      "src/types/supabase-realtime.ts:export interface RealtimeError {",
      "src/types/supabase-realtime.ts:export interface RealtimeRecoveryStrategy {",
      "src/types/supabase-realtime.ts:export interface RealtimeHealthCheck {",
      "src/types/supabase-realtime.ts:export interface HealthCheckResult {",
      "src/types/tabProtection.ts:export interface TabProtectionSettings {",
      "src/types/user.ts:export interface AppUser {",
      "src/types/utility-types.ts:export interface BaseResponse {",
      "src/types/utility-types.ts:export interface ErrorResponse extends BaseResponse {",
      "src/types/utility-types.ts:export interface SuccessResponse<T = unknown> extends BaseResponse {",
      "src/types/utility-types.ts:export interface BaseProps {",
      "src/types/utility-types.ts:export interface Metadata extends Record<string, unknown> {} // type-safe replacement for metadata: any",
      "src/types/utility-types.ts:export interface Config extends Record<string, unknown> {} // type-safe replacement for config: any",
      "src/types/utility-types.ts:export interface Settings extends Record<string, unknown> {} // type-safe replacement for settings: any",
      "src/types/utility-types.ts:export interface RetentionOffer {",
      "src/types/utility-types.ts:export interface SleepPatternData {",
      "src/types/utility-types.ts:export interface VoiceSettings {",
      "src/types/utility-types.ts:export interface EscalationStrategy {",
      "src/types/utility-types.ts:export interface MotivationalContent {",
      "src/types/utils.ts:export interface CapacitorBackButtonEvent {",
      "src/types/utils.ts:export interface CapacitorAppUrlOpenEvent {",
      "src/types/utils.ts:export interface CapacitorNetworkEvent {",
      "src/types/utils.ts:export interface CapacitorBatteryEvent {",
      "src/types/utils.ts:export interface SecurityAlertDetail {",
      "src/types/utils.ts:export interface SecurityAlertEvent extends CustomEvent {",
      "src/types/utils.ts:export interface AlarmTamperDetail {",
      "src/types/utils.ts:export interface AlarmTamperEvent extends CustomEvent {",
      "src/types/utils.ts:export interface StripeWebhookEvent {",
      "src/types/websocket.ts:export interface WebSocketMessage<T = any> {",
      "src/types/websocket.ts:export interface WebSocketConfig {",
      "src/types/websocket.ts:export interface WebSocketConnectionInfo {",
      "src/types/websocket.ts:export interface DeviceInfo {",
      "src/types/websocket.ts:export interface WebSocketError {",
      "src/types/websocket.ts:export interface WebSocketEventHandlers {",
      "src/types/websocket.ts:export interface WebSocketMetrics {",
      "src/types/websocket.ts:export interface WebSocketManager {",
      "src/types/websocket.ts:export interface WebSocketAuthPayload {",
      "src/types/websocket.ts:export interface WebSocketAuthResponse {",
      "src/types/websocket.ts:export interface WebSocketSubscription {",
      "src/types/websocket.ts:export interface WebSocketSubscriptionManager {",
      "src/types/websocket.ts:export interface WebSocketRateLimit {",
      "src/types/websocket.ts:export interface WebSocketRateLimitStatus {",
      "src/types/websocket.ts:export interface WebSocketMessageQueue {",
      "src/types/websocket.ts:export interface QueuedMessage {",
      "src/types/websocket.ts:export interface WebSocketPool {",
      "src/utils/accessibility.ts:export interface ColorContrastResult {",
      "src/utils/advancedTranslationValidator.ts:export interface QualityScore {",
      "src/utils/advancedTranslationValidator.ts:export interface CulturalIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface ConsistencyIssue {",
      "src/utils/advancedTranslationValidator.ts:export interface AdvancedValidationResult {",
      "src/utils/advancedTranslationValidator.ts:export interface PerformanceMetrics {",
      "src/utils/enhanced-focus.ts:export interface FocusSettings {",
      "src/utils/enhanced-focus.ts:export interface FocusState {",
      "src/utils/fallback-strategies.tsx:export interface FallbackState {",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateConfig {",
      "src/utils/frame-rate-manager.tsx:export interface FrameMetrics {",
      "src/utils/frame-rate-manager.tsx:export interface FrameRateMonitorProps {",
      "src/utils/image-optimization.tsx:export interface ImageOptimizationOptions {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageData {",
      "src/utils/image-optimization.tsx:export interface OptimizedImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {",
      "src/utils/keyboard-navigation.ts:export interface KeyboardShortcut {",
      "src/utils/keyboard-navigation.ts:export interface NavigationState {",
      "src/utils/mobile-accessibility.ts:export interface TouchGesture {",
      "src/utils/mobile-accessibility.ts:export interface MobileAccessibilityState {",
      "src/utils/mobile-accessibility.ts:export interface MobileDevice {",
      "src/utils/network-optimization.tsx:export interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface BatchRequestOptions {",
      "src/utils/network-optimization.tsx:export interface CacheEntry<T = any> {",
      "src/utils/network-optimization.tsx:export interface NetworkStats {",
      "src/utils/network-optimization.tsx:  interface NetworkRequest {",
      "src/utils/network-optimization.tsx:export interface NetworkStatusProps {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlert {",
      "src/utils/performance-alerts.tsx:export interface AlertRule {",
      "src/utils/performance-alerts.tsx:export interface AlertAction {",
      "src/utils/performance-alerts.tsx:export interface PerformanceTrend {",
      "src/utils/performance-alerts.tsx:export interface OptimizationSuggestion {",
      "src/utils/performance-alerts.tsx:export interface PerformanceAlertDisplayProps {",
      "src/utils/performance-profiler.ts:interface PerformanceEntry {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveLoadConfig {",
      "src/utils/progressive-loading.tsx:export interface LoadingState {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveWrapperProps {",
      "src/utils/progressive-loading.tsx:export interface SkeletonProps {",
      "src/utils/progressive-loading.tsx:export interface ProgressiveImageProps",
      "src/utils/pwa.ts:// Extend Navigator interface for additional properties",
      "src/utils/pwa.ts:  interface ServiceWorkerRegistration {",
      "src/utils/pwa.ts:export interface PWAInstallEvent extends Event {",
      "src/utils/pwa.ts:interface WakeLockSentinel {",
      "src/utils/rtl-testing.tsx:interface RTLRenderOptions extends Omit<RenderOptions, 'wrapper'> {",
      "src/utils/screen-reader.ts:export interface ScreenReaderState {",
      "src/utils/screen-reader.ts:export interface AlarmAnnouncement {",
      "src/utils/translationValidation.ts:export interface TranslationStructure {",
      "src/utils/translationValidation.ts:export interface ValidationResult {",
      "src/utils/translationValidation.ts:export interface ValidationIssue {",
      "src/utils/validation.ts:export interface ValidationResult {",
      "src/utils/validation.ts:export interface AlarmValidationErrors extends Record<string, string> {",
      "src/utils/voice-accessibility.ts:export interface VoiceCommand {",
      "src/utils/voice-accessibility.ts:export interface VoiceAccessibilityState {",
      "src/vite-env.d.ts:  interface ServiceWorkerGlobalScope {",
      "src/vite-env.d.ts:  interface ImportMeta {",
      "src/vite-env.d.ts:  interface Component<P = {}, S = {}, SS = any> {"
    ],
    "error": [
      "src/__tests__/mocks/msw-handlers.ts:export const errorHandlers = [",
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting theme:', _error);",
      "src/components/CustomThemeManager.tsx:      console._error('Error exporting themes:', _error);",
      "src/components/ThemeCustomizationStudio.tsx:      console._error('Failed to export theme:', _error);",
      "src/config/stripe.ts:export function validateStripeConfig(): { isValid: boolean; errors: string[] } {",
      "src/hooks/__tests__/useAdvancedAlarms.test.ts:    it.todo('should handle export errors');",
      "src/services/__tests__/error-handler.test.ts:    test('exports _error data for debugging', () => {",
      "src/services/privacy-compliance.ts:      console.error('Failed to create data export:', _error);",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/utils.ts:export const failure = <E = Error>(_error: E): Result<never, E> => ({",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'auth_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'api_error', _error });",
      "src/__tests__/api/api-testing-utilities.ts:      results.push({ type: 'network_error', _error });",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'card_error';",
      "src/__tests__/mocks/stripe.mock.ts:      type = 'invalid_request_error';",
      "src/__tests__/payments/payment-testing-utilities.ts:        type: 'card_error',",
      "src/__tests__/realtime/realtime-testing-utilities.ts:      type: 'error',",
      "src/__tests__/services/realtime-service.integration.test.ts:          this.emit('_error', { type: 'INVALID_MESSAGE', _error });",
      "src/__tests__/services/realtime-service.integration.test.ts:      this.emit('_error', { type: 'SEND_FAILED', _error });",
      "src/__tests__/types/websocket-types.unit.test.ts:      expect(typeof _error.recoverable).toBe('boolean');",
      "src/__tests__/types/websocket-types.unit.test.ts:          message: `Test ${type} _error`,",
      "src/__tests__/utils/accessibility-helpers.ts:  type: '_error' | 'warning';",
      "src/__tests__/utils/accessibility-helpers.ts:        type: '_error',",
      "src/__tests__/utils/accessibility-helpers.ts:          type: '_error',",
      "src/__tests__/utils/async-helpers.ts:    Promise.reject(typeof error === 'string' ? new Error(_error) : error),",
      "src/backend/performance-monitoring.ts:                type: error.error_category,",
      "src/components/ErrorBoundaryTest.tsx:    // Trigger different types of errors",
      "src/components/ErrorBoundaryTest.tsx:      case 'type-error':",
      "src/components/RealtimeDemo.tsx:                  Type: {_error.type} | Severity: {_error.severity}",
      "src/components/__tests__/RootErrorBoundary.test.tsx:    (_error as any).type = errorType;",
      "src/components/animations/AnimationLibrary.tsx:  type: 'success' | '_error' | 'warning' | 'info';",
      "src/components/user-testing/UsabilityAnalyticsDashboard.tsx:      .filter((e: any) => e.type === 'error')",
      "src/hooks/useAuthAnnouncements.ts:    (type: 'fingerprint' | 'face' | 'voice', _error: string) => {",
      "src/hooks/useAuthAnnouncements.ts:        `${type} authentication failed: ${_error}. Please try again or use alternative method.`,",
      "src/hooks/useCapacitor.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useFormAnnouncements.ts:        type: '_error',",
      "src/hooks/useMobileTouch.ts:      type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/hooks/useProfileAnnouncements.ts:        type: '_error',",
      "src/hooks/useScreenReaderAnnouncements.ts:          type: '_error',",
      "src/hooks/useSettingsAnnouncements.ts:        type: '_error',",
      "src/reducers/__tests__/alarmReducer.test.ts:    it('should handle ALARM_CREATE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_UPGRADE_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/subscriptionReducer.test.ts:    it('should handle SUBSCRIPTION_LOAD_ERROR with typed error payload', () => {",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_ERROR with typed error payload', () => {",
      "src/services/alarm-executor.ts:        console._error('Error applying optimization:', optimization.type, _error);",
      "src/services/alarm-executor.ts:        console._error(`Error evaluating conditional rule ${rule.type}:`, _error);",
      "src/services/api-service.ts: * Demonstrates improved type safety and standardized error handling",
      "src/services/base/BaseService.ts:    if (typeof (globalThis as any).errorReporter?.report === 'function') {",
      "src/services/capacitor-enhanced.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/error-handler.ts:        type: e._error.constructor.name,",
      "src/services/mobile-touch.ts:    type: 'light' | 'medium' | 'heavy' | 'success' | 'warning' | '_error' = 'light'",
      "src/services/performance-analytics.ts:      console.warn(`Failed to observe ${type} performance entries:`, _error);",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:          type: '_error',",
      "src/services/sound-effects.ts:        type: '_error',",
      "src/services/sound-effects.ts:    const isValid = issues.filter(issue => issue.type === '_error').length === 0;",
      "src/services/types/media.ts:export type LoadingState = 'idle' | 'loading' | 'loaded' | 'error' | 'cached';",
      "src/services/user-testing.ts:      type: '_error',",
      "src/types/app-state.ts:  | { type: 'ALARM_UPDATE_ERROR'; payload: { id: string; _error: string } }",
      "src/types/custom-sound-themes.ts:  type: '_error' | 'warning' | 'info';",
      "src/types/global.d.ts:type Result<T, E = Error> = { success: true; data: T } | { success: false; _error: E };",
      "src/types/helpers.d.ts:export type ErrorCallback = (_error: Error | any) => void; // auto",
      "src/types/realtime-messages.ts:  type: 'info' | 'warning' | '_error' | 'success' | 'maintenance';",
      "src/utils/performance-alerts.tsx:  type: 'warning' | 'error' | 'critical' | 'info';",
      "src/utils/performance-alerts.tsx:          { type: 'storage', _config: { key: 'critical_errors' } },",
      "src/utils/performance-alerts.tsx:        console._error(`[PerformanceAlert] Action ${action.type} failed:`, _error);",
      "src/utils/performance-alerts.tsx:                    : alert.type === '_error'"
    ],
    "fn": [
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigate = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useLocation = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useSearchParams = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useRoutes = vi.fn((routes: any[], locationArg?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _BrowserRouter = vi.fn(({ children, basename }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Router = vi.fn(({ children, location, navigator }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Routes = vi.fn(({ children, location }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Route = vi.fn(({ path, element, _index, children }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Link = vi.fn(",
      "src/__tests__/mocks/react-router.mock.ts:export const _NavLink = vi.fn(({ to, children, className, style, ...props }) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const NavLink = jest.fn(",
      "src/__tests__/mocks/react-router.mock.ts:export const _Navigate = vi.fn(({ to, replace, state }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _Outlet = vi.fn(({ context }: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useOutletContext = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useNavigationType = vi.fn(() => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _useResolvedPath = vi.fn((to: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _matchPath = vi.fn((pattern: any, pathname: string) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _generatePath = vi.fn((path: string, params?: Record<string, string>) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _createBrowserRouter = vi.fn((routes: any[], options?: any) => {",
      "src/__tests__/mocks/react-router.mock.ts:export const _RouterProvider = vi.fn(({ router, fallbackElement }: any) => {",
      "src/__tests__/mocks/stripe.mock.ts:export const _loadStripe = vi.fn((publishableKey: string, options?: any) => {",
      "src/__tests__/providers/context-providers.tsx:  exportTheme: jest.fn(),",
      "src/__tests__/providers/service-providers.tsx:  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),",
      "src/__tests__/providers/test-providers.tsx:    exportTheme: jest.fn(),",
      "src/__tests__/setup/after-env-setup.ts:        exportKey: jest.fn(() => Promise.resolve(new ArrayBuffer(32))),",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertNoErrors = async (fn: () => Promise<any> | any) => {",
      "src/__tests__/utils/render-helpers.ts:    exportThemes: jest.fn(() => Promise.resolve(JSON.stringify({ themes }))),",
      "src/hooks/__tests__/useTheme.test.tsx:      exportThemes: jest.fn().mockResolvedValue('{}'),",
      "src/__tests__/utils/animation-helpers.tsx:    Element.prototype.animate = jest.fn(() => mockAnimation);",
      "src/components/SmartUpgradePrompt.tsx:          transition={{ type: 'spring', damping: 25, stiffness: 300 }}",
      "src/components/animations/AnimationLibrary.tsx:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/components/animations/AnimationLibrary.tsx:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/components/animations/AnimationLibrary.tsx:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/components/animations/AnimationLibrary.tsx:        transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:        transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/components/animations/AnimationLibrary.tsx:          transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:      transition={{ type: 'spring' as const, stiffness: 120, damping: 20 }}",
      "src/components/animations/AnimationLibrary.tsx:          transition: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/components/animations/LoadingStates.tsx:          transition={{ type: 'spring' as const, stiffness: 300, damping: 30 }}",
      "src/components/animations/MicroInteractions.tsx:                    transition={{ type: 'spring' as const, stiffness: 300 }}",
      "src/components/animations/MicroInteractions.tsx:            scale: { duration: 0.2, type: 'spring' as const, stiffness: 300 },",
      "src/hooks/useAnimations.ts:  gentle: { type: 'spring' as const, stiffness: 120, damping: 20 },",
      "src/hooks/useAnimations.ts:  bouncy: { type: 'spring' as const, stiffness: 200, damping: 10 },",
      "src/hooks/useAnimations.ts:  snappy: { type: 'spring' as const, stiffness: 300, damping: 30 },",
      "src/hooks/useAnimations.ts:  smooth: { type: 'spring' as const, stiffness: 100, damping: 25 },",
      "src/hooks/useAnimations.ts:  elastic: { type: 'spring' as const, stiffness: 400, damping: 8 },",
      "src/test-setup.ts:  HTMLCanvasElement.prototype.getContext = vi.fn().mockImplementation(function ("
    ],
    "index": [
      "src/__tests__/mocks/react-router.mock.ts:export const _Route = vi.fn(({ path, element, _index, children }: any) => {",
      "src/__tests__/utils/storage-helpers.ts:export const _indexedDBMocks = {",
      "src/__tests__/utils/storage-helpers.ts:export const indexedDBMocks = _indexedDBMocks;",
      "src/analytics/PersonaAnalytics.tsx:} from '../types/index';",
      "src/backend/api.ts:} from '../types/index';",
      "src/backend/monitoring-integration.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/backend/performance-monitoring.ts:import type { D1Database, KVNamespace } from '../types/index';",
      "src/components/AIAutomation.tsx:} from '../types/index';",
      "src/components/ActiveAlarm.tsx:import type { Alarm, AlarmDifficulty, AlarmInstance } from '../types/index';",
      "src/components/AdvancedAlarmScheduling.tsx:} from '../types/index';",
      "src/components/AdvancedAnalytics.tsx:} from '../types/index';",
      "src/components/AlarmManagement.tsx:import type { Alarm, DayOfWeek, AlarmDifficulty, VoiceMood } from '../types/index';",
      "src/components/AlarmTester.tsx:} from '../types/index';",
      "src/components/BattleSystem.tsx:} from '../types/index';",
      "src/components/CommunityHub.tsx:} from '../types/index';",
      "src/components/EnhancedBattles.tsx:import type { Tournament, Team, Season, User as UserType } from '../types/index';",
      "src/components/FriendsManager.tsx:import type { User as UserType, UserStats, Friendship } from '../types/index';",
      "src/components/Gamification.tsx:} from '../types/index';",
      "src/components/MediaContent.tsx:} from '../types/index';",
      "src/components/QuickAlarmSetup.tsx:import type { DayOfWeek } from '../types/index';",
      "src/components/SmartFeatures.tsx:} from '../types/index';",
      "src/hooks/useAlarmRingingAnnouncements.ts:import type { Alarm } from '../types/index';",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useFocusTrap.ts:            Array.prototype.indexOf.call(",
      "src/hooks/useMediaContentAnnouncements.ts:} from '../types/index';",
      "src/hooks/useSmartFeaturesAnnouncements.ts:} from '../types/index';",
      "src/services/advanced-alarm-scheduler.ts:} from '../types/index';",
      "src/services/alarm-battle-integration.ts:import { Alarm, Battle, User, BattleParticipant, AlarmInstance } from '../types/index';",
      "src/services/alarm-executor.ts:} from '../types/index';",
      "src/services/alarm-parser.ts:import type { Alarm, RecurrencePattern } from '../types/index';",
      "src/services/analytics.ts:      deployment_type: version.indexOf('hotfix') !== -1 ? 'hotfix' : 'release',",
      "src/services/battle.ts:} from '../types/index';",
      "src/services/enhanced-battle.ts:} from '../types/index';",
      "src/services/ml-alarm-optimizer.ts:} from '../types/index';",
      "src/services/offline-gaming.ts:} from '../types/index';",
      "src/services/predictive-analytics-service.ts:} from '../types/index';",
      "src/services/scheduler-core.ts:} from '../types/index';",
      "src/services/typed-realtime-service.ts:        indexedDB: typeof indexedDB !== 'undefined',",
      "src/types/realtime-messages.ts:import type { Alarm, VoiceMood, User, Battle } from './index';",
      "src/types/user.ts:import type { User } from './index';"
    ],
    "initial": [
      "src/__tests__/mocks/enhanced-service-mocks.ts:export const initializeAllMockServices = async (",
      "src/components/AdaptiveModal.tsx:export function useAdaptiveModal(initialOpen = false) {",
      "src/config/initializeApp.ts:export const initializeApp = async (): Promise<void> => {",
      "src/services/analytics.ts:export function initializeAnalytics(",
      "src/services/capacitor.ts:export const initializeCapacitor = async (): Promise<CapacitorInitResult> => {",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:    type: initialType as UserFeedback['type'],",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:      type: initialType as UserFeedback['type'],",
      "src/constants/initialDomainState.ts: * Provides properly typed initial state that matches the AppState interface",
      "src/services/app-analytics.ts:        type: 'initial_load',",
      "src/types/service-architecture.ts:    typeof obj.initialize === 'function' &&"
    ],
    "persona": [
      "src/data/emotional-message-templates.ts:export function personalizeMessage(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.theme).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.colorPreferences.colorblindFriendly).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.typographyPreferences.preferredFontSize).toBe(",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.motionPreferences.enableAnimations).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.soundPreferences.enableSounds).toBe('boolean');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof personalization.layoutPreferences.density).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        typeof personalization.accessibilityPreferences.screenReaderOptimized",
      "src/components/PersonaDrivenUI.tsx:// Adapts interface based on user persona and subscription tier"
    ],
    "prefix": [
      "src/__tests__/factories/factory-utils.ts:export const _generateId = (prefix = '') => {",
      "src/types/utils.ts:export const createBrandedId = <B>(prefix: string) => {",
      "src/utils/manual-stubs.ts:// export function generateId(prefix?: string): string {"
    ],
    "soundEffectsService": [
      "src/services/sound-effects.ts:export const soundEffectsService = SoundEffectsService.getInstance();"
    ],
    "tier": [
      "src/config/stripe.ts:export function getPlanByTier(tier: string) {",
      "src/types/subscription.d.ts:export declare function isValidSubscriptionTier(tier: string): boolean;",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.tier).toBe('string');",
      "src/components/PersonaDrivenUI.tsx:// Adapts interface based on user persona and subscription tier"
    ],
    "timer": [
      "src/__tests__/utils/async-helpers.ts:export const _timerUtils = {",
      "src/__tests__/utils/async-helpers.ts:export const timerUtils = _timerUtils;",
      "src/analytics/PersonaAnalytics.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AccessibilityDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ActiveAlarm.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AdaptiveButton.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AdaptiveModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmForm.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmList.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmRinging.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmThemeBrowser.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/AlarmThemeSelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/CSRFProtection.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ComprehensiveSecurityDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/EmotionalNudgeModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/EnhancedMediaContent.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ErrorBoundaryTest.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ExtendedScreenReaderTester.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/HabitCelebration.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/MobileAccessibilityProvider.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/MobileTester.tsx:// import { TimeoutHandle } from '../types/timers';",
      "src/components/NuclearModeBattle.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/NuclearModeChallenge.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OfflineDiagnostics.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OfflineIndicator.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/OnboardingFlow.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PWAInstallPrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PerformanceDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PerformanceProfilerWrapper.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PersonaFocusDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PremiumThemeShowcase.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/PushNotificationTester.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/RootErrorBoundary.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/ScreenReaderProvider.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SettingsPage.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SmartAlarmDashboard.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SmartUpgradePrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SocialProof.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundPreviewSystem.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundSettings.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SoundThemeDemo.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/StreakCounter.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/SyncStatus.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/TabProtectionWarning.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/UserProfile.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/VoicePersonalitySelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/VoiceSelector.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/WakeUpFeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/animations/AnimationLibrary.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/animations/MicroInteractions.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/EnhancedUpgradePrompt.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PaymentFlow.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PremiumFeaturePreview.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/PsychologyDrivenCTA.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/SubscriptionManagement.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/premium/SubscriptionPage.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/BugReportModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/FeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/FeedbackWidget.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/components/user-testing/RedesignedFeedbackModal.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/contexts/FeatureAccessContext.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/contexts/LanguageContext.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAnimations.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAudioLazyLoading.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useAuth.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useCapacitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useCriticalPreloading.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useDynamicFocus.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useEnhancedCaching.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useEnhancedServiceWorker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFocusRestoration.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFocusTrap.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useFormAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useMobilePerformance.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/usePushNotifications.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useScreenReaderAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useSubscription.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useTabProtectionAnnouncements.ts:import { TimeoutHandle } from '../types/timers';",
      "src/hooks/useTheme.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/services/CloudSyncService.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-access-control.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-api-security.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-backup-redundancy.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-enhanced.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-integrity-monitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-rate-limiting.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm-security-integration.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/alarm.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/animation-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/app-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/audio-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/critical-preloader.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/custom-sound-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/device-capabilities.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/email-campaign.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/enhanced-cache-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/enhanced-location-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/error-handler.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/feature-gate-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/lazy-audio-loader.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/ml-alarm-optimizer.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/mobile-touch.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/notification.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-gaming.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/offline-sleep-tracker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-analytics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-budget-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/performance-monitor.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/predictive-analytics-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/pwa-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/real-time-smart-adapter.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/realtime-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/scheduler-core.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/secure-alarm-storage.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/secure-push-notification.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/security-monitoring-forensics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/smart-notification-service.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/sound-effects.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/supabase.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/theme-accessibility.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-biometrics.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-enhanced.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice-pro.ts:import { TimeoutHandle } from '../types/timers';",
      "src/services/voice.ts:import { TimeoutHandle } from '../types/timers';",
      "src/test-setup.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/analysis-worker.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/frame-rate-manager.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/image-optimization.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/lazy-loading.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/mobile-accessibility.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/network-optimization.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/performance-alerts.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/performance-profiler.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/progressive-loading.tsx:import { TimeoutHandle } from '../types/timers';",
      "src/utils/service-worker-manager.ts:import { TimeoutHandle } from '../types/timers';",
      "src/utils/voice-accessibility.ts:import { TimeoutHandle } from '../types/timers';"
    ],
    "useState": [
      "src/components/ThemeCustomizationStudio.tsx:  const [exportFormat, setExportFormat] = useState<'json' | 'css' | 'scss'>('json');",
      "src/components/premium/PremiumAnalytics.tsx:  const [exportFormat, setExportFormat] = useState('pdf');",
      "src/hooks/useScreenReaderAnnouncements.ts:export function useStateChangeAnnouncements<T>(",
      "src/types/state-updaters.ts: * These types help ensure proper typing for React useState setters"
    ],
    "useTheme": [
      "src/__tests__/providers/context-providers.tsx:export const _useThemeTest = () => useContext(ThemeTestContext);",
      "src/hooks/useCulturalTheme.tsx:export const useThemeContext = (): CulturalThemeContextValue => {",
      "src/hooks/useCulturalTheme.tsx:export const useThemeStyles = () => {",
      "src/hooks/useTheme.tsx:export function useTheme(): ThemeContextValue {",
      "src/hooks/useTheme.tsx:export default useTheme;"
    ],
    "user": [
      "src/__tests__/factories/core-factories.ts:export const _createTestBattleParticipant = (userId?: string): BattleParticipant => {",
      "src/__tests__/factories/gaming-factories.ts:export const _createTestTeamMember = (userId?: string): TeamMember => ({",
      "src/__tests__/factories/support-factories.ts:export const _createTestAppSettings = (userId?: string): AppSettings =>",
      "src/__tests__/factories/support-factories.ts:export const _createTestUserActivity = (userId?: string): UserActivity => {",
      "src/__tests__/utils/assertion-helpers.ts:export const _assertValidUser = (_user: any): user is TestUser => {",
      "src/__tests__/utils/index.ts:export { default as userEvent } from '@testing-library/user-event';",
      "src/components/AlarmTester.tsx:export function AlarmTester({ onClose, userId = 'demo-_user' }: AlarmTesterProps) {",
      "src/components/PersonaDrivenUI.tsx:export function usePersonaDetection(userId: string, userBehavior: any) {",
      "src/components/PersonaDrivenUI.tsx:export function PersonaFeatureHighlights({ userPersona }: { userPersona: string }) {",
      "src/components/QuickAlarmSetup.tsx:export function QuickAlarmSetup({ onAlarmSet, userId }: QuickAlarmSetupProps) {",
      "src/components/Statistics.tsx:export function Statistics({ userId }: StatisticsProps) {",
      "src/components/StrugglingSamWrapper.tsx:export const usePersonaBasedFeatures = (_user?: any) => {",
      "src/components/user-testing/index.ts:export { default as UserTestingService } from '../../services/user-testing';",
      "src/hooks/useABTesting.tsx:export const useABTesting = (userId?: string) => {",
      "src/hooks/useABTesting.tsx:export const useABTestComponent = (featureKey: FeatureKey, userId?: string) => {",
      "src/hooks/useEmotionalNotifications.ts:export function useEmotionalNotificationSettings(userId: string) {",
      "src/reducers/userReducer.ts:export const userReducer = (",
      "src/services/additional-app-specific-test-scenarios.ts:    tags: ['privacy', 'data-export', 'user-rights'],",
      "src/stories/Header.tsx:export const Header = ({ _user, onLogin, onLogout, onCreateAccount }: HeaderProps) => (",
      "src/tests/alarm-themes-integration.test.ts:    it('should handle export/import of _user themes', () => {",
      "src/types/user.ts:export function normalizeUserSubscription(_user: Partial<User | AppUser>): User {",
      "src/types/user.ts:export function isPremiumUser(_user: User | AppUser | null | undefined): boolean {",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.id).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.email).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.username).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.subscriptionTier).toBe('string');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.level).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:      expect(typeof _user.experience).toBe('number');",
      "src/__tests__/factories/core-factories-type-safety.test.ts:        expect(typeof subscription.userId).toBe('string');",
      "src/__tests__/factories/enhanced-factories.test.ts:      expect(typeof metrics.userSatisfaction).toBe('number');",
      "src/__tests__/helpers/comprehensive-test-helpers.ts:import type { UserEvent } from '@testing-library/user-event';",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          if (message.type === 'user_presence_update') {",
      "src/__tests__/integration/websocket-realtime.integration.test.ts:          type: 'user_presence_update',",
      "src/__tests__/mocks/websocket-type-mocks.ts:      typeof device.userAgent === 'string' &&",
      "src/__tests__/services/realtime-service.integration.test.ts:      expect(sentMessages[0]?.type).toBe('user_presence_update');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_presence_update',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(receivedMessages[1]?.type).toBe('user_presence_update');",
      "src/__tests__/services/websocket-manager.integration.test.ts:        type: 'user_activity',",
      "src/__tests__/services/websocket-manager.integration.test.ts:      expect(sub2?.type).toBe('user_activity');",
      "src/__tests__/services/websocket-manager.integration.test.ts:      const subId2 = wsManager.subscribe({ type: 'user_activity', priority: 'normal' });",
      "src/__tests__/types/websocket-types.unit.test.ts:        type: 'user_presence_update',",
      "src/__tests__/utils/assertion-helpers.ts:      typeof received.userId === 'string' &&",
      "src/backend/api.ts:// GET  /api/battles - List battles (with type, status, userId filters)",
      "src/backend/database-types.ts:    typeof obj === 'object' && obj !== null && 'alarm_id' in obj && 'user_id' in obj",
      "src/backend/performance-monitoring.ts:        type: 'user_pattern',",
      "src/components/ui/__tests__/input.a11y.test.tsx:          <Input id=\"good-placeholder\" type=\"email\" placeholder=\"_user@example.com\" />",
      "src/contexts/StrugglingsamContext.tsx:  | { type: 'TRACK_CONVERSION'; payload: { testId: string; userId: string } }",
      "src/contexts/StrugglingsamContext.tsx:      dispatch({ type: 'SET_ERROR', payload: 'Failed to load _user data' });",
      "src/contexts/StrugglingsamContext.tsx:          type: 'user_count',",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_CONVERSION', payload: { testId, userId } });",
      "src/contexts/StrugglingsamContext.tsx:    dispatch({ type: 'TRACK_ENGAGEMENT', payload: { testId, userId, action } });",
      "src/reducers/__tests__/userReducer.test.ts:    it('should handle USER_LOGIN_SUCCESS with typed user payload', () => {",
      "src/services/alarm-access-control.ts:type UserRole = 'user' | 'premium' | 'admin';",
      "src/services/alarm-access-control.ts:    return limits[role][action as keyof typeof limits.user] || 10;",
      "src/services/contextual-themes.ts:      context: [{ type: 'pattern', value: 'user-history', weight: 1 }],",
      "src/services/custom-test-scenarios.ts:    // If test specifies user types, check if current _user type is included",
      "src/services/privacy-compliance.ts:        this.setConsent(type as keyof ConsentSettings, granted, source, userId);",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/real-time-smart-adapter.ts:          type: 'user_behavior',",
      "src/services/typed-realtime-service.ts:        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Node.js',",
      "src/services/typed-realtime-service.ts:      if (message.type === 'user_presence_update') {",
      "src/services/types/performance.ts:  type: 'memory' | 'fps' | 'network' | 'render' | 'user';",
      "src/types/analytics.d.ts: * Comprehensive types for revenue analytics, user journey tracking, and feature adoption metrics",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'subscription_status' | 'engagement_level';",
      "src/types/email-campaigns.ts:  type: 'user_action' | 'time_based' | 'data_change' | 'external_event';",
      "src/types/realtime-messages.ts: * Specific message types and payloads for alarm and user activity real-time communication",
      "src/components/PersonaDrivenUI.tsx:// Adapts interface based on user persona and subscription tier"
    ]
  },
  "not_found": [
    "AddEventListenerOptions",
    "Award",
    "BlobPart",
    "BufferSource",
    "FetchEvent",
    "Gift",
    "Heart",
    "IDBDatabaseEventMap",
    "IDBObjectStoreParameters",
    "IDBPDatabase",
    "IDBTransactionMode",
    "Lightbulb",
    "Loader2",
    "MessageSquare",
    "NavigationTiming",
    "PerformanceEntryList",
    "PushEvent",
    "RegistrationOptions",
    "ServiceWorkerContainerEventMap",
    "Sparkles",
    "TrendingUp",
    "Users",
    "Zap",
    "_persona",
    "alarmOrNotification",
    "currentTier",
    "newTier",
    "openDB",
    "paymentMethodId",
    "rippleId",
    "setUserTier",
    "useEffect",
    "userTier"
  ],
  "react_related": [
    "React",
    "useEffect",
    "useState",
    "useTheme"
  ],
  "lucide_related": [
    "Badge",
    "Calendar",
    "Gift",
    "Heart",
    "Lightbulb",
    "Loader2",
    "Mail",
    "MessageSquare",
    "Send",
    "Sparkles",
    "TrendingUp",
    "Users",
    "X",
    "Zap"
  ],
  "ui_components": [
    "Button",
    "Card",
    "CardContent",
    "Progress",
    "RTLContainer",
    "RTLFlex",
    "RTLForm",
    "RTLGrid",
    "RTLText",
    "Textarea"
  ],
  "types_from_files": [
    "ApiError",
    "ApiResponse",
    "AppInfo",
    "AppState",
    "HttpClient",
    "HttpError",
    "PaginatedResponse",
    "PaginationParams",
    "PremiumFeature",
    "SubscriptionTier",
    "Theme",
    "ThemePreset",
    "WebhookPayload"
  ],
  "capacitor_related": [
    "Alarm",
    "BackgroundMode",
    "KeepAwake",
    "Network"
  ],
  "web_apis": [
    "AddEventListenerOptions",
    "BlobPart",
    "BufferSource",
    "IDBDatabaseEventMap",
    "IDBObjectStoreParameters",
    "IDBPDatabase",
    "IDBTransactionMode",
    "NavigationTiming",
    "PerformanceEntryList",
    "ServiceWorkerContainerEventMap",
    "SpeechRecognition",
    "TimeoutHandle"
  ],
  "variables": [
    "App",
    "alarms",
    "analytics",
    "config",
    "error",
    "persona",
    "soundEffectsService",
    "tier",
    "timer",
    "user"
  ]
}