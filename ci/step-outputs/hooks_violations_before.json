[
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/context-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useFeatureAccessTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 57,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 57,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'date' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 116,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'currency' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 117,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 52
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useLanguageTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 142,
        "column": 39,
        "nodeType": "Identifier",
        "endLine": 142,
        "endColumn": 49
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 248,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 248,
        "endColumn": 46
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useThemeTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 364,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 364,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Context-Specific Test Providers\n *\n * Individual test providers for each application context with realistic mock implementations\n * and helper functions for testing context-dependent components.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\n\n// ===============================\n// FEATURE ACCESS CONTEXT\n// ===============================\n\nexport interface MockFeatureAccessContextValue {\n  hasAccess: jest.MockedFunction<(feature: string) => boolean>;\n  checkFeatureAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  isFeatureEnabled: jest.MockedFunction<(feature: string) => boolean>;\n  upgradeRequired: jest.MockedFunction<(feature: string) => boolean>;\n  getFeatureLimit: jest.MockedFunction<(feature: string) => number>;\n  getRemainingUsage: jest.MockedFunction<(feature: string) => number>;\n  trackFeatureUsage: jest.MockedFunction<(feature: string) => void>;\n  premiumFeatures: string[];\n  ultimateFeatures: string[];\n  currentTier: 'free' | 'premium' | 'ultimate';\n}\n\nconst defaultFeatureAccessValue: MockFeatureAccessContextValue = {\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  getFeatureLimit: jest.fn(() => 100),\n  getRemainingUsage: jest.fn(() => 50),\n  trackFeatureUsage: jest.fn(),\n  premiumFeatures: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  ultimateFeatures: ['ai_optimization', 'advanced_analytics', 'priority_support'],\n  currentTier: 'premium',\n};\n\nconst FeatureAccessTestContext = createContext<MockFeatureAccessContextValue>(\n  defaultFeatureAccessValue\n);\n\nexport const FeatureAccessTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockFeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultFeatureAccessValue, ...value };\n  return (\n    <FeatureAccessTestContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessTestContext.Provider>\n  );\n};\n\nexport const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);\n\n// Feature Access Test Scenarios\nexport const _featureAccessScenarios = {\n  freeUser: {\n    hasAccess: jest.fn((feature: string) =>\n      ['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    upgradeRequired: jest.fn(\n      (feature: string) => !['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    currentTier: 'free' as const,\n    getFeatureLimit: jest.fn((feature: string) => (feature === 'alarms' ? 5 : 0)),\n  },\n\n  premiumUser: {\n    hasAccess: jest.fn(\n      (feature: string) => !['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    upgradeRequired: jest.fn((feature: string) =>\n      ['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    currentTier: 'premium' as const,\n    getFeatureLimit: jest.fn(() => 100),\n  },\n\n  ultimateUser: {\n    hasAccess: jest.fn(() => true),\n    upgradeRequired: jest.fn(() => false),\n    currentTier: 'ultimate' as const,\n    getFeatureLimit: jest.fn(() => Infinity),\n  },\n};\n\n// ===============================\n// LANGUAGE CONTEXT\n// ===============================\n\nexport interface MockLanguageContextValue {\n  language: string;\n  setLanguage: jest.MockedFunction<(lang: string) => void>;\n  t: jest.MockedFunction<(key: string, options?: any) => string>;\n  dir: 'ltr' | 'rtl';\n  formatTime: jest.MockedFunction<(time: Date) => string>;\n  formatDate: jest.MockedFunction<(date: Date) => string>;\n  formatRelativeTime: jest.MockedFunction<(date: Date) => string>;\n  formatCurrency: jest.MockedFunction<(amount: number, currency?: string) => string>;\n  supportedLanguages: Array<{ code: string; name: string; rtl: boolean }>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultLanguageValue: MockLanguageContextValue = {\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key.split('.').pop() || key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString('en-US')),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString('en-US')),\n  formatRelativeTime: jest.fn((date: Date) => 'just now'),\n  formatCurrency: jest.fn((amount: number, currency = 'USD') => `$${amount}`),\n  supportedLanguages: [\n    { code: 'en', name: 'English', rtl: false },\n    { code: 'es', name: 'Español', rtl: false },\n    { code: 'ar', name: 'العربية', rtl: true },\n  ],\n  isLoading: false,\n  error: null,\n};\n\nconst LanguageTestContext =\n  createContext<MockLanguageContextValue>(defaultLanguageValue);\n\nexport const LanguageTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockLanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultLanguageValue, ...value };\n  return (\n    <LanguageTestContext.Provider value={mockValue}>\n      {children}\n    </LanguageTestContext.Provider>\n  );\n};\n\nexport const _useLanguageTest = () => useContext(LanguageTestContext);\n\n// Language Test Scenarios\nexport const _languageScenarios = {\n  english: {\n    language: 'en',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => key.replace(/\\./g, ' ').toUpperCase()),\n  },\n\n  spanish: {\n    language: 'es',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => `es_${key}`),\n  },\n\n  arabic: {\n    language: 'ar',\n    dir: 'rtl' as const,\n    t: jest.fn((key: string) => `ar_${key}`),\n    formatTime: jest.fn((time: Date) => time.toLocaleTimeString('ar-SA')),\n  },\n\n  loading: {\n    isLoading: true,\n    t: jest.fn(() => '...'),\n  },\n\n  error: {\n    error: 'Failed to load translations',\n    t: jest.fn((key: string) => key),\n  },\n};\n\n// ===============================\n// ALARM CONTEXT\n// ===============================\n\nexport interface MockAlarmContextValue {\n  alarms: any[];\n  activeAlarm: any | null;\n  addAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<void>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  toggleAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  duplicateAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  bulkUpdateAlarms: jest.MockedFunction<(updates: any[]) => Promise<void>>;\n  getUpcomingAlarms: jest.MockedFunction<() => any[]>;\n  isLoading: boolean;\n  error: string | null;\n  lastSyncTime: Date | null;\n}\n\nconst defaultAlarmValue: MockAlarmContextValue = {\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Morning Alarm',\n      enabled: true,\n      days: [1, 2, 3, 4, 5], // Monday to Friday\n      sound: 'classic',\n      volume: 80,\n      snoozeEnabled: true,\n      snoozeInterval: 5,\n    },\n    {\n      id: 'alarm-2',\n      time: '08:30',\n      label: 'Backup Alarm',\n      enabled: false,\n      days: [6, 0], // Weekend\n      sound: 'gentle',\n      volume: 60,\n      snoozeEnabled: false,\n    },\n  ],\n  activeAlarm: null,\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  duplicateAlarm: jest.fn(),\n  bulkUpdateAlarms: jest.fn(),\n  getUpcomingAlarms: jest.fn(() => []),\n  isLoading: false,\n  error: null,\n  lastSyncTime: new Date(),\n};\n\nconst AlarmTestContext = createContext<MockAlarmContextValue>(defaultAlarmValue);\n\nexport const AlarmTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockAlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultAlarmValue, ...value };\n  return (\n    <AlarmTestContext.Provider value={mockValue}>{children}</AlarmTestContext.Provider>\n  );\n};\n\nexport const _useAlarmTest = () => useContext(AlarmTestContext);\n\n// Alarm Test Scenarios\nexport const _alarmScenarios = {\n  noAlarms: {\n    alarms: [],\n    getUpcomingAlarms: jest.fn(() => []),\n  },\n\n  singleAlarm: {\n    alarms: [\n      {\n        id: 'single-alarm',\n        time: '06:00',\n        label: 'Single Alarm',\n        enabled: true,\n        days: [1, 2, 3, 4, 5],\n      },\n    ],\n  },\n\n  multipleAlarms: {\n    alarms: Array.from({ length: 10 }, (_, i) => ({\n      id: `alarm-${i + 1}`,\n      time: `${String(6 + i).padStart(2, '0')}:00`,\n      label: `Alarm ${i + 1}`,\n      enabled: i % 2 === 0,\n      days: [1, 2, 3, 4, 5],\n    })),\n  },\n\n  activeAlarm: {\n    activeAlarm: {\n      id: 'active-alarm',\n      time: '07:00',\n      label: 'Currently Ringing',\n      enabled: true,\n      isRinging: true,\n    },\n  },\n\n  loading: {\n    isLoading: true,\n    alarms: [],\n  },\n\n  error: {\n    error: 'Failed to load alarms',\n    alarms: [],\n  },\n};\n\n// ===============================\n// THEME CONTEXT\n// ===============================\n\nexport interface MockThemeContextValue {\n  theme: string;\n  setTheme: jest.MockedFunction<(theme: string) => void>;\n  isDark: boolean;\n  colors: Record<string, string>;\n  fonts: Record<string, string>;\n  animations: boolean;\n  setAnimations: jest.MockedFunction<(enabled: boolean) => void>;\n  customThemes: any[];\n  createCustomTheme: jest.MockedFunction<(theme: any) => Promise<void>>;\n  deleteCustomTheme: jest.MockedFunction<(id: string) => Promise<void>>;\n  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;\n  importTheme: jest.MockedFunction<(data: string) => Promise<void>>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultThemeValue: MockThemeContextValue = {\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n  },\n  fonts: {\n    primary: 'Inter',\n    secondary: 'Boto Mono',\n    heading: 'Poppins',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  customThemes: [],\n  createCustomTheme: jest.fn(),\n  deleteCustomTheme: jest.fn(),\n  exportTheme: jest.fn(),\n  importTheme: jest.fn(),\n  isLoading: false,\n  error: null,\n};\n\nconst ThemeTestContext = createContext<MockThemeContextValue>(defaultThemeValue);\n\nexport const ThemeTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultThemeValue, ...value };\n  return (\n    <ThemeTestContext.Provider value={mockValue}>{children}</ThemeTestContext.Provider>\n  );\n};\n\nexport const _useThemeTest = () => useContext(ThemeTestContext);\n\n// Theme Test Scenarios\nexport const _themeScenarios = {\n  light: {\n    theme: 'light',\n    isDark: false,\n    colors: {\n      primary: '#6366f1',\n      background: '#ffffff',\n      surface: '#f8fafc',\n      text: '#0f172a',\n    },\n  },\n\n  dark: {\n    theme: 'dark',\n    isDark: true,\n    colors: {\n      primary: '#6366f1',\n      background: '#0f172a',\n      surface: '#1e293b',\n      text: '#f1f5f9',\n    },\n  },\n\n  gaming: {\n    theme: 'gaming',\n    isDark: true,\n    colors: {\n      primary: '#ff0080',\n      background: '#000000',\n      surface: '#1a1a1a',\n      text: '#ffffff',\n      accent: '#00ff80',\n    },\n  },\n\n  noAnimations: {\n    animations: false,\n  },\n\n  customThemes: {\n    customThemes: [\n      {\n        id: 'custom-1',\n        name: 'My Custom Theme',\n        colors: { primary: '#ff6b6b' },\n      },\n    ],\n  },\n};\n\n// ===============================\n// COMBINED CONTEXT PROVIDER\n// ===============================\n\nexport interface ContextTestOptions {\n  featureAccess?: Partial<MockFeatureAccessContextValue>;\n  language?: Partial<MockLanguageContextValue>;\n  alarm?: Partial<MockAlarmContextValue>;\n  theme?: Partial<MockThemeContextValue>;\n}\n\nexport const ContextTestProvider: React.FC<{\n  children: ReactNode;\n  options?: ContextTestOptions;\n}> = ({ children, options = {} }) => {\n  const { featureAccess = {}, language = {}, alarm = {}, theme = {} } = options;\n\n  return (\n    <FeatureAccessTestProvider value={featureAccess}>\n      <LanguageTestProvider value={language}>\n        <AlarmTestProvider value={alarm}>\n          <ThemeTestProvider value={theme}>{children}</ThemeTestProvider>\n        </AlarmTestProvider>\n      </LanguageTestProvider>\n    </FeatureAccessTestProvider>\n  );\n};\n\n// Custom render function for context testing\nexport const _renderWithContexts = (\n  ui: React.ReactElement,\n  options: ContextTestOptions & RenderOptions = {}\n) => {\n  const { featureAccess, language, alarm, theme, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <ContextTestProvider options={{ featureAccess, language, alarm, theme }}>\n      {children}\n    </ContextTestProvider>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Pre-configured scenario testing\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenarios: {\n    featureAccess?: keyof typeof featureAccessScenarios;\n    language?: keyof typeof languageScenarios;\n    alarm?: keyof typeof alarmScenarios;\n    theme?: keyof typeof themeScenarios;\n  }\n) => {\n  const options: ContextTestOptions = {};\n\n  if (scenarios.featureAccess) {\n    options.featureAccess = featureAccessScenarios[scenarios.featureAccess];\n  }\n  if (scenarios.language) {\n    options.language = languageScenarios[scenarios.language];\n  }\n  if (scenarios.alarm) {\n    options.alarm = alarmScenarios[scenarios.alarm];\n  }\n  if (scenarios.theme) {\n    options.theme = themeScenarios[scenarios.theme];\n  }\n\n  return renderWithContexts(ui, options);\n};\n\n// Alias exports without underscores\nexport const featureAccessScenarios = _featureAccessScenarios;\nexport const languageScenarios = _languageScenarios;\nexport const alarmScenarios = _alarmScenarios;\nexport const themeScenarios = _themeScenarios;\nexport const renderWithContexts = _renderWithContexts;\nexport const renderWithScenario = _renderWithScenario;\n\nexport default {\n  FeatureAccessTestProvider,\n  LanguageTestProvider,\n  AlarmTestProvider,\n  ThemeTestProvider,\n  ContextTestProvider,\n  renderWithContexts,\n  renderWithScenario,\n  featureAccessScenarios,\n  languageScenarios,\n  alarmScenarios,\n  themeScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/context-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useFeatureAccessTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 57,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 57,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'date' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 116,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'currency' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 117,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 52
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useLanguageTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 142,
        "column": 39,
        "nodeType": "Identifier",
        "endLine": 142,
        "endColumn": 49
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 248,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 248,
        "endColumn": 46
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useThemeTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 364,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 364,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Context-Specific Test Providers\n *\n * Individual test providers for each application context with realistic mock implementations\n * and helper functions for testing context-dependent components.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\n\n// ===============================\n// FEATURE ACCESS CONTEXT\n// ===============================\n\nexport interface MockFeatureAccessContextValue {\n  hasAccess: jest.MockedFunction<(feature: string) => boolean>;\n  checkFeatureAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  isFeatureEnabled: jest.MockedFunction<(feature: string) => boolean>;\n  upgradeRequired: jest.MockedFunction<(feature: string) => boolean>;\n  getFeatureLimit: jest.MockedFunction<(feature: string) => number>;\n  getRemainingUsage: jest.MockedFunction<(feature: string) => number>;\n  trackFeatureUsage: jest.MockedFunction<(feature: string) => void>;\n  premiumFeatures: string[];\n  ultimateFeatures: string[];\n  currentTier: 'free' | 'premium' | 'ultimate';\n}\n\nconst defaultFeatureAccessValue: MockFeatureAccessContextValue = {\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  getFeatureLimit: jest.fn(() => 100),\n  getRemainingUsage: jest.fn(() => 50),\n  trackFeatureUsage: jest.fn(),\n  premiumFeatures: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  ultimateFeatures: ['ai_optimization', 'advanced_analytics', 'priority_support'],\n  currentTier: 'premium',\n};\n\nconst FeatureAccessTestContext = createContext<MockFeatureAccessContextValue>(\n  defaultFeatureAccessValue\n);\n\nexport const FeatureAccessTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockFeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultFeatureAccessValue, ...value };\n  return (\n    <FeatureAccessTestContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessTestContext.Provider>\n  );\n};\n\nexport const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);\n\n// Feature Access Test Scenarios\nexport const _featureAccessScenarios = {\n  freeUser: {\n    hasAccess: jest.fn((feature: string) =>\n      ['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    upgradeRequired: jest.fn(\n      (feature: string) => !['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    currentTier: 'free' as const,\n    getFeatureLimit: jest.fn((feature: string) => (feature === 'alarms' ? 5 : 0)),\n  },\n\n  premiumUser: {\n    hasAccess: jest.fn(\n      (feature: string) => !['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    upgradeRequired: jest.fn((feature: string) =>\n      ['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    currentTier: 'premium' as const,\n    getFeatureLimit: jest.fn(() => 100),\n  },\n\n  ultimateUser: {\n    hasAccess: jest.fn(() => true),\n    upgradeRequired: jest.fn(() => false),\n    currentTier: 'ultimate' as const,\n    getFeatureLimit: jest.fn(() => Infinity),\n  },\n};\n\n// ===============================\n// LANGUAGE CONTEXT\n// ===============================\n\nexport interface MockLanguageContextValue {\n  language: string;\n  setLanguage: jest.MockedFunction<(lang: string) => void>;\n  t: jest.MockedFunction<(key: string, options?: any) => string>;\n  dir: 'ltr' | 'rtl';\n  formatTime: jest.MockedFunction<(time: Date) => string>;\n  formatDate: jest.MockedFunction<(date: Date) => string>;\n  formatRelativeTime: jest.MockedFunction<(date: Date) => string>;\n  formatCurrency: jest.MockedFunction<(amount: number, currency?: string) => string>;\n  supportedLanguages: Array<{ code: string; name: string; rtl: boolean }>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultLanguageValue: MockLanguageContextValue = {\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key.split('.').pop() || key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString('en-US')),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString('en-US')),\n  formatRelativeTime: jest.fn((date: Date) => 'just now'),\n  formatCurrency: jest.fn((amount: number, currency = 'USD') => `$${amount}`),\n  supportedLanguages: [\n    { code: 'en', name: 'English', rtl: false },\n    { code: 'es', name: 'Español', rtl: false },\n    { code: 'ar', name: 'العربية', rtl: true },\n  ],\n  isLoading: false,\n  error: null,\n};\n\nconst LanguageTestContext =\n  createContext<MockLanguageContextValue>(defaultLanguageValue);\n\nexport const LanguageTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockLanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultLanguageValue, ...value };\n  return (\n    <LanguageTestContext.Provider value={mockValue}>\n      {children}\n    </LanguageTestContext.Provider>\n  );\n};\n\nexport const _useLanguageTest = () => useContext(LanguageTestContext);\n\n// Language Test Scenarios\nexport const _languageScenarios = {\n  english: {\n    language: 'en',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => key.replace(/\\./g, ' ').toUpperCase()),\n  },\n\n  spanish: {\n    language: 'es',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => `es_${key}`),\n  },\n\n  arabic: {\n    language: 'ar',\n    dir: 'rtl' as const,\n    t: jest.fn((key: string) => `ar_${key}`),\n    formatTime: jest.fn((time: Date) => time.toLocaleTimeString('ar-SA')),\n  },\n\n  loading: {\n    isLoading: true,\n    t: jest.fn(() => '...'),\n  },\n\n  error: {\n    error: 'Failed to load translations',\n    t: jest.fn((key: string) => key),\n  },\n};\n\n// ===============================\n// ALARM CONTEXT\n// ===============================\n\nexport interface MockAlarmContextValue {\n  alarms: any[];\n  activeAlarm: any | null;\n  addAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<void>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  toggleAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  duplicateAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  bulkUpdateAlarms: jest.MockedFunction<(updates: any[]) => Promise<void>>;\n  getUpcomingAlarms: jest.MockedFunction<() => any[]>;\n  isLoading: boolean;\n  error: string | null;\n  lastSyncTime: Date | null;\n}\n\nconst defaultAlarmValue: MockAlarmContextValue = {\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Morning Alarm',\n      enabled: true,\n      days: [1, 2, 3, 4, 5], // Monday to Friday\n      sound: 'classic',\n      volume: 80,\n      snoozeEnabled: true,\n      snoozeInterval: 5,\n    },\n    {\n      id: 'alarm-2',\n      time: '08:30',\n      label: 'Backup Alarm',\n      enabled: false,\n      days: [6, 0], // Weekend\n      sound: 'gentle',\n      volume: 60,\n      snoozeEnabled: false,\n    },\n  ],\n  activeAlarm: null,\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  duplicateAlarm: jest.fn(),\n  bulkUpdateAlarms: jest.fn(),\n  getUpcomingAlarms: jest.fn(() => []),\n  isLoading: false,\n  error: null,\n  lastSyncTime: new Date(),\n};\n\nconst AlarmTestContext = createContext<MockAlarmContextValue>(defaultAlarmValue);\n\nexport const AlarmTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockAlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultAlarmValue, ...value };\n  return (\n    <AlarmTestContext.Provider value={mockValue}>{children}</AlarmTestContext.Provider>\n  );\n};\n\nexport const _useAlarmTest = () => useContext(AlarmTestContext);\n\n// Alarm Test Scenarios\nexport const _alarmScenarios = {\n  noAlarms: {\n    alarms: [],\n    getUpcomingAlarms: jest.fn(() => []),\n  },\n\n  singleAlarm: {\n    alarms: [\n      {\n        id: 'single-alarm',\n        time: '06:00',\n        label: 'Single Alarm',\n        enabled: true,\n        days: [1, 2, 3, 4, 5],\n      },\n    ],\n  },\n\n  multipleAlarms: {\n    alarms: Array.from({ length: 10 }, (_, i) => ({\n      id: `alarm-${i + 1}`,\n      time: `${String(6 + i).padStart(2, '0')}:00`,\n      label: `Alarm ${i + 1}`,\n      enabled: i % 2 === 0,\n      days: [1, 2, 3, 4, 5],\n    })),\n  },\n\n  activeAlarm: {\n    activeAlarm: {\n      id: 'active-alarm',\n      time: '07:00',\n      label: 'Currently Ringing',\n      enabled: true,\n      isRinging: true,\n    },\n  },\n\n  loading: {\n    isLoading: true,\n    alarms: [],\n  },\n\n  error: {\n    error: 'Failed to load alarms',\n    alarms: [],\n  },\n};\n\n// ===============================\n// THEME CONTEXT\n// ===============================\n\nexport interface MockThemeContextValue {\n  theme: string;\n  setTheme: jest.MockedFunction<(theme: string) => void>;\n  isDark: boolean;\n  colors: Record<string, string>;\n  fonts: Record<string, string>;\n  animations: boolean;\n  setAnimations: jest.MockedFunction<(enabled: boolean) => void>;\n  customThemes: any[];\n  createCustomTheme: jest.MockedFunction<(theme: any) => Promise<void>>;\n  deleteCustomTheme: jest.MockedFunction<(id: string) => Promise<void>>;\n  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;\n  importTheme: jest.MockedFunction<(data: string) => Promise<void>>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultThemeValue: MockThemeContextValue = {\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n  },\n  fonts: {\n    primary: 'Inter',\n    secondary: 'Boto Mono',\n    heading: 'Poppins',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  customThemes: [],\n  createCustomTheme: jest.fn(),\n  deleteCustomTheme: jest.fn(),\n  exportTheme: jest.fn(),\n  importTheme: jest.fn(),\n  isLoading: false,\n  error: null,\n};\n\nconst ThemeTestContext = createContext<MockThemeContextValue>(defaultThemeValue);\n\nexport const ThemeTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultThemeValue, ...value };\n  return (\n    <ThemeTestContext.Provider value={mockValue}>{children}</ThemeTestContext.Provider>\n  );\n};\n\nexport const _useThemeTest = () => useContext(ThemeTestContext);\n\n// Theme Test Scenarios\nexport const _themeScenarios = {\n  light: {\n    theme: 'light',\n    isDark: false,\n    colors: {\n      primary: '#6366f1',\n      background: '#ffffff',\n      surface: '#f8fafc',\n      text: '#0f172a',\n    },\n  },\n\n  dark: {\n    theme: 'dark',\n    isDark: true,\n    colors: {\n      primary: '#6366f1',\n      background: '#0f172a',\n      surface: '#1e293b',\n      text: '#f1f5f9',\n    },\n  },\n\n  gaming: {\n    theme: 'gaming',\n    isDark: true,\n    colors: {\n      primary: '#ff0080',\n      background: '#000000',\n      surface: '#1a1a1a',\n      text: '#ffffff',\n      accent: '#00ff80',\n    },\n  },\n\n  noAnimations: {\n    animations: false,\n  },\n\n  customThemes: {\n    customThemes: [\n      {\n        id: 'custom-1',\n        name: 'My Custom Theme',\n        colors: { primary: '#ff6b6b' },\n      },\n    ],\n  },\n};\n\n// ===============================\n// COMBINED CONTEXT PROVIDER\n// ===============================\n\nexport interface ContextTestOptions {\n  featureAccess?: Partial<MockFeatureAccessContextValue>;\n  language?: Partial<MockLanguageContextValue>;\n  alarm?: Partial<MockAlarmContextValue>;\n  theme?: Partial<MockThemeContextValue>;\n}\n\nexport const ContextTestProvider: React.FC<{\n  children: ReactNode;\n  options?: ContextTestOptions;\n}> = ({ children, options = {} }) => {\n  const { featureAccess = {}, language = {}, alarm = {}, theme = {} } = options;\n\n  return (\n    <FeatureAccessTestProvider value={featureAccess}>\n      <LanguageTestProvider value={language}>\n        <AlarmTestProvider value={alarm}>\n          <ThemeTestProvider value={theme}>{children}</ThemeTestProvider>\n        </AlarmTestProvider>\n      </LanguageTestProvider>\n    </FeatureAccessTestProvider>\n  );\n};\n\n// Custom render function for context testing\nexport const _renderWithContexts = (\n  ui: React.ReactElement,\n  options: ContextTestOptions & RenderOptions = {}\n) => {\n  const { featureAccess, language, alarm, theme, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <ContextTestProvider options={{ featureAccess, language, alarm, theme }}>\n      {children}\n    </ContextTestProvider>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Pre-configured scenario testing\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenarios: {\n    featureAccess?: keyof typeof featureAccessScenarios;\n    language?: keyof typeof languageScenarios;\n    alarm?: keyof typeof alarmScenarios;\n    theme?: keyof typeof themeScenarios;\n  }\n) => {\n  const options: ContextTestOptions = {};\n\n  if (scenarios.featureAccess) {\n    options.featureAccess = featureAccessScenarios[scenarios.featureAccess];\n  }\n  if (scenarios.language) {\n    options.language = languageScenarios[scenarios.language];\n  }\n  if (scenarios.alarm) {\n    options.alarm = alarmScenarios[scenarios.alarm];\n  }\n  if (scenarios.theme) {\n    options.theme = themeScenarios[scenarios.theme];\n  }\n\n  return renderWithContexts(ui, options);\n};\n\n// Alias exports without underscores\nexport const featureAccessScenarios = _featureAccessScenarios;\nexport const languageScenarios = _languageScenarios;\nexport const alarmScenarios = _alarmScenarios;\nexport const themeScenarios = _themeScenarios;\nexport const renderWithContexts = _renderWithContexts;\nexport const renderWithScenario = _renderWithScenario;\n\nexport default {\n  FeatureAccessTestProvider,\n  LanguageTestProvider,\n  AlarmTestProvider,\n  ThemeTestProvider,\n  ContextTestProvider,\n  renderWithContexts,\n  renderWithScenario,\n  featureAccessScenarios,\n  languageScenarios,\n  alarmScenarios,\n  themeScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/context-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useFeatureAccessTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 57,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 57,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'date' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 116,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'currency' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 117,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 52
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useLanguageTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 142,
        "column": 39,
        "nodeType": "Identifier",
        "endLine": 142,
        "endColumn": 49
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 248,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 248,
        "endColumn": 46
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useThemeTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 364,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 364,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Context-Specific Test Providers\n *\n * Individual test providers for each application context with realistic mock implementations\n * and helper functions for testing context-dependent components.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\n\n// ===============================\n// FEATURE ACCESS CONTEXT\n// ===============================\n\nexport interface MockFeatureAccessContextValue {\n  hasAccess: jest.MockedFunction<(feature: string) => boolean>;\n  checkFeatureAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  isFeatureEnabled: jest.MockedFunction<(feature: string) => boolean>;\n  upgradeRequired: jest.MockedFunction<(feature: string) => boolean>;\n  getFeatureLimit: jest.MockedFunction<(feature: string) => number>;\n  getRemainingUsage: jest.MockedFunction<(feature: string) => number>;\n  trackFeatureUsage: jest.MockedFunction<(feature: string) => void>;\n  premiumFeatures: string[];\n  ultimateFeatures: string[];\n  currentTier: 'free' | 'premium' | 'ultimate';\n}\n\nconst defaultFeatureAccessValue: MockFeatureAccessContextValue = {\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  getFeatureLimit: jest.fn(() => 100),\n  getRemainingUsage: jest.fn(() => 50),\n  trackFeatureUsage: jest.fn(),\n  premiumFeatures: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  ultimateFeatures: ['ai_optimization', 'advanced_analytics', 'priority_support'],\n  currentTier: 'premium',\n};\n\nconst FeatureAccessTestContext = createContext<MockFeatureAccessContextValue>(\n  defaultFeatureAccessValue\n);\n\nexport const FeatureAccessTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockFeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultFeatureAccessValue, ...value };\n  return (\n    <FeatureAccessTestContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessTestContext.Provider>\n  );\n};\n\nexport const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);\n\n// Feature Access Test Scenarios\nexport const _featureAccessScenarios = {\n  freeUser: {\n    hasAccess: jest.fn((feature: string) =>\n      ['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    upgradeRequired: jest.fn(\n      (feature: string) => !['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    currentTier: 'free' as const,\n    getFeatureLimit: jest.fn((feature: string) => (feature === 'alarms' ? 5 : 0)),\n  },\n\n  premiumUser: {\n    hasAccess: jest.fn(\n      (feature: string) => !['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    upgradeRequired: jest.fn((feature: string) =>\n      ['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    currentTier: 'premium' as const,\n    getFeatureLimit: jest.fn(() => 100),\n  },\n\n  ultimateUser: {\n    hasAccess: jest.fn(() => true),\n    upgradeRequired: jest.fn(() => false),\n    currentTier: 'ultimate' as const,\n    getFeatureLimit: jest.fn(() => Infinity),\n  },\n};\n\n// ===============================\n// LANGUAGE CONTEXT\n// ===============================\n\nexport interface MockLanguageContextValue {\n  language: string;\n  setLanguage: jest.MockedFunction<(lang: string) => void>;\n  t: jest.MockedFunction<(key: string, options?: any) => string>;\n  dir: 'ltr' | 'rtl';\n  formatTime: jest.MockedFunction<(time: Date) => string>;\n  formatDate: jest.MockedFunction<(date: Date) => string>;\n  formatRelativeTime: jest.MockedFunction<(date: Date) => string>;\n  formatCurrency: jest.MockedFunction<(amount: number, currency?: string) => string>;\n  supportedLanguages: Array<{ code: string; name: string; rtl: boolean }>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultLanguageValue: MockLanguageContextValue = {\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key.split('.').pop() || key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString('en-US')),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString('en-US')),\n  formatRelativeTime: jest.fn((date: Date) => 'just now'),\n  formatCurrency: jest.fn((amount: number, currency = 'USD') => `$${amount}`),\n  supportedLanguages: [\n    { code: 'en', name: 'English', rtl: false },\n    { code: 'es', name: 'Español', rtl: false },\n    { code: 'ar', name: 'العربية', rtl: true },\n  ],\n  isLoading: false,\n  error: null,\n};\n\nconst LanguageTestContext =\n  createContext<MockLanguageContextValue>(defaultLanguageValue);\n\nexport const LanguageTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockLanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultLanguageValue, ...value };\n  return (\n    <LanguageTestContext.Provider value={mockValue}>\n      {children}\n    </LanguageTestContext.Provider>\n  );\n};\n\nexport const _useLanguageTest = () => useContext(LanguageTestContext);\n\n// Language Test Scenarios\nexport const _languageScenarios = {\n  english: {\n    language: 'en',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => key.replace(/\\./g, ' ').toUpperCase()),\n  },\n\n  spanish: {\n    language: 'es',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => `es_${key}`),\n  },\n\n  arabic: {\n    language: 'ar',\n    dir: 'rtl' as const,\n    t: jest.fn((key: string) => `ar_${key}`),\n    formatTime: jest.fn((time: Date) => time.toLocaleTimeString('ar-SA')),\n  },\n\n  loading: {\n    isLoading: true,\n    t: jest.fn(() => '...'),\n  },\n\n  error: {\n    error: 'Failed to load translations',\n    t: jest.fn((key: string) => key),\n  },\n};\n\n// ===============================\n// ALARM CONTEXT\n// ===============================\n\nexport interface MockAlarmContextValue {\n  alarms: any[];\n  activeAlarm: any | null;\n  addAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<void>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  toggleAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  duplicateAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  bulkUpdateAlarms: jest.MockedFunction<(updates: any[]) => Promise<void>>;\n  getUpcomingAlarms: jest.MockedFunction<() => any[]>;\n  isLoading: boolean;\n  error: string | null;\n  lastSyncTime: Date | null;\n}\n\nconst defaultAlarmValue: MockAlarmContextValue = {\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Morning Alarm',\n      enabled: true,\n      days: [1, 2, 3, 4, 5], // Monday to Friday\n      sound: 'classic',\n      volume: 80,\n      snoozeEnabled: true,\n      snoozeInterval: 5,\n    },\n    {\n      id: 'alarm-2',\n      time: '08:30',\n      label: 'Backup Alarm',\n      enabled: false,\n      days: [6, 0], // Weekend\n      sound: 'gentle',\n      volume: 60,\n      snoozeEnabled: false,\n    },\n  ],\n  activeAlarm: null,\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  duplicateAlarm: jest.fn(),\n  bulkUpdateAlarms: jest.fn(),\n  getUpcomingAlarms: jest.fn(() => []),\n  isLoading: false,\n  error: null,\n  lastSyncTime: new Date(),\n};\n\nconst AlarmTestContext = createContext<MockAlarmContextValue>(defaultAlarmValue);\n\nexport const AlarmTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockAlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultAlarmValue, ...value };\n  return (\n    <AlarmTestContext.Provider value={mockValue}>{children}</AlarmTestContext.Provider>\n  );\n};\n\nexport const _useAlarmTest = () => useContext(AlarmTestContext);\n\n// Alarm Test Scenarios\nexport const _alarmScenarios = {\n  noAlarms: {\n    alarms: [],\n    getUpcomingAlarms: jest.fn(() => []),\n  },\n\n  singleAlarm: {\n    alarms: [\n      {\n        id: 'single-alarm',\n        time: '06:00',\n        label: 'Single Alarm',\n        enabled: true,\n        days: [1, 2, 3, 4, 5],\n      },\n    ],\n  },\n\n  multipleAlarms: {\n    alarms: Array.from({ length: 10 }, (_, i) => ({\n      id: `alarm-${i + 1}`,\n      time: `${String(6 + i).padStart(2, '0')}:00`,\n      label: `Alarm ${i + 1}`,\n      enabled: i % 2 === 0,\n      days: [1, 2, 3, 4, 5],\n    })),\n  },\n\n  activeAlarm: {\n    activeAlarm: {\n      id: 'active-alarm',\n      time: '07:00',\n      label: 'Currently Ringing',\n      enabled: true,\n      isRinging: true,\n    },\n  },\n\n  loading: {\n    isLoading: true,\n    alarms: [],\n  },\n\n  error: {\n    error: 'Failed to load alarms',\n    alarms: [],\n  },\n};\n\n// ===============================\n// THEME CONTEXT\n// ===============================\n\nexport interface MockThemeContextValue {\n  theme: string;\n  setTheme: jest.MockedFunction<(theme: string) => void>;\n  isDark: boolean;\n  colors: Record<string, string>;\n  fonts: Record<string, string>;\n  animations: boolean;\n  setAnimations: jest.MockedFunction<(enabled: boolean) => void>;\n  customThemes: any[];\n  createCustomTheme: jest.MockedFunction<(theme: any) => Promise<void>>;\n  deleteCustomTheme: jest.MockedFunction<(id: string) => Promise<void>>;\n  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;\n  importTheme: jest.MockedFunction<(data: string) => Promise<void>>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultThemeValue: MockThemeContextValue = {\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n  },\n  fonts: {\n    primary: 'Inter',\n    secondary: 'Boto Mono',\n    heading: 'Poppins',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  customThemes: [],\n  createCustomTheme: jest.fn(),\n  deleteCustomTheme: jest.fn(),\n  exportTheme: jest.fn(),\n  importTheme: jest.fn(),\n  isLoading: false,\n  error: null,\n};\n\nconst ThemeTestContext = createContext<MockThemeContextValue>(defaultThemeValue);\n\nexport const ThemeTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultThemeValue, ...value };\n  return (\n    <ThemeTestContext.Provider value={mockValue}>{children}</ThemeTestContext.Provider>\n  );\n};\n\nexport const _useThemeTest = () => useContext(ThemeTestContext);\n\n// Theme Test Scenarios\nexport const _themeScenarios = {\n  light: {\n    theme: 'light',\n    isDark: false,\n    colors: {\n      primary: '#6366f1',\n      background: '#ffffff',\n      surface: '#f8fafc',\n      text: '#0f172a',\n    },\n  },\n\n  dark: {\n    theme: 'dark',\n    isDark: true,\n    colors: {\n      primary: '#6366f1',\n      background: '#0f172a',\n      surface: '#1e293b',\n      text: '#f1f5f9',\n    },\n  },\n\n  gaming: {\n    theme: 'gaming',\n    isDark: true,\n    colors: {\n      primary: '#ff0080',\n      background: '#000000',\n      surface: '#1a1a1a',\n      text: '#ffffff',\n      accent: '#00ff80',\n    },\n  },\n\n  noAnimations: {\n    animations: false,\n  },\n\n  customThemes: {\n    customThemes: [\n      {\n        id: 'custom-1',\n        name: 'My Custom Theme',\n        colors: { primary: '#ff6b6b' },\n      },\n    ],\n  },\n};\n\n// ===============================\n// COMBINED CONTEXT PROVIDER\n// ===============================\n\nexport interface ContextTestOptions {\n  featureAccess?: Partial<MockFeatureAccessContextValue>;\n  language?: Partial<MockLanguageContextValue>;\n  alarm?: Partial<MockAlarmContextValue>;\n  theme?: Partial<MockThemeContextValue>;\n}\n\nexport const ContextTestProvider: React.FC<{\n  children: ReactNode;\n  options?: ContextTestOptions;\n}> = ({ children, options = {} }) => {\n  const { featureAccess = {}, language = {}, alarm = {}, theme = {} } = options;\n\n  return (\n    <FeatureAccessTestProvider value={featureAccess}>\n      <LanguageTestProvider value={language}>\n        <AlarmTestProvider value={alarm}>\n          <ThemeTestProvider value={theme}>{children}</ThemeTestProvider>\n        </AlarmTestProvider>\n      </LanguageTestProvider>\n    </FeatureAccessTestProvider>\n  );\n};\n\n// Custom render function for context testing\nexport const _renderWithContexts = (\n  ui: React.ReactElement,\n  options: ContextTestOptions & RenderOptions = {}\n) => {\n  const { featureAccess, language, alarm, theme, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <ContextTestProvider options={{ featureAccess, language, alarm, theme }}>\n      {children}\n    </ContextTestProvider>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Pre-configured scenario testing\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenarios: {\n    featureAccess?: keyof typeof featureAccessScenarios;\n    language?: keyof typeof languageScenarios;\n    alarm?: keyof typeof alarmScenarios;\n    theme?: keyof typeof themeScenarios;\n  }\n) => {\n  const options: ContextTestOptions = {};\n\n  if (scenarios.featureAccess) {\n    options.featureAccess = featureAccessScenarios[scenarios.featureAccess];\n  }\n  if (scenarios.language) {\n    options.language = languageScenarios[scenarios.language];\n  }\n  if (scenarios.alarm) {\n    options.alarm = alarmScenarios[scenarios.alarm];\n  }\n  if (scenarios.theme) {\n    options.theme = themeScenarios[scenarios.theme];\n  }\n\n  return renderWithContexts(ui, options);\n};\n\n// Alias exports without underscores\nexport const featureAccessScenarios = _featureAccessScenarios;\nexport const languageScenarios = _languageScenarios;\nexport const alarmScenarios = _alarmScenarios;\nexport const themeScenarios = _themeScenarios;\nexport const renderWithContexts = _renderWithContexts;\nexport const renderWithScenario = _renderWithScenario;\n\nexport default {\n  FeatureAccessTestProvider,\n  LanguageTestProvider,\n  AlarmTestProvider,\n  ThemeTestProvider,\n  ContextTestProvider,\n  renderWithContexts,\n  renderWithScenario,\n  featureAccessScenarios,\n  languageScenarios,\n  alarmScenarios,\n  themeScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/context-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useFeatureAccessTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 57,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 57,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'date' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 116,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'currency' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 117,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 117,
        "endColumn": 52
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useLanguageTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 142,
        "column": 39,
        "nodeType": "Identifier",
        "endLine": 142,
        "endColumn": 49
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 248,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 248,
        "endColumn": 46
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useThemeTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 364,
        "column": 36,
        "nodeType": "Identifier",
        "endLine": 364,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Context-Specific Test Providers\n *\n * Individual test providers for each application context with realistic mock implementations\n * and helper functions for testing context-dependent components.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\n\n// ===============================\n// FEATURE ACCESS CONTEXT\n// ===============================\n\nexport interface MockFeatureAccessContextValue {\n  hasAccess: jest.MockedFunction<(feature: string) => boolean>;\n  checkFeatureAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  isFeatureEnabled: jest.MockedFunction<(feature: string) => boolean>;\n  upgradeRequired: jest.MockedFunction<(feature: string) => boolean>;\n  getFeatureLimit: jest.MockedFunction<(feature: string) => number>;\n  getRemainingUsage: jest.MockedFunction<(feature: string) => number>;\n  trackFeatureUsage: jest.MockedFunction<(feature: string) => void>;\n  premiumFeatures: string[];\n  ultimateFeatures: string[];\n  currentTier: 'free' | 'premium' | 'ultimate';\n}\n\nconst defaultFeatureAccessValue: MockFeatureAccessContextValue = {\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  getFeatureLimit: jest.fn(() => 100),\n  getRemainingUsage: jest.fn(() => 50),\n  trackFeatureUsage: jest.fn(),\n  premiumFeatures: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  ultimateFeatures: ['ai_optimization', 'advanced_analytics', 'priority_support'],\n  currentTier: 'premium',\n};\n\nconst FeatureAccessTestContext = createContext<MockFeatureAccessContextValue>(\n  defaultFeatureAccessValue\n);\n\nexport const FeatureAccessTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockFeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultFeatureAccessValue, ...value };\n  return (\n    <FeatureAccessTestContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessTestContext.Provider>\n  );\n};\n\nexport const _useFeatureAccessTest = () => useContext(FeatureAccessTestContext);\n\n// Feature Access Test Scenarios\nexport const _featureAccessScenarios = {\n  freeUser: {\n    hasAccess: jest.fn((feature: string) =>\n      ['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    upgradeRequired: jest.fn(\n      (feature: string) => !['basic_alarms', 'basic_themes'].includes(feature)\n    ),\n    currentTier: 'free' as const,\n    getFeatureLimit: jest.fn((feature: string) => (feature === 'alarms' ? 5 : 0)),\n  },\n\n  premiumUser: {\n    hasAccess: jest.fn(\n      (feature: string) => !['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    upgradeRequired: jest.fn((feature: string) =>\n      ['ai_optimization', 'advanced_analytics'].includes(feature)\n    ),\n    currentTier: 'premium' as const,\n    getFeatureLimit: jest.fn(() => 100),\n  },\n\n  ultimateUser: {\n    hasAccess: jest.fn(() => true),\n    upgradeRequired: jest.fn(() => false),\n    currentTier: 'ultimate' as const,\n    getFeatureLimit: jest.fn(() => Infinity),\n  },\n};\n\n// ===============================\n// LANGUAGE CONTEXT\n// ===============================\n\nexport interface MockLanguageContextValue {\n  language: string;\n  setLanguage: jest.MockedFunction<(lang: string) => void>;\n  t: jest.MockedFunction<(key: string, options?: any) => string>;\n  dir: 'ltr' | 'rtl';\n  formatTime: jest.MockedFunction<(time: Date) => string>;\n  formatDate: jest.MockedFunction<(date: Date) => string>;\n  formatRelativeTime: jest.MockedFunction<(date: Date) => string>;\n  formatCurrency: jest.MockedFunction<(amount: number, currency?: string) => string>;\n  supportedLanguages: Array<{ code: string; name: string; rtl: boolean }>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultLanguageValue: MockLanguageContextValue = {\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key.split('.').pop() || key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString('en-US')),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString('en-US')),\n  formatRelativeTime: jest.fn((date: Date) => 'just now'),\n  formatCurrency: jest.fn((amount: number, currency = 'USD') => `$${amount}`),\n  supportedLanguages: [\n    { code: 'en', name: 'English', rtl: false },\n    { code: 'es', name: 'Español', rtl: false },\n    { code: 'ar', name: 'العربية', rtl: true },\n  ],\n  isLoading: false,\n  error: null,\n};\n\nconst LanguageTestContext =\n  createContext<MockLanguageContextValue>(defaultLanguageValue);\n\nexport const LanguageTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockLanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultLanguageValue, ...value };\n  return (\n    <LanguageTestContext.Provider value={mockValue}>\n      {children}\n    </LanguageTestContext.Provider>\n  );\n};\n\nexport const _useLanguageTest = () => useContext(LanguageTestContext);\n\n// Language Test Scenarios\nexport const _languageScenarios = {\n  english: {\n    language: 'en',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => key.replace(/\\./g, ' ').toUpperCase()),\n  },\n\n  spanish: {\n    language: 'es',\n    dir: 'ltr' as const,\n    t: jest.fn((key: string) => `es_${key}`),\n  },\n\n  arabic: {\n    language: 'ar',\n    dir: 'rtl' as const,\n    t: jest.fn((key: string) => `ar_${key}`),\n    formatTime: jest.fn((time: Date) => time.toLocaleTimeString('ar-SA')),\n  },\n\n  loading: {\n    isLoading: true,\n    t: jest.fn(() => '...'),\n  },\n\n  error: {\n    error: 'Failed to load translations',\n    t: jest.fn((key: string) => key),\n  },\n};\n\n// ===============================\n// ALARM CONTEXT\n// ===============================\n\nexport interface MockAlarmContextValue {\n  alarms: any[];\n  activeAlarm: any | null;\n  addAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<void>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  toggleAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  duplicateAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  bulkUpdateAlarms: jest.MockedFunction<(updates: any[]) => Promise<void>>;\n  getUpcomingAlarms: jest.MockedFunction<() => any[]>;\n  isLoading: boolean;\n  error: string | null;\n  lastSyncTime: Date | null;\n}\n\nconst defaultAlarmValue: MockAlarmContextValue = {\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Morning Alarm',\n      enabled: true,\n      days: [1, 2, 3, 4, 5], // Monday to Friday\n      sound: 'classic',\n      volume: 80,\n      snoozeEnabled: true,\n      snoozeInterval: 5,\n    },\n    {\n      id: 'alarm-2',\n      time: '08:30',\n      label: 'Backup Alarm',\n      enabled: false,\n      days: [6, 0], // Weekend\n      sound: 'gentle',\n      volume: 60,\n      snoozeEnabled: false,\n    },\n  ],\n  activeAlarm: null,\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  duplicateAlarm: jest.fn(),\n  bulkUpdateAlarms: jest.fn(),\n  getUpcomingAlarms: jest.fn(() => []),\n  isLoading: false,\n  error: null,\n  lastSyncTime: new Date(),\n};\n\nconst AlarmTestContext = createContext<MockAlarmContextValue>(defaultAlarmValue);\n\nexport const AlarmTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockAlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultAlarmValue, ...value };\n  return (\n    <AlarmTestContext.Provider value={mockValue}>{children}</AlarmTestContext.Provider>\n  );\n};\n\nexport const _useAlarmTest = () => useContext(AlarmTestContext);\n\n// Alarm Test Scenarios\nexport const _alarmScenarios = {\n  noAlarms: {\n    alarms: [],\n    getUpcomingAlarms: jest.fn(() => []),\n  },\n\n  singleAlarm: {\n    alarms: [\n      {\n        id: 'single-alarm',\n        time: '06:00',\n        label: 'Single Alarm',\n        enabled: true,\n        days: [1, 2, 3, 4, 5],\n      },\n    ],\n  },\n\n  multipleAlarms: {\n    alarms: Array.from({ length: 10 }, (_, i) => ({\n      id: `alarm-${i + 1}`,\n      time: `${String(6 + i).padStart(2, '0')}:00`,\n      label: `Alarm ${i + 1}`,\n      enabled: i % 2 === 0,\n      days: [1, 2, 3, 4, 5],\n    })),\n  },\n\n  activeAlarm: {\n    activeAlarm: {\n      id: 'active-alarm',\n      time: '07:00',\n      label: 'Currently Ringing',\n      enabled: true,\n      isRinging: true,\n    },\n  },\n\n  loading: {\n    isLoading: true,\n    alarms: [],\n  },\n\n  error: {\n    error: 'Failed to load alarms',\n    alarms: [],\n  },\n};\n\n// ===============================\n// THEME CONTEXT\n// ===============================\n\nexport interface MockThemeContextValue {\n  theme: string;\n  setTheme: jest.MockedFunction<(theme: string) => void>;\n  isDark: boolean;\n  colors: Record<string, string>;\n  fonts: Record<string, string>;\n  animations: boolean;\n  setAnimations: jest.MockedFunction<(enabled: boolean) => void>;\n  customThemes: any[];\n  createCustomTheme: jest.MockedFunction<(theme: any) => Promise<void>>;\n  deleteCustomTheme: jest.MockedFunction<(id: string) => Promise<void>>;\n  exportTheme: jest.MockedFunction<(id: string) => Promise<string>>;\n  importTheme: jest.MockedFunction<(data: string) => Promise<void>>;\n  isLoading: boolean;\n  error: string | null;\n}\n\nconst defaultThemeValue: MockThemeContextValue = {\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n    success: '#10b981',\n    warning: '#f59e0b',\n    error: '#ef4444',\n  },\n  fonts: {\n    primary: 'Inter',\n    secondary: 'Boto Mono',\n    heading: 'Poppins',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  customThemes: [],\n  createCustomTheme: jest.fn(),\n  deleteCustomTheme: jest.fn(),\n  exportTheme: jest.fn(),\n  importTheme: jest.fn(),\n  isLoading: false,\n  error: null,\n};\n\nconst ThemeTestContext = createContext<MockThemeContextValue>(defaultThemeValue);\n\nexport const ThemeTestProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<MockThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = { ...defaultThemeValue, ...value };\n  return (\n    <ThemeTestContext.Provider value={mockValue}>{children}</ThemeTestContext.Provider>\n  );\n};\n\nexport const _useThemeTest = () => useContext(ThemeTestContext);\n\n// Theme Test Scenarios\nexport const _themeScenarios = {\n  light: {\n    theme: 'light',\n    isDark: false,\n    colors: {\n      primary: '#6366f1',\n      background: '#ffffff',\n      surface: '#f8fafc',\n      text: '#0f172a',\n    },\n  },\n\n  dark: {\n    theme: 'dark',\n    isDark: true,\n    colors: {\n      primary: '#6366f1',\n      background: '#0f172a',\n      surface: '#1e293b',\n      text: '#f1f5f9',\n    },\n  },\n\n  gaming: {\n    theme: 'gaming',\n    isDark: true,\n    colors: {\n      primary: '#ff0080',\n      background: '#000000',\n      surface: '#1a1a1a',\n      text: '#ffffff',\n      accent: '#00ff80',\n    },\n  },\n\n  noAnimations: {\n    animations: false,\n  },\n\n  customThemes: {\n    customThemes: [\n      {\n        id: 'custom-1',\n        name: 'My Custom Theme',\n        colors: { primary: '#ff6b6b' },\n      },\n    ],\n  },\n};\n\n// ===============================\n// COMBINED CONTEXT PROVIDER\n// ===============================\n\nexport interface ContextTestOptions {\n  featureAccess?: Partial<MockFeatureAccessContextValue>;\n  language?: Partial<MockLanguageContextValue>;\n  alarm?: Partial<MockAlarmContextValue>;\n  theme?: Partial<MockThemeContextValue>;\n}\n\nexport const ContextTestProvider: React.FC<{\n  children: ReactNode;\n  options?: ContextTestOptions;\n}> = ({ children, options = {} }) => {\n  const { featureAccess = {}, language = {}, alarm = {}, theme = {} } = options;\n\n  return (\n    <FeatureAccessTestProvider value={featureAccess}>\n      <LanguageTestProvider value={language}>\n        <AlarmTestProvider value={alarm}>\n          <ThemeTestProvider value={theme}>{children}</ThemeTestProvider>\n        </AlarmTestProvider>\n      </LanguageTestProvider>\n    </FeatureAccessTestProvider>\n  );\n};\n\n// Custom render function for context testing\nexport const _renderWithContexts = (\n  ui: React.ReactElement,\n  options: ContextTestOptions & RenderOptions = {}\n) => {\n  const { featureAccess, language, alarm, theme, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <ContextTestProvider options={{ featureAccess, language, alarm, theme }}>\n      {children}\n    </ContextTestProvider>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Pre-configured scenario testing\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenarios: {\n    featureAccess?: keyof typeof featureAccessScenarios;\n    language?: keyof typeof languageScenarios;\n    alarm?: keyof typeof alarmScenarios;\n    theme?: keyof typeof themeScenarios;\n  }\n) => {\n  const options: ContextTestOptions = {};\n\n  if (scenarios.featureAccess) {\n    options.featureAccess = featureAccessScenarios[scenarios.featureAccess];\n  }\n  if (scenarios.language) {\n    options.language = languageScenarios[scenarios.language];\n  }\n  if (scenarios.alarm) {\n    options.alarm = alarmScenarios[scenarios.alarm];\n  }\n  if (scenarios.theme) {\n    options.theme = themeScenarios[scenarios.theme];\n  }\n\n  return renderWithContexts(ui, options);\n};\n\n// Alias exports without underscores\nexport const featureAccessScenarios = _featureAccessScenarios;\nexport const languageScenarios = _languageScenarios;\nexport const alarmScenarios = _alarmScenarios;\nexport const themeScenarios = _themeScenarios;\nexport const renderWithContexts = _renderWithContexts;\nexport const renderWithScenario = _renderWithScenario;\n\nexport default {\n  FeatureAccessTestProvider,\n  LanguageTestProvider,\n  AlarmTestProvider,\n  ThemeTestProvider,\n  ContextTestProvider,\n  renderWithContexts,\n  renderWithScenario,\n  featureAccessScenarios,\n  languageScenarios,\n  alarmScenarios,\n  themeScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/service-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAlarmServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 409,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 409,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAnalyticsServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 410,
        "column": 47,
        "nodeType": "Identifier",
        "endLine": 410,
        "endColumn": 57
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useBattleServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 411,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 411,
        "endColumn": 54
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSubscriptionServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 412,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 412,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useVoiceServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 413,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 413,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useNotificationServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 414,
        "column": 50,
        "nodeType": "Identifier",
        "endLine": 414,
        "endColumn": 60
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useAudioServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 415,
        "column": 43,
        "nodeType": "Identifier",
        "endLine": 415,
        "endColumn": 53
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useStorageServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 416,
        "column": 45,
        "nodeType": "Identifier",
        "endLine": 416,
        "endColumn": 55
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useContext\" is called in function \"_useSecurityServiceTest\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 417,
        "column": 46,
        "nodeType": "Identifier",
        "endLine": 417,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Service-Specific Test Providers\n *\n * Mock implementations and providers for all application services with realistic\n * behavior patterns and comprehensive testing scenarios.\n */\n\nimport React, { ReactNode, createContext, useContext } from 'react';\n\n// ===============================\n// SERVICE INTERFACES\n// ===============================\n\nexport interface MockAlarmService {\n  createAlarm: jest.MockedFunction<(alarm: any) => Promise<any>>;\n  updateAlarm: jest.MockedFunction<(id: string, updates: any) => Promise<any>>;\n  deleteAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  getAlarms: jest.MockedFunction<() => Promise<any[]>>;\n  getAlarm: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  scheduleAlarm: jest.MockedFunction<(alarm: any) => Promise<void>>;\n  cancelAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  snoozeAlarm: jest.MockedFunction<(id: string, minutes?: number) => Promise<void>>;\n  stopAlarm: jest.MockedFunction<(id: string) => Promise<void>>;\n  validateAlarmTime: jest.MockedFunction<(time: string) => boolean>;\n  getNextAlarmTime: jest.MockedFunction<() => Date | null>;\n  syncAlarms: jest.MockedFunction<() => Promise<void>>;\n  exportAlarms: jest.MockedFunction<() => Promise<string>>;\n  importAlarms: jest.MockedFunction<(data: string) => Promise<number>>;\n}\n\nexport interface MockAnalyticsService {\n  track: jest.MockedFunction<(event: string, properties?: any) => void>;\n  identify: jest.MockedFunction<(userId: string, traits?: any) => void>;\n  page: jest.MockedFunction<(name: string, properties?: any) => void>;\n  group: jest.MockedFunction<(groupId: string, traits?: any) => void>;\n  alias: jest.MockedFunction<(userId: string, previousId?: string) => void>;\n  reset: jest.MockedFunction<() => void>;\n  flush: jest.MockedFunction<() => Promise<void>>;\n  getAnalyticsData: jest.MockedFunction<(dateRange: any) => Promise<any>>;\n  setUserProperties: jest.MockedFunction<(properties: any) => void>;\n  trackConversion: jest.MockedFunction<(event: string, value?: number) => void>;\n  trackError: jest.MockedFunction<(error: Error, context?: any) => void>;\n}\n\nexport interface MockBattleService {\n  createBattle: jest.MockedFunction<(config: any) => Promise<any>>;\n  joinBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  leaveBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  getBattles: jest.MockedFunction<(status?: string) => Promise<any[]>>;\n  getBattle: jest.MockedFunction<(id: string) => Promise<any | null>>;\n  startBattle: jest.MockedFunction<(battleId: string) => Promise<void>>;\n  endBattle: jest.MockedFunction<(battleId: string) => Promise<any>>;\n  submitAnswer: jest.MockedFunction<\n    (battleId: string, answer: any) => Promise<boolean>\n  >;\n  getLeaderboard: jest.MockedFunction<() => Promise<any[]>>;\n  getUserStats: jest.MockedFunction<(userId: string) => Promise<any>>;\n  inviteToB;\n\n  attle: jest.MockedFunction<(battleId: string, userIds: string[]) => Promise<void>>;\n  spectate: jest.MockedFunction<(battleId: string) => Promise<void>>;\n}\n\nexport interface MockSubscriptionService {\n  getSubscription: jest.MockedFunction<() => Promise<any | null>>;\n  getSubscriptions: jest.MockedFunction<() => Promise<any[]>>;\n  subscribe: jest.MockedFunction<(tier: string, paymentMethod?: any) => Promise<any>>;\n  cancelSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  updateSubscription: jest.MockedFunction<\n    (subscriptionId: string, updates: any) => Promise<any>\n  >;\n  resumeSubscription: jest.MockedFunction<(subscriptionId: string) => Promise<void>>;\n  getFeatures: jest.MockedFunction<(tier?: string) => string[]>;\n  checkAccess: jest.MockedFunction<(feature: string, tier?: string) => boolean>;\n  getUsage: jest.MockedFunction<(feature: string) => Promise<number>>;\n  getLimit: jest.MockedFunction<(feature: string) => number>;\n  trackUsage: jest.MockedFunction<(feature: string, amount?: number) => Promise<void>>;\n  getBillingHistory: jest.MockedFunction<() => Promise<any[]>>;\n  updatePaymentMethod: jest.MockedFunction<(paymentMethod: any) => Promise<void>>;\n}\n\nexport interface MockVoiceService {\n  generateVoice: jest.MockedFunction<(text: string, options?: any) => Promise<any>>;\n  uploadVoice: jest.MockedFunction<(file: File, metadata?: any) => Promise<any>>;\n  deleteVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  getVoices: jest.MockedFunction<(userId?: string) => Promise<any[]>>;\n  getVoice: jest.MockedFunction<(voiceId: string) => Promise<any | null>>;\n  processVoice: jest.MockedFunction<(voiceId: string) => Promise<void>>;\n  synthesizeVoice: jest.MockedFunction<\n    (voiceId: string, text: string) => Promise<string>\n  >;\n  cloneVoice: jest.MockedFunction<(sourceId: string, name: string) => Promise<any>>;\n  trainVoiceModel: jest.MockedFunction<\n    (voiceId: string, samples: File[]) => Promise<void>\n  >;\n  getVoicePreview: jest.MockedFunction<\n    (voiceId: string, text?: string) => Promise<string>\n  >;\n  analyzeVoice: jest.MockedFunction<(voiceId: string) => Promise<any>>;\n}\n\nexport interface MockNotificationService {\n  requestPermission: jest.MockedFunction<() => Promise<NotificationPermission>>;\n  showNotification: jest.MockedFunction<\n    (title: string, options?: any) => Promise<void>\n  >;\n  scheduleNotification: jest.MockedFunction<\n    (id: string, notification: any, when: Date) => Promise<void>\n  >;\n  cancelNotification: jest.MockedFunction<(id: string) => Promise<void>>;\n  cancelAllNotifications: jest.MockedFunction<() => Promise<void>>;\n  getScheduledNotifications: jest.MockedFunction<() => Promise<any[]>>;\n  updateNotificationSettings: jest.MockedFunction<(settings: any) => Promise<void>>;\n  getNotificationSettings: jest.MockedFunction<() => Promise<any>>;\n  registerDevice: jest.MockedFunction<(token: string) => Promise<void>>;\n  unregisterDevice: jest.MockedFunction<() => Promise<void>>;\n}\n\nexport interface MockAudioService {\n  loadSound: jest.MockedFunction<(url: string) => Promise<any>>;\n  playSound: jest.MockedFunction<(soundId: string, options?: any) => Promise<void>>;\n  stopSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  pauseSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  resumeSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n  setVolume: jest.MockedFunction<(soundId: string, volume: number) => Promise<void>>;\n  fadeIn: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  fadeOut: jest.MockedFunction<(soundId: string, duration: number) => Promise<void>>;\n  getSoundDuration: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  getCurrentTime: jest.MockedFunction<(soundId: string) => Promise<number>>;\n  seekTo: jest.MockedFunction<(soundId: string, time: number) => Promise<void>>;\n  createSoundGroup: jest.MockedFunction<(groupId: string, soundIds: string[]) => void>;\n  deleteSound: jest.MockedFunction<(soundId: string) => Promise<void>>;\n}\n\nexport interface MockStorageService {\n  set: jest.MockedFunction<(key: string, value: any, options?: any) => Promise<void>>;\n  get: jest.MockedFunction<(key: string) => Promise<any>>;\n  remove: jest.MockedFunction<(key: string) => Promise<void>>;\n  clear: jest.MockedFunction<() => Promise<void>>;\n  keys: jest.MockedFunction<() => Promise<string[]>>;\n  size: jest.MockedFunction<() => Promise<number>>;\n  has: jest.MockedFunction<(key: string) => Promise<boolean>>;\n  getMultiple: jest.MockedFunction<(keys: string[]) => Promise<Record<string, any>>>;\n  setMultiple: jest.MockedFunction<(items: Record<string, any>) => Promise<void>>;\n  removeMultiple: jest.MockedFunction<(keys: string[]) => Promise<void>>;\n  sync: jest.MockedFunction<() => Promise<void>>;\n  backup: jest.MockedFunction<() => Promise<string>>;\n  restore: jest.MockedFunction<(backup: string) => Promise<void>>;\n}\n\nexport interface MockSecurityService {\n  encrypt: jest.MockedFunction<(data: any, key?: string) => Promise<string>>;\n  decrypt: jest.MockedFunction<(encryptedData: string, key?: string) => Promise<any>>;\n  hash: jest.MockedFunction<(data: string, algorithm?: string) => Promise<string>>;\n  verify: jest.MockedFunction<(data: string, hash: string) => Promise<boolean>>;\n  generateToken: jest.MockedFunction<\n    (payload?: any, expiresIn?: string) => Promise<string>\n  >;\n  validateToken: jest.MockedFunction<(token: string) => Promise<boolean>>;\n  generateSecureId: jest.MockedFunction<() => string>;\n  generateKeyPair: jest.MockedFunction<\n    () => Promise<{ publicKey: string; privateKey: string }>\n  >;\n  signData: jest.MockedFunction<(data: any, privateKey: string) => Promise<string>>;\n  verifySignature: jest.MockedFunction<\n    (data: any, signature: string, publicKey: string) => Promise<boolean>\n  >;\n}\n\n// ===============================\n// SERVICE IMPLEMENTATIONS\n// ===============================\n\nconst createMockAlarmService = (): MockAlarmService => ({\n  createAlarm: jest.fn().mockResolvedValue({ id: 'new-alarm-id', created: true }),\n  updateAlarm: jest.fn().mockResolvedValue({ updated: true }),\n  deleteAlarm: jest.fn().mockResolvedValue(undefined),\n  getAlarms: jest.fn().mockResolvedValue([]),\n  getAlarm: jest.fn().mockResolvedValue(null),\n  scheduleAlarm: jest.fn().mockResolvedValue(undefined),\n  cancelAlarm: jest.fn().mockResolvedValue(undefined),\n  snoozeAlarm: jest.fn().mockResolvedValue(undefined),\n  stopAlarm: jest.fn().mockResolvedValue(undefined),\n  validateAlarmTime: jest.fn().mockReturnValue(true),\n  getNextAlarmTime: jest\n    .fn()\n    .mockReturnValue(new Date(Date.now() + 24 * 60 * 60 * 1000)),\n  syncAlarms: jest.fn().mockResolvedValue(undefined),\n  exportAlarms: jest.fn().mockResolvedValue(JSON.stringify([])),\n  importAlarms: jest.fn().mockResolvedValue(0),\n});\n\nconst createMockAnalyticsService = (): MockAnalyticsService => ({\n  track: jest.fn(),\n  identify: jest.fn(),\n  page: jest.fn(),\n  group: jest.fn(),\n  alias: jest.fn(),\n  reset: jest.fn(),\n  flush: jest.fn().mockResolvedValue(undefined),\n  getAnalyticsData: jest.fn().mockResolvedValue({}),\n  setUserProperties: jest.fn(),\n  trackConversion: jest.fn(),\n  trackError: jest.fn(),\n});\n\nconst createMockBattleService = (): MockBattleService => ({\n  createBattle: jest.fn().mockResolvedValue({ id: 'battle-123', created: true }),\n  joinBattle: jest.fn().mockResolvedValue(undefined),\n  leaveBattle: jest.fn().mockResolvedValue(undefined),\n  getBattles: jest.fn().mockResolvedValue([]),\n  getBattle: jest.fn().mockResolvedValue(null),\n  startBattle: jest.fn().mockResolvedValue(undefined),\n  endBattle: jest.fn().mockResolvedValue({ winner: 'user-123' }),\n  submitAnswer: jest.fn().mockResolvedValue(true),\n  getLeaderboard: jest.fn().mockResolvedValue([]),\n  getUserStats: jest.fn().mockResolvedValue({ wins: 0, losses: 0, score: 0 }),\n  inviteToBattle: jest.fn().mockResolvedValue(undefined),\n  spectate: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSubscriptionService = (): MockSubscriptionService => ({\n  getSubscription: jest.fn().mockResolvedValue(null),\n  getSubscriptions: jest.fn().mockResolvedValue([]),\n  subscribe: jest.fn().mockResolvedValue({ id: 'sub-123', tier: 'premium' }),\n  cancelSubscription: jest.fn().mockResolvedValue(undefined),\n  updateSubscription: jest.fn().mockResolvedValue({ updated: true }),\n  resumeSubscription: jest.fn().mockResolvedValue(undefined),\n  getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n  checkAccess: jest.fn().mockReturnValue(true),\n  getUsage: jest.fn().mockResolvedValue(0),\n  getLimit: jest.fn().mockReturnValue(100),\n  trackUsage: jest.fn().mockResolvedValue(undefined),\n  getBillingHistory: jest.fn().mockResolvedValue([]),\n  updatePaymentMethod: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockVoiceService = (): MockVoiceService => ({\n  generateVoice: jest.fn().mockResolvedValue({ url: 'mock-audio-url' }),\n  uploadVoice: jest.fn().mockResolvedValue({ id: 'voice-123', processed: false }),\n  deleteVoice: jest.fn().mockResolvedValue(undefined),\n  getVoices: jest.fn().mockResolvedValue([]),\n  getVoice: jest.fn().mockResolvedValue(null),\n  processVoice: jest.fn().mockResolvedValue(undefined),\n  synthesizeVoice: jest.fn().mockResolvedValue('mock-audio-url'),\n  cloneVoice: jest.fn().mockResolvedValue({ id: 'cloned-voice-123' }),\n  trainVoiceModel: jest.fn().mockResolvedValue(undefined),\n  getVoicePreview: jest.fn().mockResolvedValue('mock-preview-url'),\n  analyzeVoice: jest.fn().mockResolvedValue({ quality: 'good', duration: 30 }),\n});\n\nconst createMockNotificationService = (): MockNotificationService => ({\n  requestPermission: jest.fn().mockResolvedValue('granted' as NotificationPermission),\n  showNotification: jest.fn().mockResolvedValue(undefined),\n  scheduleNotification: jest.fn().mockResolvedValue(undefined),\n  cancelNotification: jest.fn().mockResolvedValue(undefined),\n  cancelAllNotifications: jest.fn().mockResolvedValue(undefined),\n  getScheduledNotifications: jest.fn().mockResolvedValue([]),\n  updateNotificationSettings: jest.fn().mockResolvedValue(undefined),\n  getNotificationSettings: jest.fn().mockResolvedValue({ enabled: true }),\n  registerDevice: jest.fn().mockResolvedValue(undefined),\n  unregisterDevice: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockAudioService = (): MockAudioService => ({\n  loadSound: jest.fn().mockResolvedValue({ id: 'sound-123', loaded: true }),\n  playSound: jest.fn().mockResolvedValue(undefined),\n  stopSound: jest.fn().mockResolvedValue(undefined),\n  pauseSound: jest.fn().mockResolvedValue(undefined),\n  resumeSound: jest.fn().mockResolvedValue(undefined),\n  setVolume: jest.fn().mockResolvedValue(undefined),\n  fadeIn: jest.fn().mockResolvedValue(undefined),\n  fadeOut: jest.fn().mockResolvedValue(undefined),\n  getSoundDuration: jest.fn().mockResolvedValue(30),\n  getCurrentTime: jest.fn().mockResolvedValue(0),\n  seekTo: jest.fn().mockResolvedValue(undefined),\n  createSoundGroup: jest.fn(),\n  deleteSound: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockStorageService = (): MockStorageService => ({\n  set: jest.fn().mockResolvedValue(undefined),\n  get: jest.fn().mockResolvedValue(null),\n  remove: jest.fn().mockResolvedValue(undefined),\n  clear: jest.fn().mockResolvedValue(undefined),\n  keys: jest.fn().mockResolvedValue([]),\n  size: jest.fn().mockResolvedValue(0),\n  has: jest.fn().mockResolvedValue(false),\n  getMultiple: jest.fn().mockResolvedValue({}),\n  setMultiple: jest.fn().mockResolvedValue(undefined),\n  removeMultiple: jest.fn().mockResolvedValue(undefined),\n  sync: jest.fn().mockResolvedValue(undefined),\n  backup: jest.fn().mockResolvedValue(JSON.stringify({})),\n  restore: jest.fn().mockResolvedValue(undefined),\n});\n\nconst createMockSecurityService = (): MockSecurityService => ({\n  encrypt: jest.fn().mockResolvedValue('encrypted-data'),\n  decrypt: jest.fn().mockResolvedValue('decrypted-data'),\n  hash: jest.fn().mockResolvedValue('hash-123'),\n  verify: jest.fn().mockResolvedValue(true),\n  generateToken: jest.fn().mockResolvedValue('token-123'),\n  validateToken: jest.fn().mockResolvedValue(true),\n  generateSecureId: jest.fn().mockReturnValue('secure-id-123'),\n  generateKeyPair: jest.fn().mockResolvedValue({\n    publicKey: 'public-key',\n    privateKey: 'private-key',\n  }),\n  signData: jest.fn().mockResolvedValue('signature-123'),\n  verifySignature: jest.fn().mockResolvedValue(true),\n});\n\n// ===============================\n// SERVICE CONTEXTS\n// ===============================\n\nconst AlarmServiceContext = createContext<MockAlarmService>(createMockAlarmService());\nconst AnalyticsServiceContext = createContext<MockAnalyticsService>(\n  createMockAnalyticsService()\n);\nconst BattleServiceContext = createContext<MockBattleService>(\n  createMockBattleService()\n);\nconst SubscriptionServiceContext = createContext<MockSubscriptionService>(\n  createMockSubscriptionService()\n);\nconst VoiceServiceContext = createContext<MockVoiceService>(createMockVoiceService());\nconst NotificationServiceContext = createContext<MockNotificationService>(\n  createMockNotificationService()\n);\nconst AudioServiceContext = createContext<MockAudioService>(createMockAudioService());\nconst StorageServiceContext = createContext<MockStorageService>(\n  createMockStorageService()\n);\nconst SecurityServiceContext = createContext<MockSecurityService>(\n  createMockSecurityService()\n);\n\n// ===============================\n// SERVICE PROVIDERS\n// ===============================\n\nexport const ServiceTestProviders: React.FC<{\n  children: ReactNode;\n  alarmService?: Partial<MockAlarmService>;\n  analyticsService?: Partial<MockAnalyticsService>;\n  battleService?: Partial<MockBattleService>;\n  subscriptionService?: Partial<MockSubscriptionService>;\n  voiceService?: Partial<MockVoiceService>;\n  notificationService?: Partial<MockNotificationService>;\n  audioService?: Partial<MockAudioService>;\n  storageService?: Partial<MockStorageService>;\n  securityService?: Partial<MockSecurityService>;\n}> = ({\n  children,\n  alarmService = {},\n  analyticsService = {},\n  battleService = {},\n  subscriptionService = {},\n  voiceService = {},\n  notificationService = {},\n  audioService = {},\n  storageService = {},\n  securityService = {},\n}) => {\n  const mockAlarmService = { ...createMockAlarmService(), ...alarmService };\n  const mockAnalyticsService = { ...createMockAnalyticsService(), ...analyticsService };\n  const mockBattleService = { ...createMockBattleService(), ...battleService };\n  const mockSubscriptionService = {\n    ...createMockSubscriptionService(),\n    ...subscriptionService,\n  };\n  const mockVoiceService = { ...createMockVoiceService(), ...voiceService };\n  const mockNotificationService = {\n    ...createMockNotificationService(),\n    ...notificationService,\n  };\n  const mockAudioService = { ...createMockAudioService(), ...audioService };\n  const mockStorageService = { ...createMockStorageService(), ...storageService };\n  const mockSecurityService = { ...createMockSecurityService(), ...securityService };\n\n  return (\n    <AlarmServiceContext.Provider value={mockAlarmService}>\n      <AnalyticsServiceContext.Provider value={mockAnalyticsService}>\n        <BattleServiceContext.Provider value={mockBattleService}>\n          <SubscriptionServiceContext.Provider value={mockSubscriptionService}>\n            <VoiceServiceContext.Provider value={mockVoiceService}>\n              <NotificationServiceContext.Provider value={mockNotificationService}>\n                <AudioServiceContext.Provider value={mockAudioService}>\n                  <StorageServiceContext.Provider value={mockStorageService}>\n                    <SecurityServiceContext.Provider value={mockSecurityService}>\n                      {children}\n                    </SecurityServiceContext.Provider>\n                  </StorageServiceContext.Provider>\n                </AudioServiceContext.Provider>\n              </NotificationServiceContext.Provider>\n            </VoiceServiceContext.Provider>\n          </SubscriptionServiceContext.Provider>\n        </BattleServiceContext.Provider>\n      </AnalyticsServiceContext.Provider>\n    </AlarmServiceContext.Provider>\n  );\n};\n\n// ===============================\n// HOOK UTILITIES\n// ===============================\n\nexport const _useAlarmServiceTest = () => useContext(AlarmServiceContext);\nexport const _useAnalyticsServiceTest = () => useContext(AnalyticsServiceContext);\nexport const _useBattleServiceTest = () => useContext(BattleServiceContext);\nexport const _useSubscriptionServiceTest = () => useContext(SubscriptionServiceContext);\nexport const _useVoiceServiceTest = () => useContext(VoiceServiceContext);\nexport const _useNotificationServiceTest = () => useContext(NotificationServiceContext);\nexport const _useAudioServiceTest = () => useContext(AudioServiceContext);\nexport const _useStorageServiceTest = () => useContext(StorageServiceContext);\nexport const _useSecurityServiceTest = () => useContext(SecurityServiceContext);\n\n// ===============================\n// SERVICE SCENARIOS\n// ===============================\n\nexport const _serviceScenarios = {\n  // Alarm Service Scenarios\n  alarmServiceScenarios: {\n    withAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([\n        { id: 'alarm-1', time: '07:00', enabled: true },\n        { id: 'alarm-2', time: '08:30', enabled: false },\n      ]),\n    },\n    noAlarms: {\n      getAlarms: jest.fn().mockResolvedValue([]),\n    },\n    createError: {\n      createAlarm: jest.fn().mockRejectedValue(new Error('Failed to create alarm')),\n    },\n    syncError: {\n      syncAlarms: jest.fn().mockRejectedValue(new Error('Sync failed')),\n    },\n  },\n\n  // Analytics Service Scenarios\n  analyticsServiceScenarios: {\n    trackingEnabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n    trackingDisabled: {\n      track: jest.fn(),\n      identify: jest.fn(),\n    },\n  },\n\n  // Battle Service Scenarios\n  battleServiceScenarios: {\n    activeBattles: {\n      getBattles: jest\n        .fn()\n        .mockResolvedValue([{ id: 'battle-1', status: 'active', participants: 2 }]),\n    },\n    noBattles: {\n      getBattles: jest.fn().mockResolvedValue([]),\n    },\n    joinError: {\n      joinBattle: jest.fn().mockRejectedValue(new Error('Battle is full')),\n    },\n  },\n\n  // Subscription Service Scenarios\n  subscriptionServiceScenarios: {\n    freeUser: {\n      getSubscription: jest.fn().mockResolvedValue(null),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      getFeatures: jest.fn().mockReturnValue(['basic_alarms']),\n    },\n    premiumUser: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'active',\n      }),\n      checkAccess: jest.fn(() => true),\n      getFeatures: jest\n        .fn()\n        .mockReturnValue(['unlimited_alarms', 'custom_voices', 'themes']),\n    },\n    expiredSubscription: {\n      getSubscription: jest.fn().mockResolvedValue({\n        tier: 'premium',\n        status: 'past_due',\n      }),\n      checkAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n    },\n  },\n\n  // Audio Service Scenarios\n  audioServiceScenarios: {\n    soundsLoaded: {\n      loadSound: jest.fn().mockResolvedValue({ loaded: true }),\n      playSound: jest.fn().mockResolvedValue(undefined),\n    },\n    loadError: {\n      loadSound: jest.fn().mockRejectedValue(new Error('Failed to load sound')),\n    },\n    playbackError: {\n      playSound: jest.fn().mockRejectedValue(new Error('Playback failed')),\n    },\n  },\n\n  // Storage Service Scenarios\n  storageServiceScenarios: {\n    dataExists: {\n      get: jest.fn().mockResolvedValue({ data: 'test' }),\n      has: jest.fn().mockResolvedValue(true),\n    },\n    noData: {\n      get: jest.fn().mockResolvedValue(null),\n      has: jest.fn().mockResolvedValue(false),\n    },\n    storageError: {\n      set: jest.fn().mockRejectedValue(new Error('Storage quota exceeded')),\n    },\n  },\n};\n\nexport default {\n  ServiceTestProviders,\n  useAlarmServiceTest,\n  useAnalyticsServiceTest,\n  useBattleServiceTest,\n  useSubscriptionServiceTest,\n  useVoiceServiceTest,\n  useNotificationServiceTest,\n  useAudioServiceTest,\n  useStorageServiceTest,\n  useSecurityServiceTest,\n  serviceScenarios,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/project/workspace/Coolhgg/Relife/src/__tests__/providers/test-providers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 451,
        "column": 25,
        "nodeType": "MemberExpression",
        "endLine": 451,
        "endColumn": 41
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 452,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 452,
        "endColumn": 36
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 453,
        "column": 16,
        "nodeType": "MemberExpression",
        "endLine": 453,
        "endColumn": 32
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 454,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 454,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 455,
        "column": 17,
        "nodeType": "MemberExpression",
        "endLine": 455,
        "endColumn": 33
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 456,
        "column": 24,
        "nodeType": "MemberExpression",
        "endLine": 456,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"React.useContext\" is called in function \"_useTestContext\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 457,
        "column": 20,
        "nodeType": "MemberExpression",
        "endLine": 457,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Test Wrapper Providers for Contexts and Services\n *\n * Comprehensive test wrapper providers that mock all application contexts and services\n * for isolated and integration testing scenarios.\n */\n\nimport React, { ReactNode } from 'react';\nimport { render, RenderOptions } from '@testing-library/react';\nimport { MemoryRouter, MemoryRouterProps } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\n// Context Types\ninterface FeatureAccessContextValue {\n  hasAccess: (feature: string) => boolean;\n  checkFeatureAccess: (feature: string, tier?: string) => boolean;\n  isFeatureEnabled: (feature: string) => boolean;\n  upgradeRequired: (feature: string) => boolean;\n}\n\ninterface LanguageContextValue {\n  language: string;\n  setLanguage: (lang: string) => void;\n  t: (key: string, options?: any) => string;\n  dir: 'ltr' | 'rtl';\n  formatTime: (time: Date) => string;\n  formatDate: (date: Date) => string;\n}\n\ninterface AuthContextValue {\n  user: any | null;\n  login: (credentials: any) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ThemeContextValue {\n  theme: string;\n  setTheme: (theme: string) => void;\n  isDark: boolean;\n  colors: Record<string, string>;\n  animations: boolean;\n  setAnimations: (enabled: boolean) => void;\n}\n\ninterface AlarmContextValue {\n  alarms: any[];\n  addAlarm: (alarm: any) => Promise<void>;\n  updateAlarm: (id: string, updates: any) => Promise<void>;\n  deleteAlarm: (id: string) => Promise<void>;\n  toggleAlarm: (id: string) => Promise<void>;\n  activeAlarm: any | null;\n  snoozeAlarm: (id: string) => Promise<void>;\n  stopAlarm: (id: string) => Promise<void>;\n}\n\ninterface SubscriptionContextValue {\n  subscription: any | null;\n  tier: 'free' | 'premium' | 'ultimate';\n  isSubscribed: boolean;\n  subscribe: (tier: string) => Promise<void>;\n  cancelSubscription: () => Promise<void>;\n  features: string[];\n  billing: any | null;\n}\n\n// Mock Context Implementations\nexport const _createMockFeatureAccessContext = (\n  overrides: Partial<FeatureAccessContextValue> = {}\n): FeatureAccessContextValue => ({\n  hasAccess: jest.fn(() => true),\n  checkFeatureAccess: jest.fn(() => true),\n  isFeatureEnabled: jest.fn(() => true),\n  upgradeRequired: jest.fn(() => false),\n  ...overrides,\n});\n\nexport const _createMockLanguageContext = (\n  overrides: Partial<LanguageContextValue> = {}\n): LanguageContextValue => ({\n  language: 'en',\n  setLanguage: jest.fn(),\n  t: jest.fn((key: string) => key),\n  dir: 'ltr',\n  formatTime: jest.fn((time: Date) => time.toLocaleTimeString()),\n  formatDate: jest.fn((date: Date) => date.toLocaleDateString()),\n  ...overrides,\n});\n\nexport const _createMockAuthContext = (\n  overrides: Partial<AuthContextValue> = {}\n): AuthContextValue => ({\n  user: {\n    id: 'test-user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    subscription: { tier: 'premium', status: 'active' },\n  },\n  login: jest.fn(),\n  logout: jest.fn(),\n  register: jest.fn(),\n  isAuthenticated: true,\n  isLoading: false,\n  error: null,\n  ...overrides,\n});\n\nexport const _createMockThemeContext = (\n  overrides: Partial<ThemeContextValue> = {}\n): ThemeContextValue => ({\n  theme: 'dark',\n  setTheme: jest.fn(),\n  isDark: true,\n  colors: {\n    primary: '#6366f1',\n    secondary: '#8b5cf6',\n    background: '#0f172a',\n    surface: '#1e293b',\n    text: '#f1f5f9',\n    accent: '#06b6d4',\n  },\n  animations: true,\n  setAnimations: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockAlarmContext = (\n  overrides: Partial<AlarmContextValue> = {}\n): AlarmContextValue => ({\n  alarms: [\n    {\n      id: 'alarm-1',\n      time: '07:00',\n      label: 'Wake up',\n      enabled: true,\n      days: [1, 2, 3, 4, 5],\n      sound: 'classic',\n    },\n  ],\n  addAlarm: jest.fn(),\n  updateAlarm: jest.fn(),\n  deleteAlarm: jest.fn(),\n  toggleAlarm: jest.fn(),\n  activeAlarm: null,\n  snoozeAlarm: jest.fn(),\n  stopAlarm: jest.fn(),\n  ...overrides,\n});\n\nexport const _createMockSubscriptionContext = (\n  overrides: Partial<SubscriptionContextValue> = {}\n): SubscriptionContextValue => ({\n  subscription: {\n    id: 'sub-123',\n    tier: 'premium',\n    status: 'active',\n    current_period_end: '2024-12-31T23:59:59Z',\n  },\n  tier: 'premium',\n  isSubscribed: true,\n  subscribe: jest.fn(),\n  cancelSubscription: jest.fn(),\n  features: ['unlimited_alarms', 'custom_voices', 'themes', 'battle_mode'],\n  billing: {\n    amount: 9.99,\n    currency: 'USD',\n    interval: 'month',\n  },\n  ...overrides,\n});\n\n// Context Providers\nconst FeatureAccessContext = React.createContext<FeatureAccessContextValue>(\n  createMockFeatureAccessContext()\n);\nconst LanguageContext = React.createContext<LanguageContextValue>(\n  createMockLanguageContext()\n);\nconst AuthContext = React.createContext<AuthContextValue>(createMockAuthContext());\nconst ThemeContext = React.createContext<ThemeContextValue>(createMockThemeContext());\nconst AlarmContext = React.createContext<AlarmContextValue>(createMockAlarmContext());\nconst SubscriptionContext = React.createContext<SubscriptionContextValue>(\n  createMockSubscriptionContext()\n);\n\n// Individual Provider Components\nexport const MockFeatureAccessProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<FeatureAccessContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockFeatureAccessContext(value);\n  return (\n    <FeatureAccessContext.Provider value={mockValue}>\n      {children}\n    </FeatureAccessContext.Provider>\n  );\n};\n\nexport const MockLanguageProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<LanguageContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockLanguageContext(value);\n  return (\n    <LanguageContext.Provider value={mockValue}>{children}</LanguageContext.Provider>\n  );\n};\n\nexport const MockAuthProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AuthContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAuthContext(value);\n  return <AuthContext.Provider value={mockValue}>{children}</AuthContext.Provider>;\n};\n\nexport const MockThemeProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<ThemeContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockThemeContext(value);\n  return <ThemeContext.Provider value={mockValue}>{children}</ThemeContext.Provider>;\n};\n\nexport const MockAlarmProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<AlarmContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockAlarmContext(value);\n  return <AlarmContext.Provider value={mockValue}>{children}</AlarmContext.Provider>;\n};\n\nexport const MockSubscriptionProvider: React.FC<{\n  children: ReactNode;\n  value?: Partial<SubscriptionContextValue>;\n}> = ({ children, value = {} }) => {\n  const mockValue = createMockSubscriptionContext(value);\n  return (\n    <SubscriptionContext.Provider value={mockValue}>\n      {children}\n    </SubscriptionContext.Provider>\n  );\n};\n\n// Service Mocks\nexport const _createMockServices = () => ({\n  alarmService: {\n    createAlarm: jest.fn(),\n    updateAlarm: jest.fn(),\n    deleteAlarm: jest.fn(),\n    getAlarms: jest.fn(() => Promise.resolve([])),\n    scheduleAlarm: jest.fn(),\n    cancelAlarm: jest.fn(),\n    snoozeAlarm: jest.fn(),\n    stopAlarm: jest.fn(),\n  },\n\n  analyticsService: {\n    track: jest.fn(),\n    identify: jest.fn(),\n    page: jest.fn(),\n    group: jest.fn(),\n    alias: jest.fn(),\n    reset: jest.fn(),\n  },\n\n  battleService: {\n    createBattle: jest.fn(),\n    joinBattle: jest.fn(),\n    leaveBattle: jest.fn(),\n    getBattles: jest.fn(() => Promise.resolve([])),\n    startBattle: jest.fn(),\n    endBattle: jest.fn(),\n    submitAnswer: jest.fn(),\n  },\n\n  subscriptionService: {\n    getSubscription: jest.fn(),\n    subscribe: jest.fn(),\n    cancelSubscription: jest.fn(),\n    updateSubscription: jest.fn(),\n    getFeatures: jest.fn(() => []),\n    checkAccess: jest.fn(() => true),\n  },\n\n  voiceService: {\n    generateVoice: jest.fn(),\n    uploadVoice: jest.fn(),\n    deleteVoice: jest.fn(),\n    getVoices: jest.fn(() => Promise.resolve([])),\n    processVoice: jest.fn(),\n    synthesizeVoice: jest.fn(),\n  },\n\n  themeService: {\n    getThemes: jest.fn(() => Promise.resolve([])),\n    applyTheme: jest.fn(),\n    createCustomTheme: jest.fn(),\n    deleteTheme: jest.fn(),\n    exportTheme: jest.fn(),\n    importTheme: jest.fn(),\n  },\n\n  notificationService: {\n    requestPermission: jest.fn(() => Promise.resolve('granted')),\n    showNotification: jest.fn(),\n    scheduleNotification: jest.fn(),\n    cancelNotification: jest.fn(),\n    clearAllNotifications: jest.fn(),\n  },\n\n  audioService: {\n    loadSound: jest.fn(),\n    playSound: jest.fn(),\n    stopSound: jest.fn(),\n    pauseSound: jest.fn(),\n    setVolume: jest.fn(),\n    fadeIn: jest.fn(),\n    fadeOut: jest.fn(),\n  },\n\n  storageService: {\n    set: jest.fn(),\n    get: jest.fn(),\n    remove: jest.fn(),\n    clear: jest.fn(),\n    keys: jest.fn(() => []),\n    size: jest.fn(() => 0),\n  },\n\n  securityService: {\n    encrypt: jest.fn(data => Promise.resolve(btoa(JSON.stringify(data)))),\n    decrypt: jest.fn(data => Promise.resolve(JSON.parse(atob(data)))),\n    hash: jest.fn(data => Promise.resolve(`hash_${data}`)),\n    verify: jest.fn(() => Promise.resolve(true)),\n    generateToken: jest.fn(() => 'mock_token_123'),\n  },\n});\n\n// Service Provider Context\nconst ServiceContext = React.createContext(createMockServices());\n\nexport const MockServiceProvider: React.FC<{\n  children: ReactNode;\n  services?: Partial<ReturnType<typeof createMockServices>>;\n}> = ({ children, services = {} }) => {\n  const mockServices = { ...createMockServices(), ...services };\n  return (\n    <ServiceContext.Provider value={mockServices}>{children}</ServiceContext.Provider>\n  );\n};\n\n// Combined Test Provider\nexport interface TestProvidersOptions {\n  // Context overrides\n  featureAccess?: Partial<FeatureAccessContextValue>;\n  language?: Partial<LanguageContextValue>;\n  auth?: Partial<AuthContextValue>;\n  theme?: Partial<ThemeContextValue>;\n  alarm?: Partial<AlarmContextValue>;\n  subscription?: Partial<SubscriptionContextValue>;\n\n  // Service overrides\n  services?: Partial<ReturnType<typeof createMockServices>>;\n\n  // Router options\n  router?: MemoryRouterProps;\n\n  // Query client options\n  queryClient?: QueryClient;\n\n  // Additional wrappers\n  wrappers?: React.ComponentType<{ children: ReactNode }>[];\n}\n\nexport const TestProviders: React.FC<{\n  children: ReactNode;\n  options?: TestProvidersOptions;\n}> = ({ children, options = {} }) => {\n  const {\n    featureAccess = {},\n    language = {},\n    auth = {},\n    theme = {},\n    alarm = {},\n    subscription = {},\n    services = {},\n    router = { initialEntries: ['/'] },\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n    wrappers = [],\n  } = options;\n\n  let wrappedChildren = (\n    <QueryClientProvider client={queryClient}>\n      <MemoryRouter {...router}>\n        <MockServiceProvider services={services}>\n          <MockFeatureAccessProvider value={featureAccess}>\n            <MockLanguageProvider value={language}>\n              <MockAuthProvider value={auth}>\n                <MockThemeProvider value={theme}>\n                  <MockAlarmProvider value={alarm}>\n                    <MockSubscriptionProvider value={subscription}>\n                      {children}\n                    </MockSubscriptionProvider>\n                  </MockAlarmProvider>\n                </MockThemeProvider>\n              </MockAuthProvider>\n            </MockLanguageProvider>\n          </MockFeatureAccessProvider>\n        </MockServiceProvider>\n      </MemoryRouter>\n    </QueryClientProvider>\n  );\n\n  // Apply additional wrappers\n  wrappers.forEach(Wrapper => {\n    wrappedChildren = <Wrapper>{wrappedChildren}</Wrapper>;\n  });\n\n  return <>{wrappedChildren}</>;\n};\n\n// Custom Render Function\nexport interface TestRenderOptions extends RenderOptions {\n  providerOptions?: TestProvidersOptions;\n}\n\nexport const _renderWithProviders = (\n  ui: React.ReactElement,\n  options: TestRenderOptions = {}\n) => {\n  const { providerOptions = {}, ...renderOptions } = options;\n\n  const Wrapper: React.FC<{ children: ReactNode }> = ({ children }) => (\n    <TestProviders options={providerOptions}>{children}</TestProviders>\n  );\n\n  return render(ui, { wrapper: Wrapper, ...renderOptions });\n};\n\n// Utility Hooks for Testing\nexport const _useTestContext = () => {\n  const featureAccess = React.useContext(FeatureAccessContext);\n  const language = React.useContext(LanguageContext);\n  const auth = React.useContext(AuthContext);\n  const theme = React.useContext(ThemeContext);\n  const alarm = React.useContext(AlarmContext);\n  const subscription = React.useContext(SubscriptionContext);\n  const services = React.useContext(ServiceContext);\n\n  return {\n    featureAccess,\n    language,\n    auth,\n    theme,\n    alarm,\n    subscription,\n    services,\n  };\n};\n\n// Pre-configured Test Scenarios\nexport const _testScenarios = {\n  // Free user scenario\n  freeUser: {\n    auth: {\n      user: {\n        id: 'free-user',\n        email: 'free@test.com',\n        subscription: { tier: 'free', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'free' as const,\n      isSubscribed: false,\n      features: ['basic_alarms'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn((feature: string) => feature === 'basic_alarms'),\n      upgradeRequired: jest.fn((feature: string) => feature !== 'basic_alarms'),\n    },\n  },\n\n  // Premium user scenario\n  premiumUser: {\n    auth: {\n      user: {\n        id: 'premium-user',\n        email: 'premium@test.com',\n        subscription: { tier: 'premium', status: 'active' },\n      },\n    },\n    subscription: {\n      tier: 'premium' as const,\n      isSubscribed: true,\n      features: ['unlimited_alarms', 'custom_voices', 'themes'],\n    },\n    featureAccess: {\n      hasAccess: jest.fn(() => true),\n      upgradeRequired: jest.fn(() => false),\n    },\n  },\n\n  // Unauthenticated scenario\n  unauthenticated: {\n    auth: {\n      user: null,\n      isAuthenticated: false,\n    },\n  },\n\n  // Mobile scenario\n  mobile: {\n    theme: {\n      theme: 'mobile-dark',\n      colors: {\n        primary: '#6366f1',\n        background: '#000000',\n        surface: '#1a1a1a',\n      },\n    },\n  },\n\n  // RTL language scenario\n  rtl: {\n    language: {\n      language: 'ar',\n      dir: 'rtl' as const,\n      t: jest.fn((key: string) => `ar_${key}`),\n    },\n  },\n\n  // Offline scenario\n  offline: {\n    services: {\n      storageService: {\n        get: jest.fn(),\n        set: jest.fn(),\n        // Simulate offline storage\n      },\n    },\n  },\n};\n\n// Helper function to render with pre-configured scenarios\nexport const _renderWithScenario = (\n  ui: React.ReactElement,\n  scenario: keyof typeof testScenarios,\n  additionalOptions: TestProvidersOptions = {}\n) => {\n  const scenarioOptions = testScenarios[scenario];\n  const mergedOptions = {\n    ...scenarioOptions,\n    ...additionalOptions,\n  };\n\n  return _renderWithProviders(ui, {\n    providerOptions: mergedOptions,\n  });\n};\n\n// Alias exports without underscores\nexport const renderWithProviders = _renderWithProviders;\nexport const renderWithScenario = _renderWithScenario;\nexport const testScenarios = _testScenarios;\nexport const useTestContext = _useTestContext;\nexport const createMockServices = _createMockServices;\n\nexport default {\n  TestProviders,\n  renderWithProviders,\n  renderWithScenario,\n  testScenarios,\n  useTestContext,\n  createMockServices,\n};\n",
    "usedDeprecatedRules": []
  }
]
