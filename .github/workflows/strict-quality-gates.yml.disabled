# Strict Quality Gates - Zero Tolerance for Code Quality Issues
# This workflow enforces the highest standards using intelligent quality tools
# All gates must pass for merges to be allowed

name: üõ°Ô∏è Strict Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Required permissions for status checks and comments
permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: write
  statuses: write

# Cancel redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  FORCE_COLOR: 1

jobs:
  # Gate 1: Dependency Security & Installation
  security-gate:
    name: üîí Security Gate
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies (strict mode)
        run: |
          echo "üîß Installing dependencies with frozen lockfile..."
          bun install --frozen-lockfile

      - name: Security audit (fail on vulnerabilities)
        run: |
          echo "üîç Running security audit..."
          bun audit --audit-level high
          if [ $? -ne 0 ]; then
            echo "‚ùå High/Critical security vulnerabilities found - blocking merge"
            exit 1
          fi
          echo "‚úÖ Security audit passed"

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets..."

          # Check for common secret patterns
          SECRET_COUNT=0

          # Scan TypeScript/JavaScript files
          if grep -r -E "(api[_-]?key|secret|password|token|private[_-]?key|client[_-]?secret)" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" | grep -v "process.env" | grep -v "VITE_"; then
            echo "‚ùå Potential hardcoded secrets found"
            SECRET_COUNT=$((SECRET_COUNT + 1))
          fi

          # Check for AWS keys
          if grep -r -E "AKIA[0-9A-Z]{16}" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "‚ùå AWS Access Key detected"
            SECRET_COUNT=$((SECRET_COUNT + 1))
          fi

          # Check for common secret file patterns
          if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -v node_modules | grep -v .git; then
            echo "‚ùå Secret files detected"
            SECRET_COUNT=$((SECRET_COUNT + 1))
          fi

          if [ $SECRET_COUNT -gt 0 ]; then
            echo "‚ùå $SECRET_COUNT secret-related issues found - blocking merge"
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets detected"

  # Gate 2: Intelligent Code Quality
  code-quality-gate:
    name: üß† Intelligent Code Quality Gate
    runs-on: ubuntu-latest
    needs: security-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: TypeScript strict compilation
        run: |
          echo "üî∑ Running TypeScript compilation with strict checks..."
          bun run type-check
          if [ $? -ne 0 ]; then
            echo "‚ùå TypeScript compilation failed - blocking merge"
            exit 1
          fi
          echo "‚úÖ TypeScript compilation passed"

      - name: Intelligent ESLint analysis
        run: |
          echo "üß† Running intelligent ESLint analysis..."
          node scripts/intelligent-eslint-fix.js --verbose --no-fix
          if [ $? -ne 0 ]; then
            echo "‚ùå Critical ESLint issues found - blocking merge"
            exit 1
          fi
          echo "‚úÖ ESLint analysis passed"

      - name: React Hooks dependency enforcement (strict)
        run: |
          echo "üé£ Running strict React Hooks dependency analysis..."
          node scripts/react-hooks-enforcer.js --strict --verbose --max-warnings 0
          HOOK_EXIT_CODE=$?

          if [ $HOOK_EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è React Hook dependency issues found"
            echo "üìù Running analysis with suggestions..."
            node scripts/react-hooks-enforcer.js --verbose
            echo "‚ùå Hook dependencies must be resolved - blocking merge"
            exit 1
          fi

          echo "‚úÖ React Hooks dependencies are clean"

      - name: Code formatting validation
        run: |
          echo "üíÖ Validating code formatting..."
          if ! bunx prettier --check "src/**/*.{ts,tsx,js,jsx,css,md,json}"; then
            echo "‚ùå Code formatting issues found - run 'bun run format' to fix"
            exit 1
          fi
          echo "‚úÖ Code formatting is correct"

  # Gate 3: Testing & Quality Metrics
  testing-gate:
    name: üß™ Testing Gate
    runs-on: ubuntu-latest
    needs: code-quality-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Unit tests with coverage requirements
        run: |
          echo "üß™ Running unit tests with coverage requirements..."
          bun run test:coverage

          # Check coverage thresholds
          echo "üìä Validating coverage thresholds..."
          # Add coverage validation logic here if needed

      - name: Integration tests for critical flows
        run: |
          echo "üîó Running integration tests for critical flows..."
          bun run test:integration:coverage
        env:
          NODE_ENV: test
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test_key
          VITE_STRIPE_PUBLISHABLE_KEY: pk_test_123
          VITE_POSTHOG_KEY: phc_test_123

      - name: Build validation
        run: |
          echo "üèóÔ∏è Validating production build..."
          bun run build

          # Verify build output
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build validation failed - missing output files"
            exit 1
          fi

          echo "‚úÖ Build validation passed"

      - name: Bundle size validation (strict)
        run: |
          echo "üì¶ Validating bundle size constraints..."

          # Check if bundlesize is configured
          if command -v bundlesize &> /dev/null; then
            npx bundlesize
            if [ $? -ne 0 ]; then
              echo "‚ùå Bundle size exceeds limits - optimize before merge"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è Bundle size monitoring not configured"
          fi

          echo "‚úÖ Bundle size validation passed"

  # Gate 4: Performance & Accessibility
  performance-gate:
    name: ‚ö° Performance & Accessibility Gate
    runs-on: ubuntu-latest
    needs: testing-gate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build for performance testing
        run: bun run build

      - name: Lighthouse CI performance audit
        run: |
          echo "üîç Running Lighthouse performance audit..."
          if command -v lhci &> /dev/null; then
            bun run test:a11y:lighthouse
          else
            echo "‚ö†Ô∏è Lighthouse CI not available - skipping performance audit"
          fi

      - name: Accessibility validation
        run: |
          echo "‚ôø Running accessibility validation..."
          if [ -f "scripts/generate-a11y-baseline.mjs" ]; then
            bun run a11y:gate
          else
            echo "‚ö†Ô∏è Accessibility validation not configured"
          fi

  # Gate 5: Final Validation & Reporting
  final-validation:
    name: ‚úÖ Final Validation
    runs-on: ubuntu-latest
    needs: [security-gate, code-quality-gate, testing-gate, performance-gate]
    if: always()

    steps:
      - name: Check gate results
        run: |
          echo "üîç Checking all quality gate results..."

          SECURITY_STATUS="${{ needs.security-gate.result }}"
          QUALITY_STATUS="${{ needs.code-quality-gate.result }}"
          TESTING_STATUS="${{ needs.testing-gate.result }}"
          PERFORMANCE_STATUS="${{ needs.performance-gate.result }}"

          echo "Security Gate: $SECURITY_STATUS"
          echo "Code Quality Gate: $QUALITY_STATUS"
          echo "Testing Gate: $TESTING_STATUS" 
          echo "Performance Gate: $PERFORMANCE_STATUS"

          # All gates must pass
          if [ "$SECURITY_STATUS" != "success" ] || [ "$QUALITY_STATUS" != "success" ] || [ "$TESTING_STATUS" != "success" ] || [ "$PERFORMANCE_STATUS" != "success" ]; then
            echo "‚ùå One or more quality gates failed - blocking merge"
            exit 1
          fi

          echo "‚úÖ All quality gates passed successfully!"

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const securityStatus = '${{ needs.security-gate.result }}';
            const qualityStatus = '${{ needs.code-quality-gate.result }}';
            const testingStatus = '${{ needs.testing-gate.result }}';
            const performanceStatus = '${{ needs.performance-gate.result }}';

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚è∏Ô∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };

            const allPassed = [securityStatus, qualityStatus, testingStatus, performanceStatus].every(s => s === 'success');

            const body = `## üõ°Ô∏è Strict Quality Gates Results

            | Gate | Status | Description |
            |------|--------|-------------|
            | üîí Security | ${statusEmoji(securityStatus)} ${securityStatus} | Dependency audit, secret scanning |
            | üß† Code Quality | ${statusEmoji(qualityStatus)} ${qualityStatus} | TypeScript, ESLint, React Hooks, formatting |
            | üß™ Testing | ${statusEmoji(testingStatus)} ${testingStatus} | Unit tests, integration tests, build validation |
            | ‚ö° Performance | ${statusEmoji(performanceStatus)} ${performanceStatus} | Bundle size, Lighthouse, accessibility |

            ${allPassed ? 
              'üéâ **All quality gates passed!** This PR meets the highest quality standards and is ready for merge.' : 
              '‚ö†Ô∏è **Some quality gates failed.** Please review and fix the issues before merging.'}

            ### üîß Quality Tools Used
            - **Intelligent ESLint Analysis**: Auto-fixes safe issues, warns about risky ones
            - **React Hooks Enforcer**: Prevents infinite re-render bugs
            - **Security Scanner**: Blocks hardcoded secrets and vulnerabilities
            - **Strict Type Checking**: Ensures type safety across the codebase
            - **Performance Monitoring**: Maintains bundle size and accessibility standards

            ### üìö Fix Commands
            \`\`\`bash
            # Fix code quality issues
            bun run quality:full-check

            # Fix ESLint issues intelligently  
            node scripts/intelligent-eslint-fix.js --verbose

            # Check React Hooks dependencies
            node scripts/react-hooks-enforcer.js --strict --verbose

            # Format code
            bun run format
            \`\`\`
            `;

            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('Strict Quality Gates Results')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
              }
            } catch (error) {
              console.error('Failed to update PR comment:', error);
            }
