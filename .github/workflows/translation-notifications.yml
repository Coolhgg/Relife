# Translation Maintenance Notifications
# Proactive notifications for translation maintenance needs and team alerts

name: 🔔 Translation Notifications

on:
  schedule:
    # Check for maintenance needs every day at 1 PM UTC (distributed load)
    - cron: "0 13 * * *"
    # Send weekly summary on Fridays at 5 PM UTC
    - cron: "0 17 * * 5"
    # Monthly maintenance reminder on the 15th at 3 PM UTC
    - cron: "0 15 15 * *"
  workflow_dispatch:
    inputs:
      notification_type:
        description: "Type of notification to send"
        required: false
        default: "daily-check"
        type: choice
        options:
          - "daily-check"
          - "weekly-summary"
          - "monthly-maintenance"
          - "urgent-alert"
          - "quality-alert"
      force_notify:
        description: "Force send notifications even if no issues"
        required: false
        default: false
        type: boolean
      test_mode:
        description: "Test mode (no actual notifications sent)"
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: "20"
  NOTIFICATIONS_DIR: ".github/translation-notifications"
  MIN_QUALITY_THRESHOLD: 70
  CRITICAL_QUALITY_THRESHOLD: 50

jobs:
  # Analyze translation health
  analyze-health:
    name: 🔍 Analyze Translation Health
    runs-on: ubuntu-latest

    outputs:
      needs-attention: ${{ steps.health.outputs.needs-attention }}
      critical-issues: ${{ steps.health.outputs.critical-issues }}
      quality-alerts: ${{ steps.health.outputs.quality-alerts }}
      maintenance-due: ${{ steps.health.outputs.maintenance-due }}
      notification-data: ${{ steps.health.outputs.notification-data }}
      notification-type: ${{ steps.determine-type.outputs.notification-type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 10

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm install chalk yargs date-fns

      - name: Create notifications directory
        run: |
          mkdir -p ${{ env.NOTIFICATIONS_DIR }}
          mkdir -p ${{ env.NOTIFICATIONS_DIR }}/history
          mkdir -p ${{ env.NOTIFICATIONS_DIR }}/templates

      - name: Determine notification type
        id: determine-type
        run: |
          if [[ "${{ github.event.inputs.notification_type }}" != "" ]]; then
            echo "notification-type=${{ github.event.inputs.notification_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.schedule }}" == "0 14 * * 5" ]]; then
            echo "notification-type=weekly-summary" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.schedule }}" == "0 11 15 * *" ]]; then
            echo "notification-type=monthly-maintenance" >> $GITHUB_OUTPUT
          else
            echo "notification-type=daily-check" >> $GITHUB_OUTPUT
          fi

      - name: Analyze translation health
        id: health
        run: |
          echo "🔍 Analyzing translation health for notifications..."

          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          ANALYSIS_FILE="${{ env.NOTIFICATIONS_DIR }}/analysis-$TIMESTAMP.json"

          # Run comprehensive analysis
          node scripts/advanced-translation-manager.mjs analyze \
            --format=json \
            --output="$ANALYSIS_FILE" \
            --monitoring-mode

          # Analyze health and determine notification needs
          node scripts/analyze-translation-health.js \
            "$ANALYSIS_FILE" \
            "${{ env.MIN_QUALITY_THRESHOLD }}" \
            "${{ env.CRITICAL_QUALITY_THRESHOLD }}" \
            "${{ steps.determine-type.outputs.notification-type }}"

      - name: Check notification history
        id: history
        run: |
          echo "📜 Checking notification history to prevent spam..."

          HISTORY_FILE="${{ env.NOTIFICATIONS_DIR }}/history/notification-history.json"

          # Load or create history
          if [[ -f "$HISTORY_FILE" ]]; then
            HISTORY=$(cat "$HISTORY_FILE")
          else
            HISTORY='[]'
            echo "$HISTORY" > "$HISTORY_FILE"
          fi

          # Check if we should suppress notifications
          node scripts/check-notification-history.js \
            "$HISTORY_FILE" \
            "${{ steps.determine-type.outputs.notification-type }}" \
            "${{ steps.health.outputs.critical-issues }}" \
            "${{ github.event.inputs.force_notify }}"

      - name: Upload health analysis
        uses: actions/upload-artifact@v4
        with:
          name: translation-health-analysis-${{ github.run_number }}
          path: |
            ${{ env.NOTIFICATIONS_DIR }}/analysis-*.json
            ${{ env.NOTIFICATIONS_DIR }}/notification-data.json
          retention-days: 30

  # Generate notification content
  generate-notifications:
    name: 📝 Generate Notifications
    runs-on: ubuntu-latest
    needs: analyze-health
    if: needs.analyze-health.outputs.needs-attention == 'true' || needs.analyze-health.outputs.maintenance-due == 'true' || github.event.inputs.force_notify == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download health analysis
        uses: actions/download-artifact@v4
        with:
          name: translation-health-analysis-${{ github.run_number }}
          path: ${{ env.NOTIFICATIONS_DIR }}/

      - name: Generate notification templates
        run: |
          echo "📝 Generating notification content..."

          NOTIFICATION_TYPE="${{ needs.analyze-health.outputs.notification-type }}"
          CRITICAL_ISSUES="${{ needs.analyze-health.outputs.critical-issues }}"

          # Load notification data
          if [[ -f "${{ env.NOTIFICATIONS_DIR }}/notification-data.json" ]]; then
            echo "Loading notification data..."
            node scripts/generate-notification-templates.js \
              "${{ env.NOTIFICATIONS_DIR }}/notification-data.json" \
              "$NOTIFICATION_TYPE" \
              "$CRITICAL_ISSUES"
          else
            echo "No notification data found"
            exit 1
          fi

      - name: Upload notification content
        uses: actions/upload-artifact@v4
        with:
          name: notification-content-${{ github.run_number }}
          path: |
            ${{ env.NOTIFICATIONS_DIR }}/notification.json
            ${{ env.NOTIFICATIONS_DIR }}/notification-content.md
          retention-days: 30

  # Send GitHub notifications
  send-github-notifications:
    name: 🚀 Send GitHub Notifications
    runs-on: ubuntu-latest
    needs: [analyze-health, generate-notifications]
    if: needs.analyze-health.outputs.needs-attention == 'true' || github.event.inputs.force_notify == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download notification content
        uses: actions/download-artifact@v4
        with:
          name: notification-content-${{ github.run_number }}
          path: ${{ env.NOTIFICATIONS_DIR }}/

      - name: Send issue notification
        if: github.event.inputs.test_mode != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            try {
              const notification = JSON.parse(fs.readFileSync('${{ env.NOTIFICATIONS_DIR }}/notification.json', 'utf8'));
              const content = fs.readFileSync('${{ env.NOTIFICATIONS_DIR }}/notification-content.md', 'utf8');
              
              console.log('Sending notification:', notification.title);
              console.log('Urgency:', notification.urgency);
              
              // Determine labels based on urgency and type
              let labels = ['translation', 'monitoring'];
              
              if (notification.urgency === 'high') {
                labels.push('priority-high', 'bug');
              } else if (notification.type === 'monthly-maintenance') {
                labels.push('maintenance', 'enhancement');
              } else {
                labels.push('priority-medium');
              }
              
              // Check for existing open issues
              const { data: issues } = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: 'translation,monitoring'
              });
              
              const existingIssue = issues.find(issue => 
                issue.title.includes('Translation') && 
                (
                  (notification.urgency === 'high' && issue.title.includes('Critical')) ||
                  (notification.type === 'weekly-summary' && issue.title.includes('Weekly')) ||
                  (notification.type === 'monthly-maintenance' && issue.title.includes('Maintenance'))
                )
              );
              
              if (existingIssue && notification.type !== 'monthly-maintenance') {
                // Update existing issue with comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: existingIssue.number,
                  body: '## 🔄 Updated Alert\n\n' + content
                });
                
                // Update labels if more urgent
                if (notification.urgency === 'high' && !existingIssue.labels.some(l => l.name === 'priority-high')) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    labels: ['priority-high']
                  });
                }
                
                console.log('Updated existing issue #' + existingIssue.number);
              } else {
                // Create new issue
                const { data: newIssue } = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: notification.title,
                  body: content,
                  labels: labels
                });
                
                console.log('Created new issue #' + newIssue.number);
              }
              
            } catch (error) {
              console.error('Error sending notification:', error.message);
              core.setFailed('Failed to send notification');
            }

      - name: Create discussion for weekly summaries
        if: needs.analyze-health.outputs.notification-type == 'weekly-summary' && github.event.inputs.test_mode != 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            try {
              const notification = JSON.parse(fs.readFileSync('${{ env.NOTIFICATIONS_DIR }}/notification.json', 'utf8'));
              const content = fs.readFileSync('${{ env.NOTIFICATIONS_DIR }}/notification-content.md', 'utf8');
              
              // Create or update discussion for weekly summary
              console.log('Creating weekly summary discussion');
              
              // Note: GitHub Discussions API might not be available in all repositories
              // This is a placeholder for when discussions are enabled
              console.log('Weekly summary would be posted to discussions:', notification.title);
              
            } catch (error) {
              console.log('Discussions not available or error creating discussion:', error.message);
            }

      - name: Test mode notification
        if: github.event.inputs.test_mode == 'true'
        run: |
          echo "🧪 TEST MODE - No actual notifications sent"
          echo "========================================"

          if [[ -f "${{ env.NOTIFICATIONS_DIR }}/notification.json" ]]; then
            cat "${{ env.NOTIFICATIONS_DIR }}/notification.json" | jq -r '.title'
            echo ""
            echo "Content preview:"
            head -n 10 "${{ env.NOTIFICATIONS_DIR }}/notification-content.md"
            echo "..."
          else
            echo "No notification content generated"
          fi

  # Update notification history
  update-history:
    name: 📜 Update Notification History
    runs-on: ubuntu-latest
    needs: [analyze-health, generate-notifications, send-github-notifications]
    if: always() && (needs.generate-notifications.result == 'success' || github.event.inputs.force_notify == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download notification data
        uses: actions/download-artifact@v4
        with:
          name: notification-content-${{ github.run_number }}
          path: ${{ env.NOTIFICATIONS_DIR }}/
        continue-on-error: true

      - name: Update notification history
        run: |
          echo "📜 Updating notification history..."

          mkdir -p ${{ env.NOTIFICATIONS_DIR }}/history
          HISTORY_FILE="${{ env.NOTIFICATIONS_DIR }}/history/notification-history.json"

          # Load existing history or create new
          if [[ -f "$HISTORY_FILE" ]]; then
            HISTORY=$(cat "$HISTORY_FILE")
          else
            HISTORY='[]'
          fi

          # Add new notification to history if content was generated
          if [[ -f "${{ env.NOTIFICATIONS_DIR }}/notification.json" ]]; then
            node scripts/update-notification-history.js \
              "${{ env.NOTIFICATIONS_DIR }}/notification.json" \
              "$HISTORY_FILE" \
              "${{ github.event.inputs.test_mode }}" \
              "${{ github.run_id }}"
          else
            echo "ℹ️ No notification content to add to history"
          fi

      - name: Commit history updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add ${{ env.NOTIFICATIONS_DIR }}/history/ || true

          if ! git diff --cached --quiet; then
            git commit -m "📜 Update translation notification history - Type: ${{ needs.analyze-health.outputs.notification-type }}, Critical: ${{ needs.analyze-health.outputs.critical-issues }}, Maintenance: ${{ needs.analyze-health.outputs.maintenance-due }} [skip ci]"
            
            git push
            echo "✅ Committed notification history"
          else
            echo "ℹ️ No history changes to commit"
          fi

  # Summary
  notifications-summary:
    name: 📋 Notifications Summary
    runs-on: ubuntu-latest
    needs:
      [
        analyze-health,
        generate-notifications,
        send-github-notifications,
        update-history,
      ]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "📋 Translation Notifications Summary"
          echo "=================================="
          echo "Type: ${{ needs.analyze-health.outputs.notification-type }}"
          echo "Timestamp: $(date)"
          echo ""
          echo "📊 Health Analysis:"
          echo "- Needs Attention: ${{ needs.analyze-health.outputs.needs-attention }}"
          echo "- Critical Issues: ${{ needs.analyze-health.outputs.critical-issues }}"
          echo "- Maintenance Due: ${{ needs.analyze-health.outputs.maintenance-due }}"
          echo ""
          echo "🔔 Notifications:"
          echo "- Generated: ${{ needs.generate-notifications.result }}"
          echo "- Sent: ${{ needs.send-github-notifications.result }}"
          echo "- History Updated: ${{ needs.update-history.result }}"
          echo ""
          echo "⚙️ Settings:"
          echo "- Force Notify: ${{ github.event.inputs.force_notify }}"
          echo "- Test Mode: ${{ github.event.inputs.test_mode }}"
          echo ""

          # Overall status
          if [[ "${{ needs.analyze-health.outputs.critical-issues }}" -gt "0" ]]; then
            echo "🚨 Status: Critical issues detected - immediate attention required"
            exit 1
          elif [[ "${{ needs.analyze-health.outputs.needs-attention }}" == "true" ]]; then
            echo "⚠️ Status: Translation issues detected - review recommended"
          else
            echo "✅ Status: All translations in good health"
          fi
