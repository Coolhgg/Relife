# Translation Reports Generation
# Automated generation and updating of comprehensive translation reports and documentation

name: üìë Translation Reports

on:
  schedule:
    # Generate reports every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
    # Generate monthly comprehensive reports on the 1st at 10 AM UTC
    - cron: '0 10 1 * *'
  workflow_dispatch:
    inputs:
      report_type:
        description: 'Type of report to generate'
        required: false
        default: 'weekly'
        type: choice
        options:
          - 'weekly'
          - 'monthly'
          - 'comprehensive'
          - 'status-page'
      include_detailed_analysis:
        description: 'Include detailed language analysis'
        required: false
        default: true
        type: boolean
      update_documentation:
        description: 'Update translation documentation'
        required: false
        default: true
        type: boolean
      generate_public_reports:
        description: 'Generate public-facing reports'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  REPORT_TYPE: ${{ github.event.inputs.report_type || (github.event.schedule == '0 10 1 * *' && 'monthly' || 'weekly') }}
  REPORTS_DIR: 'docs/translation-reports'

jobs:
  # Generate comprehensive translation data
  generate-data:
    name: üìä Generate Translation Data
    runs-on: ubuntu-latest
    
    outputs:
      report-timestamp: ${{ steps.data.outputs.timestamp }}
      total-languages: ${{ steps.data.outputs.total-languages }}
      average-quality: ${{ steps.data.outputs.average-quality }}
      total-keys: ${{ steps.data.outputs.total-keys }}
      completion-percentage: ${{ steps.data.outputs.completion-percentage }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm install chalk yargs date-fns marked

      - name: Create reports directory
        run: |
          mkdir -p ${{ env.REPORTS_DIR }}
          mkdir -p ${{ env.REPORTS_DIR }}/data
          mkdir -p ${{ env.REPORTS_DIR }}/archives
          mkdir -p docs/assets/translation-charts

      - name: Generate comprehensive translation data
        id: data
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
          
          echo "üìä Generating comprehensive translation data..."
          
          # Generate detailed analysis with all metrics
          node scripts/advanced-translation-manager.mjs analyze \
            --format=json \
            --output="${{ env.REPORTS_DIR }}/data/full-analysis-$TIMESTAMP.json" \
            --include-performance \
            --include-cultural \
            --include-consistency
          
          # Generate summary statistics
          node -e "
            const fs = require('fs');
            
            try {
              const analysis = JSON.parse(fs.readFileSync('${{ env.REPORTS_DIR }}/data/full-analysis-$TIMESTAMP.json', 'utf8'));
              
              // Calculate summary statistics
              const languages = Object.entries(analysis.languages || {});
              const totalLanguages = languages.length;
              const averageQuality = Math.round(
                languages.reduce((sum, [_, lang]) => sum + (lang.qualityScore?.overall || 0), 0) / totalLanguages
              );
              
              // Count total translation keys from English (base language)
              let totalKeys = 0;
              const englishData = analysis.languages?.['en'];
              if (englishData && englishData.keys) {
                totalKeys = Object.keys(englishData.keys).length;
              }
              
              // Calculate overall completion percentage
              const completionPercentage = Math.round(
                languages.reduce((sum, [_, lang]) => {
                  const completion = (lang.qualityScore?.completeness || 0);
                  return sum + completion;
                }, 0) / totalLanguages
              );
              
              console.log('üìä Summary Statistics:');
              console.log(\`Total Languages: \${totalLanguages}\`);
              console.log(\`Average Quality: \${averageQuality}%\`);
              console.log(\`Total Keys: \${totalKeys}\`);
              console.log(\`Average Completion: \${completionPercentage}%\`);
              
              // Set GitHub outputs
              process.stdout.write('total-languages=' + totalLanguages + '\n');
              process.stdout.write('average-quality=' + averageQuality + '\n');
              process.stdout.write('total-keys=' + totalKeys + '\n');
              process.stdout.write('completion-percentage=' + completionPercentage + '\n');
              
              // Generate summary data file
              const summary = {
                generated: new Date().toISOString(),
                reportType: '${{ env.REPORT_TYPE }}',
                statistics: {
                  totalLanguages,
                  averageQuality,
                  totalKeys,
                  completionPercentage
                },
                languageBreakdown: languages.map(([code, data]) => ({
                  code,
                  name: data.name || code,
                  quality: Math.round(data.qualityScore?.overall || 0),
                  completion: Math.round(data.qualityScore?.completeness || 0),
                  cultural: Math.round(data.qualityScore?.culturalAdaptation || 0),
                  consistency: Math.round(data.qualityScore?.consistency || 0),
                  lastUpdated: data.lastUpdated || null
                }))
              };
              
              fs.writeFileSync('${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json', JSON.stringify(summary, null, 2));
              console.log('‚úÖ Generated summary data file');
              
            } catch (error) {
              console.error('Error generating data:', error.message);
              process.exit(1);
            }
          " >> $GITHUB_OUTPUT

      - name: Upload generated data
        uses: actions/upload-artifact@v3
        with:
          name: translation-data-${{ steps.data.outputs.timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/
          retention-days: 90

  # Generate HTML reports
  generate-html-reports:
    name: üìÑ Generate HTML Reports
    runs-on: ubuntu-latest
    needs: generate-data
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm install marked chart.js chartjs-node-canvas

      - name: Download generated data
        uses: actions/download-artifact@v3
        with:
          name: translation-data-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/

      - name: Generate comprehensive HTML report
        run: |
          echo "üìÑ Generating HTML reports..."
          
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          
          # Generate interactive HTML report
          node scripts/advanced-translation-manager.mjs report-only \
            --html \
            --interactive \
            --include-charts \
            --output="${{ env.REPORTS_DIR }}/translation-report-$TIMESTAMP.html"
          
          # Generate public status page if requested
          if [[ "${{ github.event.inputs.generate_public_reports }}" == "true" || "${{ env.REPORT_TYPE }}" == "monthly" ]]; then
            echo "üåê Generating public status page..."
            
            node -e "
              const fs = require('fs');
              const path = require('path');
              
              const timestamp = '$TIMESTAMP';
              const summaryFile = '${{ env.REPORTS_DIR }}/data/summary-' + timestamp + '.json';
              
              if (!fs.existsSync(summaryFile)) {
                console.error('Summary data not found');
                process.exit(1);
              }
              
              const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
              
              // Generate public status page HTML
              const statusHtml = \`
<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
    <title>Relife - Translation Status</title>
    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6; color: #333; background: #f8fafc;
        }
        .container { max-width: 1200px; margin: 0 auto; padding: 2rem; }
        .header { text-align: center; margin-bottom: 3rem; }
        .header h1 { font-size: 2.5rem; margin-bottom: 0.5rem; color: #1e293b; }
        .header p { font-size: 1.1rem; color: #64748b; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 2rem; margin-bottom: 3rem; }
        .stat-card { background: white; padding: 2rem; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .stat-card h3 { font-size: 0.875rem; font-weight: 600; text-transform: uppercase; letter-spacing: 0.05em; color: #64748b; margin-bottom: 0.5rem; }
        .stat-card .value { font-size: 2.5rem; font-weight: 700; color: #1e293b; }
        .languages-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 3rem; }
        .language-card { background: white; padding: 1.5rem; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
        .language-card h4 { font-size: 1.1rem; font-weight: 600; margin-bottom: 1rem; color: #1e293b; }
        .progress-bar { width: 100%; height: 8px; background: #e2e8f0; border-radius: 4px; overflow: hidden; margin-bottom: 0.5rem; }
        .progress-fill { height: 100%; transition: width 0.3s ease; }
        .progress-fill.excellent { background: #10b981; }
        .progress-fill.good { background: #f59e0b; }
        .progress-fill.poor { background: #ef4444; }
        .chart-container { background: white; padding: 2rem; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 2rem; }
        .footer { text-align: center; margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #e2e8f0; color: #64748b; }
        .last-updated { font-size: 0.875rem; color: #64748b; }
    </style>
</head>
<body>
    <div class=\"container\">
        <div class=\"header\">
            <h1>üåê Relife Translation Status</h1>
            <p>Real-time overview of our internationalization progress</p>
            <div class=\"last-updated\">Last updated: \${new Date(summary.generated).toLocaleString()}</div>
        </div>
        
        <div class=\"stats-grid\">
            <div class=\"stat-card\">
                <h3>Total Languages</h3>
                <div class=\"value\">\${summary.statistics.totalLanguages}</div>
            </div>
            <div class=\"stat-card\">
                <h3>Average Quality</h3>
                <div class=\"value\">\${summary.statistics.averageQuality}%</div>
            </div>
            <div class=\"stat-card\">
                <h3>Translation Keys</h3>
                <div class=\"value\">\${summary.statistics.totalKeys.toLocaleString()}</div>
            </div>
            <div class=\"stat-card\">
                <h3>Average Completion</h3>
                <div class=\"value\">\${summary.statistics.completionPercentage}%</div>
            </div>
        </div>
        
        <div class=\"chart-container\">
            <h3 style=\"margin-bottom: 1rem;\">Quality Overview</h3>
            <canvas id=\"qualityChart\" width=\"400\" height=\"200\"></canvas>
        </div>
        
        <div class=\"languages-grid\">
            \${summary.languageBreakdown.map(lang => \`
                <div class=\"language-card\">
                    <h4>\${lang.code.toUpperCase()} - \${lang.name || lang.code}</h4>
                    <div class=\"progress-bar\">
                        <div class=\"progress-fill \${lang.quality >= 80 ? 'excellent' : lang.quality >= 60 ? 'good' : 'poor'}\" style=\"width: \${lang.quality}%\"></div>
                    </div>
                    <div style=\"font-size: 0.875rem; color: #64748b;\">Quality: \${lang.quality}% ‚Ä¢ Completion: \${lang.completion}%</div>
                </div>
            \`).join('')}
        </div>
        
        <div class=\"footer\">
            <p>Generated by Relife Translation Monitoring System</p>
        </div>
    </div>
    
    <script>
        // Create quality chart
        const ctx = document.getElementById('qualityChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [\${summary.languageBreakdown.map(l => \"'\" + l.code.toUpperCase() + \"'\").join(',')}],
                datasets: [{
                    label: 'Quality Score',
                    data: [\${summary.languageBreakdown.map(l => l.quality).join(',')}],
                    backgroundColor: 'rgba(16, 185, 129, 0.6)',
                    borderColor: 'rgba(16, 185, 129, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: {
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                }
            }
        });
    </script>
</body>
</html>
              \`;
              
              fs.writeFileSync('${{ env.REPORTS_DIR }}/status.html', statusHtml);
              console.log('‚úÖ Generated public status page');
              
            } catch (error) {
              console.error('Error generating status page:', error.message);
            }"
          fi

      - name: Upload HTML reports
        uses: actions/upload-artifact@v3
        with:
          name: html-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: |
            ${{ env.REPORTS_DIR }}/*.html
          retention-days: 90

  # Generate documentation updates
  update-documentation:
    name: üìö Update Documentation
    runs-on: ubuntu-latest
    needs: [generate-data, generate-html-reports]
    if: github.event.inputs.update_documentation != 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Download generated data
        uses: actions/download-artifact@v3
        with:
          name: translation-data-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/

      - name: Download HTML reports
        uses: actions/download-artifact@v3
        with:
          name: html-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/

      - name: Update translation status in README
        run: |
          echo "üìö Updating README with latest translation status..."
          
          TOTAL_LANGUAGES="${{ needs.generate-data.outputs.total-languages }}"
          AVERAGE_QUALITY="${{ needs.generate-data.outputs.average-quality }}"
          COMPLETION="${{ needs.generate-data.outputs.completion-percentage }}"
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          
          # Create or update translation status section in README
          node -e "
            const fs = require('fs');
            
            try {
              let readme = fs.readFileSync('README.md', 'utf8');
              
              // Translation status section
              const statusSection = \`
## üåê Translation Status
            
**Current Status**: \${$TOTAL_LANGUAGES} languages supported with \${$AVERAGE_QUALITY}% average quality
            
| Metric | Value |
|--------|-------|
| üåç Total Languages | \${$TOTAL_LANGUAGES} |
| ‚≠ê Average Quality | \${$AVERAGE_QUALITY}% |
| üìä Average Completion | \${$COMPLETION}% |
| üîÑ Last Updated | \${new Date().toLocaleDateString()} |
            
- [üìä View Translation Dashboard](./src/components/TranslationDashboard.tsx)
- [üìë Detailed Translation Report](./docs/translation-reports/status.html)
- [üìñ Translation Guidelines](./TRANSLATION_GUIDELINES.md)
- [üöÄ Quick Start Guide](./docs/TRANSLATOR_QUICK_START.md)
            
> **Note**: Translation quality is automatically monitored and reports are generated weekly. Contributors can view real-time status in our [Translation Dashboard](./src/components/TranslationDashboard.tsx).
\`;
              
              // Replace or add translation status section
              const statusRegex = /## üåê Translation Status[\\s\\S]*?(?=(?:^## |\\n*$))/m;
              
              if (statusRegex.test(readme)) {
                readme = readme.replace(statusRegex, statusSection.trim());
                console.log('‚úÖ Updated existing translation status section in README');
              } else {
                // Add after internationalization section if it exists
                const intlRegex = /(## üåê Internationalization[\\s\\S]*?)(?=(?:^## |\\n*$))/m;
                if (intlRegex.test(readme)) {
                  readme = readme.replace(intlRegex, \`\\$1\\n\\n\${statusSection.trim()}\`);
                  console.log('‚úÖ Added translation status section after internationalization in README');
                } else {
                  // Add at the end
                  readme += '\\n\\n' + statusSection.trim();
                  console.log('‚úÖ Added translation status section at end of README');
                }
              }
              
              fs.writeFileSync('README.md', readme);
              
            } catch (error) {
              console.error('Error updating README:', error.message);
            }
          "

      - name: Generate translation coverage report
        run: |
          echo "üìä Generating translation coverage report..."
          
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          
          # Generate coverage report markdown
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              const summaryFile = '${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json';
              const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
              
              let coverageReport = \`# üìä Translation Coverage Report\\n\\n\`;
              coverageReport += \`**Generated**: \${new Date(summary.generated).toLocaleString()}\\n\`;
              coverageReport += \`**Report Type**: \${summary.reportType}\\n\\n\`;
              
              coverageReport += \`## üìà Overall Statistics\\n\\n\`;
              coverageReport += \`- **Total Languages**: \${summary.statistics.totalLanguages}\\n\`;
              coverageReport += \`- **Average Quality Score**: \${summary.statistics.averageQuality}%\\n\`;
              coverageReport += \`- **Total Translation Keys**: \${summary.statistics.totalKeys.toLocaleString()}\\n\`;
              coverageReport += \`- **Average Completion**: \${summary.statistics.completionPercentage}%\\n\\n\`;
              
              coverageReport += \`## üåç Language Breakdown\\n\\n\`;
              coverageReport += \`| Language | Quality | Completion | Cultural | Consistency | Status |\\n\`;
              coverageReport += \`|----------|---------|------------|----------|-------------|--------|\\n\`;
              
              summary.languageBreakdown
                .sort((a, b) => b.quality - a.quality)
                .forEach(lang => {
                  const status = lang.quality >= 80 ? '‚úÖ Excellent' : 
                               lang.quality >= 60 ? 'üü° Good' : '‚ùå Needs Work';
                  
                  coverageReport += \`| \${lang.code.toUpperCase()} | \${lang.quality}% | \${lang.completion}% | \${lang.cultural}% | \${lang.consistency}% | \${status} |\\n\`;
                });
              
              coverageReport += \`\\n## üéØ Quality Categories\\n\\n\`;
              
              const excellent = summary.languageBreakdown.filter(l => l.quality >= 80);
              const good = summary.languageBreakdown.filter(l => l.quality >= 60 && l.quality < 80);
              const needsWork = summary.languageBreakdown.filter(l => l.quality < 60);
              
              coverageReport += \`### ‚úÖ Excellent (80%+): \${excellent.length} languages\\n\`;
              if (excellent.length > 0) {
                coverageReport += excellent.map(l => \`- \${l.code.toUpperCase()}: \${l.quality}%\`).join('\\n') + '\\n';
              }
              coverageReport += \`\\n\`;
              
              coverageReport += \`### üü° Good (60-79%): \${good.length} languages\\n\`;
              if (good.length > 0) {
                coverageReport += good.map(l => \`- \${l.code.toUpperCase()}: \${l.quality}%\`).join('\\n') + '\\n';
              }
              coverageReport += \`\\n\`;
              
              coverageReport += \`### ‚ùå Needs Work (<60%): \${needsWork.length} languages\\n\`;
              if (needsWork.length > 0) {
                coverageReport += needsWork.map(l => \`- \${l.code.toUpperCase()}: \${l.quality}%\`).join('\\n') + '\\n';
              }
              
              coverageReport += \`\\n## üöÄ Recommendations\\n\\n\`;
              
              if (needsWork.length > 0) {
                coverageReport += \`- **Priority**: Focus on improving translations for \${needsWork.map(l => l.code.toUpperCase()).join(', ')}\\n\`;
              }
              
              if (summary.statistics.averageQuality < 75) {
                coverageReport += \`- **Quality**: Overall quality (\${summary.statistics.averageQuality}%) is below target (75%). Consider translation review.\\n\`;
              }
              
              if (summary.statistics.completionPercentage < 90) {
                coverageReport += \`- **Completion**: Some languages have missing translations. Run translation validation to identify gaps.\\n\`;
              }
              
              coverageReport += \`\\n---\\n\\n\`;
              coverageReport += \`*This report is automatically generated. For detailed analysis, see the [Translation Dashboard](../src/components/TranslationDashboard.tsx).*\\n\`;
              
              fs.writeFileSync('${{ env.REPORTS_DIR }}/coverage-report.md', coverageReport);
              console.log('‚úÖ Generated translation coverage report');
              
            } catch (error) {
              console.error('Error generating coverage report:', error.message);
            }
          "

      - name: Archive old reports
        run: |
          echo "üóÉÔ∏è Archiving old reports..."
          
          # Move reports older than 30 days to archive
          ARCHIVE_DATE=$(date -d '30 days ago' +%Y-%m-%d)
          
          find ${{ env.REPORTS_DIR }} -name "*.html" -type f -not -name "status.html" -exec bash -c '
            file="$1"
            filename=$(basename "$file")
            if [[ "$filename" < "translation-report-'$ARCHIVE_DATE'" ]]; then
              mkdir -p "${{ env.REPORTS_DIR }}/archives/$(date -d "30 days ago" +%Y)"
              mv "$file" "${{ env.REPORTS_DIR }}/archives/$(date -d "30 days ago" +%Y)/"
              echo "Archived: $filename"
            fi
          ' _ {} \; || true
          
          # Keep only last 5 data files
          ls -t ${{ env.REPORTS_DIR }}/data/*.json | tail -n +6 | xargs rm -f || true
          
          echo "‚úÖ Archiving completed"

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add README.md ${{ env.REPORTS_DIR }}/ docs/assets/translation-charts/ || true
          
          if ! git diff --cached --quiet; then
            COMMIT_MSG="üìä Update translation reports and documentation
            
            - Report type: ${{ env.REPORT_TYPE }}
            - Total languages: ${{ needs.generate-data.outputs.total-languages }}
            - Average quality: ${{ needs.generate-data.outputs.average-quality }}%
            - Coverage: ${{ needs.generate-data.outputs.completion-percentage }}%
            
            Generated: $(date)
            [skip ci]"
            
            git commit -m "$COMMIT_MSG"
            git push
            echo "‚úÖ Committed documentation updates"
          else
            echo "‚ÑπÔ∏è No documentation changes to commit"
          fi

  # Generate downloadable reports
  generate-downloads:
    name: üì• Generate Downloadable Reports
    runs-on: ubuntu-latest
    needs: [generate-data, generate-html-reports]
    if: env.REPORT_TYPE == 'monthly' || env.REPORT_TYPE == 'comprehensive'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm install puppeteer csv-writer

      - name: Download all reports
        uses: actions/download-artifact@v3

      - name: Generate CSV reports
        run: |
          echo "üìä Generating CSV reports..."
          
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          
          node -e "
            const fs = require('fs');
            const createCsvWriter = require('csv-writer').createObjectCsvWriter;
            
            try {
              // Load summary data
              const summaryFile = \`translation-data-$TIMESTAMP/${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json\`;
              const summary = JSON.parse(fs.readFileSync(summaryFile, 'utf8'));
              
              // Generate language breakdown CSV
              const csvWriter = createCsvWriter({
                path: 'translation-breakdown-$TIMESTAMP.csv',
                header: [
                  { id: 'code', title: 'Language Code' },
                  { id: 'name', title: 'Language Name' },
                  { id: 'quality', title: 'Quality Score (%)' },
                  { id: 'completion', title: 'Completion (%)' },
                  { id: 'cultural', title: 'Cultural Adaptation (%)' },
                  { id: 'consistency', title: 'Consistency (%)' },
                  { id: 'status', title: 'Status' },
                  { id: 'lastUpdated', title: 'Last Updated' }
                ]
              });
              
              const csvData = summary.languageBreakdown.map(lang => ({
                ...lang,
                status: lang.quality >= 80 ? 'Excellent' : lang.quality >= 60 ? 'Good' : 'Needs Work'
              }));
              
              csvWriter.writeRecords(csvData)
                .then(() => console.log('‚úÖ Generated CSV breakdown report'));
              
              // Generate summary CSV
              const summaryWriter = createCsvWriter({
                path: 'translation-summary-$TIMESTAMP.csv',
                header: [
                  { id: 'metric', title: 'Metric' },
                  { id: 'value', title: 'Value' }
                ]
              });
              
              const summaryData = [
                { metric: 'Total Languages', value: summary.statistics.totalLanguages },
                { metric: 'Average Quality (%)', value: summary.statistics.averageQuality },
                { metric: 'Total Translation Keys', value: summary.statistics.totalKeys },
                { metric: 'Average Completion (%)', value: summary.statistics.completionPercentage },
                { metric: 'Report Generated', value: new Date(summary.generated).toLocaleString() },
                { metric: 'Report Type', value: summary.reportType }
              ];
              
              summaryWriter.writeRecords(summaryData)
                .then(() => console.log('‚úÖ Generated CSV summary report'));
              
            } catch (error) {
              console.error('Error generating CSV reports:', error.message);
            }
          "

      - name: Generate PDF reports
        run: |
          echo "üìÑ Generating PDF reports..."
          
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          
          # Convert HTML report to PDF using Puppeteer
          node -e "
            const puppeteer = require('puppeteer');
            const fs = require('fs');
            
            (async () => {
              try {
                const browser = await puppeteer.launch({ 
                  headless: 'new',
                  args: ['--no-sandbox', '--disable-setuid-sandbox']
                });
                const page = await browser.newPage();
                
                // Load HTML report
                const htmlFile = \`html-reports-$TIMESTAMP/${{ env.REPORTS_DIR }}/translation-report-$TIMESTAMP.html\`;
                
                if (fs.existsSync(htmlFile)) {
                  const htmlContent = fs.readFileSync(htmlFile, 'utf8');
                  await page.setContent(htmlContent, { waitUntil: 'networkidle0' });
                  
                  await page.pdf({
                    path: \`translation-report-$TIMESTAMP.pdf\`,
                    format: 'A4',
                    printBackground: true,
                    margin: { top: '1cm', right: '1cm', bottom: '1cm', left: '1cm' }
                  });
                  
                  console.log('‚úÖ Generated PDF report');
                } else {
                  console.log('HTML report not found, skipping PDF generation');
                }
                
                await browser.close();
              } catch (error) {
                console.error('Error generating PDF:', error.message);
              }
            })();
          "

      - name: Create downloadable package
        run: |
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          PACKAGE_NAME="translation-reports-$TIMESTAMP"
          
          mkdir -p "$PACKAGE_NAME"
          
          # Copy all generated reports
          cp -r html-reports-$TIMESTAMP/${{ env.REPORTS_DIR }}/*.html "$PACKAGE_NAME/" || true
          cp *.csv "$PACKAGE_NAME/" 2>/dev/null || true
          cp *.pdf "$PACKAGE_NAME/" 2>/dev/null || true
          cp -r translation-data-$TIMESTAMP/${{ env.REPORTS_DIR }}/data/ "$PACKAGE_NAME/data/" || true
          
          # Create package info
          cat > "$PACKAGE_NAME/README.md" << EOF
# Translation Reports Package
          
**Generated**: $(date)
**Report Type**: ${{ env.REPORT_TYPE }}
**Languages**: ${{ needs.generate-data.outputs.total-languages }}
**Average Quality**: ${{ needs.generate-data.outputs.average-quality }}%
          
## Contents
          
- \`*.html\` - Interactive HTML reports
- \`*.csv\` - Data in CSV format for analysis
- \`*.pdf\` - Printable PDF reports (if generated)
- \`data/\` - Raw JSON data files
          
## Usage
          
1. Open HTML files in a web browser for interactive reports
2. Import CSV files into spreadsheet applications
3. Use JSON data files for custom analysis
          
---
*Generated by Relife Translation Monitoring System*
EOF
          
          # Create archive
          tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"
          
          echo "‚úÖ Created downloadable package: $PACKAGE_NAME.tar.gz"

      - name: Upload downloadable reports
        uses: actions/upload-artifact@v3
        with:
          name: downloadable-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: |
            *.csv
            *.pdf
            translation-reports-*.tar.gz
          retention-days: 180

  # Final status summary
  reports-summary:
    name: üìã Reports Summary
    runs-on: ubuntu-latest
    needs: [generate-data, generate-html-reports, update-documentation, generate-downloads]
    if: always()
    
    steps:
      - name: Generate final summary
        run: |
          echo "üìã Translation Reports Generation Summary"
          echo "========================================"
          echo "Report Type: ${{ env.REPORT_TYPE }}"
          echo "Timestamp: ${{ needs.generate-data.outputs.report-timestamp }}"
          echo ""
          echo "üìä Statistics:"
          echo "- Total Languages: ${{ needs.generate-data.outputs.total-languages }}"
          echo "- Average Quality: ${{ needs.generate-data.outputs.average-quality }}%"
          echo "- Completion: ${{ needs.generate-data.outputs.completion-percentage }}%"
          echo "- Total Keys: ${{ needs.generate-data.outputs.total-keys }}"
          echo ""
          echo "‚úÖ Job Results:"
          echo "- Data Generation: ${{ needs.generate-data.result }}"
          echo "- HTML Reports: ${{ needs.generate-html-reports.result }}"
          echo "- Documentation: ${{ needs.update-documentation.result }}"
          echo "- Downloads: ${{ needs.generate-downloads.result }}"
          echo ""
          
          # Overall success check
          if [[ "${{ needs.generate-data.result }}" == "success" && "${{ needs.generate-html-reports.result }}" == "success" ]]; then
            echo "üéâ Translation reports generated successfully!"
            exit 0
          else
            echo "‚ùå Some report generation tasks failed"
            exit 1
          fi