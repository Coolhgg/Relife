# Translation Reports Generation
# Automated generation and updating of comprehensive translation reports and documentation

name: üìë Translation Reports

on:
  schedule:
    # Generate reports every Tuesday at 11 AM UTC (distributed load, avoids Monday conflicts)
    - cron: "0 11 * * 2"
    # Generate monthly comprehensive reports on the 1st at 2 PM UTC
    - cron: "0 14 1 * *"
  workflow_dispatch:
    inputs:
      report_type:
        description: "Type of report to generate"
        required: false
        default: "weekly"
        type: choice
        options:
          - "weekly"
          - "monthly"
          - "comprehensive"
          - "status-page"
      include_detailed_analysis:
        description: "Include detailed language analysis"
        required: false
        default: true
        type: boolean
      update_documentation:
        description: "Update translation documentation"
        required: false
        default: true
        type: boolean
      generate_public_reports:
        description: "Generate public-facing reports"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: write

env:
  NODE_VERSION: "20"
  REPORTS_DIR: "docs/translation-reports"

jobs:
  # Generate comprehensive translation data
  generate-data:
    name: üìä Generate Translation Data
    runs-on: ubuntu-latest

    outputs:
      report-timestamp: ${{ steps.data.outputs.timestamp }}
      total-languages: ${{ steps.data.outputs.total-languages }}
      average-quality: ${{ steps.data.outputs.average-quality }}
      total-keys: ${{ steps.data.outputs.total-keys }}
      completion-percentage: ${{ steps.data.outputs.completion-percentage }}
      report-type: ${{ steps.determine-type.outputs.report-type }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          bun install --production=false
          bun install chalk yargs date-fns marked

      - name: Create reports directory
        run: |
          mkdir -p ${{ env.REPORTS_DIR }}
          mkdir -p ${{ env.REPORTS_DIR }}/data
          mkdir -p ${{ env.REPORTS_DIR }}/archives
          mkdir -p docs/assets/translation-charts

      - name: Determine report type
        id: determine-type
        run: |
          if [[ "${{ github.event.inputs.report_type }}" != "" ]]; then
            echo "report-type=${{ github.event.inputs.report_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.schedule }}" == "0 10 1 * *" ]]; then
            echo "report-type=monthly" >> $GITHUB_OUTPUT
          else
            echo "report-type=weekly" >> $GITHUB_OUTPUT
          fi

      - name: Generate comprehensive translation data
        id: data
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

          echo "üìä Generating comprehensive translation data..."

          # Generate detailed analysis with all metrics
          node scripts/advanced-translation-manager.mjs analyze \
            --format=json \
            --output="${{ env.REPORTS_DIR }}/data/full-analysis-$TIMESTAMP.json" \
            --include-performance \
            --include-cultural \
            --include-consistency

          # Generate summary statistics
          node scripts/generate-report-statistics.js \
            "${{ env.REPORTS_DIR }}/data/full-analysis-$TIMESTAMP.json" \
            "$TIMESTAMP"

      - name: Generate public status page
        if: github.event.inputs.generate_public_reports == 'true' || steps.determine-type.outputs.report-type == 'monthly'
        run: |
          echo "üåê Generating public status page..."

          TIMESTAMP="${{ steps.data.outputs.timestamp }}"
          node scripts/generate-status-page.js \
            "${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json" \
            "${{ env.REPORTS_DIR }}/status.html"

      - name: Upload generated data
        uses: actions/upload-artifact@v4
        with:
          name: translation-data-${{ steps.data.outputs.timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/
          retention-days: 90

  # Generate HTML reports
  generate-html-reports:
    name: üìÑ Generate HTML Reports
    runs-on: ubuntu-latest
    needs: generate-data

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          bun install --production=false
          bun install marked chart.js chartjs-node-canvas

      - name: Download generated data
        uses: actions/download-artifact@v4
        with:
          name: translation-data-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/

      - name: Generate comprehensive HTML report
        run: |
          echo "üìÑ Generating HTML reports..."

          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"

          # Generate interactive HTML report
          node scripts/advanced-translation-manager.mjs report-only \
            --html \
            --interactive \
            --include-charts \
            --output="${{ env.REPORTS_DIR }}/translation-report-$TIMESTAMP.html"

      - name: Upload HTML reports
        uses: actions/upload-artifact@v4
        with:
          name: html-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: |
            ${{ env.REPORTS_DIR }}/*.html
          retention-days: 90

  # Generate documentation updates
  update-documentation:
    name: üìö Update Documentation
    runs-on: ubuntu-latest
    needs: [generate-data, generate-html-reports]
    if: github.event.inputs.update_documentation != 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: bun install --production=false

      - name: Download generated data
        uses: actions/download-artifact@v4
        with:
          name: translation-data-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/data/

      - name: Download HTML reports
        uses: actions/download-artifact@v4
        with:
          name: html-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: ${{ env.REPORTS_DIR }}/

      - name: Update translation status in README
        run: |
          echo "üìö Updating README with latest translation status..."

          TOTAL_LANGUAGES="${{ needs.generate-data.outputs.total-languages }}"
          AVERAGE_QUALITY="${{ needs.generate-data.outputs.average-quality }}"
          COMPLETION="${{ needs.generate-data.outputs.completion-percentage }}"
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"

          # Update README using script
          node scripts/update-readme-status.js \
            "$TOTAL_LANGUAGES" \
            "$AVERAGE_QUALITY" \
            "$COMPLETION"

      - name: Generate translation coverage report
        run: |
          echo "üìä Generating translation coverage report..."

          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"

          # Generate coverage report markdown
          node scripts/generate-coverage-report.js \
            "${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json" \
            "${{ env.REPORTS_DIR }}/coverage-report.md"

      - name: Archive old reports
        run: |
          echo "üóÉÔ∏è Archiving old reports..."

          # Move reports older than 30 days to archive
          ARCHIVE_DATE=$(date -d '30 days ago' +%Y-%m-%d)

          find ${{ env.REPORTS_DIR }} -name "*.html" -type f -not -name "status.html" -exec bash -c '
            file="$1"
            filename=$(basename "$file")
            if [[ "$filename" < "translation-report-'"$ARCHIVE_DATE"'" ]]; then
              mkdir -p "${{ env.REPORTS_DIR }}/archives/$(date -d "30 days ago" +%Y)"
              mv "$file" "${{ env.REPORTS_DIR }}/archives/$(date -d "30 days ago" +%Y)/"
              echo "Archived: $filename"
            fi
          ' _ {} \; || true

          # Keep only last 5 data files
          ls -t ${{ env.REPORTS_DIR }}/data/*.json | tail -n +6 | xargs rm -f || true

          echo "‚úÖ Archiving completed"

      - name: Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add README.md ${{ env.REPORTS_DIR }}/ docs/assets/translation-charts/ || true

          if ! git diff --cached --quiet; then
            git commit -m "üìä Update translation reports and documentation - Type: ${{ needs.generate-data.outputs.report-type }}, Languages: ${{ needs.generate-data.outputs.total-languages }}, Quality: ${{ needs.generate-data.outputs.average-quality }}%, Coverage: ${{ needs.generate-data.outputs.completion-percentage }}% [skip ci]"
            git push
            echo "‚úÖ Committed documentation updates"
          else
            echo "‚ÑπÔ∏è No documentation changes to commit"
          fi

  # Generate downloadable reports
  generate-downloads:
    name: üì• Generate Downloadable Reports
    runs-on: ubuntu-latest
    needs: [generate-data, generate-html-reports]
    if: needs.generate-data.outputs.report-type == 'monthly' || needs.generate-data.outputs.report-type == 'comprehensive'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          bun install --production=false
          bun install puppeteer csv-writer

      - name: Download all reports
        uses: actions/download-artifact@v4

      - name: Generate CSV reports
        run: |
          echo "üìä Generating CSV reports..."

          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"

          node scripts/generate-csv-reports.js \
            "translation-data-$TIMESTAMP/${{ env.REPORTS_DIR }}/data/summary-$TIMESTAMP.json" \
            "$TIMESTAMP"

      - name: Generate PDF reports
        run: |
          echo "üìÑ Generating PDF reports..."

          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"

          # Convert HTML report to PDF using Puppeteer
          node scripts/generate-pdf-reports.js \
            "html-reports-$TIMESTAMP/${{ env.REPORTS_DIR }}/translation-report-$TIMESTAMP.html" \
            "translation-report-$TIMESTAMP.pdf"

      - name: Create downloadable package
        run: |
          TIMESTAMP="${{ needs.generate-data.outputs.report-timestamp }}"
          PACKAGE_NAME="translation-reports-$TIMESTAMP"

          mkdir -p "$PACKAGE_NAME"

          # Copy all generated reports
          cp -r html-reports-$TIMESTAMP/${{ env.REPORTS_DIR }}/*.html "$PACKAGE_NAME/" || true
          cp *.csv "$PACKAGE_NAME/" 2>/dev/null || true
          cp *.pdf "$PACKAGE_NAME/" 2>/dev/null || true
          cp -r translation-data-$TIMESTAMP/${{ env.REPORTS_DIR }}/data/ "$PACKAGE_NAME/data/" || true

          # Create package info
          {
            echo "# Translation Reports Package"
            echo ""
            echo "Generated: $(date)"
            echo "Report Type: ${{ needs.generate-data.outputs.report-type }}"
            echo "Languages: ${{ needs.generate-data.outputs.total-languages }}"
            echo "Average Quality: ${{ needs.generate-data.outputs.average-quality }}%"
            echo ""
            echo "## Contents"
            echo ""
            echo "- *.html - Interactive HTML reports"
            echo "- *.csv - Data in CSV format for analysis"
            echo "- *.pdf - Printable PDF reports (if generated)"
            echo "- data/ - Raw JSON data files"
            echo ""
            echo "## Usage"
            echo ""
            echo "1. Open HTML files in a web browser for interactive reports"
            echo "2. Import CSV files into spreadsheet applications"
            echo "3. Use JSON data files for custom analysis"
            echo ""
            echo "---"
            echo "Generated by Relife Translation Monitoring System"
          } > "$PACKAGE_NAME/README.md"

          # Create archive
          tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME"

          echo "‚úÖ Created downloadable package: $PACKAGE_NAME.tar.gz"

      - name: Upload downloadable reports
        uses: actions/upload-artifact@v4
        with:
          name: downloadable-reports-${{ needs.generate-data.outputs.report-timestamp }}
          path: |
            *.csv
            *.pdf
            translation-reports-*.tar.gz
          retention-days: 180

  # Final status summary
  reports-summary:
    name: üìã Reports Summary
    runs-on: ubuntu-latest
    needs:
      [generate-data, generate-html-reports, update-documentation, generate-downloads]
    if: always()

    steps:
      - name: Generate final summary
        run: |
          echo "üìã Translation Reports Generation Summary"
          echo "========================================"
          echo "Report Type: ${{ needs.generate-data.outputs.report-type }}"
          echo "Timestamp: ${{ needs.generate-data.outputs.report-timestamp }}"
          echo ""
          echo "üìä Statistics:"
          echo "- Total Languages: ${{ needs.generate-data.outputs.total-languages }}"
          echo "- Average Quality: ${{ needs.generate-data.outputs.average-quality }}%"
          echo "- Completion: ${{ needs.generate-data.outputs.completion-percentage }}%"
          echo "- Total Keys: ${{ needs.generate-data.outputs.total-keys }}"
          echo ""
          echo "‚úÖ Job Results:"
          echo "- Data Generation: ${{ needs.generate-data.result }}"
          echo "- HTML Reports: ${{ needs.generate-html-reports.result }}"
          echo "- Documentation: ${{ needs.update-documentation.result }}"
          echo "- Downloads: ${{ needs.generate-downloads.result }}"
          echo ""

          # Overall success check
          if [[ "${{ needs.generate-data.result }}" == "success" && "${{ needs.generate-html-reports.result }}" == "success" ]]; then
            echo "üéâ Translation reports generated successfully!"
            exit 0
          else
            echo "‚ùå Some report generation tasks failed"
            exit 1
          fi
