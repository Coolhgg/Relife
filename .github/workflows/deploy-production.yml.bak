# Production Deployment Pipeline with Performance Monitoring
# Deploys to production with comprehensive testing and monitoring

name: 🚀 Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        default: false
        type: boolean

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Security and vulnerability scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          npm audit --audit-level=high
          npx audit-ci --high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Build and test
  build:
    name: 🏗️ Build & Test  
    runs-on: ubuntu-latest
    needs: security
    if: always() && (needs.security.result == 'success' || inputs.skip_tests)
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm run postinstall || true

      - name: Generate version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ ! "$VERSION" =~ ^v[0-9] ]]; then
            VERSION="v$(date +'%Y.%m.%d')-${GITHUB_SHA:0:7}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Run linting
        if: ${{ !inputs.skip_tests }}
        run: npm run lint

      - name: Run type checking
        if: ${{ !inputs.skip_tests }}
        run: npx tsc --noEmit

      - name: Run unit tests
        if: ${{ !inputs.skip_tests }}
        run: |
          npm run test:coverage
          npm run test:performance

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always() && !inputs.skip_tests
        with:
          name: test-results
          path: |
            coverage/
            test-results/
            junit.xml

      - name: Build application
        run: |
          npm run build
        env:
          VITE_APP_VERSION: ${{ steps.version.outputs.version }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_POSTHOG_KEY: ${{ secrets.POSTHOG_KEY }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_PERFORMANCE_MONITORING: true
          VITE_PERFORMANCE_ENDPOINT: ${{ secrets.PERFORMANCE_ENDPOINT }}
          VITE_ANALYTICS_ENDPOINT: ${{ secrets.ANALYTICS_ENDPOINT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=Relife Smart Alarm
            org.opencontainers.image.description=Smart Alarm App with Performance Monitoring
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          build-args: |
            VITE_APP_VERSION=${{ steps.version.outputs.version }}
            VITE_BUILD_TIME=${{ github.event.head_commit.timestamp }}
            VITE_SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            VITE_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            VITE_POSTHOG_KEY=${{ secrets.POSTHOG_KEY }}
            VITE_SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            VITE_PERFORMANCE_MONITORING=true
            VITE_PERFORMANCE_ENDPOINT=${{ secrets.PERFORMANCE_ENDPOINT }}
            VITE_ANALYTICS_ENDPOINT=${{ secrets.ANALYTICS_ENDPOINT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging first
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: ${{ inputs.environment == 'staging' || github.ref == 'refs/heads/main' }}
    environment: 
      name: staging
      url: https://staging.relife.app
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        uses: azure/webapps-deploy@v2
        with:
          app-name: relife-staging
          slot-name: production
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          
      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment
          curl -f https://staging.relife.app/health || exit 1
          curl -f https://staging.relife.app/api/health || exit 1

      - name: Run performance tests
        if: ${{ !inputs.skip_tests }}
        run: |
          npx lighthouse https://staging.relife.app --output=json --output=html --output-path=./lighthouse-staging
          npx @axe-core/cli https://staging.relife.app --save lighthouse-accessibility.json
          
      - name: Upload staging results
        uses: actions/upload-artifact@v3
        with:
          name: staging-results
          path: |
            lighthouse-staging.*
            lighthouse-accessibility.json

  # Production deployment
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: ${{ always() && (inputs.environment == 'production' || startsWith(github.ref, 'refs/tags/')) && (needs.deploy-staging.result == 'success' || inputs.skip_tests) }}
    environment:
      name: production
      url: https://relife.app
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        uses: azure/webapps-deploy@v2
        with:
          app-name: relife-production
          slot-name: production
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}

      - name: Warm up application
        run: |
          sleep 45  # Wait for deployment
          curl -f https://relife.app/health || exit 1
          curl -f https://relife.app/ || exit 1

      - name: Run production smoke tests
        run: |
          curl -f https://relife.app/api/health || exit 1
          curl -f https://relife.app/manifest.json || exit 1
          curl -f https://relife.app/sw.js || exit 1

      - name: Initialize performance monitoring
        run: |
          curl -X POST https://relife.app/api/performance \
            -H "Content-Type: application/json" \
            -d '{"event":"deployment","version":"${{ needs.build.outputs.version }}","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}'

      - name: Update Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: relife-app
        with:
          environment: production
          version: ${{ needs.build.outputs.version }}

  # Post-deployment monitoring
  post-deployment:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [build, deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Wait for deployment stabilization
        run: sleep 120

      - name: Run comprehensive performance audit
        run: |
          # Lighthouse audit
          npx lighthouse https://relife.app --output=json --output=html --output-path=./lighthouse-prod
          
          # Web Vitals check
          npx web-vitals-cli https://relife.app --output=json > web-vitals.json
          
          # Load testing
          docker run --rm -v $(pwd):/scripts loadimpact/k6 run /scripts/performance-tests/load-test.js

      - name: Check performance budgets
        run: |
          # Parse Lighthouse results and check against budgets
          node .github/scripts/check-performance-budget.js lighthouse-prod.report.json

      - name: Monitor key metrics
        run: |
          # Monitor for 5 minutes after deployment
          for i in {1..5}; do
            echo "Checking metrics (attempt $i/5)..."
            curl -s https://relife.app/health | jq .
            curl -s https://relife.app/metrics | jq .
            sleep 60
          done

      - name: Notify monitoring systems
        run: |
          # Notify monitoring systems of deployment
          curl -X POST "${{ secrets.DATADOG_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Relife App Deployed",
              "text": "Version ${{ needs.build.outputs.version }} deployed to production",
              "alert_type": "info",
              "tags": ["deployment", "production", "relife"]
            }'

      - name: Upload production audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: production-audit
          path: |
            lighthouse-prod.*
            web-vitals.json
            performance-results.json

  # Rollback capability
  rollback:
    name: 🔄 Rollback (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
      - name: Rollback to previous version
        run: |
          # Get previous successful deployment
          PREVIOUS_VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/deployments \
            | jq -r '.[] | select(.environment=="production" and .task=="deploy") | .ref' \
            | head -2 | tail -1)
          
          echo "Rolling back to: $PREVIOUS_VERSION"
          
          # Trigger rollback (implementation depends on deployment platform)
          echo "Rollback would be executed here"

  # Notification
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: ${{ needs.deploy-production.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            🎉 Relife App ${{ needs.build.outputs.version }} deployed successfully!
            
            🔗 Production: https://relife.app
            📊 Performance: Check monitoring dashboards
            🐛 Issues: Monitor error rates and performance metrics
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.deploy-production.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: |
            ❌ Relife App deployment failed!
            
            🔍 Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            🚨 Consider rollback if production is affected
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update deployment status in monitoring
        run: |
          STATUS="${{ needs.deploy-production.result }}"
          curl -X POST https://relife.app/api/analytics \
            -H "Content-Type: application/json" \
            -d '{
              "event": "deployment_completed",
              "status": "'$STATUS'",
              "version": "${{ needs.build.outputs.version }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "metadata": {
                "workflow_id": "${{ github.run_id }}",
                "commit": "${{ github.sha }}",
                "actor": "${{ github.actor }}"
              }
            }'