# Translation Quality Monitoring
# Automated daily monitoring of translation quality with trend analysis and notifications

name: 📊 Translation Quality Monitoring

on:
  schedule:
    # Run daily at 1 AM UTC (distributed load, before main CI conflicts)
    - cron: '0 1 * * *'
    # Run weekly comprehensive analysis on Saturdays at 11 PM UTC
    - cron: '0 23 * * 6'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring to run'
        required: false
        default: 'daily'
        type: choice
        options:
          - 'daily'
          - 'weekly'
          - 'comprehensive'
      notify_team:
        description: 'Send notifications to team'
        required: false
        default: true
        type: boolean
      quality_threshold:
        description: 'Quality threshold for alerts (0-100)'
        required: false
        default: '75'
        type: string

env:
  NODE_VERSION: '20'
  QUALITY_THRESHOLD: ${{ github.event.inputs.quality_threshold || '75' }}

jobs:
  # Quality monitoring and analysis
  monitor-quality:
    name: 📊 Monitor Translation Quality
    runs-on: ubuntu-latest
    
    outputs:
      quality-status: ${{ steps.analysis.outputs.status }}
      average-quality: ${{ steps.analysis.outputs.average-quality }}
      languages-below-threshold: ${{ steps.analysis.outputs.languages-below-threshold }}
      trend-direction: ${{ steps.analysis.outputs.trend-direction }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch more history for trend analysis
          fetch-depth: 30

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --production=false
          npm install chalk yargs date-fns

      - name: Create monitoring directories
        run: |
          mkdir -p .github/translation-reports/history
          mkdir -p .github/translation-reports/trends

      - name: Determine monitoring type
        id: type
        run: |
          if [[ "${{ github.event_name }}" == "schedule" && "${{ github.event.schedule }}" == "0 8 * * 0" ]]; then
            echo "monitoring-type=weekly" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.monitoring_type }}" != "" ]]; then
            echo "monitoring-type=${{ github.event.inputs.monitoring_type }}" >> $GITHUB_OUTPUT
          else
            echo "monitoring-type=daily" >> $GITHUB_OUTPUT
          fi

      - name: Run quality analysis
        id: analysis
        run: |
          echo "🔍 Running ${{ steps.type.outputs.monitoring-type }} translation quality monitoring..."
          
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          REPORT_FILE=".github/translation-reports/monitoring-$TIMESTAMP.json"
          
          # Run comprehensive analysis
          node scripts/advanced-translation-manager.mjs analyze \
            --format=json \
            --output="$REPORT_FILE" \
            --monitoring-mode
          
          # Analyze results and set outputs
          node scripts/analyze-quality-results.js "$REPORT_FILE" "${{ env.QUALITY_THRESHOLD }}" "${{ steps.type.outputs.monitoring-type }}"

      - name: Generate trend analysis
        if: steps.type.outputs.monitoring-type == 'weekly' || steps.type.outputs.monitoring-type == 'comprehensive'
        run: |
          echo "📈 Generating trend analysis..."
          
          node scripts/generate-trends.js ".github/translation-reports/history/quality-history.json"
          
          echo "✅ Trend analysis completed"

      - name: Upload monitoring reports
        uses: actions/upload-artifact@v4
        with:
          name: translation-monitoring-${{ steps.type.outputs.monitoring-type }}-${{ github.run_number }}
          path: |
            .github/translation-reports/monitoring-*.json
            .github/translation-reports/history/
            .github/translation-reports/trends/
          retention-days: 90

      - name: Commit quality history
        if: steps.type.outputs.monitoring-type == 'daily' || steps.type.outputs.monitoring-type == 'weekly'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add quality history files
          git add .github/translation-reports/history/ .github/translation-reports/trends/ || true
          
          # Commit if there are changes
          if ! git diff --cached --quiet; then
            git commit -m "📊 Update translation quality monitoring data [skip ci]"
            
            git push
            echo "✅ Committed quality monitoring data"
          else
            echo "ℹ️ No changes to commit"
          fi

  # Language-specific monitoring
  monitor-languages:
    name: 🌍 Monitor Individual Languages
    runs-on: ubuntu-latest
    needs: monitor-quality
    if: needs.monitor-quality.outputs.quality-status != 'excellent'
    
    strategy:
      matrix:
        # Focus on languages that need attention
        language: ['es', 'fr', 'de', 'zh', 'ja', 'pt', 'it', 'ru', 'ar', 'hi']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production=false

      - name: Analyze specific language
        run: |
          echo "🔍 Analyzing ${{ matrix.language }} translation quality..."
          
          # Run focused analysis on specific language
          node scripts/advanced-translation-manager.mjs analyze \
            --language="${{ matrix.language }}" \
            --format=json \
            --output="language-${{ matrix.language }}-analysis.json"
          
          # Check if this language has issues
          node scripts/analyze-language-quality.js "language-${{ matrix.language }}-analysis.json" "${{ matrix.language }}"

      - name: Upload language analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: language-analysis-${{ matrix.language }}
          path: language-${{ matrix.language }}-analysis.json
          retention-days: 30

  # Generate monitoring notifications
  generate-notifications:
    name: 📢 Generate Notifications
    runs-on: ubuntu-latest
    needs: [monitor-quality, monitor-languages]
    if: always() && (needs.monitor-quality.outputs.quality-status == 'needs-attention' || github.event.inputs.notify_team == 'true')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate notification content
        id: notification
        run: |
          QUALITY_STATUS="${{ needs.monitor-quality.outputs.quality-status }}"
          AVERAGE_QUALITY="${{ needs.monitor-quality.outputs.average-quality }}"
          TREND="${{ needs.monitor-quality.outputs.trend-direction }}"
          LANGUAGES_BELOW='${{ needs.monitor-quality.outputs.languages-below-threshold }}'
          
          echo "Generating notification for status: $QUALITY_STATUS"
          
          # Create notification content using script
          node scripts/generate-notification-content.js \
            "$QUALITY_STATUS" \
            "$AVERAGE_QUALITY" \
            "$TREND" \
            "${{ github.event.inputs.monitoring_type || 'daily' }}" \
            "$LANGUAGES_BELOW"

      - name: Create GitHub issue for critical problems
        if: needs.monitor-quality.outputs.quality-status == 'needs-attention'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const content = fs.readFileSync('notification-content.md', 'utf8');
            
            // Check if there's already an open issue for translation quality
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'translation-quality,monitoring'
            });
            
            const existingIssue = issues.find(issue => 
              issue.title.includes('Translation Quality Alert')
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: '## 📊 Updated Quality Monitoring Report\n\n' + content
              });
              console.log('Updated existing translation quality issue #' + existingIssue.number);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '🚨 Translation Quality Alert - Immediate Attention Required',
                body: content,
                labels: ['translation-quality', 'monitoring', 'priority-high']
              });
              console.log('Created new translation quality issue #' + newIssue.number);
            }

      - name: Upload notification content
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-notification-${{ github.run_number }}
          path: notification-content.md
          retention-days: 30

  # Clean up old monitoring data
  cleanup-old-data:
    name: 🧹 Cleanup Old Data
    runs-on: ubuntu-latest
    needs: monitor-quality
    if: steps.type.outputs.monitoring-type == 'weekly'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up old monitoring reports
        run: |
          echo "🧹 Cleaning up old monitoring data..."
          
          # Remove monitoring reports older than 30 days
          find .github/translation-reports/ -name "monitoring-*.json" -type f -mtime +30 -delete || true
          
          # Keep only last 100 quality history entries
          node scripts/cleanup-quality-history.js
          
          echo "✅ Cleanup completed"

      - name: Commit cleanup changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .github/translation-reports/ || true
          
          if ! git diff --cached --quiet; then
            git commit -m "🧹 Clean up old translation monitoring data [skip ci]"
            git push
            echo "✅ Committed cleanup changes"
          else
            echo "ℹ️ No cleanup changes to commit"
          fi