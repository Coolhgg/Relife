# Strict Quality Gates - Zero Tolerance CI/CD Pipeline
# This workflow enforces strict quality standards with no tolerance for violations
# All gates must pass for PRs to be mergeable

name: 🛡️ Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Permissions for status checks and comments
permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: write
  statuses: write

# Cancel redundant runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  FORCE_COLOR: 1

jobs:
  # Gate 1: Installation & Dependency Validation
  dependencies:
    name: 📦 Dependencies
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: |
          echo "🔧 Installing dependencies with strict lockfile..."
          bun install --frozen-lockfile
        # No fallback - if lockfile is out of sync, build should fail

      - name: Validate dependency security
        run: |
          echo "🔍 Running security audit..."
          bun audit
          if [ $? -ne 0 ]; then
            echo "❌ Security vulnerabilities found - build failed"
            exit 1
          fi
          echo "✅ Security audit passed"

  # Gate 2: TypeScript Compilation
  typescript:
    name: 🔷 TypeScript
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: TypeScript compilation check
        run: |
          echo "🔷 Running TypeScript compiler..."
          bun run type-check 2>&1 | tee artifacts/tsc-report.log
          if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "❌ TypeScript compilation failed - build failed"
            exit 1
          fi
          echo "✅ TypeScript compilation passed"

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Upload TypeScript report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tsc-report
          path: artifacts/tsc-report.log
          retention-days: 30

  # Gate 3: Code Quality (ESLint)
  eslint:
    name: 📏 ESLint
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: ESLint check with zero warnings tolerance
        run: |
          echo "📏 Running ESLint with --max-warnings=0..."
          bun run lint:eslint --max-warnings=0 --format=json --output-file=artifacts/eslint-report.json
          if [ $? -ne 0 ]; then
            echo "❌ ESLint violations found - build failed"
            echo "📄 Check artifacts/eslint-report.json for details"
            exit 1
          fi
          echo "✅ ESLint passed with zero violations"

      - name: Upload ESLint report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: artifacts/eslint-report.json
          retention-days: 30

  # Gate 4: Code Formatting (Prettier)
  prettier:
    name: 💅 Prettier
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Prettier format check
        run: |
          echo "💅 Running Prettier format check..."
          bun run lint:prettier
          if [ $? -ne 0 ]; then
            echo "❌ Code formatting violations found - build failed"
            echo "💡 Run 'bun run lint:fix' to fix formatting issues"
            exit 1
          fi
          echo "✅ Code formatting is consistent"

  # Gate 5: Unit Tests with Coverage
  tests:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run tests with coverage
        run: |
          echo "🧪 Running unit tests with coverage..."
          bun run test:coverage --reporter=verbose
          if [ $? -ne 0 ]; then
            echo "❌ Unit tests failed - build failed"
            exit 1
          fi
          echo "✅ All unit tests passed"

      - name: Check coverage thresholds
        run: |
          echo "📊 Checking coverage thresholds..."

          # Extract coverage from coverage-summary.json
          if [ -f "coverage/coverage-summary.json" ]; then
            LINES_PCT=$(cat coverage/coverage-summary.json | bun -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).total.lines.pct")
            BRANCHES_PCT=$(cat coverage/coverage-summary.json | bun -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).total.branches.pct")
            FUNCTIONS_PCT=$(cat coverage/coverage-summary.json | bun -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).total.functions.pct")
            STATEMENTS_PCT=$(cat coverage/coverage-summary.json | bun -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).total.statements.pct")
            
            echo "📈 Coverage Report:"
            echo "  Lines: ${LINES_PCT}%"
            echo "  Branches: ${BRANCHES_PCT}%"
            echo "  Functions: ${FUNCTIONS_PCT}%"
            echo "  Statements: ${STATEMENTS_PCT}%"
            
            # Check thresholds (80% minimum)
            THRESHOLD=80
            
            if (( $(echo "$LINES_PCT < $THRESHOLD" | bc -l) )); then
              echo "❌ Line coverage (${LINES_PCT}%) below threshold (${THRESHOLD}%) - build failed"
              exit 1
            fi
            
            if (( $(echo "$BRANCHES_PCT < $THRESHOLD" | bc -l) )); then
              echo "❌ Branch coverage (${BRANCHES_PCT}%) below threshold (${THRESHOLD}%) - build failed"
              exit 1
            fi
            
            echo "✅ Coverage thresholds met"
          else
            echo "⚠️ No coverage report found"
            exit 1
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
          retention-days: 30

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unit-tests
          name: unit-test-coverage
          fail_ci_if_error: false

  # Gate 6: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run integration tests
        run: |
          echo "🔗 Running integration tests..."
          bun run test:integration:coverage
          if [ $? -ne 0 ]; then
            echo "❌ Integration tests failed - build failed"
            exit 1
          fi
          echo "✅ All integration tests passed"
        env:
          # Mock external services for CI
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test_key
          VITE_STRIPE_PUBLISHABLE_KEY: pk_test_123
          VITE_POSTHOG_KEY: phc_test_123

      - name: Upload integration coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-coverage
          path: coverage/integration/
          retention-days: 30

  # Gate 7: Build Validation
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [typescript, eslint, prettier, tests, integration-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: |
          echo "🏗️ Building application..."
          bun run build
          if [ $? -ne 0 ]; then
            echo "❌ Build failed"
            exit 1
          fi
          echo "✅ Build completed successfully"
        env:
          VITE_APP_VERSION: ${{ github.sha }}
          NODE_ENV: production

      - name: Validate build artifacts
        run: |
          echo "🔍 Validating build artifacts..."

          # Check required files exist
          required_files=("dist/index.html" "dist/assets")
          for file in "${required_files[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ Missing required build artifact: $file"
              exit 1
            fi
          done

          # Check bundle size limits (from package.json bundlesize config)
          TOTAL_SIZE=$(du -sb dist | cut -f1)
          MAX_SIZE=$((2000 * 1024))  # 2MB limit

          if [ $TOTAL_SIZE -gt $MAX_SIZE ]; then
            echo "❌ Bundle size ($TOTAL_SIZE bytes) exceeds limit ($MAX_SIZE bytes)"
            exit 1
          fi

          echo "📦 Bundle size: $(du -sh dist | cut -f1)"
          echo "✅ Build artifacts validated"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Final Status Report
  quality-gates-status:
    name: 📋 Quality Gates Status
    runs-on: ubuntu-latest
    needs: [dependencies, typescript, eslint, prettier, tests, integration-tests, build]
    if: always()

    steps:
      - name: Check all gates status
        run: |
          echo "🛡️ Quality Gates Status Report"
          echo "=============================="

          DEPS_STATUS="${{ needs.dependencies.result }}"
          TS_STATUS="${{ needs.typescript.result }}"
          ESLINT_STATUS="${{ needs.eslint.result }}"
          PRETTIER_STATUS="${{ needs.prettier.result }}"
          TESTS_STATUS="${{ needs.tests.result }}"
          INTEGRATION_STATUS="${{ needs.integration-tests.result }}"
          BUILD_STATUS="${{ needs.build.result }}"

          echo "📦 Dependencies: $DEPS_STATUS"
          echo "🔷 TypeScript: $TS_STATUS"
          echo "📏 ESLint: $ESLINT_STATUS"
          echo "💅 Prettier: $PRETTIER_STATUS"
          echo "🧪 Tests: $TESTS_STATUS"
          echo "🔗 Integration: $INTEGRATION_STATUS"
          echo "🏗️ Build: $BUILD_STATUS"
          echo ""

          # Check if all gates passed
          if [ "$DEPS_STATUS" = "success" ] && \
             [ "$TS_STATUS" = "success" ] && \
             [ "$ESLINT_STATUS" = "success" ] && \
             [ "$PRETTIER_STATUS" = "success" ] && \
             [ "$TESTS_STATUS" = "success" ] && \
             [ "$INTEGRATION_STATUS" = "success" ] && \
             [ "$BUILD_STATUS" = "success" ]; then
            echo "✅ ALL QUALITY GATES PASSED"
            echo "🎉 Code is ready for merge!"
            exit 0
          else
            echo "❌ QUALITY GATES FAILED"
            echo "🚫 Code cannot be merged until all gates pass"
            exit 1
          fi

      - name: Comment on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const depsStatus = '${{ needs.dependencies.result }}';
            const tsStatus = '${{ needs.typescript.result }}';
            const eslintStatus = '${{ needs.eslint.result }}';
            const prettierStatus = '${{ needs.prettier.result }}';
            const testsStatus = '${{ needs.tests.result }}';
            const integrationStatus = '${{ needs.integration-tests.result }}';
            const buildStatus = '${{ needs.build.result }}';

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏸️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };

            const allPassed = [depsStatus, tsStatus, eslintStatus, prettierStatus, testsStatus, integrationStatus, buildStatus]
              .every(status => status === 'success');

            const body = `## 🛡️ Quality Gates Report

            | Gate | Status | Description |
            |------|---------|-------------|
            | Dependencies | ${statusEmoji(depsStatus)} ${depsStatus} | Security audit & lockfile validation |
            | TypeScript | ${statusEmoji(tsStatus)} ${tsStatus} | Zero compilation errors |
            | ESLint | ${statusEmoji(eslintStatus)} ${eslintStatus} | Zero warnings/errors |
            | Prettier | ${statusEmoji(prettierStatus)} ${prettierStatus} | Consistent formatting |
            | Tests | ${statusEmoji(testsStatus)} ${testsStatus} | 80%+ coverage required |
            | Integration | ${statusEmoji(integrationStatus)} ${integrationStatus} | End-to-end flows |
            | Build | ${statusEmoji(buildStatus)} ${buildStatus} | Production build validation |

            ${allPassed ? 
              '🎉 **ALL QUALITY GATES PASSED!** This PR is ready for review and merge.' : 
              '⚠️ **QUALITY GATES FAILED** - This PR cannot be merged until all gates pass.'}

            ### 🎯 Quality Standards Enforced
            - **Zero tolerance** for TypeScript errors
            - **Zero tolerance** for ESLint warnings/errors
            - **Strict formatting** consistency with Prettier
            - **80% minimum** code coverage (lines & branches)
            - **Security audit** must pass
            - **Build validation** for production readiness

            ${!allPassed ? `
            ### 🔧 How to Fix
            1. Check the failed job logs above for specific issues
            2. Download artifacts for detailed reports
            3. Run locally: \`bun run ci:validate\`
            4. Fix issues and push new commits
            ` : ''}
            `;

            // Post or update comment
            try {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('Quality Gates Report')
              );
              
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
              }
            } catch (error) {
              console.error('Failed to post PR comment:', error);
            }
