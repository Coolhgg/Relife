# Streamlined Pull Request Validation with Bun Support
# Essential CI checks for PR validation

name: ‚úÖ PR Validation (Bun)

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Permissions needed for commenting on PRs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: read
  checks: read

jobs:
  # Core validation jobs
  validation:
    name: üîç Core Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies (with lockfile flexibility)
        run: |
          echo "üîß Installing dependencies..."
          # Try frozen lockfile first, fallback to regular install for dependency PRs
          if ! bun install --frozen-lockfile; then
            echo "‚ö†Ô∏è Lockfile changed (expected for dependency updates), installing with updates..."
            bun install
          fi

      - name: Check dependency compatibility
        run: |
          echo "üîç Checking dependency compatibility..."
          if [ -f "scripts/check-dependency-compatibility.cjs" ]; then
            node scripts/check-dependency-compatibility.cjs
          else
            echo "‚ö†Ô∏è Dependency compatibility script not found, skipping..."
          fi

      - name: Type check
        run: bun run type-check

      - name: Lint code
        run: bun run lint

      - name: Format check
        run: |
          if bun run format:check; then
            echo "‚úÖ Format check passed"
          else
            echo "‚ö†Ô∏è Format check failed, but continuing..."
          fi

      - name: Run unit tests
        run: bun run test:coverage

      - name: Run integration tests
        run: |
          echo "üîó Running integration tests for critical user flows..."
          bun run test:integration:coverage
        env:
          NODE_ENV: test
          # Mock external services for integration tests
          VITE_SUPABASE_URL: https://test.supabase.co
          VITE_SUPABASE_ANON_KEY: test_key
          VITE_STRIPE_PUBLISHABLE_KEY: pk_test_123
          VITE_POSTHOG_KEY: phc_test_123

      - name: Build application
        run: bun run build
        env:
          VITE_APP_VERSION: pr-${{ github.event.number }}

      - name: Validate build
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build validation failed"
            exit 1
          fi
          echo "‚úÖ Build validation passed"

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

  # Mobile build validation
  mobile-build:
    name: üì± Mobile Build
    runs-on: ubuntu-latest
    needs: validation
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install dependencies (with lockfile flexibility)
        run: |
          echo "üîß Installing dependencies..."
          # Try frozen lockfile first, fallback to regular install for dependency PRs
          if ! bun install --frozen-lockfile; then
            echo "‚ö†Ô∏è Lockfile changed (expected for dependency updates), installing with updates..."
            bun install
          fi

      - name: Check dependency compatibility
        run: |
          echo "üîç Checking dependency compatibility..."
          if [ -f "scripts/check-dependency-compatibility.cjs" ]; then
            node scripts/check-dependency-compatibility.cjs
          else
            echo "‚ö†Ô∏è Dependency compatibility script not found, skipping..."
          fi

      - name: Build web app
        run: bun run build

      - name: Sync Capacitor
        run: bunx cap sync android

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleDebug

  # PR status comment
  pr-comment:
    name: üìã PR Status
    runs-on: ubuntu-latest
    needs: [validation, mobile-build]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Update PR status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const validationStatus = '${{ needs.validation.result }}';
            const mobileStatus = '${{ needs.mobile-build.result }}';

            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'cancelled': return '‚è∏Ô∏è';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ùì';
              }
            };

            const body = `## üîç PR Validation Results

            | Check | Status |
            |-------|---------|
            | Core Validation | ${statusEmoji(validationStatus)} ${validationStatus} |
            | Mobile Build | ${statusEmoji(mobileStatus)} ${mobileStatus} |

            ${validationStatus === 'success' && mobileStatus === 'success' ? 
              '‚úÖ All checks passed! Ready for review.' : 
              '‚ö†Ô∏è Some checks failed. Please review the logs.'}

            ### üîó Integration Tests Included
            - Complete alarm lifecycle testing
            - Offline/online sync validation
            - Premium upgrade flow verification
            - Service worker & notification testing
            - Gaming & rewards system validation

            **Note**: For Jest/ts-jest dependency fixes, lockfile changes are expected and normal.
            `;

            try {
              // Update or create PR comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const botComment = comments.find(comment => 
                comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
              );
              
              if (botComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body
                });
                console.log('‚úÖ Updated existing PR comment');
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body
                });
                console.log('‚úÖ Created new PR comment');
              }
            } catch (error) {
              console.error('‚ùå Failed to update PR comment:', error);
              // Don't fail the job if commenting fails
            }
