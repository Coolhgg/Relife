# Streamlined Pull Request Validation with Bun Support
# Essential CI checks for PR validation

name: ✅ PR Validation (Bun)

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # Core validation jobs
  validation:
    name: 🔍 Core Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check dependency compatibility
        run: |
          echo "🔍 Checking dependency compatibility..."
          node scripts/check-dependency-compatibility.cjs

      - name: Type check
        run: bun run type-check

      - name: Lint code
        run: bun run lint

      - name: Format check
        run: bun run format:check

      - name: Run tests
        run: bun run test:coverage

      - name: Build application
        run: bun run build
        env:
          VITE_APP_VERSION: pr-${{ github.event.number }}

      - name: Validate build
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "❌ Build validation failed"
            exit 1
          fi
          echo "✅ Build validation passed"

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Mobile build validation
  mobile-build:
    name: 📱 Mobile Build
    runs-on: ubuntu-latest
    needs: validation
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check dependency compatibility
        run: |
          echo "🔍 Checking dependency compatibility..."
          node scripts/check-dependency-compatibility.cjs

      - name: Build web app
        run: bun run build

      - name: Sync Capacitor
        run: bunx cap sync android

      - name: Build Android APK
        run: |
          cd android
          ./gradlew assembleDebug

  # PR status comment
  pr-comment:
    name: 📋 PR Status
    runs-on: ubuntu-latest
    needs: [validation, mobile-build]
    if: always() && github.event_name == 'pull_request'
    
    steps:
      - name: Update PR status
        uses: actions/github-script@v7
        with:
          script: |
            const validationStatus = '${{ needs.validation.result }}';
            const mobileStatus = '${{ needs.mobile-build.result }}';
            
            const statusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏸️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            const body = `## 🔍 PR Validation Results
            
            | Check | Status |
            |-------|---------|
            | Core Validation | ${statusEmoji(validationStatus)} ${validationStatus} |
            | Mobile Build | ${statusEmoji(mobileStatus)} ${mobileStatus} |
            
            ${validationStatus === 'success' && mobileStatus === 'success' ? 
              '✅ All checks passed! Ready for review.' : 
              '⚠️ Some checks failed. Please review the logs.'}
            `;
            
            // Update or create PR comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }